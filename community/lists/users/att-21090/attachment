Most MPI implementations (MPICH, Intel MPI) are defining MPI datatypes (MPI_INT, MPI_FLOAT etc.) as constants; in OpenMPI, these are practically pointers to corresponding internal structures (for example MPI_FLOAT is defined as pointer to mpi_float structure, etc.).  In trying to employ some C++ templates to automate mapping between C types and MPI datatypes (code provided below), I&#39;ve encountered a problem with this, so I&#39;m wondering - is OpenMPI approach in accordance with MPI standard?<br>
<br>Here is the code I&#39;m trying to use:<br><br>// ----------------------------------------------------------------<br>#include &lt;mpi.h&gt;<br><br>#define TYPEMAP_CREATE(NAME) template&lt;typename T&gt; struct NAME ## _typemap;<br>
#define TYPEMAP_ENTRY(NAME, FROM, DATA, TO) template&lt;&gt; struct NAME ## _typemap&lt;FROM&gt; : register_id&lt;FROM, DATA, TO&gt; { };<br><br>template&lt;typename T&gt;<br>struct marker_type<br>{<br>    typedef T type;<br>
};<br><br>template&lt;class ValueType, ValueType N&gt;<br>struct marker_id {<br>    static ValueType const value = N;<br>};<br><br><br>template&lt;typename T, class ValueType, ValueType N&gt;<br>struct register_id : marker_id&lt;ValueType, N&gt;, marker_type&lt;T&gt; {<br>
private:<br>    friend marker_type&lt;T&gt; marked_id(marker_id&lt;ValueType, N&gt;) {<br>        return marker_type&lt;T&gt;();<br>    }<br>};<br><br>TYPEMAP_CREATE(mpi)<br>TYPEMAP_ENTRY(mpi, float, MPI_Datatype, MPI_FLOAT);<br>
// ----------------------------------------------------------------<br><br>When put in a file (say foo.cpp), and compiled (with g++ 4.7.2, through plain &quot;g++ -c foo.cpp&quot;), following errors are reported:<br><br>------------------------------------------------------------------<br>
foo.cpp:27:1: error: ‘ompi_mpi_float’ cannot appear in a constant-expression<br>foo.cpp:27:1: error: ‘&amp;’ cannot appear in a constant-expression<br>foo.cpp:27:1: error: a cast to a type other than an integral or enumeration type cannot appear in a constant-expression<br>
foo.cpp:27:1: error: a cast to a type other than an integral or enumeration type cannot appear in a constant-expression<br>foo.cpp:27:1: error: template argument 3 is invalid<br>------------------------------------------------------------------<br>
<br>Thanks.<br><br><br>


<div dir="ltr"><br><div><br></div><div>Hmm, I&#39;m pretty sure my xhpl binary is/was dynamic linked. Here is my env:</div><div><br></div><div>LD_LIBRARY_PATH=/share/apps/openmpi-1.10-intel-x86_64/lib:/share/apps/Intel/composer_xe_2015.2.164/compiler/lib/intel64:/share/apps/Intel/composer_xe_2015.2.164/mkl/lib/intel64:/opt/python/lib<br></div><div><br></div><div>The binary fails without a symlink to libmpi.so.1.</div><div><br></div><div>So I&#39;m not sure if you&#39;re saying yes create a symlink or yes rebuild the binary. Or it should work, and no symlink should be necessary.</div><div><br></div><div><div>&gt;Jeff will undoubtedly start typing before he reads my response, so I&#39;ll </div><div>&gt;spare you from reading all the ugly details twice :-) </div><div>&gt;There was an unintentional ABI break in the 1.8 series that necessitated a </div><div>&gt;version numbering change to libmpi. It involves the code that handles the </div><div>&gt;connection between a process and its local daemon. If you hard link (e.g., </div><div>&gt;static build) your app against a pre-1.8.5 lib and then run it against a </div><div>&gt;1.8.5+ version of mpirun, it will fail. </div><div>&gt;However, if you dynamically link, everything should be fine so long as the </div><div>&gt;app&#39;s LD_LIBRARY_PATH points to the 1.8.5+ shared libs. </div><div>&gt;Ralph</div></div></div>


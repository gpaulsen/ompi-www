I believe his question is regarding when under non-blocking send/recv, how does MPI know how much memory to allocate to receive the message, since the size is determined AFTER the irecv is posted.  So if the send post isend, but the receiver hasn&#39;t post irecv, what would the MPI do with the message.<br>

<br>I believe MPI would automatically create a buffer in the background to store the message.<br><br><div class="gmail_quote">On Sat, Jul 10, 2010 at 1:55 PM, jody <span dir="ltr">&lt;<a href="mailto:jody.xha@gmail.com">jody.xha@gmail.com</a>&gt;</span> wrote:<br>

<blockquote class="gmail_quote" style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">Perhaps i misunderstand your question...<br>
Generally, it is the user&#39;s job to provide the buffers both to send and receive.<br>
If you call MPI_Recv, you must pass a buffer that is large enough to<br>
hold the data sent by the<br>
corresponding MPI_Send. I.e., if you know your sender will send<br>
messages of 100kB,<br>
then you must provide a buffer of size 100kB to the receiver.<br>
If the message size is unknown at compile time, you may have to send<br>
two messages:<br>
first an integer which tells the receiver how large a buffer it has to<br>
allocate, and then<br>
the actual message (which then nicely fits into the freshly allocated buffer)<br>
<br>
#include &lt;stdio.h&gt;<br>
#include &lt;stdlib.h&gt;<br>
<br>
#include &lt;time.h&gt;<br>
<br>
<br>
#include &quot;mpi.h&quot;<br>
<br>
#define SENDER     1<br>
#define RECEIVER   0<br>
#define TAG_LEN   77<br>
#define TAG_DATA  78<br>
#define MAX_MESSAGE 16<br>
<br>
int main(int argc, char *argv[]) {<br>
<br>
    int num_procs;<br>
    int rank;<br>
    int *send_buf;<br>
    int *recv_buf;<br>
    int send_message_size;<br>
    int recv_message_size;<br>
    MPI_Status st;<br>
    int i;<br>
<br>
    /* initialize random numbers */<br>
    srand(time(NULL));<br>
    MPI_Init(&amp;argc, &amp;argv);<br>
    MPI_Comm_size(MPI_COMM_WORLD, &amp;num_procs);<br>
    MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);<br>
<br>
    if (rank == RECEIVER) {<br>
        /* the receiver */<br>
        /* wait for message length */<br>
        MPI_Recv(&amp;recv_message_size, 1, MPI_INT, SENDER, TAG_LEN,<br>
MPI_COMM_WORLD, &amp;st);<br>
        /* create a buffer of the required size */<br>
        recv_buf = (int*) malloc(recv_message_size*sizeof(int));<br>
        /* get data */<br>
        MPI_Recv(recv_buf, recv_message_size, MPI_INT, SENDER,<br>
TAG_DATA, MPI_COMM_WORLD, &amp;st);<br>
<br>
        printf(&quot;Receiver got %d integers:&quot;, recv_message_size);<br>
        for (i = 0; i &lt; recv_message_size; i++) {<br>
            printf(&quot; %d&quot;, recv_buf[i]);<br>
        }<br>
        printf(&quot;\n&quot;);<br>
<br>
        /* clean up */<br>
        free(recv_buf);<br>
<br>
    } else if (rank == SENDER) {<br>
        /* the sender */<br>
        /* random message size */<br>
        send_message_size = (int)((1.0*MAX_MESSAGE*rand())/(1.0*RAND_MAX));<br>
        /* create a buffer of the required size */<br>
        send_buf = (int*) malloc(send_message_size*sizeof(int));<br>
        /* create random message */<br>
        for (i = 0; i &lt; send_message_size; i++) {<br>
            send_buf[i] = rand();<br>
        }<br>
<br>
        printf(&quot;Sender has %d integers:&quot;, send_message_size);<br>
        for (i = 0; i &lt; send_message_size; i++) {<br>
            printf(&quot; %d&quot;, send_buf[i]);<br>
        }<br>
        printf(&quot;\n&quot;);<br>
<br>
        /* send message size to receiver */<br>
        MPI_Send(&amp;send_message_size,  1, MPI_INT, RECEIVER, TAG_LEN,<br>
MPI_COMM_WORLD);<br>
        /* now send messagge */<br>
        MPI_Send(send_buf, send_message_size, MPI_INT, RECEIVER,<br>
TAG_DATA, MPI_COMM_WORLD);<br>
<br>
        /* clean up */<br>
        free(send_buf);<br>
<br>
    }<br>
<br>
    MPI_Finalize();<br>
}<br>
<br>
I hope this helps<br>
  Jody<br>
<div><div></div><div class="h5"><br>
<br>
On Sat, Jul 10, 2010 at 7:12 AM, Jack Bryan &lt;<a href="mailto:dtustudy68@hotmail.com">dtustudy68@hotmail.com</a>&gt; wrote:<br>
&gt; Dear All:<br>
&gt; How to find the buffer size of OpenMPI ?<br>
&gt; I need to transfer large data between nodes on a cluster with OpenMPI 1.3.4.<br>
&gt; Many nodes need to send data to the same node .<br>
&gt; Workers use mpi_isend, the receiver node use  mpi_irecv.<br>
&gt; because they are non-blocking, the messages are stored in buffers of<br>
&gt; senders.<br>
&gt; And then, the receiver collect messages from its buffer.<br>
&gt; If the receiver&#39;s buffer is too small, there will be truncate error.<br>
&gt; Any help is appreciated.<br>
&gt; Jack<br>
&gt; July 9  2010<br>
&gt;<br>
&gt; ________________________________<br>
&gt; Hotmail is redefining busy with tools for the New Busy. Get more from your<br>
&gt; inbox. See how.<br>
</div></div>&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt;<br>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</blockquote></div><br><br clear="all"><br>-- <br>David Zhang<br>University of California, San Diego<br>


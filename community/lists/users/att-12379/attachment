Oh yes Dorian,<br>now it works!<br><br><div class="gmail_quote">On Thu, Mar 18, 2010 at 11:57 AM, Dorian Krause <span dir="ltr">&lt;<a href="mailto:doriankrause@web.de">doriankrause@web.de</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Hi,<br>
<br>
Since you are using std::string in your structure you should allocate the memory with &quot;new&quot; instead of &quot;malloc&quot;. Otherwise the constructor of std::string is not called and things like the length() of a string might not give the desired result leading boost to iterate over too many chars.<br>

<br>
I don&#39;t know if this is the particular problem here but it might be ...<div><div></div><div class="h5"><br>
<br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
On Mar 17, 2010, at 6:11 AM, alev mutlu wrote:<br>
<br>
   <br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Hi the following codes compiles fine but gives some run time errors.<br>
Ant suggestions to fix the problem.<br>
<br>
cheers<br>
<br>
<br>
Code<br>
<br>
#include&lt;boost/mpi/environment.hpp&gt;<br>
#include&lt;boost/mpi/communicator.hpp&gt;<br>
#include&lt;boost/mpi/collectives.hpp&gt;<br>
#include&lt;boost/thread/barrier.hpp&gt;<br>
#include&lt;boost/thread/mutex.hpp&gt;<br>
#include&lt;boost/config.hpp&gt;<br>
#include&lt;boost/archive/text_oarchive.hpp&gt;<br>
#include&lt;boost/archive/text_iarchive.hpp&gt;<br>
#include&lt;boost/serialization/access.hpp&gt;<br>
#include&lt;boost/serialization/string.hpp&gt;<br>
#include&lt;boost/mpi/skeleton_and_content.hpp&gt;<br>
#include&lt;boost/mpi/datatype.hpp&gt;<br>
#include&lt;boost/mpi/allocator.hpp&gt;<br>
#include&lt;boost/archive/tmpdir.hpp&gt;<br>
#include&lt;boost/serialization/utility.hpp&gt;<br>
#include&lt;boost/serialization/base_object.hpp&gt;<br>
#include&lt;boost/mpi.hpp&gt;<br>
#include&lt;boost/tokenizer.hpp&gt;<br>
#include&lt;boost/archive/tmpdir.hpp&gt;<br>
#include&lt;boost/archive/binary_oarchive.hpp&gt;<br>
#include&lt;boost/serialization/export.hpp&gt;<br>
#include&lt;boost/serialization/base_object.hpp&gt;<br>
#include&lt;boost/serialization/utility.hpp&gt;<br>
#include&lt;boost/serialization/hash_map.hpp&gt;<br>
#include&lt;boost/serialization/map.hpp&gt;<br>
<br>
<br>
<br>
#include&lt;string&gt;<br>
#include&lt;iostream&gt;<br>
#include&lt;vector&gt;<br>
#include&lt;fstream&gt;<br>
<br>
#define MASTER 0<br>
<br>
int arraySize = 7;<br>
<br>
using namespace std;<br>
namespace mpi = boost::mpi;<br>
<br>
struct field {<br>
     string field_name;<br>
     string field_type;<br>
     string field_ref;<br>
     string field_colType;<br>
<br>
};<br>
<br>
namespace boost {<br>
     namespace serialization{<br>
         template&lt;class Archive&gt;<br>
         void serialize(Archive&amp;  ar, struct field&amp;  f,  unsigned int version){<br>
             ar&amp;  f.field_name;<br>
             ar&amp;  f.field_type;<br>
             ar&amp;  f.field_ref;<br>
             ar&amp;  f.field_colType;<br>
         }<br>
     }<br>
}<br>
<br>
int main(int argc, char* argv[])<br>
{<br>
     mpi::environment env(argc, argv);<br>
     mpi::communicator world;<br>
     int m_mySize, w_mySize, kk,i;<br>
     struct field *relAllValues;<br>
     struct field *relMyValues;<br>
     vector&lt;struct field&gt;  C;<br>
     struct field c;<br>
<br>
     w_mySize = arraySize / world.size();<br>
     cout&lt;&lt;  &quot;w_mySize = &quot;&lt;&lt;  w_mySize&lt;&lt;  endl;<br>
     if (world.rank() == MASTER){<br>
         for(int i = 0; i&lt;  arraySize; i++){<br>
             c.field_name = &quot;field_name=&quot; ;<br>
             c.field_type = &quot;field_type=&quot;;<br>
             c.field_ref = &quot;field_ref=&quot;;<br>
             c.field_colType = &quot;field_colType=&quot;;<br>
             C.push_back(c);<br>
         }<br>
           m_mySize = arraySize / world.size() + arraySize % world.size();<br>
         relMyValues = (struct field *) malloc(sizeof(struct field) * w_mySize);<br>
         relAllValues = (struct field *) malloc(sizeof(struct field) * arraySize);<br>
<br>
     }<br>
       else{<br>
          relMyValues = (struct field *) malloc(sizeof(struct field) * w_mySize);<br>
       }<br>
<br>
       if (world.rank() == MASTER){<br>
           scatter(world, C, relMyValues, w_mySize, 0);<br>
       }<br>
       else{<br>
           scatter(world, C, relMyValues, w_mySize, 0);<br>
       }<br>
}<br>
<br>
and the run time errors<br>
<br>
[ceng34:00724] *** Process received signal ***<br>
[ceng34:00724] Signal: Segmentation fault (11)<br>
[ceng34:00724] Signal code: Address not mapped (1)<br>
[ceng34:00724] Failing at address: 0xfffffffffffffff8<br>
[ceng34:00724] [ 0] /lib64/libpthread.so.0 [0x315880de80]<br>
[ceng34:00724] [ 1] /usr/lib64/libstdc++.so.6(_ZN9__gnu_cxx18__exchange_and_addEPVii+0x2) [0x385dab7672]<br>
[ceng34:00724] [ 2] /usr/lib64/libstdc++.so.6(_ZNSs6assignERKSs+0x9b) [0x385da9ca4b]<br>
[ceng34:00724] [ 3] test-boost(_ZN5fieldaSERKS_+0x47) [0x42197f]<br>
[ceng34:00724] [ 4] test-boost(_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK5fieldPS3_EET0_T_S8_S7_+0x3c) [0x4221be]<br>
[ceng34:00724] [ 5] test-boost(_ZSt10__copy_auxIPK5fieldPS0_ET0_T_S5_S4_+0x29) [0x422203]<br>
[ceng34:00724] [ 6] test-boost(_ZNSt13__copy_normalILb0ELb0EE6copy_nIPK5fieldPS2_EET0_T_S7_S6_+0x25) [0x42222b]<br>
[ceng34:00724] [ 7] test-boost(_ZSt4copyIPK5fieldPS0_ET0_T_S5_S4_+0x2d) [0x42225b]<br>
[ceng34:00724] [ 8] test-boost(_ZN5boost3mpi6detail12scatter_implI5fieldEEvRKNS0_12communicatorEPKT_PS7_iiN4mpl_5bool_ILb0EEE+0x90) [0x42a630]<br>
[ceng34:00724] [ 9] test-boost(_ZN5boost3mpi7scatterI5fieldEEvRKNS0_12communicatorEPKT_PS6_ii+0x50) [0x42b162]<br>
[ceng34:00724] [10] test-boost(_ZN5boost3mpi7scatterI5fieldEEvRKNS0_12communicatorERKSt6vectorIT_SaIS7_EEPS7_ii+0x55) [0x42b1db]<br>
[ceng34:00724] [11] test-boost(main+0x20e) [0x420880]<br>
[ceng34:00724] [12] /lib64/libc.so.6(__libc_start_main+0xf4) [0x3157c1d8b4]<br>
[ceng34:00724] [13] test-boost(__gxx_personality_v0+0x169) [0x420489]<br>
[ceng34:00724] *** End of error message ***<br>
mpirun noticed that job rank 0 with PID 724 on node ceng34-ib exited on signal 11 (Segmentation fault).<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
     <br>
</blockquote>
<br>
   <br>
</blockquote>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</div></div></blockquote></div><br>


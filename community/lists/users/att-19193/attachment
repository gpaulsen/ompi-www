<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 TRANSITIONAL//EN">
<HTML>
<HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=UTF-8">
  <META NAME="GENERATOR" CONTENT="GtkHTML/3.28.3">
</HEAD>
<BODY>
Ups, I edited the code to make it easier to understand but I forgot to change two <B>p2</B>, sorry ^^' .<BR>
I hope this one is completely right:<BR>
<BR>
1: for(int p1=0; p1&lt;np; ++p1) { <BR>
2: for(int p2=0; p2&lt;np; ++p2) { <BR>
3: if(me==p1) { <BR>
4: if(sendSize(p2)) MPI_Ssend(sendBuffer[p2],sendSize(p2),MPI_FLOAT,p2,0,myw);&nbsp; //processor p1 sends data to processor p2<BR>
5: if(recvSize(p2)) MPI_Recv(recvBuffer[p2],recvSize(p2),MPI_FLOAT,p2,0,myw,&amp;status);&nbsp; //processor p1 receives data to processor p2<BR>
6: } else if(<B>me</B>==p2) { <BR>
7: if(recvSize(p1)) MPI_Recv(recvBuffer[p1],recvSize(p1),MPI_FLOAT,<B>p1</B>,0,myw,&amp;status); //processor p2 receives data to processor p1<BR>
8: if(sendSize(p1)) MPI_Ssend(sendBuffer[p1],sendSize(p1),MPI_FLOAT,<B>p1</B>,0,myw); //processor p2 sends data to processor p1<BR>
9: } <BR>
10: MPI_Barrier(myw); <BR>
11: } <BR>
12: } <BR>
<BR>
This is the real code:<BR>
<BR>
		for(int p1=0; p1&lt;mpiS; ++p1) {<BR>
			for(int p2=0; p2&lt;mpiS; ++p2) {<BR>
				if(mpiR==p1) {<BR>
					sento=p2;<BR>
					if(s.getMem(sento)){<BR>
						if(ite&gt;25) cout&lt;&lt;&quot;p1(&quot;&lt;&lt;p1&lt;&lt;&quot;) enviar &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;s.getMem(sento)&lt;&lt;&quot; FLOATS &quot;&lt;&lt;endl;<BR>
						ok=MPI_Ssend(s.extractBuffer(sento),s.getMem(sento),MPI_FLOAT,sento,0,myw); 				<BR>
						if (ok!=MPI_SUCCESS)&nbsp; cout&lt;&lt;&quot;p1(&quot;&lt;&lt;p1&lt;&lt;&quot;) enviar &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;s.getMem(sento)&lt;&lt;&quot; PROBLEMS &quot;&lt;&lt;ok&lt;&lt;endl;<BR>
					}<BR>
					if(r.getMem(sento)) {<BR>
						if(ite&gt;25) cout&lt;&lt;&quot;p1(&quot;&lt;&lt;p1&lt;&lt;&quot;) recibir &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;r.getMem(sento)&lt;&lt;&quot; FLOATS &quot;&lt;&lt;endl;<BR>
						ok=MPI_Recv(r.extractBuffer(sento),r.getMem(sento),MPI_FLOAT,sento,0,myw,&amp;status); <BR>
						if (ok!=MPI_SUCCESS) cout&lt;&lt;&quot;p1(&quot;&lt;&lt;p1&lt;&lt;&quot;) recibir &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;r.getMem(sento)&lt;&lt;&quot; PROBLEMS &quot;&lt;&lt;ok&lt;&lt;endl;<BR>
					}<BR>
				} else if(mpiR==p2) {<BR>
					sento=p1;<BR>
					if(r.getMem(sento)) {			<BR>
						if(ite&gt;25) cout&lt;&lt;&quot;p2(&quot;&lt;&lt;p2&lt;&lt;&quot;) recibir &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;r.getMem(sento)&lt;&lt;&quot; FLOATS &quot;&lt;&lt;endl;<BR>
						ok=MPI_Recv(r.extractBuffer(sento),r.getMem(sento),MPI_FLOAT,sento,0,myw,&amp;status); 				<BR>
						if (ok!=MPI_SUCCESS) cout&lt;&lt;&quot;p2(&quot;&lt;&lt;p2&lt;&lt;&quot;) recibir &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;r.getMem(sento)&lt;&lt;&quot; PROBLEMS &quot;&lt;&lt;ok&lt;&lt;endl;<BR>
					}<BR>
					if(s.getMem(sento)){<BR>
						if(ite&gt;25) cout&lt;&lt;&quot;p2(&quot;&lt;&lt;p2&lt;&lt;&quot;) enviar &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;s.getMem(sento)&lt;&lt;&quot; FLOATS &quot;&lt;&lt;endl;<BR>
						ok=MPI_Ssend(s.extractBuffer(sento),s.getMem(sento),MPI_FLOAT,sento,0,myw); <BR>
						if (ok!=MPI_SUCCESS)&nbsp; cout&lt;&lt;&quot;p2(&quot;&lt;&lt;p2&lt;&lt;&quot;) enviar &quot;&lt;&lt;sento&lt;&lt;&quot; &quot;&lt;&lt;s.getMem(sento)&lt;&lt;&quot; PROBLEMS &quot;&lt;&lt;ok&lt;&lt;endl;<BR>
					}<BR>
				}<BR>
				MPI_Barrier(myw);<BR>
			}<BR>
		}<BR>
<BR>
Thanks Eduardo<BR>
<BR>
On Fri, 2012-05-04 at 14:58 +0200, Eduardo Morras wrote:
<BLOCKQUOTE TYPE=CITE>
<PRE>
At 11:52 04/05/2012, you wrote:
&gt;Hi all,
&gt;
&gt;I have a program that executes a communication loop similar to this one:
&gt;
&gt;1:    for(int p1=0; p1&lt;np; ++p1) {
&gt;2:        for(int p2=0; p2&lt;np; ++p2) {
&gt;3:            if(me==p1) {
&gt;4:                if(sendSize(p2)) 
&gt;MPI_Ssend(sendBuffer[p2],sendSize(p2),MPI_FLOAT,p2,0,myw);
&gt;5:                if(recvSize(p2)) 
&gt;MPI_Recv(recvBuffer[p2],recvSize(p2),MPI_FLOAT,p2,0,myw,&amp;status);
&gt;6:            } else if(yo==p2) {
&gt;7:                if(recvSize(p1)) 
&gt;MPI_Recv(recvBuffer[p1],recvSize(p1),MPI_FLOAT,p2,0,myw,&amp;status);
&gt;8:                if(sendSize(p1)) 
&gt;MPI_Ssend(sendBuffer[p1],sendSize(p1),MPI_FLOAT,p2,0,myw);
&gt;9:            }
&gt;10:          MPI_Barrier(myw);
&gt;11:     }
&gt;12:   }
&gt;
&gt;The program is an iterative process that makes some calculations, 
&gt;communicates and then continues with the next iteration. The problem 
&gt;is that after making 30 successful iterations the program hangs. 
&gt;With padb I have seen that one of the processors waits at line 5 for 
&gt;the reception of data that was already sent and the rest of the 
&gt;processors are waiting at the barrier in line 10. The size of the 
&gt;messages and buffers is the same for all the iterations.
&gt;
&gt;My real program makes use of asynchronous communications for obvious 
&gt;performance reasons and it worked without problems when the case to 
&gt;solve was smaller (lower number of processors and memory), but I 
&gt;found that for this case the program hanged and that is why a 
&gt;changed the communication routine using synchronous communications 
&gt;to see where is the problem. Now I know where the program hangs, but 
&gt;I don't understand what I am doing wrong.
&gt;
&gt;Any suggestions?

All messages has p2 as destination. So, p1 is waiting for a message 
that hasn't been sended for him. He shouldn't be waiting any 
messages. Don't know the logic of your program, so can't tell more 
suggestions or clues.


_______________________________________________
users mailing list
<A HREF="mailto:users@open-mpi.org">users@open-mpi.org</A>
<A HREF="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</A>

</PRE>
</BLOCKQUOTE>
<BR>
<br />-- 
<br />Aquest missatge ha estat analitzat per
<a href="http://www.mailscanner.info/"><b>MailScanner</b></a>
<br />a la cerca de virus i d'altres continguts perillosos,
<br />i es considera que est&aacute; net.
</BODY>
</HTML>


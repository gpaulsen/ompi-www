<div dir="ltr"><div>Dear developers of Open MPI,<br><br></div><div>I&#39;ve created two applications: parent and child. Parent spawns children using MPI_Comm_spawn. I would like to use shared memory when they communicate. However, applications do not start when I try using sm. Please comment on that issue. If this feature is not supported, are there any plans to add support? Also, are there any examples showing MPI_Comm_spawn and shared memory? <br><br>I am using Open MPI 1.6.5 on Ubuntu. Both applications are run locally on the same host.<br><br>// Works fine<br>mpirun --mca btl self,tcp ./parent<br><br>// Application terminates<br>mpirun --mca btl self,sm ./parent<br><br>&quot;At least one pair of MPI processes are unable to reach each other for<br>MPI communications.  This means that no Open MPI device has indicated<br>that it can be used to communicate between these processes.  This is<br>an error; Open MPI requires that all MPI processes be able to reach<br>each other.  This error can sometimes be the result of forgetting to<br>specify the &quot;self&quot; BTL.&quot;<br><br>Below are code snippets:<br><br>parent.cc:<br><font size="1"><span style="font-family:times new roman,serif">#include &lt;string&gt;<br>#include &lt;unistd.h&gt;<br><br>int main(int argc, char** argv) {<br>  MPI_Init(NULL, NULL);<br><br>  std::string lProgram = &quot;./child&quot;;<br>  MPI_Comm lIntercomm;<br>  int lRv;<br>  lRv = MPI_Comm_spawn( const_cast&lt; char* &gt;(lProgram.c_str()), MPI_ARGV_NULL, 3,<br>                       MPI_INFO_NULL, 0, MPI_COMM_WORLD, &amp;lIntercomm,<br>                       MPI_ERRCODES_IGNORE);<br><br>  if ( MPI_SUCCESS == lRv) {<br>      std::cout &lt;&lt; &quot;SPAWN SUCCESS&quot; &lt;&lt; std::endl;<br>      sleep(10);<br>  }<br>  else {<br>      std::cout &lt;&lt; &quot;SPAWN ERROR &quot; &lt;&lt; lRv &lt;&lt; std::endl;<br>  }<br><br>  MPI_Finalize();<br>}</span></font><br><br></div><div>child.cc:<br><span style="font-family:times new roman,serif"><font size="1">#include &lt;mpi.h&gt;<br>#include &lt;iostream&gt;<br>#include &lt;unistd.h&gt;<br><br>int main(int argc, char** argv) {<br>  // Initialize the MPI environment<br>  MPI_Init(NULL, NULL);<br><br>  std::cout &lt;&lt; &quot;CHILD&quot; &lt;&lt; std::endl;<br>  sleep(10);<br><br>  MPI_Finalize();<br>}<br></font><br></span></div><div><span style="font-family:times new roman,serif">makefile (note, there are tabs not spaces preceding each target):<br></span></div><div><font size="1"><span style="font-family:times new roman,serif">EXECS=child parent<br>MPICC?=mpic++<br><br>all: ${EXECS}<br><br>child: child.cc<br>    ${MPICC} -o child child.cc<br><br>parent: parent.cc<br>    ${MPICC} -o parent parent.cc<br><br>clean:<br>    rm -f ${EXECS}</span></font><br><br><br></div><div>Greetings to all of you,<br></div><div>Radek Martyniszyn<br></div><div><br><br></div><br></div>


<html><body>
<p>Guess I should have kept quiet a bit longer.  As I recall we had already seen a counter example to Jeff's stronger statement and that motivated my narrower one.<br>

<ul>
<ul>
<ul>
<ul><b><font size="4">If there are no wildcard receives - every MPI_Barrier call is semantically irrelevant.</font></b>
<p></ul>
</ul>
</ul>
</ul>
Do you have a counter example for my more cautious assertion? ( I had already granted that a correct MPI program could be made incorrect with a barrier and the barrier that broke it would have to be considered be &quot;semantically relevant&quot;. I would reword the statement with that in mind if I were to offer it up again. )<br>
<br>
<br>
Dick Treumann  -  MPI Team           <br>
IBM Systems &amp; Technology Group<br>
Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<tt>users-bounces@open-mpi.org wrote on 08/24/2009 04:23:30 PM:<br>
<br>
&gt; [image removed] </tt><br>
<tt>&gt; <br>
&gt; Re: [OMPI users] Anyscientific application heavily using MPI_Barrier?</tt><br>
<tt>&gt; <br>
&gt; Eugene Loh </tt><br>
<tt>&gt; <br>
&gt; to:</tt><br>
<tt>&gt; <br>
&gt; Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; 08/24/2009 04:25 PM</tt><br>
<tt>&gt; <br>
&gt; Sent by:</tt><br>
<tt>&gt; <br>
&gt; users-bounces@open-mpi.org</tt><br>
<tt>&gt; <br>
&gt; Please respond to Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; Jeff Squyres wrote:<br>
&gt; <br>
&gt; &gt; On Aug 24, 2009, at 1:03 PM, Eugene Loh wrote:<br>
&gt; &gt;<br>
&gt; &gt;&gt; E.g., let's say P0 and P1 each send a message to P2, both using the &nbsp;<br>
&gt; &gt;&gt; same tag and communicator. &nbsp;Let's say P2 does two receives on that &nbsp;<br>
&gt; &gt;&gt; communicator and tag, using a wildcard source. &nbsp;So, the messages &nbsp;<br>
&gt; &gt;&gt; could be received in either order. &nbsp;One could introduce barriers to &nbsp;<br>
&gt; &gt;&gt; order the messages. &nbsp;E.g.,<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; P0:<br>
&gt; &gt;&gt; &nbsp; Send<br>
&gt; &gt;&gt; &nbsp; Barrier<br>
&gt; &gt;&gt; P1:<br>
&gt; &gt;&gt; &nbsp; Barrier<br>
&gt; &gt;&gt; &nbsp; Send<br>
&gt; &gt;&gt; P2:<br>
&gt; &gt;&gt; &nbsp; Recv<br>
&gt; &gt;&gt; &nbsp; Barrier<br>
&gt; &gt;&gt; &nbsp; Recv<br>
&gt; &gt;<br>
&gt; &gt; Is this behavior *guaranteed* by MPI? &nbsp;I'm not actually sure that it &nbsp;<br>
&gt; &gt; is; barrier does not provide any guarantees about point-to-point &nbsp;<br>
&gt; &gt; message passing progress.<br>
&gt; &gt;<br>
&gt; &gt; For example, how about a machine with these assumptions:<br>
&gt; &gt;<br>
&gt; &gt; - P0 is &quot;far away&quot; from P2 on the point-to-point network<br>
&gt; &gt; - P1 is &quot;close by&quot; to P2 on the point-to-point network<br>
&gt; &gt; - Barriers go across a separate/fast network (think: bluegene)<br>
&gt; &gt; - P0's send message is short/eager<br>
&gt; &gt;<br>
&gt; &gt; In this case, the Send from P0 complete &quot;immediately&quot; and enter the &nbsp;<br>
&gt; &gt; barrier before it is delivered to P2. &nbsp;The P0 send could then take a &nbsp;<br>
&gt; &gt; &quot;long time&quot; to get to P2 --<br>
&gt; <br>
&gt; Okay, so let's say P0 completes its send and enters the barrier.<br>
&gt; <br>
&gt; Also, P1 enters the barrier. &nbsp;But it will not issue a send until it <br>
&gt; leaves the barrier, which requires that the last process has entered the <br>
&gt; barrier.<br>
&gt; <br>
&gt; Meanwhile, the last process, P2, is waiting on a receive before it <br>
&gt; enters the barrier.<br>
&gt; <br>
&gt; So, here's the situation. &nbsp;P2 is waiting to receive a message, a message <br>
&gt; has been sent to P2, and no other message will be sent to P2 until some <br>
&gt; message has been received. &nbsp;So, there are only two options:<br>
&gt; <br>
&gt; 1) The first receive on P2 receives the message from P0. &nbsp;Or,<br>
&gt; <br>
&gt; 2) This perfectly legal MPI program deadlocks.<br>
&gt; <br>
&gt; Right?<br>
&gt; <br>
&gt; &gt; potentially long enough for the barrier to &nbsp;overtake it<br>
&gt; <br>
&gt; No. &nbsp;The first Recv on P2 has to complete before P2 can enter the <br>
&gt; barrier, which is a prerequisite for the barrier to complete on any process.<br>
&gt; <br>
&gt; &gt; and for the Send from P1 to be delivered to P2 before the &nbsp;Send from <br>
&gt; &gt; P0 arrives at P2.<br>
&gt; &gt;<br>
&gt; &gt; Couldn't that happen?<br>
&gt; <br>
&gt; No. &nbsp;The send on P1 cannot be issued before the barrier completes on P1, <br>
&gt; which cannot happen before the barrier is entered on P2, which cannot <br>
&gt; happen before the first Recv on P2 is completed, which cannot happen <br>
&gt; until some message is received on P2. &nbsp;And, the only message that can be <br>
&gt; received on P2 is the one issued by P0.<br>
&gt; <br>
&gt; &gt; Granted, I would expect that your example would perform in most real- <br>
&gt; &gt; world situations as you describe (P0 is delivered to P2, then P1 is &nbsp;<br>
&gt; &gt; delivered to P2). &nbsp;But I don't think the standard guarantees it.<br>
&gt; <br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; users@open-mpi.org<br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</tt></body></html>

<div dir="ltr">Thank you, Gilles and Jeff. This makes a lot of sense now.<div><br></div><div>And, Jeff, I thnk the paper you mentioned is this <a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=5184825&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5184825">http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=5184825&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5184825</a>?</div><div><br></div><div>Thank you,</div><div>Slaiya</div></div><div class="gmail_extra"><br><div class="gmail_quote">On Mon, May 30, 2016 at 9:24 PM, Jeff Hammond <span dir="ltr">&lt;<a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><span class=""><br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div bgcolor="#FFFFFF" text="#000000">
    <blockquote type="cite">
      <div dir="ltr">So, you mean that it guarantees the value received
        after the bcast call is consistent with value sent from root,
        but it doesn&#39;t have to wait till all the ranks have received it?
        <div><br>
        </div>
      </div>
    </blockquote>
    this is what i believe, double checking the standard might not hurt
    though ...<br></div></blockquote><div><br></div></span><div>No function has barrier semantics, except a barrier, although some functions have barrier semantics due to data-dependencies for non-zero counts (allgather, alltoall, allreduce).</div><div><br></div><div>Reduce, Bcast, gather, and scatter should never have barrier semantics and should not synchronize more than the explicit data decencies require. The send-only ranks may return long before the recv-only ranks do, particularly when the messages go via an eager protocol.</div><div><br></div><div>One can imagine barrier as a 1-byte allreduce, but there are more efficient implantations. Allreduce should never be faster than Bcast, as Gilles explained. <span></span></div><div><br></div><div>There&#39;s a nice paper on self-consistent performance of MPI implementations that has lots of details.</div><span class="HOEnZb"><font color="#888888"><div><br></div><div>Jeff</div><br><br>-- <br>Jeff Hammond<br><a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a><br><a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a><br>
</font></span><br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Subscription: <a href="https://www.open-mpi.org/mailman/listinfo.cgi/users" rel="noreferrer" target="_blank">https://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2016/05/29331.php" rel="noreferrer" target="_blank">http://www.open-mpi.org/community/lists/users/2016/05/29331.php</a><br></blockquote></div><br><br clear="all"><div><br></div>-- <br><div class="gmail_signature"><div dir="ltr"><div><div dir="ltr"><div dir="ltr"><div dir="ltr"><span style="color:rgb(136,136,136)">Saliya Ekanayake</span></div><div dir="ltr">Ph.D. Candidate | Research Assistant</div><div dir="ltr">School of Informatics and Computing | Digital Science Center</div><div dir="ltr">Indiana University, Bloomington<br><br><font color="#888888"></font></div></div></div></div></div></div>
</div>


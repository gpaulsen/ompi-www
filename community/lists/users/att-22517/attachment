<div dir="ltr"><div>Sorry about the last, attempted message being too large.  I did not know that there was such a size limit.  I am re-sending the last attempted message with the attachments removed.  The relevant attachments were included with the original message with subject &quot;Assembler instruction errors for push and pop during make&quot;.  I would appreciate any help anyone can provide.</div>
<div><br></div><div>At present I am trying to brush up on assembly &amp; machine coding concepts and to study the differences between 32-bit and 64-bit processing.  Hopefully, that will allow me to create a fix for the problem.  One hope is that, for the assembly programs in question, it does not matter whether they are assembled as 32-bit code &quot;as is&quot; with only an explicit invocation of the gnu assembler and a --32 flag adjustment or as 64-bit code with code adjustments.  But at present that is just wishful thinking.</div>
<div class="gmail_quote"><div dir="ltr"><div><br></div><div>Also, it is not clear whether building the OpenMPI package entirely as 32-bit code would limit my use of OpenMPI as a library to 64-bit programs or whether there would be a significant speed penalty.</div>
<div><br></div><div><div>Here are some ideas that may lead to a solution, but I still need help solving this problem.</div><div><br></div><div><a href="http://stackoverflow.com/questions/6268745/invalid-instruction-suffix-for-push-when-assembling-with-gas" target="_blank">http://stackoverflow.com/questions/6268745/invalid-instruction-suffix-for-push-when-assembling-with-gas</a> suggests that the problem is caused by trying to assemble 32-bit assembly code in 64-bit mode and that an option of --32 would likely solve the problem.  But in my case, would this solution create 32-bit/64-bit incompatibilities between object modules?</div>

<div><br></div><div>There is also in the same source the suggestion &quot;Prepend .code32 as your first line.&quot;  But there are numerous .s modules in the openmpi-1.6.5 tree, and perhaps only some of them have this problem.  Perhaps I could modify all such .s modules and then restore the time stamps so as not to confuse the makefiles.  But the same question about 32-bit/64-bit incompatibilities arises.  The only experience I have with assembler code is with an IBM 360 assembler (for debug tracebacks in Fortran) and embedded assembly code in Turbo Pascal and/or Turbo C/C++ coordinated with assembly output from those compilers for 8086 code and perhaps a machine-code-to-symbolic disassembler as well.  I have only the vaguest idea how the gnu assembler works.</div>

<div><br></div><div>There is in my C:\MinGW64\bin directory an assembler as.exe whose --version output says in part &quot;This assembler was configured for a target of `x86_64-w64-mingw32&#39;.&quot;</div><div><br></div>
<div>
There is described in &quot;as --help&quot; output the option:</div><div>--32/--64/--x32         generate 32bit/64bit/x32 code</div><div><br></div><div>Perhaps I could pass option --32 to the back-end assembler (as.exe ?) via the gcc option -Wa,--32 in CFLAGS, but it seems this would likely apply to back-end processing of all compilations and likely cause 32-bit/64-bit incompatibilities (especially with gfortran objects generated using the -m64 option).  It seems also that this would largely negate the benefit of 64-bit processing even if no incompatibilities resulted.</div>

<div><br></div><div>&quot;configure --help&quot; output indicates under &quot;Some influential environment variables:&quot; --</div><div>CCAS        assembler compiler command (defaults to CC)</div><div>CCASFLAGS   assembler compiler flags (defaults to CFLAGS)</div>

<div><br></div><div>Depending on how configure and its Makefiles work, perhaps I could use CCAS and perhaps CCASFLAGS to invoke as.exe specifically for the assembly .s source processing, but, if I use the flag --32 for the .s assembly programs, would this also create 32-bit/64-bit incompatibilities?</div>

<div><br></div></div><span style="color:rgb(136,136,136)">-- </span><br style="color:rgb(136,136,136)"><i style="color:rgb(136,136,136)"><font face="courier new, monospace">- Richard Haney</font></i><br><br><br><div class="gmail_quote">

---------- Forwarded message ----------<br>From: <b class="gmail_sendername">Richard Haney</b> <span dir="ltr">&lt;<a href="mailto:rfhaney@gmail.com" target="_blank">rfhaney@gmail.com</a>&gt;</span><br>Date: Sat, Aug 17, 2013 at 9:29 PM<br>

Subject: Assembler instruction errors for push and pop during make<br>To: <a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br><br><br><div dir="ltr"><div>During make I get several instruction errors for push, <span>pushl</span>, pop, and <span>popl</span> at atomic-<span>asm</span>.S , which is included indirectly in <span>asm</span>.c .  For example, for the first reported &quot;Error&quot;, the instruction<br>


</div><div><br></div><div><span style="white-space:pre-wrap">	</span><span>pushl</span><span style="white-space:pre-wrap">    </span>%<span>ebp</span><br></div><div><br></div><div>apparently generates the error message</div>


<div><br></div><div>atomic-<span>asm</span>.S:5: Error: invalid instruction suffix for `push&#39;<br></div><div><br></div><div>There are several more Error messages like that.</div><div><br></div><div>---</div>
<div><br></div><div>And the instruction</div><div><br></div><div><span style="white-space:pre-wrap">	</span>push    %<span>ebx</span><br></div><div><br></div><div><div>apparently generates the error message</div>
</div><div><br></div><div>atomic-<span>asm</span>.S:64: Error: operand type mismatch for `push&#39;<br></div><div><br></div><div>---</div><div><br></div><div>And the instruction</div><div><br></div><div><span style="white-space:pre-wrap">	</span>pop   %<span>ebx</span><br>


</div><div><br></div><div><div>apparently generates the error message</div></div><div><br></div><div>atomic-<span>asm</span>.S:68: Error: operand type mismatch for `pop&#39;<br></div><div><br></div><div>---</div>
<div><br></div><div>And the instruction<br></div><div><br></div><div><span style="white-space:pre-wrap">	</span><span>popl</span><span style="white-space:pre-wrap">   </span>%<span>ebp</span><br>
</div><div><br></div><div><div>apparently generates the error message</div></div><div><br></div><div>atomic-<span>asm</span>.S:75: Error: invalid instruction suffix for `pop&#39;<br></div><div><br></div><div>
-----------------------------------------------</div><div><br></div><div>It seems worth noting that make does a symbolic link involving &quot;atomic-<span>asm</span>.S&quot; immediately before the processing of this file, which generates the errors, but the configure output reports</div>


<div><br></div><div>checking whether <span>ln</span> -s works... no, using <span>cp</span> -p<br></div><div><br></div><div>as if symbolic links will not be used.</div><div><br></div><div>----------------------------------------</div>


<div><br></div><div>The configure output was generated by executing the script file &quot;<span>mpiconfigure</span>&quot; via command</div><div><br></div><div><font face="courier new, monospace"><b>$ <span>mpiconfigure</span>  &amp;&gt;  <span>openmpi</span>-1.6.5_configure.out</b></font><br>


</div><div><br></div><div>&quot;<span>mpiconfigure</span>&quot; executes</div><div><br></div><div><font face="courier new, monospace"><b>export <span>LD</span>_LIBRARY_PATH=/c/MinGW64/lib/<span>gcc</span>/x86_64-w64-mingw32/4.6.1</b></font><br>


</div><div><br></div><div>just before executing ./configure ... so that I won&#39;t forget to set <span>LD</span>_LIBRARY_PATH .</div><div><br></div><div>The make command used was</div><div><br></div><div><font face="courier new, monospace"><b>$ make -j 2     &amp;&gt;  make_-j_2.out</b></font></div>


<div><div><br></div><div>I am using the <span>Mingw</span> <span>MSYS</span> 1.0 command-window/bash in a Windows 7 environment for processing the commands.</div><div><br></div><div>The compilers are <span>Mingw</span> 64-bit as reported in <span>config</span>.log ; these are not &quot;official&quot; <span>Mingw</span> compiler versions, but supposedly are very nearly so -- see <a href="http://tdm-gcc.tdragon.net/" target="_blank">http://<span>tdm</span>-<span>gcc</span>.<span>tdragon</span>.net/</a> for details:</div>


<div><br></div><div><div>configure:5375: <span>gcc</span> --version &gt;&amp;5</div><div><span>gcc</span>.<span>exe</span> (tdm64-1) 4.6.1</div></div><div><br></div><div><div>configure:15880: g++ --version &gt;&amp;5</div>


<div>g++.<span>exe</span> (tdm64-1) 4.6.1</div></div><div><br></div><div><div>configure:28191: <span>gfortran</span>.<span>exe</span> --version &gt;&amp;5</div><div>GNU <span>Fortran</span> (tdm64-1) 4.6.1</div>
</div><div><br></div><div>The processor is an Intel <span>Sandybridge</span> i5, with capability for parallel execution of four threads.</div><div><br></div><div>My guess is that these errors are due simply to a mismatch between the assembly instructions <span>gcc</span> can understand and the assembly instructions that <span>OpenMPI</span> assumes <span>gcc</span> can understand.</div>


<div><br></div><div>Is there some flag I can set to tell <span>gcc</span> that a particular assembly language (dialect) is being used?  And, if so, can I set it for make without having to re-run configure?</div><span class=""><font color="#888888"><span><font color="#888888">
<div><br></div>-- <br><i><font face="courier new, monospace">- Richard Haney</font></i>
</font></span></font></span></div><div><i><font face="courier new, monospace"><br></font></i></div></div>
</div></div></div><br></div>


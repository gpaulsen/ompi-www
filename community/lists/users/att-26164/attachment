<div dir="ltr">Hi,<div><br></div><div>The OpenMpi I used is 1.8.4. I just tried to run a test program to see if the CUDA aware feature works. But I got the following errors.</div><div><br></div><div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">ss@ss-Inspiron-5439:~/cuda-workspace/cuda_mpi_ex1$ mpirun -np 2 s1</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] *** Process received signal ***</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] Signal: Segmentation fault (11)</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] Signal code: Address not mapped (1)</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] Failing at address: 0x3</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 0] /lib/x86_64-linux-gnu/libc.so.6(+0x36c30)[0x7f74d7048c30]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 1] /lib/x86_64-linux-gnu/libc.so.6(+0x98a70)[0x7f74d70aaa70]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 2] /usr/local/openmpi-1.8.4/lib/libopen-pal.so.6(opal_convertor_pack+0x187)[0x7f74d673f097]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 3] /usr/local/openmpi-1.8.4/lib/openmpi/mca_btl_self.so(mca_btl_self_prepare_src+0xb8)[0x7f74ce196888]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 4] /usr/local/openmpi-1.8.4/lib/openmpi/mca_pml_ob1.so(mca_pml_ob1_send_request_start_prepare+0x4c)[0x7f74cd2c183c]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 5] /usr/local/openmpi-1.8.4/lib/openmpi/mca_pml_ob1.so(mca_pml_ob1_send+0x5ba)[0x7f74cd2b78aa]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 6] /usr/local/openmpi-1.8.4/lib/libmpi.so.1(PMPI_Send+0xf2)[0x7f74d79602a2]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 7] s1[0x408b1e]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 8] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5)[0x7f74d7033ec5]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] [ 9] s1[0x4088e9]</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">[ss-Inspiron-5439:32514] *** End of error message ***</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">--------------------------------------------------------------------------</font></span></div><div><span style="background-color:rgb(255,255,255)"><font color="#cc0000">mpirun noticed that process rank 0 with PID 32514 on node ss-Inspiron-5439 exited on signal 11 (Segmentation fault).</font></span></div></div><div><br></div><div>Looks like MPI_Send can not send CUDA buffer. But I already did  the command      ./configure --with-cuda for OpenMPI. </div><div><br></div><div><br></div><div>The command I uesd is.</div><div><br></div><div><div>ss@ss-Inspiron-5439:~/cuda-workspace/cuda_mpi_ex1$ nvcc -c <a href="http://k1.cu">k1.cu</a></div><div>ss@ss-Inspiron-5439:~/cuda-workspace/cuda_mpi_ex1$ mpic++ -c main.cc </div><div>ss@ss-Inspiron-5439:~/cuda-workspace/cuda_mpi_ex1$ mpic++ -o s1 main.o k1.o -L/usr/local/cuda/lib64/ -lcudart</div></div><div><div>ss@ss-Inspiron-5439:~/cuda-workspace/cuda_mpi_ex1$ mpirun -np 2 ./s1</div></div><div><br></div><div><br></div><div><br></div><div>The code I&#39;m running is </div><div><br></div><div><font color="#ff0000">main.cc file</font></div><div><div>#include&lt;iostream&gt;</div><div>using namespace std;</div><div>#include&lt;mpi.h&gt;</div><div>#include&quot;k1.h&quot;</div><div>#define vect_len 16</div><div>const int blocksize = 16;</div><div><br></div><div>int main(int argv, char *argc[])</div><div>{</div><div><span class="" style="white-space:pre">	</span>int numprocs, myid;</div><div><span class="" style="white-space:pre">	</span>MPI_Status status;</div><div><span class="" style="white-space:pre">	</span>const int vect_size = vect_len*sizeof(int);</div><div><br></div><div><span class="" style="white-space:pre">	</span>int *vect1 = new int[vect_size];</div><div><span class="" style="white-space:pre">	</span>int *vect2 = new int[vect_size];</div><div><span class="" style="white-space:pre">	</span>int *result = new int[vect_size];</div><div> <span class="" style="white-space:pre">	</span>bool flag;</div><div><br></div><div><div> <span class="" style="white-space:pre">	</span>int *ad;</div><div> <span class="" style="white-space:pre">	</span>int *bd;</div></div><div><br></div><div><span class="" style="white-space:pre">	</span>MPI_Init(&amp;argv, &amp;argc);</div><div><span class="" style="white-space:pre">	</span>MPI_Comm_rank(MPI_COMM_WORLD, &amp;myid);</div><div><span class="" style="white-space:pre">	</span>MPI_Comm_size(MPI_COMM_WORLD, &amp;numprocs);</div><div> <span class="" style="white-space:pre">	</span>if(myid == 0)</div><div> <span class="" style="white-space:pre">	</span>{</div><div><span class="" style="white-space:pre">		</span>for(int i = 0; i &lt; vect_len; i++)</div><div><span class="" style="white-space:pre">		</span>{</div><div><span class="" style="white-space:pre">			</span>vect1[i] = i;</div><div><span class="" style="white-space:pre">			</span>vect2[i] = 2 * i;</div><div><span class="" style="white-space:pre">		</span>}</div><div> <span class="" style="white-space:pre">	</span>}</div><div> <span class="" style="white-space:pre">	</span>else</div><div> <span class="" style="white-space:pre">	</span>{</div><div><span class="" style="white-space:pre">		</span>for(int i = 0; i &lt; vect_len; i++)</div><div><span class="" style="white-space:pre">		</span>{</div><div><span class="" style="white-space:pre">			</span>vect1[i] = 2 * i;</div><div><span class="" style="white-space:pre">			</span>vect2[i] = i;</div><div><span class="" style="white-space:pre">		</span>}</div><div> <span class="" style="white-space:pre">	</span>}</div><div><br></div><div> <span class="" style="white-space:pre">	</span>initializeGPU(vect1, vect2, ad, bd, vect_size);</div><div><br></div><div><span class="" style="white-space:pre">	</span>if(myid == 0)</div><div><span class="" style="white-space:pre">	</span>{</div><div><span class="" style="white-space:pre">		</span>for(int i = 0; i &lt; numprocs; i++)</div><div><span class="" style="white-space:pre">		</span>{</div><div><span class="" style="white-space:pre">			</span>MPI_Send(ad,vect_len, MPI_INT, i, 99, MPI_COMM_WORLD );</div><div><span class="" style="white-space:pre">			</span>MPI_Send(bd,vect_len, MPI_INT, i, 99, MPI_COMM_WORLD );</div><div><span class="" style="white-space:pre">		</span>}</div><div><span class="" style="white-space:pre">	</span>}</div><div><span class="" style="white-space:pre">	</span>else</div><div><span class="" style="white-space:pre">	</span>{</div><div><span class="" style="white-space:pre">		</span>MPI_Recv(ad,vect_len, MPI_INT, 0, 99, MPI_COMM_WORLD, &amp;status );</div><div><span class="" style="white-space:pre">		</span>MPI_Recv(bd,vect_len, MPI_INT, 0, 99, MPI_COMM_WORLD, &amp;status );</div><div><span class="" style="white-space:pre">	</span>}</div><div><br></div><div><br></div><div><br></div><div><span class="" style="white-space:pre">	</span>computeGPU(blocksize, vect_len, ad, bd, result, vect_size);</div><div><br></div><div><span class="" style="white-space:pre">	</span>//Verify</div><div><span class="" style="white-space:pre">	</span>flag = true;</div><div><br></div><div><span class="" style="white-space:pre">	</span>for(int i = 0; i &lt; vect_len; i++)</div><div><span class="" style="white-space:pre">	</span>{</div><div><span class="" style="white-space:pre">		</span>if (i &lt; 8)</div><div><span class="" style="white-space:pre">		</span>vect1[i] += vect2[i];</div><div><span class="" style="white-space:pre">		</span>else</div><div><span class="" style="white-space:pre">		</span>vect1[i] -= vect2[i];</div><div><br></div><div><span class="" style="white-space:pre">	</span>}</div><div><br></div><div><span class="" style="white-space:pre">	</span>for(int i = 0; i &lt; vect_len; i++)</div><div><span class="" style="white-space:pre">	</span>{</div><div><span class="" style="white-space:pre">		</span>if( result[i] != vect1[i] )</div><div><span class="" style="white-space:pre">		</span>{</div><div><span class="" style="white-space:pre">			</span>cout&lt;&lt;&quot;the result [&quot;&lt;&lt;i&lt;&lt;&quot;] by m2s is&quot;&lt;&lt;result[i]&lt;&lt;endl;</div><div><span class="" style="white-space:pre">			</span>cout&lt;&lt;&quot;the result [&quot;&lt;&lt;i&lt;&lt;&quot;] of vector is&quot;&lt;&lt;vect1[i]&lt;&lt;endl;</div><div><span class="" style="white-space:pre">			</span>cout &lt;&lt; &quot;Verification fail at &quot; &lt;&lt; i &lt;&lt; endl;</div><div><span class="" style="white-space:pre">			</span>flag = false;</div><div><span class="" style="white-space:pre">			</span>break;</div><div><span class="" style="white-space:pre">		</span>}</div><div><br></div><div><span class="" style="white-space:pre">	</span>}</div><div><span class="" style="white-space:pre">	</span>if(flag)</div><div><span class="" style="white-space:pre">		</span>cout &lt;&lt; &quot;Verification passes.&quot; &lt;&lt;endl;</div><div><span class="" style="white-space:pre">	</span>// free device memory</div><div>/*<span class="" style="white-space:pre">	</span>cudaFree( ad );</div><div><span class="" style="white-space:pre">	</span>cudaFree( bd );</div><div><span class="" style="white-space:pre">	</span>free(vect1);</div><div><span class="" style="white-space:pre">	</span>free(vect2);</div><div><span class="" style="white-space:pre">	</span>free(result);</div><div>*/</div><div><span class="" style="white-space:pre">	</span>MPI_Finalize();</div><div>}</div></div><div><br></div><div><br></div><div><font color="#ff0000">k1.h file</font></div><div><br></div><div><div>void initializeGPU(int *hostptr1, int *hostptr2, int *ad, int *bd, int vect_size);</div><div><br></div><div>void computeGPU(int block_size, int vect_len, int *ptr1, int *ptr2, int* result, int vect_size);</div></div><div><br></div><div><br></div><div><br></div><div><font color="#ff0000"><a href="http://k1.cu">k1.cu</a> file</font></div><div><br></div><div><div>#include&quot;k1.h&quot;</div><div><br></div><div>__global__ void vect_add(int *a, int *b, int n)</div><div>{</div><div><br></div><div><span class="" style="white-space:pre">	</span>int id = threadIdx.x;</div><div><br></div><div><span class="" style="white-space:pre">	</span>if (id &lt; n)</div><div><span class="" style="white-space:pre">		</span>a[id] = a[id] + b[id];</div><div><span class="" style="white-space:pre">	</span>else</div><div><span class="" style="white-space:pre">		</span>a[id] = a[id] - b[id];</div><div>}</div><div><br></div><div>void initializeGPU(int *hostptr1, int *hostptr2, int *ad, int *bd, int vect_size)</div><div>{</div><div><br></div><div><span class="" style="white-space:pre">	</span>// initialize device memory</div><div><span class="" style="white-space:pre">	</span>cudaMalloc( (void**)&amp;ad, vect_size );</div><div><span class="" style="white-space:pre">	</span>cudaMalloc( (void**)&amp;bd, vect_size );</div><div><br></div><div><span class="" style="white-space:pre">	</span>// copy data to device</div><div><span class="" style="white-space:pre">	</span>cudaMemcpy( ad, hostptr1, vect_size, cudaMemcpyHostToDevice );</div><div><span class="" style="white-space:pre">	</span>cudaMemcpy( bd, hostptr2, vect_size, cudaMemcpyHostToDevice );</div><div><br></div><div>}</div><div><br></div><div>void computeGPU(int block_size, int vect_len, int *ptr1, int *ptr2, int* result, int vect_size)</div><div>{</div><div><span class="" style="white-space:pre">	</span>// setup block and grid size</div><div><span class="" style="white-space:pre">	</span>dim3 dimBlock( block_size, 1, 1);</div><div><span class="" style="white-space:pre">	</span>dim3 dimGrid( vect_len/block_size, 1 , 1);</div><div><span class="" style="white-space:pre">	</span>vect_add&lt;&lt;&lt;dimGrid, dimBlock&gt;&gt;&gt;(ptr1, ptr2, 8);</div><div><br></div><div><span class="" style="white-space:pre">	</span>cudaMemcpy( result, ptr1 , vect_size, cudaMemcpyDeviceToHost );</div><div>}</div></div><div><br></div><div><br></div><div>Many Thanks for help,</div><div>Xun</div><div><br></div><div><br></div><div><br></div><div><br></div></div>


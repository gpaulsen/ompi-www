<html>
<head>
<style><!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--></style>
</head>
<body class='hmmessage'>
thanks,&nbsp;<div><br></div><div>I forgot to set up storage capacity for some a vector before using [] operator on it.&nbsp;</div><div><br></div><div>thanks<br><br>&gt; Subject: Re: [OMPI users] OMPI seg fault by a class with weird address.<br>&gt; From: jsquyres@cisco.com<br>&gt; Date: Wed, 16 Mar 2011 20:20:20 -0400<br>&gt; CC: users@open-mpi.org<br>&gt; To: dtustudy68@hotmail.com<br>&gt; <br>&gt; Make sure you have the latest version of valgrind.<br>&gt; <br>&gt; But it definitely does highlight what could be real problems if you read down far enough in the output.<br>&gt; <br>&gt; &gt; ==18729== Invalid write of size 8<br>&gt; &gt; ==18729==    at 0x443BEF: initPopPara(population*, std::vector&lt;message_para_to_workersT, std::allocator&lt;message_para_to_workersT&gt; &gt;&amp;, initParaType&amp;, int, int, std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;) (main-parallel2.cpp:552)<br>&gt; &gt; ==18729==    by 0x44F12E: main (main-parallel2.cpp:204)<br>&gt; &gt; ==18729==  Address 0x62c9da0 is 0 bytes after a block of size 0 alloc'd<br>&gt; &gt; ==18729==    at 0x4A0666E: operator new(unsigned long) (vg_replace_malloc.c:220)<br>&gt; &gt; ==18729==    by 0x4573E4: void std::__uninitialized_fill_n_aux&lt;message_para_to_workersT*, unsigned long, message_para_to_workersT&gt;(message_para_to_workersT*, unsigned long, message_para_to_workersT const&amp;, __false_type) (new_allocator.h:88)<br>&gt; &gt; ==18729==    by 0x4576CF: void std::__uninitialized_fill_n_a&lt;message_para_to_workersT*, unsigned long, message_para_to_workersT, message_para_to_workersT&gt;(message_para_to_workersT*, unsigned long, message_para_to_workersT const&amp;, std::allocator&lt;message_para_to_workersT&gt;) (stl_uninitialized.h:218)<br>&gt; &gt; ==18729==    by 0x44EE2E: main (stl_vector.h:218)<br>&gt; <br>&gt; The above is an invalid read of write of size 8 -- you're essentially writing outside of an array. <br>&gt; <br>&gt; Valgrind is showing you the call stack to how it got there.  Looks like you new'ed or malloc'ed a block of size 0 and then tried to write something to it.  Writing to memory that you don't own is a no-no; it can cause Very Bad Things to happen.<br>&gt; <br>&gt; You should probably investigate this, and the other issues that it is reporting (e.g., the next invalid read of size 8).<br>&gt; <br>&gt; &gt; ==18729==<br>&gt; &gt; ==18729== Invalid read of size 8<br>&gt; &gt; ==18729==    at 0x44F13A: main (main-parallel2.cpp:208)<br>&gt; &gt; ==18729==  Address 0x62c9d60 is 0 bytes after a block of size 0 alloc'd<br>&gt; &gt; ==18729==    at 0x4A0666E: operator new(unsigned long) (vg_replace_malloc.c:220)<br>&gt; &gt; ==18729==    by 0x45733D: void std::__uninitialized_fill_n_aux&lt;message_para_to_workersT*, unsigned long, message_para_to_workersT&gt;(message_para_to_workersT*, unsigned long, message_para_to_workersT const&amp;, __false_type) (new_allocator.h:88)<br>&gt; &gt; ==18729==    by 0x4576CF: void std::__uninitialized_fill_n_a&lt;message_para_to_workersT*, unsigned long, message_para_to_workersT, message_para_to_workersT&gt;(message_para_to_workersT*, unsigned long, message_para_to_workersT const&amp;, std::allocator&lt;message_para_to_workersT&gt;) (stl_uninitialized.h:218)<br>&gt; &gt; ==18729==    by 0x44EE2E: main (stl_vector.h:218)<br>&gt; &gt; ==18729==<br>&gt; &gt; <br>&gt; &gt; valgrind: m_mallocfree.c:225 (mk_plain_bszB): Assertion 'bszB != 0' failed.<br>&gt; &gt; valgrind: This is probably caused by your program erroneously writing past the<br>&gt; &gt; end of a heap block and corrupting heap metadata.  If you fix any<br>&gt; &gt; invalid writes reported by Memcheck, this assertion failure will<br>&gt; &gt; <br>&gt; &gt; probably go away.  Please try that before reporting this as a bug.<br>&gt; &gt; <br>&gt; &gt; ==18729==    at 0x38029D5C: report_and_quit (m_libcassert.c:145)<br>&gt; &gt; ==18729==    by 0x3802A032: vgPlain_assert_fail (m_libcassert.c:217)<br>&gt; &gt; ==18729==    by 0x38035645: vgPlain_arena_malloc (m_mallocfree.c:225)<br>&gt; &gt; ==18729==    by 0x38002BB5: vgMemCheck_new_block (mc_malloc_wrappers.c:199)<br>&gt; &gt; ==18729==    by 0x38002F6B: vgMemCheck___builtin_new (mc_malloc_wrappers.c:246)<br>&gt; &gt; ==18729==    by 0x3806070C: do_client_request (scheduler.c:1362)<br>&gt; &gt; ==18729==    by 0x38061D30: vgPlain_scheduler (scheduler.c:1061)<br>&gt; &gt; ==18729==    by 0x38085E6E: run_a_thread_NORETURN (syswrap-linux.c:91)<br>&gt; &gt; <br>&gt; &gt; sched status:<br>&gt; &gt;   running_tid=1<br>&gt; &gt; <br>&gt; &gt; Thread 1: status = VgTs_Runnable<br>&gt; &gt; ==18729==    at 0x4A0666E: operator new(unsigned long) (vg_replace_malloc.c:220)<br>&gt; &gt; ==18729==    by 0x464506: __gnu_cxx::new_allocator&lt;int&gt;::allocate(unsigned long, void const*) (new_allocator.h:88)<br>&gt; &gt; ==18729==    by 0x46452E: std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate(unsigned long) (stl_vector.h:127)<br>&gt; &gt; ==18729==    by 0x464560: std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base(unsigned long, std::allocator&lt;int&gt; const&amp;) (stl_vector.h:113)<br>&gt; &gt; ==18729==    by 0x464B6A: std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector(unsigned long, int const&amp;, std::allocator&lt;int&gt; const&amp;) (stl_vector.h:216)<br>&gt; &gt; ==18729==    by 0x488F62: Index::Index() (index.cpp:20)<br>&gt; &gt; ==18729==    by 0x489147: ReadFile(char const*) (index.cpp:86)<br>&gt; &gt; ==18729==    by 0x48941C: ImportIndices() (index.cpp:121)<br>&gt; &gt; ==18729==    by 0x445D00: myNeplanTaskScheduler(CNSGA2*, int, int, int, population*, char, int, std::vector&lt;message_para_to_workersT, std::allocator&lt;message_para_to_workersT&gt; &gt;&amp;, ompi_datatype_t*, int&amp;, int&amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;, std::vector&lt;double, std::allocator&lt;double&gt; &gt;&amp;, int, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt;&amp;, ompi_datatype_t*, int, ompi_datatype_t*, int) (myNetplanScheduler.cpp:109)<br>&gt; &gt; ==18729==    by 0x44F2DF: main (main-parallel2.cpp:216)<br>&gt; <br>&gt; -- <br>&gt; Jeff Squyres<br>&gt; jsquyres@cisco.com<br>&gt; For corporate legal information go to:<br>&gt; http://www.cisco.com/web/about/doing_business/legal/cri/<br>&gt; <br></div> 		 	   		  </body>
</html>

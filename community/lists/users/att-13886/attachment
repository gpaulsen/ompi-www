<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-15"
 http-equiv="Content-Type">
</head>
<body bgcolor="#ffffff" text="#000000">
For OMPI I believe reading the data buffer given to a posted send will
not cause any problems.<br>
<br>
Anyone on the list care to disagree?<br>
<br>
--td<br>
<br>
Alberto Canestrelli wrote:
<blockquote cite="mid:4C56E5E7.7050508@idra.unipd.it" type="cite">Thanks,
  <br>
ok that is not my problem I never read a data from the posted receive
before the correspondent WAIT. Now the last question is: what could
happen if I  am reading the data from the posted send? I do it plenty
of times! possible consequences?Can you guarantee me that this approach
is safe?
  <br>
thank you very much
  <br>
Alberto
  <br>
  <br>
Il 02/08/2010 11.29, Alberto Canestrelli ha scritto:
  <br>
  <blockquote type="cite">In the posted irecv case if you are reading
from the posted receive
    <br>
buffer the problem is you may get one of three values:
    <br>
    <br>
1. pre irecv value
    <br>
2. value received from the irecv in progress
    <br>
3. possibly garbage if you are unlucky enough to access memory that is
    <br>
at the same time being updated.
    <br>
    <br>
--td
    <br>
Alberto Canestrelli wrote:
    <br>
    <blockquote type="cite"> Thanks,
      <br>
 it was late in the night yesterday and i highlighted STORES but I
      <br>
 meanted to highlight LOADS! I know that
      <br>
 stores are not allowed when you are doing non blocking send-recv. But
      <br>
 I was impressed about LOADS case. I always do some loads of the data
      <br>
 between all my ISEND-IRECVs and my WAITs. Could you please confirm me
      <br>
 that OMPI can handle the LOAD case? And if it cannot handle it, which
      <br>
 could be the consequence? What could happen in the worst of the case
      <br>
 when there is a data race in reading a data?
      <br>
 thanks
      <br>
 alberto
      <br>
      <br>
 Il 02/08/2010 9.32, Alberto Canestrelli ha scritto:
      <br>
&gt; I believe it is definitely a no-no to STORE (write) into a send
buffer
      <br>
&gt; while a send is posted. I know there have been debate in the forum
to
      <br>
&gt; relax LOADS (reads) from a send buffer. I think OMPI can handle
the
      <br>
&gt; latter case (LOADS). On the posted receive side you open yourself
up
      <br>
&gt; for some race conditions and overwrites if you do STORES or LOADS
from a
      <br>
&gt; posted receive buffer.
      <br>
&gt;
      <br>
&gt; --td
      <br>
&gt;
      <br>
&gt; Alberto Canestrelli wrote:
      <br>
&gt;&gt; Hi,
      <br>
&gt;&gt; I have a problem with a fortran code that I have parallelized
with
      <br>
&gt;&gt; MPI. I state in advance that I read the whole ebook "Mit Press
- Mpi -
      <br>
&gt;&gt; The Complete Reference, Volume 1" and I took different MPI
classes, so
      <br>
&gt;&gt; I have a discrete MPI knowledge. I was able to solve by myself
all the
      <br>
&gt;&gt; errors I bumped into but now I am not able to find the bug of
my code
      <br>
&gt;&gt; that provides erroneous results. Without entering in the
details of my
      <br>
&gt;&gt; code, I think that the cause of the problem could be reletad
to the
      <br>
&gt;&gt; following aspect highlighted in the above ebook (in the follow
I copy
      <br>
&gt;&gt; and paste from the e-book):
      <br>
&gt;&gt;
      <br>
&gt;&gt; A nonblocking post-send call indicates that the system may
start
      <br>
&gt;&gt; copying data
      <br>
&gt;&gt; out of the send buffer. The sender must not access any part of
the
      <br>
&gt;&gt; send buffer
      <br>
&gt;&gt; (neither for loads nor for STORES) after a nonblocking send
operation
      <br>
&gt;&gt; is posted until
      <br>
&gt;&gt; the complete send returns.
      <br>
&gt;&gt; A nonblocking post-receive indicates that the system may start
writing
      <br>
&gt;&gt; data into
      <br>
&gt;&gt; the receive buffer. The receiver must not access any part of
the
      <br>
&gt;&gt; receive buffer after
      <br>
&gt;&gt; a nonblocking receive operation is posted, until the
complete-receive
      <br>
&gt;&gt; returns.
      <br>
&gt;&gt; Rationale. We prohibit read accesses to a send buffer while it
is
      <br>
&gt;&gt; being used, even
      <br>
&gt;&gt; though the send operation is not supposed to alter the content
of this
      <br>
&gt;&gt; buffer. This
      <br>
&gt;&gt; may seem more stringent than necessary, but the additional
restriction
      <br>
&gt;&gt; causes little
      <br>
&gt;&gt; loss of functionality and allows better performance on some
systems-
      <br>
&gt;&gt; consider
      <br>
&gt;&gt; the case where data transfer is done by a DMA engine that is
not
      <br>
&gt;&gt; cache-coherent
      <br>
&gt;&gt; with the main processor.End of rationale.
      <br>
&gt;&gt;
      <br>
&gt;&gt; I use plenty of nonblocking post-send in my code. Is it really
true
      <br>
&gt;&gt; that the sender must not access any part of the send buffer
not even
      <br>
&gt;&gt; for STORES? Or was it a MPI 1.0 issue?
      <br>
&gt;&gt; Thanks.
      <br>
&gt;&gt; alberto
      <br>
    </blockquote>
    <br>
  </blockquote>
  <br>
</blockquote>
<br>
<br>
<div class="moz-signature">-- <br>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title></title>
<img moz-do-not-send="false"
 src="cid:part1.06080709.01020400@oracle.com" alt="Oracle"><br>
<div class="moz-signature">
<div class="moz-signature">
<div class="moz-signature">
<div class="moz-signature">Terry D. Dontje | Principal Software Engineer<br>
<div class="moz-signature"><font color="#666666" face="Verdana" size="2">Developer
Tools
Engineering | +1.650.633.7054<br>
</font>
<font color="#ff0000" face="Verdana" size="2">Oracle
</font><font color="#666666" face="Verdana" size="2"><b> - Performance
Technologies</b></font><br>
<font color="#666666" face="Verdana" size="2">
95 Network Drive, Burlington, MA 01803<br>
Email <a href="mailto:terry.dontje@oracle.com">terry.dontje@oracle.com</a><br>
</font><br>
</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>


Dear all - thanks to everyone for all the hints. Problem has been solved.<br>To summarise for the benefit of anyone else who may encounter the issue of MPI hanging when trying to connect through the network:<br><br><ol><li>
Followed Rolf&#39;s advice and also hints from <a href="http://www.open-mpi.org/faq/?category=tcp">http://www.open-mpi.org/faq/?category=tcp</a>) and ran MPI with the option btl_base_verbose.</li><li>This revealed that MPI was trying to connect through the wrong IP addresses for some nodes: <a href="http://www.aifdr.org/projects/system_administration/ticket/17#comment:4">http://www.aifdr.org/projects/system_administration/ticket/17#comment:4</a><br>
</li><li>This in turn, was due to our cluster was using different eth* to mac address mappings leading DHCP to issues the wrong addresses: <a href="http://www.aifdr.org/projects/system_administration/ticket/9#comment:10">http://www.aifdr.org/projects/system_administration/ticket/9#comment:10</a> - Interestingly, we had no problem with ping and ssh, so maybe MPI defaults to using eth0?<br>
</li><li>After much fiddling with udev/rules.d we gave up on that and just assigned static addresses to eth0 (I am now convinced udev/rules.d doesn&#39;t work :-))</li></ol>After that everything works beautifully.<br>The morale is KISS - Keep everything as simple as you can.<br>
<br>Onto some more earthquake and tsunami modelling.<br><br>Cheers<br>Ole<br><br><br><br><div class="gmail_quote">On Tue, Sep 20, 2011 at 9:44 PM,  <span dir="ltr">&lt;<a href="mailto:users-request@open-mpi.org">users-request@open-mpi.org</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">Send users mailing list submissions to<br>
        <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<br>
To subscribe or unsubscribe via the World Wide Web, visit<br>
        <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
or, via email, send a message with subject or body &#39;help&#39; to<br>
        <a href="mailto:users-request@open-mpi.org">users-request@open-mpi.org</a><br>
<br>
You can reach the person managing the list at<br>
        <a href="mailto:users-owner@open-mpi.org">users-owner@open-mpi.org</a><br>
<br>
When replying, please edit your Subject line so it is more specific<br>
than &quot;Re: Contents of users digest...&quot;<br>
<br>
<br>
Today&#39;s Topics:<br>
<br>
   1. Re: RE :  MPI hangs on multiple nodes (Gus Correa)<br>
   2. Typo in MPI_Cart_coords man page (Jeremiah Willcock)<br>
   3. Re: RE :  MPI hangs on multiple nodes (Gus Correa)<br>
   4. How could OpenMPI (or MVAPICH) affect floating-point      results?<br>
      (Blosch, Edwin L)<br>
   5. MPI hangs on multiple nodes (Ole Nielsen)<br>
   6. MPI hangs on multiple nodes (Ole Nielsen)<br>
   7. Re: How could OpenMPI (or MVAPICH) affect floating-point<br>
      results? (Reuti)<br>
   8. Re: How could OpenMPI (or MVAPICH) affect floating-point<br>
      results? (Tim Prince)<br>
   9. Re: How could OpenMPI (or MVAPICH) affect floating-point<br>
      results? (Jeff Squyres)<br>
  10. Re: MPI hangs on multiple nodes (Jeff Squyres)<br>
  11. Re: Latency of 250 microseconds with Open-MPI 1.4.3, Mellanox<br>
      Infiniband and 256 MPI ranks (Yevgeny Kliteynik)<br>
  12. Re: How could OpenMPI (or MVAPICH) affect floating-point<br>
      results? (Reuti)<br>
  13. Re: MPI hangs on multiple nodes (Rolf vandeVaart)<br>
  14. Re: Open MPI and Objective C (Barrett, Brian W)<br>
  15. Re: How could OpenMPI (or MVAPICH) affect floating-point<br>
      results? (Samuel K. Gutierrez)<br>
<br>
<br>
----------------------------------------------------------------------<br>
<br>
Message: 1<br>
Date: Mon, 19 Sep 2011 13:13:08 -0400<br>
From: Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu">gus@ldeo.columbia.edu</a>&gt;<br>
Subject: Re: [OMPI users] RE :  MPI hangs on multiple nodes<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:4E777824.60507@ldeo.columbia.edu">4E777824.60507@ldeo.columbia.edu</a>&gt;<br>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed<br>
<br>
Hi Eugene<br>
<br>
You&#39;re right, it is blocking send, buffers can be reused after MPI_Send<br>
returns.<br>
My bad, I only read your answer to Sebastien and Ole<br>
after I posted mine.<br>
<br>
Could MPI run out of [internal] buffers to hold the messages, perhaps?<br>
The messages aren&#39;t that big anyway [5000 doubles].<br>
Could MPI behave differently regarding internal<br>
buffering when communication is intra-node vs. across the network?<br>
[It works intra-node, according to Ole&#39;s posting.]<br>
<br>
I suppose Ole rebuilt OpenMPI on his newly installed Ubuntu.<br>
<br>
Gus Correa<br>
<br>
<br>
Eugene Loh wrote:<br>
&gt; I&#39;m missing the point on the buffer re-use.  It seems to me that the<br>
&gt; sample program passes some buffer around in a ring.  Each process<br>
&gt; receives the buffer with a blocking receive and then forwards it with a<br>
&gt; blocking send.  The blocking send does not return until the send buffer<br>
&gt; is safe to reuse.<br>
&gt;<br>
&gt; On 9/19/2011 7:37 AM, Gus Correa wrote:<br>
&gt;&gt; You could try the examples/connectivity.c program in the<br>
&gt;&gt; OpenMPI source tree, to test if everything is alright.<br>
&gt;&gt; It also hints how to solve the buffer re-use issue<br>
&gt;&gt; that Sebastien [rightfully] pointed out [i.e., declare separate<br>
&gt;&gt; buffers for MPI_Send and MPI_Recv].<br>
&gt;&gt;<br>
&gt;&gt; S?bastien Boisvert wrote:<br>
&gt;&gt;&gt; Is it safe to re-use the same buffer (variable A) for MPI_Send and<br>
&gt;&gt;&gt; MPI_Recv given that MPI_Send may be eager depending on<br>
&gt;&gt;&gt; the MCA parameters ?<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 2<br>
Date: Mon, 19 Sep 2011 15:14:42 -0400 (EDT)<br>
From: Jeremiah Willcock &lt;<a href="mailto:jewillco@osl.iu.edu">jewillco@osl.iu.edu</a>&gt;<br>
Subject: [OMPI users] Typo in MPI_Cart_coords man page<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:alpine.LRH.2.00.1109191513310.14686@flowerpot.osl.iu.edu">alpine.LRH.2.00.1109191513310.14686@flowerpot.osl.iu.edu</a>&gt;<br>
Content-Type: TEXT/PLAIN; format=flowed; charset=US-ASCII<br>
<br>
The bottom of the MPI_Cart_coords man page (in SVN trunk as well as some<br>
releases) states:<br>
<br>
The inverse mapping, rank-to-coordinates translation is provided by<br>
MPI_Cart_coords.<br>
<br>
Although that is true, we are already in the man page for MPI_Cart_coords<br>
and so the reverse is the mapping from coordinates to rank.<br>
<br>
-- Jeremiah Willcock<br>
<br>
<br>
------------------------------<br>
<br>
Message: 3<br>
Date: Mon, 19 Sep 2011 16:19:40 -0400<br>
From: Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu">gus@ldeo.columbia.edu</a>&gt;<br>
Subject: Re: [OMPI users] RE :  MPI hangs on multiple nodes<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:4E77A3DC.80902@ldeo.columbia.edu">4E77A3DC.80902@ldeo.columbia.edu</a>&gt;<br>
Content-Type: text/plain; charset=iso-8859-1; format=flowed<br>
<br>
Hi Ole, Eugene<br>
<br>
For what it is worth, I tried Ole&#39;s program here,<br>
as Devendra Rai had done before.<br>
I ran it across two nodes, with a total of 16 processes.<br>
I tried mca parameters for openib Infiniband,<br>
then for tcp on Gigabit Ethernet.<br>
Both work.<br>
I am using OpenMPI 1.4.3 compiled with GCC 4.1.2 on CentOS 5.2.<br>
Thanks.<br>
<br>
Gus Correa<br>
<br>
Gus Correa wrote:<br>
&gt; Hi Eugene<br>
&gt;<br>
&gt; You&#39;re right, it is blocking send, buffers can be reused after MPI_Send<br>
&gt; returns.<br>
&gt; My bad, I only read your answer to Sebastien and Ole<br>
&gt; after I posted mine.<br>
&gt;<br>
&gt; Could MPI run out of [internal] buffers to hold the messages, perhaps?<br>
&gt; The messages aren&#39;t that big anyway [5000 doubles].<br>
&gt; Could MPI behave differently regarding internal<br>
&gt; buffering when communication is intra-node vs. across the network?<br>
&gt; [It works intra-node, according to Ole&#39;s posting.]<br>
&gt;<br>
&gt; I suppose Ole rebuilt OpenMPI on his newly installed Ubuntu.<br>
&gt;<br>
&gt; Gus Correa<br>
&gt;<br>
&gt;<br>
&gt; Eugene Loh wrote:<br>
&gt;&gt; I&#39;m missing the point on the buffer re-use.  It seems to me that the<br>
&gt;&gt; sample program passes some buffer around in a ring.  Each process<br>
&gt;&gt; receives the buffer with a blocking receive and then forwards it with<br>
&gt;&gt; a blocking send.  The blocking send does not return until the send<br>
&gt;&gt; buffer is safe to reuse.<br>
&gt;&gt;<br>
&gt;&gt; On 9/19/2011 7:37 AM, Gus Correa wrote:<br>
&gt;&gt;&gt; You could try the examples/connectivity.c program in the<br>
&gt;&gt;&gt; OpenMPI source tree, to test if everything is alright.<br>
&gt;&gt;&gt; It also hints how to solve the buffer re-use issue<br>
&gt;&gt;&gt; that Sebastien [rightfully] pointed out [i.e., declare separate<br>
&gt;&gt;&gt; buffers for MPI_Send and MPI_Recv].<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; S?bastien Boisvert wrote:<br>
&gt;&gt;&gt;&gt; Is it safe to re-use the same buffer (variable A) for MPI_Send and<br>
&gt;&gt;&gt;&gt; MPI_Recv given that MPI_Send may be eager depending on<br>
&gt;&gt;&gt;&gt; the MCA parameters ?<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 4<br>
Date: Mon, 19 Sep 2011 16:41:08 -0600<br>
From: &quot;Blosch, Edwin L&quot; &lt;<a href="mailto:edwin.l.blosch@lmco.com">edwin.l.blosch@lmco.com</a>&gt;<br>
Subject: [OMPI users] How could OpenMPI (or MVAPICH) affect<br>
        floating-point  results?<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID:<br>
        &lt;<a href="mailto:E9F276A0010AF44ABD2C03ED2EDAE7DB275FAAD498@HDXMSPB.us.lmco.com">E9F276A0010AF44ABD2C03ED2EDAE7DB275FAAD498@HDXMSPB.us.lmco.com</a>&gt;<br>
Content-Type: text/plain; charset=&quot;us-ascii&quot;<br>
<br>
I am observing differences in floating-point results from an application program that appear to be related to whether I link with OpenMPI 1.4.3 or MVAPICH 1.2.0.  Both packages were built with the same installation of Intel 11.1, as well as the application program; identical flags passed to the compiler in each case.<br>

<br>
I&#39;ve tracked down some differences in a compute-only routine where I&#39;ve printed out the inputs to the routine (to 18 digits) ; the inputs are identical.  The output numbers are different in the 16th place (perhaps a few in the 15th place).  These differences only show up for optimized code, not for -O0.<br>

<br>
My assumption is that some optimized math intrinsic is being replaced dynamically, but I do not know how to confirm this.  Anyone have guidance to offer? Or similar experience?<br>
<br>
Thanks very much<br>
<br>
Ed<br>
<br>
Just for what it&#39;s worth, here&#39;s the output of ldd:<br>
<br>
% ldd application_mvapich<br>
        linux-vdso.so.1 =&gt;  (0x00007fffe3746000)<br>
        libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00002b5b45fc1000)<br>
        libmpich.so.1.0 =&gt; /usr/mpi/intel/mvapich-1.2.0/lib/shared/libmpich.so.1.0 (0x00002b5b462cd000)<br>
        libibverbs.so.1 =&gt; /usr/lib64/libibverbs.so.1 (0x00002b5b465ed000)<br>
        libibumad.so.3 =&gt; /usr/lib64/libibumad.so.3 (0x00002b5b467fc000)<br>
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b5b46a04000)<br>
        librt.so.1 =&gt; /lib64/librt.so.1 (0x00002b5b46c21000)<br>
        libm.so.6 =&gt; /lib64/libm.so.6 (0x00002b5b46e2a000)<br>
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b5b47081000)<br>
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b5b47285000)<br>
        libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00002b5b475e3000)<br>
        /lib64/ld-linux-x86-64.so.2 (0x00002b5b45da0000)<br>
        libimf.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b5b477fb000)<br>
        libsvml.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b5b47b8f000)<br>
        libintlc.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b5b47da5000)<br>
<br>
% ldd application_openmpi<br>
       linux-vdso.so.1 =&gt;  (0x00007fff6ebff000)<br>
        libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00002b6e7c17d000)<br>
        libmpi_f90.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libmpi_f90.so.0 (0x00002b6e7c489000)<br>
        libmpi_f77.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libmpi_f77.so.0 (0x00002b6e7c68d000)<br>
        libmpi.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libmpi.so.0 (0x00002b6e7c8ca000)<br>
        libopen-rte.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libopen-rte.so.0 (0x00002b6e7cb9c000)<br>
        libopen-pal.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libopen-pal.so.0 (0x00002b6e7ce01000)<br>
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b6e7d077000)<br>
        libnsl.so.1 =&gt; /lib64/libnsl.so.1 (0x00002b6e7d27c000)<br>
        libutil.so.1 =&gt; /lib64/libutil.so.1 (0x00002b6e7d494000)<br>
        libm.so.6 =&gt; /lib64/libm.so.6 (0x00002b6e7d697000)<br>
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b6e7d8ee000)<br>
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b6e7db0b000)<br>
        libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00002b6e7de69000)<br>
        /lib64/ld-linux-x86-64.so.2 (0x00002b6e7bf5c000)<br>
        libifport.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libifport.so.5 (0x00002b6e7e081000)<br>
        libifcoremt.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libifcoremt.so.5 (0x00002b6e7e1ba000)<br>
        libimf.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b6e7e45f000)<br>
        libsvml.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b6e7e7f4000)<br>
        libintlc.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b6e7ea0a000)<br>
<br>
-------------- next part --------------<br>
HTML attachment scrubbed and removed<br>
<br>
------------------------------<br>
<br>
Message: 5<br>
Date: Tue, 20 Sep 2011 07:48:04 +0700<br>
From: Ole Nielsen &lt;<a href="mailto:ole.moller.nielsen@gmail.com">ole.moller.nielsen@gmail.com</a>&gt;<br>
Subject: [OMPI users] MPI hangs on multiple nodes<br>
To: <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Message-ID:<br>
        &lt;<a href="mailto:CALcLSfqsYwZR_yGmTpuGwcX7AbJKntCxfQrP2quX--S5tdQtOA@mail.gmail.com">CALcLSfqsYwZR_yGmTpuGwcX7AbJKntCxfQrP2quX--S5tdQtOA@mail.gmail.com</a>&gt;<br>
Content-Type: text/plain; charset=&quot;iso-8859-1&quot;<br>
<br>
Thanks for your suggestion Gus, we need a way of debugging what is going on.<br>
I am pretty sure the problem lies with our cluster configuration. I know MPI<br>
simply relies on the underlying network. However, we can ping and ssh to all<br>
nodes (and in between and pair as well) so it is currently a mystery why MPI<br>
doesn&#39;t communicate across nodes on our cluster.<br>
Two further questions for the group<br>
<br>
   1. I would love to run the test program connectivity.c, but cannot find<br>
   it anywhere. Can anyone help please?<br>
   2. After having left the job hanging over night we got the message<br>
   [node5][[9454,1],1][../../../../../../ompi/mca/btl/tcp/btl_tcp_frag.c:216:mca_btl_tcp_frag_recv]<br>
   mca_btl_tcp_frag_recv: readv failed: Connection timed out (110). Does anyone<br>
   know what this means?<br>
<br>
<br>
Cheers and thanks<br>
Ole<br>
PS - I don&#39;t see how separate buffers would help. Recall that the test<br>
program I use works fine on other installations and indeed when run on one<br>
the cores of one Node.<br>
<br>
<br>
<br>
<br>
Message: 11<br>
Date: Mon, 19 Sep 2011 10:37:02 -0400<br>
From: Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu">gus@ldeo.columbia.edu</a>&gt;<br>
Subject: Re: [OMPI users] RE :  MPI hangs on multiple nodes<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:4E77538E.3070007@ldeo.columbia.edu">4E77538E.3070007@ldeo.columbia.edu</a>&gt;<br>
Content-Type: text/plain; charset=iso-8859-1; format=flowed<br>
<br>
Hi Ole<br>
<br>
You could try the examples/connectivity.c program in the<br>
OpenMPI source tree, to test if everything is alright.<br>
It also hints how to solve the buffer re-use issue<br>
that Sebastien [rightfully] pointed out [i.e., declare separate<br>
buffers for MPI_Send and MPI_Recv].<br>
<br>
Gus Correa<br>
-------------- next part --------------<br>
HTML attachment scrubbed and removed<br>
<br>
------------------------------<br>
<br>
Message: 6<br>
Date: Tue, 20 Sep 2011 09:23:44 +0700<br>
From: Ole Nielsen &lt;<a href="mailto:ole.moller.nielsen@gmail.com">ole.moller.nielsen@gmail.com</a>&gt;<br>
Subject: [OMPI users] MPI hangs on multiple nodes<br>
To: <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Message-ID:<br>
        &lt;CALcLSfonKTtkp9L8XMTFg_4LRFYP2o1qXVNXykiCMC5gq=<a href="mailto:oVQg@mail.gmail.com">oVQg@mail.gmail.com</a>&gt;<br>
Content-Type: text/plain; charset=&quot;iso-8859-1&quot;<br>
<br>
Hi all - and sorry for the multiple postings, but I have more information.<br>
<br>
1: After a reboot of two nodes I ran again, and the inter-node freeze didn&#39;t<br>
happen until the third iteration. I take that to mean that the basic<br>
communication works, but that something is saturating. Is there some notion<br>
of buffer size somewhere in the MPI system that could explain this?<br>
2: The nodes have 4 ethernet cards each. Could the mapping be a problem?<br>
3: The cpus are running at a 100% for all processes involved in the freeze<br>
4: The same test program (<br>
<a href="http://code.google.com/p/pypar/source/browse/source/mpi_test.c" target="_blank">http://code.google.com/p/pypar/source/browse/source/mpi_test.c</a>) works fine<br>
when run within one node so the problem must be with MPI and/or our network.<br>
<br>
5: The network and ssh works otherwise fine.<br>
<br>
<br>
Again many thanks for any hint that can get us going again. The main thing<br>
we need is some diagnostics that may point to what causes this problem for<br>
MPI.<br>
Cheers<br>
Ole Nielsen<br>
<br>
------<br>
<br>
Here&#39;s the output which shows the freeze in the third iteration:<br>
<br>
nielso@alamba:~/sandpit/pypar/source$ mpirun --hostfile /etc/mpihosts --host<br>
node5,node6 --npernode 2 a.out<br>
Number of processes = 4<br>
Test repeated 3 times for reliability<br>
I am process 2 on node node6<br>
P2: Waiting to receive from to P1<br>
P2: Sending to to P3<br>
I am process 3 on node node6<br>
P3: Waiting to receive from to P2<br>
I am process 1 on node node5<br>
P1: Waiting to receive from to P0<br>
P1: Sending to to P2<br>
P1: Waiting to receive from to P0<br>
I am process 0 on node node5<br>
Run 1 of 3<br>
P0: Sending to P1<br>
P0: Waiting to receive from P3<br>
P2: Waiting to receive from to P1<br>
P3: Sending to to P0<br>
P3: Waiting to receive from to P2<br>
P1: Sending to to P2<br>
P0: Received from to P3<br>
Run 2 of 3<br>
P0: Sending to P1<br>
P0: Waiting to receive from P3<br>
P1: Waiting to receive from to P0<br>
-------------- next part --------------<br>
HTML attachment scrubbed and removed<br>
<br>
------------------------------<br>
<br>
Message: 7<br>
Date: Tue, 20 Sep 2011 13:25:28 +0200<br>
From: Reuti &lt;<a href="mailto:reuti@staff.uni-marburg.de">reuti@staff.uni-marburg.de</a>&gt;<br>
Subject: Re: [OMPI users] How could OpenMPI (or MVAPICH) affect<br>
        floating-point results?<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID:<br>
        &lt;<a href="mailto:4E155B3E-104F-465C-BF2B-8D145C010FD2@staff.uni-marburg.de">4E155B3E-104F-465C-BF2B-8D145C010FD2@staff.uni-marburg.de</a>&gt;<br>
Content-Type: text/plain; charset=windows-1252<br>
<br>
Hi,<br>
<br>
Am 20.09.2011 um 00:41 schrieb Blosch, Edwin L:<br>
<br>
&gt; I am observing differences in floating-point results from an application program that appear to be related to whether I link with OpenMPI 1.4.3 or MVAPICH 1.2.0.  Both packages were built with the same installation of Intel 11.1, as well as the application program; identical flags passed to the compiler in each case.<br>

&gt;<br>
&gt; I?ve tracked down some differences in a compute-only routine where I?ve printed out the inputs to the routine (to 18 digits) ; the inputs are identical.  The output numbers are different in the 16th place (perhaps a few in the 15th place).  These differences only show up for optimized code, not for ?O0.<br>

&gt;<br>
&gt; My assumption is that some optimized math intrinsic is being replaced dynamically, but I do not know how to confirm this.  Anyone have guidance to offer? Or similar experience?<br>
<br>
yes, I face it often but always at a magnitude where it&#39;s not of any concern (and not related to any MPI). Due to the limited precision in computers, a simple reordering of operation (although being equivalent in a mathematical sense) can lead to different results. Removing the anomalies with -O0 could proof that.<br>

<br>
The other point I heard especially for the x86 instruction set is, that the internal FPU has still 80 bits, while the presentation in memory is only 64 bit. Hence when all can be done in the registers, the result can be different compared to the case when some interim results need to be stored to RAM. For the Portland compiler there is a switch -Kieee -pc64 to force it to stay always in 64 bit, and a similar one for Intel is -mp (now -fltconsistency) and -mp1.<br>

<br>
<a href="http://www.pgroup.com/doc/pgiref.pdf" target="_blank">http://www.pgroup.com/doc/pgiref.pdf</a> (page 42)<br>
<br>
<a href="http://software.intel.com/file/6335" target="_blank">http://software.intel.com/file/6335</a> (page 260)<br>
<br>
You could try with the mentioned switches whether you get more consistent output.<br>
<br>
<br>
If there would be a MPI ABI, and you could just drop in any MPI library, it would be quite easy to spot the real point where the discrepancy occured.<br>
<br>
-- Reuti<br>
<br>
<br>
&gt; Thanks very much<br>
&gt;<br>
&gt; Ed<br>
&gt;<br>
&gt; Just for what it?s worth, here?s the output of ldd:<br>
&gt;<br>
&gt; % ldd application_mvapich<br>
&gt;         linux-vdso.so.1 =&gt;  (0x00007fffe3746000)<br>
&gt;         libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00002b5b45fc1000)<br>
&gt;         libmpich.so.1.0 =&gt; /usr/mpi/intel/mvapich-1.2.0/lib/shared/libmpich.so.1.0 (0x00002b5b462cd000)<br>
&gt;         libibverbs.so.1 =&gt; /usr/lib64/libibverbs.so.1 (0x00002b5b465ed000)<br>
&gt;         libibumad.so.3 =&gt; /usr/lib64/libibumad.so.3 (0x00002b5b467fc000)<br>
&gt;         libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b5b46a04000)<br>
&gt;         librt.so.1 =&gt; /lib64/librt.so.1 (0x00002b5b46c21000)<br>
&gt;         libm.so.6 =&gt; /lib64/libm.so.6 (0x00002b5b46e2a000)<br>
&gt;         libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b5b47081000)<br>
&gt;         libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b5b47285000)<br>
&gt;         libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00002b5b475e3000)<br>
&gt;         /lib64/ld-linux-x86-64.so.2 (0x00002b5b45da0000)<br>
&gt;         libimf.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b5b477fb000)<br>
&gt;         libsvml.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b5b47b8f000)<br>
&gt;         libintlc.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b5b47da5000)<br>
&gt;<br>
&gt; % ldd application_openmpi<br>
&gt;        linux-vdso.so.1 =&gt;  (0x00007fff6ebff000)<br>
&gt;         libstdc++.so.6 =&gt; /usr/lib64/libstdc++.so.6 (0x00002b6e7c17d000)<br>
&gt;         libmpi_f90.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libmpi_f90.so.0 (0x00002b6e7c489000)<br>
&gt;         libmpi_f77.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libmpi_f77.so.0 (0x00002b6e7c68d000)<br>
&gt;         libmpi.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libmpi.so.0 (0x00002b6e7c8ca000)<br>
&gt;         libopen-rte.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libopen-rte.so.0 (0x00002b6e7cb9c000)<br>
&gt;         libopen-pal.so.0 =&gt; /usr/mpi/intel/openmpi-1.4.3/lib64/libopen-pal.so.0 (0x00002b6e7ce01000)<br>
&gt;         libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00002b6e7d077000)<br>
&gt;         libnsl.so.1 =&gt; /lib64/libnsl.so.1 (0x00002b6e7d27c000)<br>
&gt;         libutil.so.1 =&gt; /lib64/libutil.so.1 (0x00002b6e7d494000)<br>
&gt;         libm.so.6 =&gt; /lib64/libm.so.6 (0x00002b6e7d697000)<br>
&gt;         libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b6e7d8ee000)<br>
&gt;         libc.so.6 =&gt; /lib64/libc.so.6 (0x00002b6e7db0b000)<br>
&gt;         libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00002b6e7de69000)<br>
&gt;         /lib64/ld-linux-x86-64.so.2 (0x00002b6e7bf5c000)<br>
&gt;         libifport.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libifport.so.5 (0x00002b6e7e081000)<br>
&gt;         libifcoremt.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libifcoremt.so.5 (0x00002b6e7e1ba000)<br>
&gt;         libimf.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b6e7e45f000)<br>
&gt;         libsvml.so =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b6e7e7f4000)<br>
&gt;         libintlc.so.5 =&gt; /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b6e7ea0a000)<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 8<br>
Date: Tue, 20 Sep 2011 07:52:41 -0400<br>
From: Tim Prince &lt;<a href="mailto:n8tm@aol.com">n8tm@aol.com</a>&gt;<br>
Subject: Re: [OMPI users] How could OpenMPI (or MVAPICH) affect<br>
        floating-point results?<br>
To: <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Message-ID: &lt;<a href="mailto:4E787E89.5090205@aol.com">4E787E89.5090205@aol.com</a>&gt;<br>
Content-Type: text/plain; charset=windows-1252; format=flowed<br>
<br>
On 9/20/2011 7:25 AM, Reuti wrote:<br>
&gt; Hi,<br>
&gt;<br>
&gt; Am 20.09.2011 um 00:41 schrieb Blosch, Edwin L:<br>
&gt;<br>
&gt;&gt; I am observing differences in floating-point results from an application program that appear to be related to whether I link with OpenMPI 1.4.3 or MVAPICH 1.2.0.  Both packages were built with the same installation of Intel 11.1, as well as the application program; identical flags passed to the compiler in each case.<br>

&gt;&gt;<br>
&gt;&gt; I?ve tracked down some differences in a compute-only routine where I?ve printed out the inputs to the routine (to 18 digits) ; the inputs are identical.  The output numbers are different in the 16th place (perhaps a few in the 15th place).  These differences only show up for optimized code, not for ?O0.<br>

&gt;&gt;<br>
&gt;&gt; My assumption is that some optimized math intrinsic is being replaced dynamically, but I do not know how to confirm this.  Anyone have guidance to offer? Or similar experience?<br>
&gt;<br>
&gt; yes, I face it often but always at a magnitude where it&#39;s not of any concern (and not related to any MPI). Due to the limited precision in computers, a simple reordering of operation (although being equivalent in a mathematical sense) can lead to different results. Removing the anomalies with -O0 could proof that.<br>

&gt;<br>
&gt; The other point I heard especially for the x86 instruction set is, that the internal FPU has still 80 bits, while the presentation in memory is only 64 bit. Hence when all can be done in the registers, the result can be different compared to the case when some interim results need to be stored to RAM. For the Portland compiler there is a switch -Kieee -pc64 to force it to stay always in 64 bit, and a similar one for Intel is -mp (now -fltconsistency) and -mp1.<br>

&gt;<br>
Diagnostics below indicate that ifort 11.1 64-bit is in use.  The<br>
options aren&#39;t the same as Reuti&#39;s &quot;now&quot; version (a 32-bit compiler<br>
which hasn&#39;t been supported for 3 years or more?).<br>
With ifort 10.1 and more recent, you would set at least<br>
-assume protect_parens -prec-div -prec-sqrt<br>
if you are interested in numerical consistency.  If you don&#39;t want<br>
auto-vectorization of sum reductions, you would use instead<br>
-fp-model source -ftz<br>
(ftz sets underflow mode back to abrupt, while &quot;source&quot; sets gradual).<br>
It may be possible to expose 80-bit x87 by setting the ancient -mp<br>
option, but such a course can&#39;t be recommended without additional cautions.<br>
<br>
Quoted comment from OP seem to show a somewhat different question: Does<br>
OpenMPI implement any operations in a different way from MVAPICH?  I<br>
would think it probable that the answer could be affirmative for<br>
operations such as allreduce, but this leads well outside my expertise<br>
with respect to specific MPI implementations.  It isn&#39;t out of the<br>
question to suspect that such differences might be aggravated when using<br>
excessively aggressive ifort options such as -fast.<br>
<br>
<br>
&gt;&gt;          libifport.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libifport.so.5 (0x00002b6e7e081000)<br>
&gt;&gt;          libifcoremt.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libifcoremt.so.5 (0x00002b6e7e1ba000)<br>
&gt;&gt;          libimf.so =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b6e7e45f000)<br>
&gt;&gt;          libsvml.so =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b6e7e7f4000)<br>
&gt;&gt;          libintlc.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b6e7ea0a000)<br>
&gt;&gt;<br>
<br>
--<br>
Tim Prince<br>
<br>
<br>
------------------------------<br>
<br>
Message: 9<br>
Date: Tue, 20 Sep 2011 07:55:26 -0400<br>
From: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Subject: Re: [OMPI users] How could OpenMPI (or MVAPICH) affect<br>
        floating-point results?<br>
To: <a href="mailto:tprince@computer.org">tprince@computer.org</a>, Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:911CADEC-4F9B-4197-8ADE-6F731B44B3F3@cisco.com">911CADEC-4F9B-4197-8ADE-6F731B44B3F3@cisco.com</a>&gt;<br>
Content-Type: text/plain; charset=us-ascii<br>
<br>
On Sep 20, 2011, at 7:52 AM, Tim Prince wrote:<br>
<br>
&gt; Quoted comment from OP seem to show a somewhat different question: Does OpenMPI implement any operations in a different way from MVAPICH?  I would think it probable that the answer could be affirmative for operations such as allreduce, but this leads well outside my expertise with respect to specific MPI implementations.  It isn&#39;t out of the question to suspect that such differences might be aggravated when using excessively aggressive ifort options such as -fast.<br>

<br>
This is &#39;zactly what I was going to say -- reductions between Open MPI and MVAPICH may well perform global arithmetic operations in different orders.<br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to:<br>
<a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 10<br>
Date: Tue, 20 Sep 2011 08:11:34 -0400<br>
From: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Subject: Re: [OMPI users] MPI hangs on multiple nodes<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:DDDBC7A5-A13B-459F-B4CC-984195A40204@cisco.com">DDDBC7A5-A13B-459F-B4CC-984195A40204@cisco.com</a>&gt;<br>
Content-Type: text/plain; charset=us-ascii<br>
<br>
On Sep 19, 2011, at 10:23 PM, Ole Nielsen wrote:<br>
<br>
&gt; Hi all - and sorry for the multiple postings, but I have more information.<br>
<br>
+1 on Eugene&#39;s comments.  The test program looks fine to me.<br>
<br>
FWIW, you don&#39;t need -lmpi to compile your program; OMPI&#39;s wrapper compiler allows you to just:<br>
<br>
    mpicc mpi_test.c -o mpi_test -Wall<br>
<br>
&gt; 1: After a reboot of two nodes I ran again, and the inter-node freeze didn&#39;t happen until the third iteration. I take that to mean that the basic communication works, but that something is saturating. Is there some notion of buffer size somewhere in the MPI system that could explain this?<br>

<br>
Hmm.  This is not a good sign; it somewhat indicates a problem with your OS.  Based on this email and your prior emails, I&#39;m guessing you&#39;re using TCP for communication, and that the problem is based on inter-node communication (e.g., the problem would occur even if you only run 1 process per machine, but does not occur if you run all N processes on a single machine, per your #4, below).<br>

<br>
&gt; 2: The nodes have 4 ethernet cards each. Could the mapping be a problem?<br>
<br>
Shouldn&#39;t be.  If it runs at all, then it should run fine.<br>
<br>
Do you have all your ethernet cards on a single subnet, or multiple subnets?  I have heard of problems when you have multiple ethernet cards on the same subnet -- I believe there&#39;s some non-determinism in than case in what wire/NIC a packet will actually go out, which may be problematic for OMPI.<br>

<br>
&gt; 3: The cpus are running at a 100% for all processes involved in the freeze<br>
<br>
That&#39;s probably right.  OMPI aggressively polls for progress as a way to decrease latency.  So all processes are trying to make progress, and therefore are aggressively polling, eating up 100% of the CPU.<br>
<br>
&gt; 4: The same test program (<a href="http://code.google.com/p/pypar/source/browse/source/mpi_test.c" target="_blank">http://code.google.com/p/pypar/source/browse/source/mpi_test.c</a>) works fine when run within one node so the problem must be with MPI and/or our network.<br>

<br>
This helps identify the issue as the TCP communication, not the shared memory communication.<br>
<br>
&gt; 5: The network and ssh works otherwise fine.<br>
<br>
Good.<br>
<br>
&gt; Again many thanks for any hint that can get us going again. The main thing we need is some diagnostics that may point to what causes this problem for MPI.<br>
<br>
If you are running with multiple NICs on the same subnet, change them to multiple subnets and see if it starts working fine.<br>
<br>
If they&#39;re on different subnets, try using the btl_tcp_if_include / btl_tcp_if_exclude MCA parameters to exclude certain networks and see if they&#39;re the problematic ones.  Keep in mind that ..._include and ..._exclude are mutually exclusive; you should only specify one.  And if you specify exclude, be sure to exclude loopback.  E.g:<br>

<br>
  mpirun --mca btl_if_include eth0,eth1 -np 16 --hostfile hostfile mpi_test<br>
or<br>
  mpirun --mca btl_if_exclude lo0,eth1 -np 16 --hostfile hostfile mpi_test<br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to:<br>
<a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 11<br>
Date: Tue, 20 Sep 2011 15:14:44 +0300<br>
From: Yevgeny Kliteynik &lt;<a href="mailto:kliteyn@dev.mellanox.co.il">kliteyn@dev.mellanox.co.il</a>&gt;<br>
Subject: Re: [OMPI users] Latency of 250 microseconds with Open-MPI<br>
        1.4.3, Mellanox Infiniband and 256 MPI ranks<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:4E7883B4.7080309@dev.mellanox.co.il">4E7883B4.7080309@dev.mellanox.co.il</a>&gt;<br>
Content-Type: text/plain; charset=ISO-8859-1<br>
<br>
Hi S?bastien,<br>
<br>
If I understand you correctly, you are running your application on two<br>
different MPIs on two different clusters with two different IB vendors.<br>
<br>
Could you make a comparison more &quot;apples to apples&quot;-ish?<br>
For instance:<br>
 - run the same version of Open MPI on both clusters<br>
 - run the same version of MVAPICH on both clusters<br>
<br>
<br>
-- YK<br>
<br>
On 18-Sep-11 1:59 AM, S?bastien Boisvert wrote:<br>
&gt; Hello,<br>
&gt;<br>
&gt; Open-MPI 1.4.3 on Mellanox Infiniband hardware gives a latency of 250 microseconds with 256 MPI ranks on super-computer A (name is colosse).<br>
&gt;<br>
&gt; The same software gives a latency of 10 microseconds with MVAPICH2 and QLogic Infiniband hardware with 512 MPI ranks on super-computer B (name is guillimin).<br>
&gt;<br>
&gt;<br>
&gt; Here are the relevant information listed in <a href="http://www.open-mpi.org/community/help/" target="_blank">http://www.open-mpi.org/community/help/</a><br>
&gt;<br>
&gt;<br>
&gt; 1. Check the FAQ first.<br>
&gt;<br>
&gt; done !<br>
&gt;<br>
&gt;<br>
&gt; 2. The version of Open MPI that you&#39;re using.<br>
&gt;<br>
&gt; Open-MPI 1.4.3<br>
&gt;<br>
&gt;<br>
&gt; 3. The config.log file from the top-level Open MPI directory, if available (please compress!).<br>
&gt;<br>
&gt; See below.<br>
&gt;<br>
&gt; Command file: <a href="http://pastebin.com/mW32ntSJ" target="_blank">http://pastebin.com/mW32ntSJ</a><br>
&gt;<br>
&gt;<br>
&gt; 4. The output of the &quot;ompi_info --all&quot; command from the node where you&#39;re invoking mpirun.<br>
&gt;<br>
&gt; ompi_info -a on colosse: <a href="http://pastebin.com/RPyY9s24" target="_blank">http://pastebin.com/RPyY9s24</a><br>
&gt;<br>
&gt;<br>
&gt; 5. If running on more than one node -- especially if you&#39;re having problems launching Open MPI processes -- also include the output of the &quot;ompi_info -v ompi full --parsable&quot; command from each node on which you&#39;re trying to run.<br>

&gt;<br>
&gt; I am not having problems launching Open-MPI processes.<br>
&gt;<br>
&gt;<br>
&gt; 6. A detailed description of what is failing.<br>
&gt;<br>
&gt; Open-MPI 1.4.3 on Mellanox Infiniband hardware give a latency of 250 microseconds with 256 MPI ranks on super-computer A (name is colosse).<br>
&gt;<br>
&gt; The same software gives a latency of 10 microseconds with MVAPICH2 and QLogic Infiniband hardware on 512 MPI ranks on super-computer B (name is guillimin).<br>
&gt;<br>
&gt; Details follow.<br>
&gt;<br>
&gt;<br>
&gt; I am developing a distributed genome assembler that runs with the message-passing interface (I am a PhD student).<br>
&gt; It is called Ray. Link: <a href="http://github.com/sebhtml/ray" target="_blank">http://github.com/sebhtml/ray</a><br>
&gt;<br>
&gt; I recently added the option -test-network-only so that Ray can be used to test the latency. Each MPI rank has to send 100000 messages (4000 bytes each), one by one.<br>
&gt; The destination of any message is picked up at random.<br>
&gt;<br>
&gt;<br>
&gt; On colosse, a super-computer located at Laval University, I get an average latency of 250 microseconds with the test done in Ray.<br>
&gt;<br>
&gt; See <a href="http://pastebin.com/9nyjSy5z" target="_blank">http://pastebin.com/9nyjSy5z</a><br>
&gt;<br>
&gt; On colosse, the hardware is Mellanox Infiniband QDR ConnectX and the MPI middleware is Open-MPI 1.4.3 compiled with gcc 4.4.2.<br>
&gt;<br>
&gt; colosse has 8 compute cores per node (Intel Nehalem).<br>
&gt;<br>
&gt;<br>
&gt; Testing the latency with ibv_rc_pingpong on colosse gives 11 microseconds.<br>
&gt;<br>
&gt;    local address:  LID 0x048e, QPN 0x1c005c, PSN 0xf7c66b<br>
&gt;    remote address: LID 0x018c, QPN 0x2c005c, PSN 0x5428e6<br>
&gt; 8192000 bytes in 0.01 seconds = 5776.64 Mbit/sec<br>
&gt; 1000 iters in 0.01 seconds = 11.35 usec/iter<br>
&gt;<br>
&gt; So I know that the Infiniband has a correct latency between two HCAs because of the output of ibv_rc_pingpong.<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; Adding the parameter --mca btl_openib_verbose 1 to mpirun shows that Open-MPI detects the hardware correctly:<br>
&gt;<br>
&gt; [r107-n57][[59764,1],0][btl_openib_ini.c:166:ompi_btl_openib_ini_query] Querying INI files for vendor 0x02c9, part ID 26428<br>
&gt; [r107-n57][[59764,1],0][btl_openib_ini.c:185:ompi_btl_openib_ini_query] Found corresponding INI values: Mellanox Hermon<br>
&gt;<br>
&gt; see <a href="http://pastebin.com/pz03f0B3" target="_blank">http://pastebin.com/pz03f0B3</a><br>
&gt;<br>
&gt;<br>
&gt; So I don&#39;t think this is the problem described in the FAQ ( <a href="http://www.open-mpi.org/faq/?category=openfabrics#mellanox-connectx-poor-latency" target="_blank">http://www.open-mpi.org/faq/?category=openfabrics#mellanox-connectx-poor-latency</a> )<br>

&gt; and on the mailing list ( <a href="http://www.open-mpi.org/community/lists/users/2007/10/4238.php" target="_blank">http://www.open-mpi.org/community/lists/users/2007/10/4238.php</a> ) because the INI values are found.<br>

&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; Running the network test implemented in Ray on 32 MPI ranks, I get an average latency of 65 microseconds.<br>
&gt;<br>
&gt; See <a href="http://pastebin.com/nWDmGhvM" target="_blank">http://pastebin.com/nWDmGhvM</a><br>
&gt;<br>
&gt;<br>
&gt; Thus, with 256 MPI ranks I get an average latency of 250 microseconds and with 32 MPI ranks I get 65 microseconds.<br>
&gt;<br>
&gt;<br>
&gt; Running the network test on 32 MPI ranks again but only allowing the MPI rank 0 to send messages gives a latency of 10 microseconds for this rank.<br>
&gt; See <a href="http://pastebin.com/dWMXsHpa" target="_blank">http://pastebin.com/dWMXsHpa</a><br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; Because I get 10 microseconds in the network test in Ray when only the MPI rank sends messages, I would say that there may be some I/O contention.<br>
&gt;<br>
&gt; To test this hypothesis, I re-ran the test, but allowed only 1 MPI rank per node to send messages (there are 8 MPI ranks per node and a total of 32 MPI ranks).<br>
&gt; Ranks 0, 8, 16 and 24 all reported 13 microseconds. See <a href="http://pastebin.com/h84Fif3g" target="_blank">http://pastebin.com/h84Fif3g</a><br>
&gt;<br>
&gt; The next test was to allow 2 MPI ranks on each node to send messages. Ranks 0, 1, 8, 9, 16, 17, 24, and 25 reported 15 microseconds.<br>
&gt; See <a href="http://pastebin.com/REdhJXkS" target="_blank">http://pastebin.com/REdhJXkS</a><br>
&gt;<br>
&gt; With 3 MPI ranks per node that can send messages, ranks 0, 1, 2, 8, 9, 10, 16, 17, 18, 24, 25, 26 reported 20 microseconds. See <a href="http://pastebin.com/TCd6xpuC" target="_blank">http://pastebin.com/TCd6xpuC</a><br>

&gt;<br>
&gt; Finally, with 4 MPI ranks per node that can send messages, I got 23 microseconds. See <a href="http://pastebin.com/V8zjae7s" target="_blank">http://pastebin.com/V8zjae7s</a><br>
&gt;<br>
&gt;<br>
&gt; So the MPI ranks on a given node seem to fight for access to the HCA port.<br>
&gt;<br>
&gt; Each colosse node has 1 port (ibv_devinfo) and the max_mtu is 2048 bytes. See <a href="http://pastebin.com/VXMAZdeZ" target="_blank">http://pastebin.com/VXMAZdeZ</a><br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; At this point, some may think that there may be a bug in the network test itself. So I tested the same code on another super-computer.<br>
&gt;<br>
&gt; On guillimin, a super-computer located at McGill University, I get an average latency (with Ray -test-network-only) of 10 microseconds when running Ray on 512 MPI ranks.<br>
&gt;<br>
&gt; See <a href="http://pastebin.com/nCKF8Xg6" target="_blank">http://pastebin.com/nCKF8Xg6</a><br>
&gt;<br>
&gt; On guillimin, the hardware is Qlogic Infiniband QDR and the MPI middleware is MVAPICH2 1.6.<br>
&gt;<br>
&gt; Thus, I know that the network test in Ray works as expected because results on guillimin show a latency of 10 microseconds for 512 MPI ranks.<br>
&gt;<br>
&gt; guillimin also has 8 compute cores per node (Intel Nehalem).<br>
&gt;<br>
&gt; On guillimin, each node has one port (ibv_devinfo) and the max_mtu of HCAs is 4096 bytes. See <a href="http://pastebin.com/35T8N5t8" target="_blank">http://pastebin.com/35T8N5t8</a><br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; In Ray, only the following MPI functions are utilised:<br>
&gt;<br>
&gt; - MPI_Init<br>
&gt; - MPI_Comm_rank<br>
&gt; - MPI_Comm_size<br>
&gt; - MPI_Finalize<br>
&gt;<br>
&gt; - MPI_Isend<br>
&gt;<br>
&gt; - MPI_Request_free<br>
&gt; - MPI_Test<br>
&gt; - MPI_Get_count<br>
&gt; - MPI_Start<br>
&gt; - MPI_Recv_init<br>
&gt; - MPI_Cancel<br>
&gt;<br>
&gt; - MPI_Get_processor_name<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; 7. Please include information about your network:<br>
&gt; <a href="http://www.open-mpi.org/faq/?category=openfabrics#ofa-troubleshoot" target="_blank">http://www.open-mpi.org/faq/?category=openfabrics#ofa-troubleshoot</a><br>
&gt;<br>
&gt; Type: Infiniband<br>
&gt;<br>
&gt;    7.1. Which OpenFabrics version are you running?<br>
&gt;<br>
&gt;<br>
&gt; ofed-scripts-1.4.2-0_sunhpc1<br>
&gt;<br>
&gt; libibverbs-1.1.3-2.el5<br>
&gt; libibverbs-utils-1.1.3-2.el5<br>
&gt; libibverbs-devel-1.1.3-2.el5<br>
&gt;<br>
&gt;<br>
&gt;    7.2. What distro and version of Linux are you running? What is your kernel version?<br>
&gt;<br>
&gt;<br>
&gt; CentOS release 5.6 (Final)<br>
&gt;<br>
&gt; Linux colosse1 2.6.18-238.19.1.el5 #1 SMP Fri Jul 15 07:31:24 EDT 2011 x86_64 x86_64 x86_64 GNU/Linux<br>
&gt;<br>
&gt;<br>
&gt;    7.3. Which subnet manager are you running? (e.g., OpenSM, a vendor-specific subnet manager, etc.)<br>
&gt;<br>
&gt; opensm-libs-3.3.3-1.el5_6.1<br>
&gt;<br>
&gt;    7.4. What is the output of the ibv_devinfo command<br>
&gt;<br>
&gt;      hca_id: mlx4_0<br>
&gt;              fw_ver:                         2.7.000<br>
&gt;              node_guid:                      5080:0200:008d:8f88<br>
&gt;              sys_image_guid:                 5080:0200:008d:8f8b<br>
&gt;              vendor_id:                      0x02c9<br>
&gt;              vendor_part_id:                 26428<br>
&gt;              hw_ver:                         0xA0<br>
&gt;              board_id:                       X6275_QDR_IB_2.5<br>
&gt;              phys_port_cnt:                  1<br>
&gt;                      port:   1<br>
&gt;                              state:                  active (4)<br>
&gt;                              max_mtu:                2048 (4)<br>
&gt;                              active_mtu:             2048 (4)<br>
&gt;                              sm_lid:                 1222<br>
&gt;                              port_lid:               659<br>
&gt;                              port_lmc:               0x00<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;    7.5. What is the output of the ifconfig command<br>
&gt;<br>
&gt;    Not using IPoIB.<br>
&gt;<br>
&gt;    7.6. If running under Bourne shells, what is the output of the &quot;ulimit -l&quot; command?<br>
&gt;<br>
&gt; [sboisver12@colosse1 ~]$ ulimit -l<br>
&gt; 6000000<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; The two differences I see between guillimin and colosse are<br>
&gt;<br>
&gt; - Open-MPI 1.4.3 (colosse) v. MVAPICH2 1.6 (guillimin)<br>
&gt; - Mellanox (colosse) v. QLogic (guillimin)<br>
&gt;<br>
&gt;<br>
&gt; Does anyone experienced such a high latency with Open-MPI 1.4.3 on Mellanox HCAs ?<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; Thank you for your time.<br>
&gt;<br>
&gt;<br>
&gt;                  S?bastien Boisvert<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt;<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 12<br>
Date: Tue, 20 Sep 2011 14:25:09 +0200<br>
From: Reuti &lt;<a href="mailto:reuti@staff.uni-marburg.de">reuti@staff.uni-marburg.de</a>&gt;<br>
Subject: Re: [OMPI users] How could OpenMPI (or MVAPICH) affect<br>
        floating-point results?<br>
To: <a href="mailto:tprince@computer.org">tprince@computer.org</a>, Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID:<br>
        &lt;<a href="mailto:01FAE7A2-F1A2-410A-8CEE-D84E91449189@staff.uni-marburg.de">01FAE7A2-F1A2-410A-8CEE-D84E91449189@staff.uni-marburg.de</a>&gt;<br>
Content-Type: text/plain; charset=windows-1252<br>
<br>
Am 20.09.2011 um 13:52 schrieb Tim Prince:<br>
<br>
&gt; On 9/20/2011 7:25 AM, Reuti wrote:<br>
&gt;&gt; Hi,<br>
&gt;&gt;<br>
&gt;&gt; Am 20.09.2011 um 00:41 schrieb Blosch, Edwin L:<br>
&gt;&gt;<br>
&gt;&gt;&gt; I am observing differences in floating-point results from an application program that appear to be related to whether I link with OpenMPI 1.4.3 or MVAPICH 1.2.0.  Both packages were built with the same installation of Intel 11.1, as well as the application program; identical flags passed to the compiler in each case.<br>

&gt;&gt;&gt;<br>
&gt;&gt;&gt; I?ve tracked down some differences in a compute-only routine where I?ve printed out the inputs to the routine (to 18 digits) ; the inputs are identical.  The output numbers are different in the 16th place (perhaps a few in the 15th place).  These differences only show up for optimized code, not for ?O0.<br>

&gt;&gt;&gt;<br>
&gt;&gt;&gt; My assumption is that some optimized math intrinsic is being replaced dynamically, but I do not know how to confirm this.  Anyone have guidance to offer? Or similar experience?<br>
&gt;&gt;<br>
&gt;&gt; yes, I face it often but always at a magnitude where it&#39;s not of any concern (and not related to any MPI). Due to the limited precision in computers, a simple reordering of operation (although being equivalent in a mathematical sense) can lead to different results. Removing the anomalies with -O0 could proof that.<br>

&gt;&gt;<br>
&gt;&gt; The other point I heard especially for the x86 instruction set is, that the internal FPU has still 80 bits, while the presentation in memory is only 64 bit. Hence when all can be done in the registers, the result can be different compared to the case when some interim results need to be stored to RAM. For the Portland compiler there is a switch -Kieee -pc64 to force it to stay always in 64 bit, and a similar one for Intel is -mp (now -fltconsistency) and -mp1.<br>

&gt;&gt;<br>
&gt; Diagnostics below indicate that ifort 11.1 64-bit is in use.  The options aren&#39;t the same as Reuti&#39;s &quot;now&quot; version (a 32-bit compiler which hasn&#39;t been supported for 3 years or more?).<br>
<br>
In the 11.1 documentation they are also still listed:<br>
<br>
<a href="http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/fortran/lin/compiler_f/index.htm" target="_blank">http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/fortran/lin/compiler_f/index.htm</a><br>

<br>
I read it in the way, that -mp is deprecated syntax (therefore listed under &quot;Alternate Options&quot;), but -fltconsistency is still a valid and supported option.<br>
<br>
-- Reuti<br>
<br>
<br>
&gt; With ifort 10.1 and more recent, you would set at least<br>
&gt; -assume protect_parens -prec-div -prec-sqrt<br>
&gt; if you are interested in numerical consistency.  If you don&#39;t want auto-vectorization of sum reductions, you would use instead<br>
&gt; -fp-model source -ftz<br>
&gt; (ftz sets underflow mode back to abrupt, while &quot;source&quot; sets gradual).<br>
&gt; It may be possible to expose 80-bit x87 by setting the ancient -mp option, but such a course can&#39;t be recommended without additional cautions.<br>
&gt;<br>
&gt; Quoted comment from OP seem to show a somewhat different question: Does OpenMPI implement any operations in a different way from MVAPICH?  I would think it probable that the answer could be affirmative for operations such as allreduce, but this leads well outside my expertise with respect to specific MPI implementations.  It isn&#39;t out of the question to suspect that such differences might be aggravated when using excessively aggressive ifort options such as -fast.<br>

&gt;<br>
&gt;<br>
&gt;&gt;&gt;         libifport.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libifport.so.5 (0x00002b6e7e081000)<br>
&gt;&gt;&gt;         libifcoremt.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libifcoremt.so.5 (0x00002b6e7e1ba000)<br>
&gt;&gt;&gt;         libimf.so =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b6e7e45f000)<br>
&gt;&gt;&gt;         libsvml.so =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b6e7e7f4000)<br>
&gt;&gt;&gt;         libintlc.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b6e7ea0a000)<br>
&gt;&gt;&gt;<br>
&gt;<br>
&gt; --<br>
&gt; Tim Prince<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt;<br>
<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 13<br>
Date: Tue, 20 Sep 2011 05:34:51 -0700<br>
From: Rolf vandeVaart &lt;<a href="mailto:rvandevaart@nvidia.com">rvandevaart@nvidia.com</a>&gt;<br>
Subject: Re: [OMPI users] MPI hangs on multiple nodes<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID:<br>
        &lt;<a href="mailto:3AF945EBF4D3EC41AFE44EED9B0585F32689F8C549@HQMAIL02.nvidia.com">3AF945EBF4D3EC41AFE44EED9B0585F32689F8C549@HQMAIL02.nvidia.com</a>&gt;<br>
Content-Type: text/plain; charset=&quot;us-ascii&quot;<br>
<br>
<br>
&gt;&gt; 1: After a reboot of two nodes I ran again, and the inter-node freeze didn&#39;t<br>
&gt;happen until the third iteration. I take that to mean that the basic<br>
&gt;communication works, but that something is saturating. Is there some notion<br>
&gt;of buffer size somewhere in the MPI system that could explain this?<br>
&gt;<br>
&gt;Hmm.  This is not a good sign; it somewhat indicates a problem with your OS.<br>
&gt;Based on this email and your prior emails, I&#39;m guessing you&#39;re using TCP for<br>
&gt;communication, and that the problem is based on inter-node communication<br>
&gt;(e.g., the problem would occur even if you only run 1 process per machine,<br>
&gt;but does not occur if you run all N processes on a single machine, per your #4,<br>
&gt;below).<br>
&gt;<br>
<br>
I agree with Jeff here.  Open MPI uses lazy connections to establish connections and round robins through the interfaces.<br>
So, the first few communications could work as they are using interfaces that could communicate between the nodes, but the third iteration uses an interface that for some reason cannot establish the connection.<br>
<br>
One flag you can use that may help is --mca btl_base_verbose 20, like this;<br>
<br>
mpirun --mca btl_base_verbose 20 connectivity_c<br>
<br>
It will dump out a bunch of stuff, but there will be a few lines that look like this:<br>
<br>
[...snip...]<br>
[dt:09880] btl: tcp: attempting to connect() to [[58627,1],1] address 10.20.14.101 on port 1025<br>
[...snip...]<br>
<br>
Rolf<br>
<br>
<br>
-----------------------------------------------------------------------------------<br>
This email message is for the sole use of the intended recipient(s) and may contain<br>
confidential information.  Any unauthorized review, use, disclosure or distribution<br>
is prohibited.  If you are not the intended recipient, please contact the sender by<br>
reply email and destroy all copies of the original message.<br>
-----------------------------------------------------------------------------------<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 14<br>
Date: Tue, 20 Sep 2011 13:12:48 +0000<br>
From: &quot;Barrett, Brian W&quot; &lt;<a href="mailto:bwbarre@sandia.gov">bwbarre@sandia.gov</a>&gt;<br>
Subject: Re: [OMPI users] Open MPI and Objective C<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID:<br>
        &lt;<a href="mailto:69A29AB53D57F54D81061A9E4E45B8FD0F991C75@EXMB01.srn.sandia.gov">69A29AB53D57F54D81061A9E4E45B8FD0F991C75@EXMB01.srn.sandia.gov</a>&gt;<br>
Content-Type: text/plain; charset=&quot;us-ascii&quot;<br>
<br>
The problem you&#39;re running into is not due to Open MPI.  The Objective C and C compilers on OS X (and most platforms) are the same binary, so you should be able to use mpicc without any problems.  It will see the .m extension and switch to Objective C mode.  However, NSLog is in the Foundation framework, so you must add the compiler option<br>

<br>
  -framework Foundation<br>
<br>
to the compiler flags (both when compiling and linking).  If you ripped out all the MPI and used gcc directly to compile your example code, you&#39;d run into the same linker error without the -framework option.<br>
<br>
Hope this helps,<br>
<br>
Brian<br>
<br>
--<br>
  Brian W. Barrett<br>
  Scalable System Software Group<br>
  Sandia National Laboratories<br>
________________________________________<br>
From: <a href="mailto:users-bounces@open-mpi.org">users-bounces@open-mpi.org</a> [<a href="mailto:users-bounces@open-mpi.org">users-bounces@open-mpi.org</a>] on behalf of Jeff Squyres [<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>]<br>

Sent: Monday, September 19, 2011 6:46 AM<br>
To: Open MPI Users<br>
Subject: Re: [OMPI users] Open MPI and Objective C<br>
<br>
+1<br>
<br>
You&#39;ll probably have to run &quot;mpicc --showme&quot; to see all the flags that OMPI is passing to the underlying compiler, and use those (or equivalents) to the ObjC compiler.<br>
<br>
<br>
On Sep 19, 2011, at 8:34 AM, Ralph Castain wrote:<br>
<br>
&gt; Nothing to do with us - you call a function &quot;NSLog&quot; that Objective C doesn&#39;t recognize. That isn&#39;t an MPI function.<br>
&gt;<br>
&gt; On Sep 18, 2011, at 8:20 PM, Scott Wilcox wrote:<br>
&gt;<br>
&gt;&gt; I have been asked to convert some C++ code using Open MPI to Objective C and I am having problems getting a simple Obj C program to compile.  I have searched through the FAQs and have not found anything specific.  Is it an incorrect assumption that the C interfaces work with Obj C, or am I missing something?<br>

&gt;&gt;<br>
&gt;&gt; Thanks in advance for your help!<br>
&gt;&gt; Scott<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; open MPI version: 1.4.3<br>
&gt;&gt; OSX 10.5.1<br>
&gt;&gt;<br>
&gt;&gt; file: main.m<br>
&gt;&gt;<br>
&gt;&gt; #import &lt;Foundation/Foundation.h&gt;<br>
&gt;&gt; #import &quot;mpi.h&quot;<br>
&gt;&gt;<br>
&gt;&gt; int main (int argc, char** argv)<br>
&gt;&gt;<br>
&gt;&gt; {<br>
&gt;&gt;    //***<br>
&gt;&gt;    // Variable Declaration<br>
&gt;&gt;    //***<br>
&gt;&gt;    int theRank;<br>
&gt;&gt;    int theSize;<br>
&gt;&gt;<br>
&gt;&gt;    //***<br>
&gt;&gt;    // Initializing Message Passing Interface<br>
&gt;&gt;    //***<br>
&gt;&gt;    MPI_Init(&amp;argc,&amp;argv);<br>
&gt;&gt;    MPI_Comm_size(MPI_COMM_WORLD,&amp;theSize);<br>
&gt;&gt;    MPI_Comm_rank(MPI_COMM_WORLD,&amp;theRank);<br>
&gt;&gt;    //*** end<br>
&gt;&gt;<br>
&gt;&gt;    NSLog(@&quot;Executing open MPI Objective C&quot;);<br>
&gt;&gt;<br>
&gt;&gt; }<br>
&gt;&gt;<br>
&gt;&gt; Compile:<br>
&gt;&gt;<br>
&gt;&gt; [87]UNC ONLY: SAW&gt;mpicc main.m -o test<br>
&gt;&gt; Undefined symbols:<br>
&gt;&gt;   &quot;___CFConstantStringClassReference&quot;, referenced from:<br>
&gt;&gt;       cfstring=Executing open MPI Objective C in ccj1AlL9.o<br>
&gt;&gt;   &quot;_NSLog&quot;, referenced from:<br>
&gt;&gt;       _main in ccj1AlL9.o<br>
&gt;&gt; ld: symbol(s) not found<br>
&gt;&gt; collect2: ld returned 1 exit status<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; users mailing list<br>
&gt;&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to:<br>
<a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
<br>
<br>
<br>
------------------------------<br>
<br>
Message: 15<br>
Date: Tue, 20 Sep 2011 08:44:07 -0600<br>
From: &quot;Samuel K. Gutierrez&quot; &lt;<a href="mailto:samuel@lanl.gov">samuel@lanl.gov</a>&gt;<br>
Subject: Re: [OMPI users] How could OpenMPI (or MVAPICH) affect<br>
        floating-point results?<br>
To: Open MPI Users &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>&gt;<br>
Message-ID: &lt;<a href="mailto:91688AE1-DF54-4957-A0A0-902FC2E9B2D3@lanl.gov">91688AE1-DF54-4957-A0A0-902FC2E9B2D3@lanl.gov</a>&gt;<br>
Content-Type: text/plain; charset=windows-1252<br>
<br>
Hi,<br>
<br>
Maybe you can leverage some of the techniques outlined in:<br>
<br>
Robert W. Robey, Jonathan M. Robey, and Rob Aulwes. 2011. In search of numerical consistency in parallel programming. Parallel Comput. 37, 4-5 (April 2011), 217-229. DOI=10.1016/j.parco.2011.02.009 <a href="http://dx.doi.org/10.1016/j.parco.2011.02.009" target="_blank">http://dx.doi.org/10.1016/j.parco.2011.02.009</a><br>

<br>
Hope that helps,<br>
<br>
Samuel K. Gutierrez<br>
Los Alamos National Laboratory<br>
<br>
On Sep 20, 2011, at 6:25 AM, Reuti wrote:<br>
<br>
&gt; Am 20.09.2011 um 13:52 schrieb Tim Prince:<br>
&gt;<br>
&gt;&gt; On 9/20/2011 7:25 AM, Reuti wrote:<br>
&gt;&gt;&gt; Hi,<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Am 20.09.2011 um 00:41 schrieb Blosch, Edwin L:<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; I am observing differences in floating-point results from an application program that appear to be related to whether I link with OpenMPI 1.4.3 or MVAPICH 1.2.0.  Both packages were built with the same installation of Intel 11.1, as well as the application program; identical flags passed to the compiler in each case.<br>

&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; I?ve tracked down some differences in a compute-only routine where I?ve printed out the inputs to the routine (to 18 digits) ; the inputs are identical.  The output numbers are different in the 16th place (perhaps a few in the 15th place).  These differences only show up for optimized code, not for ?O0.<br>

&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; My assumption is that some optimized math intrinsic is being replaced dynamically, but I do not know how to confirm this.  Anyone have guidance to offer? Or similar experience?<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; yes, I face it often but always at a magnitude where it&#39;s not of any concern (and not related to any MPI). Due to the limited precision in computers, a simple reordering of operation (although being equivalent in a mathematical sense) can lead to different results. Removing the anomalies with -O0 could proof that.<br>

&gt;&gt;&gt;<br>
&gt;&gt;&gt; The other point I heard especially for the x86 instruction set is, that the internal FPU has still 80 bits, while the presentation in memory is only 64 bit. Hence when all can be done in the registers, the result can be different compared to the case when some interim results need to be stored to RAM. For the Portland compiler there is a switch -Kieee -pc64 to force it to stay always in 64 bit, and a similar one for Intel is -mp (now -fltconsistency) and -mp1.<br>

&gt;&gt;&gt;<br>
&gt;&gt; Diagnostics below indicate that ifort 11.1 64-bit is in use.  The options aren&#39;t the same as Reuti&#39;s &quot;now&quot; version (a 32-bit compiler which hasn&#39;t been supported for 3 years or more?).<br>
&gt;<br>
&gt; In the 11.1 documentation they are also still listed:<br>
&gt;<br>
&gt; <a href="http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/fortran/lin/compiler_f/index.htm" target="_blank">http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/fortran/lin/compiler_f/index.htm</a><br>

&gt;<br>
&gt; I read it in the way, that -mp is deprecated syntax (therefore listed under &quot;Alternate Options&quot;), but -fltconsistency is still a valid and supported option.<br>
&gt;<br>
&gt; -- Reuti<br>
&gt;<br>
&gt;<br>
&gt;&gt; With ifort 10.1 and more recent, you would set at least<br>
&gt;&gt; -assume protect_parens -prec-div -prec-sqrt<br>
&gt;&gt; if you are interested in numerical consistency.  If you don&#39;t want auto-vectorization of sum reductions, you would use instead<br>
&gt;&gt; -fp-model source -ftz<br>
&gt;&gt; (ftz sets underflow mode back to abrupt, while &quot;source&quot; sets gradual).<br>
&gt;&gt; It may be possible to expose 80-bit x87 by setting the ancient -mp option, but such a course can&#39;t be recommended without additional cautions.<br>
&gt;&gt;<br>
&gt;&gt; Quoted comment from OP seem to show a somewhat different question: Does OpenMPI implement any operations in a different way from MVAPICH?  I would think it probable that the answer could be affirmative for operations such as allreduce, but this leads well outside my expertise with respect to specific MPI implementations.  It isn&#39;t out of the question to suspect that such differences might be aggravated when using excessively aggressive ifort options such as -fast.<br>

&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;&gt;&gt;        libifport.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libifport.so.5 (0x00002b6e7e081000)<br>
&gt;&gt;&gt;&gt;        libifcoremt.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libifcoremt.so.5 (0x00002b6e7e1ba000)<br>
&gt;&gt;&gt;&gt;        libimf.so =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libimf.so (0x00002b6e7e45f000)<br>
&gt;&gt;&gt;&gt;        libsvml.so =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libsvml.so (0x00002b6e7e7f4000)<br>
&gt;&gt;&gt;&gt;        libintlc.so.5 =&gt;  /opt/intel/Compiler/11.1/072/lib/intel64/libintlc.so.5 (0x00002b6e7ea0a000)<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; --<br>
&gt;&gt; Tim Prince<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; users mailing list<br>
&gt;&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt;&gt;<br>
&gt;<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
<br>
<br>
<br>
<br>
<br>
------------------------------<br>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
End of users Digest, Vol 2018, Issue 1<br>
**************************************<br>
</blockquote></div><br>


<html><head><meta http-equiv="Content-Type" content="text/html charset=utf-8"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" class="">You could but you don’t need to. The datatype engine of Open MPI is doing a fair job of packing/unpacking the data on the flight, so you don’t have to.<div class=""><br class=""></div><div class="">&nbsp; George.</div><div class=""><br class=""><div><blockquote type="cite" class=""><div class="">On Jan 16, 2015, at 11:32 , Diego Avesani &lt;<a href="mailto:diego.avesani@gmail.com" class="">diego.avesani@gmail.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><div class=""><div dir="ltr" style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class="">Dear all,<div class=""><br class=""></div><div class="">Could I use &nbsp;MPI_PACK?</div><div class=""><br class=""></div></div><div class="gmail_extra" style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><br clear="all" class=""><div class=""><div class="gmail_signature">Diego<br class=""><br class=""></div></div><br class=""><div class="gmail_quote">On 16 January 2015 at 16:26, Diego Avesani<span class="Apple-converted-space">&nbsp;</span><span dir="ltr" class="">&lt;<a href="mailto:diego.avesani@gmail.com" target="_blank" class="">diego.avesani@gmail.com</a>&gt;</span><span class="Apple-converted-space">&nbsp;</span>wrote:<br class=""><blockquote class="gmail_quote" style="margin: 0px 0px 0px 0.8ex; border-left-width: 1px; border-left-color: rgb(204, 204, 204); border-left-style: solid; padding-left: 1ex;"><div dir="ltr" class="">Dear George, Dear all,<div class=""><br class=""></div><div class="">I have been studying. It's clear for 2D case QQ(:,:).</div><div class=""><br class=""></div><div class="">For example if&nbsp;</div><div class="">real :: QQ(npt,9) , with 9 the characteristic of each particles.</div><div class=""><br class=""></div><div class="">I can simple:</div><div class=""><br class=""></div><div class=""><div class="">&nbsp;call MPI_TYPE_VECTOR(QQ(1:50), 9, 9, MPI_REAL, &nbsp;my_2D_type, ierr)</div></div><div class=""><br class=""></div><div class="">I send 50 element of QQ. I am in fortran so a two dimensional array is organized in a 1D array and a new row start after the 9 elements of a colum</div><div class=""><br class=""></div><div class="">The problem is a 3D array. I belive that I have to create a sort of<span class="Apple-converted-space">&nbsp;</span><i class="">vector of vectors.</i></div><div class="">More or less like:</div><div class=""><i class=""><br class=""></i></div><div class="">call MPI_TYPE_VECTOR(xxx, xxx, xxx, MPI_REAL, &nbsp;my_row, ierr)</div><div class=""><br class=""></div><div class="">&nbsp; &nbsp; &nbsp;and then<i class="">&nbsp;</i></div><div class=""><br class=""></div><div class="">call MPI_TYPE_VECTOR(xxx, xxx, xxx,&nbsp;<i class=""><b class="">my_row</b></i>, &nbsp;my_type, ierr).<i class=""><br class=""></i></div><div class=""><br class=""></div><div class="">You can note that in the second case I have &nbsp;<i class=""><b class="">my_row</b><span class="Apple-converted-space">&nbsp;</span></i>instead of mpi_real. &nbsp;</div><div class=""><br class=""></div><div class="">I found somethind about it in a tutorial but I am not able to find it again in google. I think that is not convinient the use of struct in this case, I have only real. Moreover, mpi_struct is think&nbsp;<span style="font-size: 12.8000001907349px;" class="">to emulate Fortran90 and C structures, as Gus' suggestion.</span></div><div class=""><span style="font-size: 12.8000001907349px;" class=""><br class=""></span></div><div class="">Let's me look to that tutorial</div><div class="">What do you think?</div><div class=""><br class=""></div><div class="">Thanks again</div><div class=""><i class=""><br class=""></i></div><div class=""><i class=""><br class=""></i></div><div class=""><br class=""></div><div class=""><br class=""></div><div class=""><br class=""></div></div><div class="gmail_extra"><br clear="all" class=""><div class=""><div class="">Diego<br class=""><br class=""></div></div><br class=""><div class="gmail_quote"><div class=""><div class="h5">On 16 January 2015 at 16:02, George Bosilca<span class="Apple-converted-space">&nbsp;</span><span dir="ltr" class="">&lt;<a href="mailto:bosilca@icl.utk.edu" target="_blank" class="">bosilca@icl.utk.edu</a>&gt;</span><span class="Apple-converted-space">&nbsp;</span>wrote:<br class=""></div></div><blockquote class="gmail_quote" style="margin: 0px 0px 0px 0.8ex; border-left-width: 1px; border-left-color: rgb(204, 204, 204); border-left-style: solid; padding-left: 1ex;"><div class=""><div class="h5"><div dir="ltr" class="">The operation you describe is a pack operation, agglomerating together in a contiguous buffer originally discontinuous elements. As a result there is no need to use the MPI_TYPE_VECTOR, but instead you can just use the type you created so far (MPI_my_STRUCT) with a count.<div class=""><br class=""></div><div class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>George.</div><div class=""><br class=""></div></div><div class="gmail_extra"><br class=""><div class="gmail_quote"><div class=""><div class="">On Fri, Jan 16, 2015 at 5:32 AM, Diego Avesani<span class="Apple-converted-space">&nbsp;</span><span dir="ltr" class="">&lt;<a href="mailto:diego.avesani@gmail.com" target="_blank" class="">diego.avesani@gmail.com</a>&gt;</span><span class="Apple-converted-space">&nbsp;</span>wrote:<br class=""></div></div><blockquote class="gmail_quote" style="margin: 0px 0px 0px 0.8ex; border-left-width: 1px; border-left-color: rgb(204, 204, 204); border-left-style: solid; padding-left: 1ex;"><div class=""><div class=""><div dir="ltr" class="">Dear All,&nbsp;<div class="">I'm sorry to insist, but I am not able to understand. Moreover, I have realized that I have to explain myself better.<br class=""></div><div class=""><br class=""></div><div class="">I try to explain in may program. Each CPU has<span class="Apple-converted-space">&nbsp;</span><i class="">npt</i><span class="Apple-converted-space">&nbsp;</span>particles. My program understand how many particles each CPU has to send, according to their positions. Then I can do:</div><div class=""><br class=""></div><div class=""><i class="">icount=1</i></div><div class=""><div class=""><i class="">&nbsp;DO i=1,npt</i></div><div class=""><i class="">&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>IF(i is a particle to send)THEN</i></div><div class=""><i class=""><br class=""></i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>DATASEND(icount)%ip &nbsp; &nbsp; = PART(ip)%ip</i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>DATASEND(icount)%mc &nbsp; &nbsp; = PART(ip)%mc</i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>DATASEND(icount)%RP &nbsp; &nbsp; = PART(ip)%RP</i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>DATASEND(icount)%QQ &nbsp; &nbsp; = PART(ip)%QQ</i></div><div class=""><i class=""><br class=""></i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>icount=icount+1</i></div><div class=""><i class="">&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>ENDIF</i></div><div class=""><i class="">&nbsp;ENDDO</i></div></div><div class=""><i class=""><br class=""></i></div><div class="">After that, I can send<i class="">&nbsp;</i><i class="">DATASEND</i></div><div class=""><br class=""></div><div class="">I<span class="Apple-converted-space">&nbsp;</span><i class="">DATASEND</i>&nbsp;is a &nbsp;&nbsp;<i class="">MPI_my_STRUCT.</i><span class="Apple-converted-space">&nbsp;</span>I can allocate it according to the&nbsp;number&nbsp;of particles that I have to send:</div><div class=""><br class=""></div><div class="">TYPE(tParticle) &nbsp;,ALLOCATABLE,DIMENSION(:) :: DATASEND,DATARECV<br class=""></div><div class=""><br class=""></div><div class="">This means that the number of particles which I have to send can change every time.</div><div class=""><br class=""></div><div class="">After that, I compute for each particles, somethins called QQmls(:,:,:).</div><div class="">QQmls has all real elements. Now I would like to to the same that I did with PART, but in this case:</div><div class=""><br class=""></div><div class=""><div class=""><i class="">icount=1</i></div><div class=""></div></div><div class=""><div class=""><i class="">DO i=1,npt</i></div><div class=""><i class="">&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>IF(i is a particle to send)THEN</i></div></div><div class=""><i class="">&nbsp; &nbsp;</i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp; &nbsp;</i><i class="">DATASEND_REAL(:,<b class="">icount</b>,:)=QQmls(:,<b class="">i</b>,:)</i></div><div class=""><i class="">&nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>icount=icount+1</i><i class=""><br class=""></i></div><div class=""><i class=""><br class=""></i></div><div class=""><i class="">&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span>ENDIF</i></div><div class=""><i class="">ENDDO</i></div><div class=""><br class=""></div><div class="">I would like to have a sort &nbsp;<i class="">MPI_my_TYPE to do that (like&nbsp;</i>&nbsp;&nbsp;<i class="">MPI_my_STRUCT</i><i class="">)<span class="Apple-converted-space">&nbsp;</span></i>and not to create every time&nbsp;<i class="">MPI_TYPE_VECTOR<span class="Apple-converted-space">&nbsp;</span></i>because<i class="">&nbsp;&nbsp;</i><i class="">DATASEND_REAL<span class="Apple-converted-space">&nbsp;</span></i>changes size every time.</div><div class=""><br class=""></div><div class="">I hope to make myself clear.</div><div class=""><br class=""></div><div class="">So is it correct to use&nbsp;<i class="">MPI_TYPE_VECTOR?,<span class="Apple-converted-space">&nbsp;</span></i>Can I do what I want?</div><div class=""><br class=""></div><div class="">In the meantime, I will study some examples.</div><div class=""><br class=""></div><div class="">Thanks again</div><div class=""><br class=""></div><div class="">&nbsp;</div><div class=""><br class=""></div><div class=""><br class=""></div></div><div class="gmail_extra"><br clear="all" class=""><div class=""><div class="">Diego<br class=""><br class=""></div></div><br class=""><div class="gmail_quote"><div class=""><div class="">On 16 January 2015 at 07:39, George Bosilca<span class="Apple-converted-space">&nbsp;</span><span dir="ltr" class="">&lt;<a href="mailto:bosilca@icl.utk.edu" target="_blank" class="">bosilca@icl.utk.edu</a>&gt;</span><span class="Apple-converted-space">&nbsp;</span>wrote:<br class=""></div></div><blockquote class="gmail_quote" style="margin: 0px 0px 0px 0.8ex; border-left-width: 1px; border-left-color: rgb(204, 204, 204); border-left-style: solid; padding-left: 1ex;"><div class=""><div class="">&nbsp;The subarray creation is an multi-dimension extension of the vector type. You can see it as a vector of vector of vector and so on, one vector per dimension. The stride array is used to declare on each dimension what is the relative displacement (in number of elements) from the beginning of the dimension array.<br class=""><br class="">It is important to use regular type creation when you can take advantage of such regularity instead of resorting to use of struct or h*. This insure better packing/unpacking performance, as well as possible future support for one-sided communications.<br class=""><br class="">George.<br class=""><div class=""><div class=""><br class=""><br class=""><br class="">&gt; On Jan 15, 2015, at 19:31, Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu" target="_blank" class="">gus@ldeo.columbia.edu</a>&gt; wrote:<br class="">&gt;<br class="">&gt; I never used MPI_Type_create_subarray, only MPI_Type_Vector.<br class="">&gt; What I like about MPI_Type_Vector is that you can define a stride,<br class="">&gt; hence you can address any regular pattern in memory.<br class="">&gt; However, it envisages the array layout in memory as a big 1-D array,<br class="">&gt; with a linear index progressing in either Fortran or C order.<br class="">&gt;<br class="">&gt; Somebody correct me please if I am wrong, but at first sight MPI_Type_Vector sounds more flexible to me than MPI_Type_create_subarray, exactly because the latter doesn't have strides.<br class="">&gt;<br class="">&gt; The downside is that you need to do some index arithmetic to figure<br class="">&gt; the right strides, etc, to match the corresponding<br class="">&gt; Fortran90 array sections.<br class="">&gt;<br class="">&gt; There are good examples in the "MPI - The complete reference" books I suggested to you before (actually in vol 1).<br class="">&gt;<br class="">&gt; Online I could find the two man pages (good information, but no example):<br class="">&gt;<br class="">&gt;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/doc/v1.8/man3/MPI_Type_vector.3.php" target="_blank" class="">http://www.open-mpi.org/doc/v1.8/man3/MPI_Type_vector.3.php</a><br class="">&gt;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/doc/v1.8/man3/MPI_Type_create_subarray.3.php" target="_blank" class="">http://www.open-mpi.org/doc/v1.8/man3/MPI_Type_create_subarray.3.php</a><br class="">&gt;<br class="">&gt; There is a very simple 2D example of MPI_Type_vector using strides here:<br class="">&gt;<br class="">&gt;<span class="Apple-converted-space">&nbsp;</span><a href="https://computing.llnl.gov/tutorials/mpi/#Derived_Data_Types" target="_blank" class="">https://computing.llnl.gov/tutorials/mpi/#Derived_Data_Types</a><br class="">&gt;<br class="">&gt; and a similar one here:<br class="">&gt;<br class="">&gt;<span class="Apple-converted-space">&nbsp;</span><a href="http://static.msi.umn.edu/tutorial/scicomp/general/MPI/content6.html" target="_blank" class="">http://static.msi.umn.edu/tutorial/scicomp/general/MPI/content6.html</a><br class="">&gt;<br class="">&gt; Gus Correa<br class="">&gt;<br class="">&gt;&gt; On 01/15/2015 06:53 PM, Diego Avesani wrote:<br class="">&gt;&gt; dear George, dear Gus, dear all,<br class="">&gt;&gt; Could you please tell me where I can find a good example?<br class="">&gt;&gt; I am sorry but I can not understand the 3D array.<br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt; Really Thanks<br class="">&gt;&gt;<br class="">&gt;&gt; Diego<br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt; On 15 January 2015 at 20:13, George Bosilca &lt;<a href="mailto:bosilca@icl.utk.edu" target="_blank" class="">bosilca@icl.utk.edu</a><br class="">&gt;&gt; &lt;mailto:<a href="mailto:bosilca@icl.utk.edu" target="_blank" class="">bosilca@icl.utk.edu</a>&gt;&gt; wrote:<br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; On Jan 15, 2015, at 06:02 , Diego Avesani &lt;<a href="mailto:diego.avesani@gmail.com" target="_blank" class="">diego.avesani@gmail.com</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &lt;mailto:<a href="mailto:diego.avesani@gmail.com" target="_blank" class="">diego.avesani@gmail.com</a>&gt;&gt; wrote:<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Dear Gus, Dear all,<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Thanks a lot.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; MPI_Type_Struct works well for the first part of my problem, so I<br class="">&gt;&gt;&gt;&nbsp; &nbsp; am very happy to be able to use it.<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Regarding MPI_TYPE_VECTOR.<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; I have studied it and for simple case it is clear to me what id<br class="">&gt;&gt;&gt;&nbsp; &nbsp; does (at least I believe). Foe example if I have a matrix define as:<br class="">&gt;&gt;&gt;&nbsp; &nbsp; REAL, ALLOCATABLE (AA(:,:))<br class="">&gt;&gt;&gt;&nbsp; &nbsp; ALLOCATE AA(100,5)<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; I could send part of it defining<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; CALL MPI_TYPE_VECTOR(5,1,5,MPI_DOUBLE_PRECISION,/MY_NEW_TYPE/)<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; after that I can send part of it with<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; CALL MPI_SEND( AA(1:/10/,:), /10/, /MY_NEW_TYPE/, 1, 0,<br class="">&gt;&gt;&gt;&nbsp; &nbsp; MPI_COMM_WORLD );<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Have I understood correctly?<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; What I can do in case of three dimensional array? for example<br class="">&gt;&gt;&gt;&nbsp; &nbsp; AA(:,:,:), I am looking to MPI_TYPE_CREATE_SUBARRAY.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Is that the correct way?<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Thanks again<br class="">&gt;&gt;<br class="">&gt;&gt;&nbsp; &nbsp; Indeed, using the subarray is the right approach independent on the<br class="">&gt;&gt;&nbsp; &nbsp; number of dimensions of the data (you can use it instead of<br class="">&gt;&gt;&nbsp; &nbsp; MPI_TYPE_VECTOR as well).<br class="">&gt;&gt;<br class="">&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;George.<br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Diego<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; On 13 January 2015 at 19:04, Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu" target="_blank" class="">gus@ldeo.columbia.edu</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &lt;mailto:<a href="mailto:gus@ldeo.columbia.edu" target="_blank" class="">gus@ldeo.columbia.edu</a>&gt;&gt; wrote:<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; Hi Diego<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; I guess MPI_Type_Vector is the natural way to send and receive<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; Fortran90 array sections (e.g. your QQMLS(:,50:100,:)).<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; I used that before and it works just fine.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; I think that is pretty standard MPI programming style.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; I guess MPI_Type_Struct tries to emulate Fortran90 and C<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; structures<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; (as you did in your previous code, with all the surprises<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; regarding alignment, etc), not array sections.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; Also, MPI type vector should be more easy going (and probably<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; more efficient) than MPI type struct, with less memory<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; alignment problems.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; I hope this helps,<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; Gus Correa<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; PS - These books have a quite complete description and several<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; examples<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; of all MPI objects and functions, including MPI types (native<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; and user defined):<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://mitpress.mit.edu/books/__mpi-complete-reference-0" target="_blank" class="">http://mitpress.mit.edu/books/__mpi-complete-reference-0</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &lt;<a href="http://mitpress.mit.edu/books/mpi-complete-reference-0" target="_blank" class="">http://mitpress.mit.edu/books/mpi-complete-reference-0</a>&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://mitpress.mit.edu/books/__mpi-complete-reference-1" target="_blank" class="">http://mitpress.mit.edu/books/__mpi-complete-reference-1</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &lt;<a href="http://mitpress.mit.edu/books/mpi-complete-reference-1" target="_blank" class="">http://mitpress.mit.edu/books/mpi-complete-reference-1</a>&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; [They cover MPI 1 and 2. I guess there is a new/upcoming book<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; with MPI 3, but for what you're doing 1 and 2 are more than<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; enough.]<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; On 01/13/2015 09:22 AM, Diego Avesani wrote:<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Dear all,<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I had some wonderful talking about MPI_type_create_struct adn<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; isend\irecv with<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Gilles, Gustavo, George, Gus, Tom and Jeff. Now all is<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; more clear and my<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; program works.<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Now I have another question. In may program I have matrix:<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /QQMLS(:,:,:) /that is allocate as<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /ALLOCATE(QQMLS(9,npt,18)/), where npt is the number of<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; particles<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; QQMLS is double precision.<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I would like to sent form a CPU to another part of it, for<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; example,<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sending QQMLS(:,50:100,:). I mean sending the QQMLS of the<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; particles<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; between 50 to 100.<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I suppose that i could use MPI_Type_vector but I am not<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sure. The<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; particle that I want to sent could be from 25 to 50 ecc..<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ecc..so<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; blocklength changes everytime.<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Do I have to use MPI_type_create_struct?<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Do I have correctly understood MPI_Type_vector?<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Thanks a lot<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Diego<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _________________________________________________<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; users mailing list<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><span class="Apple-converted-space">&nbsp;</span>&lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a>&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subscription:<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/__mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/__mailman/listinfo.cgi/users</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a>&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Link to this post:<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/__community/lists/users/2015/01/__26171.php" target="_blank" class="">http://www.open-mpi.org/__community/lists/users/2015/01/__26171.php</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;<a href="http://www.open-mpi.org/community/lists/users/2015/01/26171.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26171.php</a>&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; _________________________________________________<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; users mailing list<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><span class="Apple-converted-space">&nbsp;</span>&lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a>&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; Subscription:<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/__mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/__mailman/listinfo.cgi/users</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &lt;<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a>&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; Link to this post:<br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/__community/lists/users/2015/01/__26172.php" target="_blank" class="">http://www.open-mpi.org/__community/lists/users/2015/01/__26172.php</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &lt;<a href="http://www.open-mpi.org/community/lists/users/2015/01/26172.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26172.php</a>&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; _______________________________________________<br class="">&gt;&gt;&gt;&nbsp; &nbsp; users mailing list<br class="">&gt;&gt;&gt;&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><span class="Apple-converted-space">&nbsp;</span>&lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a>&gt;<br class="">&gt;&gt;&gt;&nbsp; &nbsp; Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class="">&gt;&gt;&gt;&nbsp; &nbsp; Link to this post:<br class="">&gt;&gt;&gt;&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26184.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26184.php</a><br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt;&nbsp; &nbsp; _______________________________________________<br class="">&gt;&gt;&nbsp; &nbsp; users mailing list<br class="">&gt;&gt;&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><span class="Apple-converted-space">&nbsp;</span>&lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a>&gt;<br class="">&gt;&gt;&nbsp; &nbsp; Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class="">&gt;&gt;&nbsp; &nbsp; Link to this post:<br class="">&gt;&gt;&nbsp; &nbsp;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26192.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26192.php</a><br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt;<br class="">&gt;&gt; _______________________________________________<br class="">&gt;&gt; users mailing list<br class="">&gt;&gt;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><br class="">&gt;&gt; Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class="">&gt;&gt; Link to this post:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26193.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26193.php</a><br class="">&gt;<br class="">&gt; _______________________________________________<br class="">&gt; users mailing list<br class="">&gt;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><br class="">&gt; Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class="">&gt; Link to this post:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26194.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26194.php</a><br class="">_______________________________________________<br class="">users mailing list<br class=""><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><br class="">Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class=""></div></div></div></div>Link to this post:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26195.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26195.php</a><br class=""></blockquote></div><br class=""></div><br class="">_______________________________________________<br class="">users mailing list<br class=""><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><br class="">Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class=""></div></div>Link to this post:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26197.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26197.php</a><br class=""></blockquote></div><br class=""></div><br class="">_______________________________________________<br class="">users mailing list<br class=""><a href="mailto:users@open-mpi.org" target="_blank" class="">users@open-mpi.org</a><br class="">Subscription:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br class=""></div></div>Link to this post:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26199.php" target="_blank" class="">http://www.open-mpi.org/community/lists/users/2015/01/26199.php</a><br class=""></blockquote></div><br class=""></div></blockquote></div><br class=""></div><span style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">_______________________________________________</span><br style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">users mailing list</span><br style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class=""><a href="mailto:users@open-mpi.org" class="">users@open-mpi.org</a></span><br style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a></span><br style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">Link to this post:<span class="Apple-converted-space">&nbsp;</span></span><a href="http://www.open-mpi.org/community/lists/users/2015/01/26201.php" style="font-family: CourierNewPSMT; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class="">http://www.open-mpi.org/community/lists/users/2015/01/26201.php</a></div></blockquote></div><br class=""></div></body></html>

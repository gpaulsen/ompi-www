i did not use the term &quot;pure&quot; properly.<div><br></div><div>please read instead &quot;posix_memalign is a function that does not modify any user variable&quot;</div><div>that assumption is correct when there is no wrapper, and incorrect in our case.<br><br>On Saturday, June 6, 2015, George Bosilca &lt;<a href="mailto:bosilca@icl.utk.edu">bosilca@icl.utk.edu</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Based on the definition of a pure function, two calls to the same pure function with the same arguments should return the same value. This is obviously never true for posix_memalign.<br>
<br>
I suggest we take a look at the generated code, and based on that we decide how to move forward on this.<br>
<br>
  George.<br>
<br>
<br>
&gt; On Jun 4, 2015, at 22:47 , Gilles Gouaillardet &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;gilles@rist.or.jp&#39;)">gilles@rist.or.jp</a>&gt; wrote:<br>
&gt;<br>
&gt; Jeff,<br>
&gt;<br>
&gt; imho, this is a grey area ...<br>
&gt;<br>
&gt; 99.999% of the time, posix_memalign is a &quot;pure&quot; function.<br>
&gt; &quot;pure&quot; means it has no side effects.<br>
&gt;<br>
&gt; unfortunatly, this part of the code is the 0.001% case in which we explicitly rely on a side effect<br>
&gt; (e.g. posix_memalign calls an Open MPI wrapper that updates a global variable)<br>
&gt;<br>
&gt; i am not surprised (nor shocked) the compiler assumes posix_memalign is side effect free when (aggressive) optimisation is on, since it is a valid asumption most of the time.<br>
&gt;<br>
&gt; Of course, the is a chance that might be a bug<br>
&gt; (e.g. GCC folks forgot a wrapper can be added to posix_memalign, so it is not 100% safe to assume posix_memalign is side effect free)<br>
&gt; but as far as i am concerned, using &quot;volatile&quot; is correct.<br>
&gt;<br>
&gt; Cheers,<br>
&gt;<br>
&gt; Gilles<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; On 6/5/2015 10:26 AM, Jeff Squyres (jsquyres) wrote:<br>
&gt;&gt; On Jun 4, 2015, at 5:48 AM, René Oertel &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;rene.oertel@cs.tu-chemnitz.de&#39;)">rene.oertel@cs.tu-chemnitz.de</a>&gt; wrote:<br>
&gt;&gt;&gt; Problem description:<br>
&gt;&gt;&gt; ===================<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; The critical code in question is in<br>
&gt;&gt;&gt; opal/mca/memory/linux/memory_linux_ptmalloc2.c:<br>
&gt;&gt;&gt; #####<br>
&gt;&gt;&gt; 92 #if HAVE_POSIX_MEMALIGN<br>
&gt;&gt;&gt; 93     /* Double check for posix_memalign, too */<br>
&gt;&gt;&gt; 94     if (mca_memory_linux_component.memalign_invoked) {<br>
&gt;&gt;&gt; 95         mca_memory_linux_component.memalign_invoked = false;<br>
&gt;&gt;&gt; 96         if (0 != posix_memalign(&amp;p, sizeof(void*), 1024 * 1024)) {<br>
&gt;&gt;&gt; 97             return OPAL_ERR_IN_ERRNO;<br>
&gt;&gt;&gt; 98         }<br>
&gt;&gt;&gt; 99         free(p);<br>
&gt;&gt;&gt; 100     }<br>
&gt;&gt;&gt; 101 #endif<br>
&gt;&gt;&gt; 102<br>
&gt;&gt;&gt; 103     if (mca_memory_linux_component.malloc_invoked &amp;&amp;<br>
&gt;&gt;&gt; 104         mca_memory_linux_component.realloc_invoked &amp;&amp;<br>
&gt;&gt;&gt; 105         mca_memory_linux_component.memalign_invoked &amp;&amp;<br>
&gt;&gt;&gt; 106         mca_memory_linux_component.free_invoked) {<br>
&gt;&gt;&gt; 107         /* Happiness; our functions were invoked */<br>
&gt;&gt;&gt; 108         val |= OPAL_MEMORY_FREE_SUPPORT | OPAL_MEMORY_CHUNK_SUPPORT;<br>
&gt;&gt;&gt; 109     }<br>
&gt;&gt;&gt; [...]<br>
&gt;&gt;&gt; 121     /* All done */<br>
&gt;&gt;&gt; 122     if (val &gt; 0) {<br>
&gt;&gt;&gt; 123         opal_mem_hooks_set_support(val);<br>
&gt;&gt;&gt; 124         return OPAL_SUCCESS;<br>
&gt;&gt;&gt; 125     }<br>
&gt;&gt;&gt; #####<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; The code at lines 103-109 is legally optimized away with &gt;=GCC-4.9 and<br>
&gt;&gt;&gt; optimizations turned on,<br>
&gt;&gt; I&#39;m not sure what you mean by &quot;legally optimized away&quot; -- shouldn&#39;t gcc know that the call to posix_memalign() can change global variables (such as mca_memory_linux_component.&lt;foo&gt;)?<br>
&gt;&gt;<br>
&gt;&gt;&gt; because line 105 could never become true with<br>
&gt;&gt;&gt; the local knowledge of the compiler/optimizer.<br>
&gt;&gt; My compiler knowledge may be a bit rusty, but if this optimization is being made solely with local knowledge, this sounds like a buggy optimization...?<br>
&gt;&gt;<br>
&gt;&gt;&gt; If mca_memory_linux_component.memalign_invoked == true at line 92, it<br>
&gt;&gt;&gt; would be set to false at line 95.<br>
&gt;&gt; ...but potentially set to true again in the body of posix_memalign().  ...which you describe below.<br>
&gt;&gt;<br>
&gt;&gt;&gt; If mca_memory_linux_component.memalign_invoked == false at line 92, it<br>
&gt;&gt;&gt; would be false at line 103, too.<br>
&gt;&gt;&gt; In both cases, the if at line 103-106 could never be evaluated to true<br>
&gt;&gt;&gt; and opal_mem_hooks_set_support is never called with<br>
&gt;&gt;&gt; OPAL_MEMORY_FREE_SUPPORT | OPAL_MEMORY_CHUNK_SUPPORT resulting in<br>
&gt;&gt;&gt; (silently) disabled mpi_leaved_pinned.<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; In the global view this local assumption is not true, because<br>
&gt;&gt;&gt; posix_memalign() in line 96 will call the hook public_mEMALIGn() in<br>
&gt;&gt;&gt; opal/mca/memory/linux/malloc.c which in turn sets<br>
&gt;&gt;&gt; mca_memory_linux_component.memalign_invoked = true.<br>
&gt;&gt;&gt; As a result, the OPAL_MEMORY_*_SUPPORT would get configured correctly in<br>
&gt;&gt;&gt; line 123 and so the opal_mem_hooks_support_level() used by<br>
&gt;&gt;&gt; ompi/mca/btl/openib/btl_openib_component.c and indirectly by the<br>
&gt;&gt;&gt; ompi/mca/mpool/grdma/mpool_grdma* module enables the usage of pinned memory.<br>
&gt;&gt; How can a compiler not take the global view?  Taking a local-only view is unsafe -- for exactly these kinds of reasons.<br>
&gt;&gt;<br>
&gt;&gt;&gt; The optimization could be disabled by adding -fno-tree-partial-pre to<br>
&gt;&gt;&gt; the CFLAGS in opal/mca/memory/linux/Makefile, but this is only a<br>
&gt;&gt;&gt; temporary workaround.<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Patch:<br>
&gt;&gt;&gt; =====<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; The proposed patch is as follows, which alters the point-of-view of the<br>
&gt;&gt;&gt; compiler&#39;s optimizer on the *_invoked variables used by different code<br>
&gt;&gt;&gt; paths (memory_linux_ptmalloc2.c vs. malloc.c):<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; #####<br>
&gt;&gt;&gt; diff -rupN <a href="http://openmpi-1.8.5.org/opal/mca/memory/linux/memory_linux.h" target="_blank">openmpi-1.8.5.org/opal/mca/memory/linux/memory_linux.h</a><br>
&gt;&gt;&gt; openmpi-1.8.5/opal/mca/memory/linux/memory_linux.h<br>
&gt;&gt;&gt; --- <a href="http://openmpi-1.8.5.org/opal/mca/memory/linux/memory_linux.h" target="_blank">openmpi-1.8.5.org/opal/mca/memory/linux/memory_linux.h</a><br>
&gt;&gt;&gt; 2014-10-03 22:32:23.000000000 +0200<br>
&gt;&gt;&gt; +++ openmpi-1.8.5/opal/mca/memory/linux/memory_linux.h  2015-06-04<br>
&gt;&gt;&gt; 10:01:44.941544282 +0200<br>
&gt;&gt;&gt; @@ -33,11 +33,11 @@ typedef struct opal_memory_linux_compone<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; #if MEMORY_LINUX_PTMALLOC2<br>
&gt;&gt;&gt;     /* Ptmalloc2-specific data */<br>
&gt;&gt;&gt; -    bool free_invoked;<br>
&gt;&gt;&gt; -    bool malloc_invoked;<br>
&gt;&gt;&gt; -    bool realloc_invoked;<br>
&gt;&gt;&gt; -    bool memalign_invoked;<br>
&gt;&gt;&gt; -    bool munmap_invoked;<br>
&gt;&gt;&gt; +    volatile bool free_invoked;<br>
&gt;&gt;&gt; +    volatile bool malloc_invoked;<br>
&gt;&gt;&gt; +    volatile bool realloc_invoked;<br>
&gt;&gt;&gt; +    volatile bool memalign_invoked;<br>
&gt;&gt;&gt; +    volatile bool munmap_invoked;<br>
&gt;&gt;&gt; #endif<br>
&gt;&gt;&gt; } opal_memory_linux_component_t;<br>
&gt;&gt; I don&#39;t really want to apply this patch (thanks for filing the PR, BTW) without understanding why the compiler is not automatically taking the global view.  It seems unsafe.<br>
&gt;&gt;<br>
&gt;&gt;&gt; #####<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; Additionally, a further patch should be applied generating a warning in<br>
&gt;&gt;&gt; the GPUDirect module if leave_pinned is not available for some reason.<br>
&gt;&gt;&gt; In this case, GPUDirect support should be disabled, because it runs<br>
&gt;&gt;&gt; faster without (see Case 2 below).<br>
&gt;&gt; I&#39;ll let Rolf / NVIDIA comment on the GPU implications.<br>
&gt;&gt;<br>
&gt;&gt; [snip]<br>
&gt;&gt;<br>
&gt;&gt;&gt; Best regards,<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; René &quot;oere&quot; Oertel<br>
&gt;&gt; Many thanks for the detailed report!<br>
&gt;&gt;<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;users@open-mpi.org&#39;)">users@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/06/27042.php" target="_blank">http://www.open-mpi.org/community/lists/users/2015/06/27042.php</a><br>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;users@open-mpi.org&#39;)">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/06/27043.php" target="_blank">http://www.open-mpi.org/community/lists/users/2015/06/27043.php</a></blockquote></div>


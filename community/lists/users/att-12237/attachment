<html><body>
<p>A call to MPI_Init allows the MPI library to return any level of thread support it chooses. This MPI 1.1 call does not let the application say what it wants and does not let the implementation reply with what it can guarantee.<br>
<br>
If you are using only one MPI implementation and your code will never be run on another implementation you can check the user doc for that MPI implementation and see if says that you can do what you want to do.  If your application is single threaded you can use MPI_Init and be portable.<br>
<br>
If your application has threads, you should use MPI_Init_thread and check the response to be portable or to make sure you get thread safety from an MPI implementation that has both a thread safe and a thread unsafe mode.  A thread unsafe mode can skip some locking and maybe give better performance.  <br>
<br>
The MPI standard wanted to allow for the possibility that some implementation of MPI would not be able to tolerate threads in the application at all so SINGLE was one answer that could be returned.  For what you want to do, you need a library that can return FUNNELED or better. If you ask for FUNNELED and the MPI implementation you are using returns SINGLE it is telling you that using OpenMP threads is not allowed. It does not say why.  It may work fine but the implementation is telling you not to do it and you cannot know if there are good reasons.<br>
<br>
Consider a made up example:<br>
<br>
Imagine some system supports Mutex lock/unlock but with terrible performance. As a work around, it offers a non-standard substitute for malloc called st_malloc (single thread malloc) that does not do locking. Normal malloc is also available and it does use locking.  The documentation for this system says that it is safe to use both st_malloc and malloc in a single threaded application because the only difference is that st_malloc skips the locking. It  also warns that if one thread calls st_malloc while another calls malloc, heap corruption is likely.<br>
<br>
Next imagine that the MPI implementation uses st_malloc to provide best performance and the OpenMP threads use malloc.  When this particular MPI implementation returns SINGLE, it really means SINGLE. If there is only one application thread using regular malloc it is safe but if there is a malloc call on one thread while the main thread is in an MPI call, heap corruption is likely.<br>
<br>
<br>
<br>
<br>
Dick Treumann  -  MPI Team           <br>
IBM Systems &amp; Technology Group<br>
Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<img width="16" height="16" src="cid:1__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt="Inactive hide details for Yuanyuan ZHANG ---03/03/2010 07:34:07 PM---Hi guys, Thanks for your help, but unfortunately I am stil"><font color="#424282">Yuanyuan ZHANG ---03/03/2010 07:34:07 PM---Hi guys, Thanks for your help, but unfortunately I am still not clear.</font><br>
<br>

<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr valign="top"><td width="1%"><img width="96" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2" color="#5F5F5F">From:</font></td><td width="100%"><img width="1" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2">Yuanyuan ZHANG &lt;zhang.yuanyuan@jp.fujitsu.com&gt;</font></td></tr>

<tr valign="top"><td width="1%"><img width="96" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2" color="#5F5F5F">To:</font></td><td width="100%"><img width="1" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2">Open MPI Users &lt;users@open-mpi.org&gt;</font></td></tr>

<tr valign="top"><td width="1%"><img width="96" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2" color="#5F5F5F">Date:</font></td><td width="100%"><img width="1" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2">03/03/2010 07:34 PM</font></td></tr>

<tr valign="top"><td width="1%"><img width="96" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2" color="#5F5F5F">Subject:</font></td><td width="100%"><img width="1" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2">Re: [OMPI users] MPI_Init() and MPI_Init_thread()</font></td></tr>

<tr valign="top"><td width="1%"><img width="96" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2" color="#5F5F5F">Sent by:</font></td><td width="100%"><img width="1" height="1" src="cid:2__=0ABBFC4FDFD6404B8f9e8a93df938@us.ibm.com" border="0" alt=""><br>
<font size="2">users-bounces@open-mpi.org</font></td></tr>
</table>
<hr width="100%" size="2" align="left" noshade style="color:#8091A5; "><br>
<br>
<br>
<tt>Hi guys,<br>
<br>
Thanks for your help, but unfortunately I am still not clear.<br>
<br>
&gt; You are right Dave, FUNNELED allows the application to have multiple<br>
&gt; threads but only the man thread calls MPI.<br>
My understanding is that even if I use SINGLE or MPI_Init, I can still<br>
have multiple threads if I use OpenMP PARALLEL directive, and only<br>
the main thread makes MPI calls. Am I correct?<br>
<br>
&gt; An OpenMP/MPI hybrid program that makes MPI calls only in between parallel<br>
&gt; sections is usually a FUNNELED user of MPI<br>
For an OpenMP/MPI hybrid program, if I only want to make MPI calls using<br>
the main thread, ie., only in between parallel sections, can I just use<br>
SINGLE or MPI_Init? What's the benefit of FUNNELED?<br>
<br>
Thanks.<br>
<br>
<br>
_______________________________________________<br>
users mailing list<br>
users@open-mpi.org<br>
</tt><tt><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a></tt><tt><br>
</tt><br>
<br>
</body></html>


<html><head><meta http-equiv="Content-Type" content="text/html charset=utf-8"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" class="">One thing you might want to keep in mind is that “non-blocking” doesn’t mean “asynchronous progress”. The API may not block, but the communications only progress whenever you actually call down into the library.<div class=""><br class=""></div><div class="">So if you are calling a non-blocking collective, and then make additional calls into MPI only rarely, you should expect to see slower performance.</div><div class=""><br class=""></div><div class="">We are working on providing async progress on all operations, but I don’t believe much (if any) of it is in the release branches so far.</div><div class=""><br class=""></div><div class=""><br class=""><div><blockquote type="cite" class=""><div class="">On Nov 27, 2015, at 11:37 AM, Felipe . &lt;<a href="mailto:philip.fm@gmail.com" class="">philip.fm@gmail.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><div class=""><div dir="ltr" style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class="">&gt;Try and do a variable amount of work for every process, I see non-blocking<span class="Apple-converted-space">&nbsp;</span><br class="">&gt;as a way to speed-up communication if they arrive individually to the call.<span class="Apple-converted-space">&nbsp;</span><br class="">&gt;Please always have this at the back of your mind when doing this.<div class="gmail_extra"><br class=""></div><div class="gmail_extra">I tried to simplify the problem at the explanation. The "local_computation" is variable among different processes, so there is load imbalance in the real problem.<br class=""></div><div class="gmail_extra">The microbenchmark was just a way to test the overhead, which was really much greater than expectations.<br class=""><br class="">&gt;Surely non-blocking has overhead, and if the communication time is low, so<span class="Apple-converted-space">&nbsp;</span><br class="">&gt;will the overhead be much higher.<span class="Apple-converted-space">&nbsp;</span><br class=""><br class=""></div><div class="gmail_extra">Off course there is. But for my case, which is a real HPC application for seismic data processing, it was prohibitive and strangely high.<br class=""></div><div class="gmail_extra"><br class="">&gt;You haven't specified what nx*ny*nz is, and hence your "slower" and<span class="Apple-converted-space">&nbsp;</span><br class="">&gt;"faster" makes "no sense"... And hence your questions are difficult to<span class="Apple-converted-space">&nbsp;</span><br class="">&gt;answer, basically "it depends".<span class="Apple-converted-space">&nbsp;</span><br class=""><br class=""></div><div class="gmail_extra">On my tests, I used nx = 700, ny = 200,&nbsp; nz = 60, total_iter = 1000. val is a real(4) array. This is basically the same sizeas the real application.<br class=""></div><div class="gmail_extra">Since I used the same values for all tests, it is reasonable to analyze the results.<span class="Apple-converted-space">&nbsp;</span><br class="">What I meant with question 1 was: overheads so high are expected?<br class=""><br class=""></div><div class="gmail_extra">The microbenchmark is attached to this e-mail.<br class=""></div><div class="gmail_extra"><br class=""></div><div class="gmail_extra">The detailed result was (using 11 nodes):<br class=""><font face="Default Sans Serif,Verdana,Arial,Helvetica,sans-serif" size="2" class=""><span class=""><br class="">openmpi blocking:<br class=""></span><font face="Default Monospace,Courier New,Courier,monospace" class="">&nbsp;==================================<br class="">&nbsp;[RESULT] Reduce time =&nbsp; 21.790411<br class="">&nbsp;[RESULT] Total&nbsp; time =&nbsp; 24.977373<br class="">&nbsp;==================================</font><br class=""><br class=""><span class=""><span class="">openmpi non-blocking:<br class=""><font face="Default Monospace,Courier New,Courier,monospace" class="">&nbsp;==================================<br class="">&nbsp;[RESULT] Reduce time =&nbsp; 97.332792<br class="">&nbsp;[RESULT] Total&nbsp; time = 100.470874<br class="">&nbsp;==================================</font><br class=""><br class="">Intel MPI + blocking:<br class=""><font face="Default Monospace,Courier New,Courier,monospace" class="">&nbsp;==================================<br class="">&nbsp;[RESULT] Reduce time =&nbsp; 17.587828<br class="">&nbsp;[RESULT] Total&nbsp; time =&nbsp; 20.655875<br class="">&nbsp;==================================</font><br class=""><br class=""><br class="">Intel MPI + non-blocking:<br class="">&nbsp;<font face="Default Monospace,Courier New,Courier,monospace" class="">==================================<br class="">&nbsp;[RESULT] Reduce time =&nbsp; 49.483195<br class="">&nbsp;[RESULT] Total&nbsp; time =&nbsp; 52.642514<br class="">&nbsp;==================================</font></span></span></font><br class=""></div><div class="gmail_extra"><br class=""></div><div class="gmail_extra">Thanks in advance.<br class=""></div><div class="gmail_extra"><br class=""><div class="gmail_quote">2015-11-27 14:57 GMT-02:00 Felipe .<span class="Apple-converted-space">&nbsp;</span><span dir="ltr" class="">&lt;<a href="mailto:philip.fm@gmail.com" target="_blank" class="">philip.fm@gmail.com</a>&gt;</span>:<br class=""><blockquote class="gmail_quote" style="margin: 0px 0px 0px 0.8ex; border-left-width: 1px; border-left-style: solid; border-left-color: rgb(204, 204, 204); padding-left: 1ex;"><div dir="ltr" class=""><div class=""><span style="font-family: monospace, monospace;" class="">Hello!<br class=""><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">I have a program that basically is (first implementation):<br class=""><span style="color: rgb(0, 0, 255);" class="">for i in N:<br class=""></span></span></div><div class=""><span style="color: rgb(0, 0, 255);" class=""><span style="font-family: monospace, monospace;" class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>local_computation(i)<br class=""></span></span></div><div class=""><span style="font-family: monospace, monospace;" class=""><span style="color: rgb(0, 0, 255);" class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>mpi_allreduce(in_place, i)<br class=""></span><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">In order to try to mitigate the implicit barrier of the mpi_allreduce, I tried to start an mpi_Iallreduce. Like this(second implementation):<br class=""><span style="color: rgb(0, 0, 255);" class=""><font size="2" class="">for i in N:<br class=""></font></span></span><div class=""><span style="color: rgb(0, 0, 255);" class=""><span style="font-family: monospace, monospace;" class=""><font size="2" class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>local_computation(i)<br class=""></font></span></span></div><div class=""><span style="color: rgb(0, 0, 255);" class=""><span style="font-family: monospace, monospace;" class=""><font size="2" class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>j = i<br class=""></font></span></span></div><div class=""><span style="color: rgb(0, 0, 255);" class=""><span style="font-family: monospace, monospace;" class=""><font size="2" class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>if i is not first:<br class=""></font></span></span></div><div class=""><span style="color: rgb(0, 0, 255);" class=""><span style="font-family: monospace, monospace;" class=""><font size="2" class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>mpi_wait(request)<br class=""></font></span></span></div><span style="font-family: monospace, monospace;" class=""><span style="color: rgb(0, 0, 255);" class=""><font size="2" class="">&nbsp;<span class="Apple-converted-space">&nbsp;</span>mpi_Iallreduce(in_place, j, request)</font></span><br class=""><br class="">The result was that the second was a lot worse. The processes spent 3 times more time on the mpi_wait than on the mpi_allreduce from the first implementation. I know it could be worst, but not that much.<br class=""><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">So, I made a microbenchmark to stress this, in Fortran. Here is the implementation:<br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">Blocking:<br class=""><span style="color: rgb(0, 0, 255);" class="">do i = 1, total_iter ! [<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>t_0 = mpi_wtime()<br class=""><br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>call mpi_allreduce(MPI_IN_PLACE, val, nx*ny*nz, MPI_REAL, MPI_SUM, MPI_COMM_WORLD, ierror)<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>if (ierror .ne. 0) then ! [<br class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>write(*,*) "Error in line ", __LINE__, " rank = ", rank<br class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>call mpi_abort(MPI_COMM_WORLD, ierror, ierror2)<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>end if ! ]<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>t_reduce = t_reduce + (mpi_wtime() - t_0)<br class="">end do ! ]</span><br class=""><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">Non-Blocking:<br class=""><span style="color: rgb(0, 0, 255);" class="">do i = 1, total_iter ! [<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>t_0 = mpi_wtime()<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>call mpi_iallreduce(MPI_IN_PLACE, val, nx*ny*nz, MPI_REAL, MPI_SUM, MPI_COMM_WORLD, request, ierror)<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>if (ierror .ne. 0) then ! [<br class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>write(*,*) "Error in line ", __LINE__, " rank = ", rank<br class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>call mpi_abort(MPI_COMM_WORLD, ierror, ierror2)<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>end if ! ]<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>t_reduce = t_reduce + (mpi_wtime() - t_0)<br class=""><br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>t_0 = mpi_wtime()<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>call mpi_wait(request, status, ierror)<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>if (ierror .ne. 0) then ! [<br class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>write(*,*) "Error in line ", __LINE__, " rank = ", rank<br class="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>call mpi_abort(MPI_COMM_WORLD, ierror, ierror2)<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>end if ! ]<br class="">&nbsp;&nbsp;&nbsp;<span class="Apple-converted-space">&nbsp;</span>t_reduce = t_reduce + (mpi_wtime() - t_0)<br class=""><br class="">end do ! ]</span><br class=""><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">The non-blocking was about five times slower. I tried Intel's MPI and it was of 3 times, instead of 5.<br class=""><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class=""><span style="font-family: monospace, monospace;" class="">Question 1: Do you think that all this overhead makes sense?</span><br class=""><br class="">Question 2: Why is there so much overhead for non-blocking collective calls?<br class=""></span><br class=""><span style="font-family: monospace, monospace;" class=""><span style="font-family: monospace, monospace;" class="">Question 3: Can I change the algorithm for the non-blocking allReduce to improve this?</span><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class=""><br class=""><br class=""></span></div><div class=""><span style="font-family: monospace, monospace;" class="">Best regards,<br class="">--<br class=""></span></div><span style="font-family: monospace, monospace;" class="">Felipe<br class=""></span></div></blockquote></div><br class=""></div></div><span id="cid:8C3EB6D4-4386-41D1-86F8-B5020C842BAA">&lt;Teste_AllReduce.F90&gt;</span><span style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">_______________________________________________</span><br style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">users mailing list</span><br style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><a href="mailto:users@open-mpi.org" style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class="">users@open-mpi.org</a><br style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">Subscription:<span class="Apple-converted-space">&nbsp;</span></span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class="">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""><span style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; display: inline !important;" class="">Link to this post:<span class="Apple-converted-space">&nbsp;</span></span><a href="http://www.open-mpi.org/community/lists/users/2015/11/28119.php" style="font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class="">http://www.open-mpi.org/community/lists/users/2015/11/28119.php</a></div></blockquote></div><br class=""></div></body></html>

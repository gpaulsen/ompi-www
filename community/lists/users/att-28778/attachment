<div dir="ltr">Call MPI from C code, where you will have all the preprocessor support you need.  Wrap that C code with Fortran 2003 ISO_C_BINDING.  If you don&#39;t have neighborhood collectives from MPI-3, you can implement them using MPI-1 yourself in the interface between your Fortran code and MPI C bindings.  This will ensure you don&#39;t need Fortran preprocessing.<div><br></div><div>I end up doing this (except for the Fortran part) with MPI RMA code.  For example, I have a wrapper for MPI_Win_allocate, which drops into MPI_Alloc_mem+MPI_Win_create when only MPI-2 is available.<br><div><br></div><div>Jeff</div></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Mon, Mar 21, 2016 at 10:27 AM, Brian Dobbins <span dir="ltr">&lt;<a href="mailto:bdobbins@gmail.com" target="_blank">bdobbins@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><br><div>Hi everyone,</div><div><br></div><div>  This isn&#39;t really a problem, per se, but rather a search for a more elegant solution.  It also isn&#39;t specific to OpenMPI, but I figure the experience and knowledge of people here made it a suitable place to ask:</div><div><br></div><div>  I&#39;m working on some code that&#39;ll be used and downloaded by others on multiple systems, and this code is using some MPI3 features (neighborhood collectives), but not everyone has the latest MPI libraries, many people will be running the code on systems without these functions.  </div><div><br></div><div>  If this were a C/C++ code, it&#39;d be quite easy to deal with this as &#39;mpi.h&#39; has MPI_VERSION as a #define, so I can use a preprocessor check to conditionally compile either the neighbor routines or the old point-to-point routines.  However, Fortran obviously doesn&#39;t use #define natively, and so the mpif.h (or MPI module) simply define MPI_VERSION as a parameter - I can use it in the code, but not at the preprocessor level.  So, putting the MPI3 neighborhood collective in the code, even in a non-executed codepath, results in an error when linking with an MPI2 library since the routine isn&#39;t found.</div><div><br></div><div>  Obviously I can just have the user supply the -DMPI_VERSION=3 flag (or a different one, since this <i>is</i> a parameter name) <i>if they know</i> their MPI is version 3, and I intend to submit a patch to Cmake&#39;s FindMPI command to detect this automatically, but is there a <i>better</i> way to do this for projects that aren&#39;t using Cmake?  Scientists don&#39;t typically know what version of MPI they&#39;re running, so the more that can be detected and handled automatically the better.  (Providing stub versions that link <i>after</i> the main library (and thus don&#39;t get chosen, I think) also seems less than elegant.)</div><div><br></div><div>  To make it slightly more broad - if new MPI versions outpace library obsolescence on existing systems, what&#39;s the ideal way to write portable Fortran code that uses the most recent features?  Is there a way to use or change MPI_VERSION and MPI_SUBVERSION such that they can be used to conditionally compile code in Fortran built by standard &#39;Make&#39; processes?  Is &#39;recommending&#39; that the mpif90/mpif77 commands provide them a terrible, terrible idea?  </div><div><br></div><div>Or any other suggestions?</div><div><br></div><div>  Thanks,</div><div>  - Brian</div></div>
<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" rel="noreferrer" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2016/03/28777.php" rel="noreferrer" target="_blank">http://www.open-mpi.org/community/lists/users/2016/03/28777.php</a><br></blockquote></div><br><br clear="all"><div><br></div>-- <br><div class="gmail_signature">Jeff Hammond<br><a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a><br><a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a></div>
</div>


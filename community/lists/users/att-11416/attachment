<div class="gmail_quote">On Fri, Dec 4, 2009 at 10:10, Eugene Loh <span dir="ltr">&lt;<a href="mailto:Eugene.Loh@sun.com">Eugene.Loh@sun.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">




  
  

<div bgcolor="#ffffff" text="#000000">
Nicolas Bock wrote:
<blockquote cite="http://middcf611bd0912040726r76d29e33me5682cfa085f2dc2@mail.gmail.com" type="cite"><div class="im">
  <div class="gmail_quote">On Fri, Dec 4, 2009 at 08:21, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span>
wrote:<br>
  <blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
    <div>You used it correctly. Remember, all that cpu number
is telling you is the percentage of use by that process. So bottom line
is: we are releasing it as much as we possibly can, but no other
process wants to use the cpu, so we go ahead and use it.
    <div><br>
    </div>
    <div>If any other process wanted it, then the percentage would drop
and the other proc would take some.</div>
    </div>
  </blockquote>
  </div></div>
When you say &quot;the other proc would take some&quot;, how much do you expect
it to take? In my case above, the master process does not appear to
yield a whole lot. Can I reduce the polling frequency? I know that my
slave processes typically run several minutes to hours.<br>
</blockquote>
In my (limited) experience, the situation is a little of both.  OMPI is
yielding.  Yielding makes a difference only if someone else wants the
CPU.  But even if someone else wants the CPU, OMPI in yield mode will
still be consuming cycles.  It&#39;s like the way I drive a car.  When I
approach a stop sign, I slow down -- really, officer, I do -- and if
there is cross traffic I let it go by ahead of me.  But if there is no
cross traffic, I, ahem, proceed expediently.  And, even if there is
cross traffic, their progress is still impacted by me -- heck, I&#39;m all
for obeying stop signs and all, but I&#39;m no doormat.  OMPI processes can
yield, but they only check to yield every now and then.  Between
checks, they are not timid processes, even if other processes are
waiting to run.  I once had some numbers on this.  Yield helped, but
not as effectively as one might have imagined.<br></div></blockquote><div><br>Yes, that&#39;s the impression I get as well, the master process might be yielding, but it doesn&#39;t appear to be a lot. Maybe I should do this differently to avoid this CPU usage in master. All I really want is to  execute another process somewhere on a free node in my MPI universe, wait for it to be done and go on. From my limited understanding of MPI, MPI_Comm_spawn() and MPI_Barrier() seemed just like what I needed, but as I said, maybe there are other ways to do this.<br>

<br>nick<br><br></div></div>


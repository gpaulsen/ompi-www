Hi Thatyene,<div><br></div><div>I took a look in your code and it seems to be logically correct. Maybe there is some problem when you call the split function having one client process with color = MPI_UNDEFINED. I understood you are trying to isolate one of the client process to do something applicable only to it, am I wrong? According to open mpi documentation, this function can be used to do that, but it is not working. A<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">nyone have any idea about what can be?</span></div>
<div><font color="#222222" face="arial, sans-serif"><br></font></div><div><font color="#222222" face="arial, sans-serif">Best regards</font></div><div><font color="#222222" face="arial, sans-serif"><br></font></div><div><font color="#222222" face="arial, sans-serif">Rodrigo Oliveira<br>
</font><br><div class="gmail_quote">On Mon, Jan 23, 2012 at 4:53 PM, Thatyene Louise Alves de Souza Ramos <span dir="ltr">&lt;<a href="mailto:thatyene@dcc.ufmg.br">thatyene@dcc.ufmg.br</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
Hi there!<div><br></div><div><div>I&#39;ve been trying to use the MPI_Comm_split function on an intercommunicator, but I didn&#39;t have success. My application is very simple and consists of a server that spawns 2 clients. After that, I want to split the intercommunicator between the server and the clients so that one client stay not connected with the server.</div>


<div><br></div><div>The processes block in the split call and do not return. Can anyone help me?</div><div><br></div><div>== Simplified server code ==</div><div><br></div><div>int main( int argc, char *argv[] ) {</div><div>


<br></div><div><span style="white-space:pre-wrap">	</span>MPI::Intracomm spawn_communicator = MPI::COMM_SELF;</div><div><span style="white-space:pre-wrap">	</span>MPI::Intercomm group1;</div>

<div><br></div><div><span style="white-space:pre-wrap">	</span>MPI::Init(argc, argv);</div><div><span style="white-space:pre-wrap">	</span>group1 = spawn_client ( /* spawns 2 processes and returns the intercommunicator with them */ );</div>


<div><span style="white-space:pre-wrap">	</span></div><div><span style="white-space:pre-wrap">	</span>/* Tryes to split the intercommunicator */</div><div><span style="white-space:pre-wrap">	</span>int color = 0;</div>

<div><span style="white-space:pre-wrap">	</span>MPI::Intercomm new_G1 = group1.Split(color, 0);</div><div><span style="white-space:pre-wrap">	</span>group1.Free();</div><div><span style="white-space:pre-wrap">	</span>group1 = new_G1;</div>


<div><br></div><div><span style="white-space:pre-wrap">	</span>cout &lt;&lt; &quot;server after splitting- size G1 = &quot; &lt;&lt; group1.Get_remote_size() &lt;&lt; endl &lt;&lt; endl;</div><div><span style="white-space:pre-wrap">	</span>MPI::Finalize();</div>


<div><span style="white-space:pre-wrap">	</span>return 0;</div><div>}</div><div><br></div><div>== Simplified client code ==</div><div><br></div><div>int main( int argc, char *argv[] ) {</div><div><br></div>

<div><span style="white-space:pre-wrap">	</span>MPI::Intracomm group_communicator;</div><div><span style="white-space:pre-wrap">	</span>MPI::Intercomm parent;</div><div><span style="white-space:pre-wrap">	</span>int group_rank;</div>


<div><span style="white-space:pre-wrap">		</span></div><div><span style="white-space:pre-wrap">	</span>MPI::Init(argc, argv);</div><div><span style="white-space:pre-wrap">	</span></div>

<div><span style="white-space:pre-wrap">	</span>parent = MPI::Comm::Get_parent ();</div><div><span style="white-space:pre-wrap">	</span>group_communicator = MPI::COMM_WORLD;</div><div>
<span style="white-space:pre-wrap">	</span>group_rank = group_communicator.Get_rank();</div>
<div><span style="white-space:pre-wrap">	</span></div><div><span style="white-space:pre-wrap">	</span>if (group_rank == 0) {</div><div><span style="white-space:pre-wrap">		</span>color = 0;</div>

<div><span style="white-space:pre-wrap">	</span>}</div><div><span style="white-space:pre-wrap">	</span>else {</div><div><span style="white-space:pre-wrap">		</span>color = MPI_UNDEFINED;</div>

<div><span style="white-space:pre-wrap">	</span>}</div><div><span style="white-space:pre-wrap">	</span></div><div><span style="white-space:pre-wrap">	</span>MPI::Intercomm new_parent = parent.Split(color, inter_rank);</div>


<div><span style="white-space:pre-wrap">	</span>if (new_parent != MPI::COMM_NULL) {</div><div><span style="white-space:pre-wrap">		</span>parent.Free();</div><div><span style="white-space:pre-wrap">		</span>parent = new_parent;</div>


<div><span style="white-space:pre-wrap">	</span>}</div><div><span style="white-space:pre-wrap">	</span></div><div><span style="white-space:pre-wrap">	</span>group_communicator.Free();</div>

<div><span style="white-space:pre-wrap">	</span>parent.Free();</div><div><span style="white-space:pre-wrap">	</span>MPI::Finalize();</div><div><span style="white-space:pre-wrap">	</span>return 0;</div>

<div>}</div><div><br></div><div>Thanks in advance.</div></div><span class="HOEnZb"><font color="#888888"><div><br></div><div>Thatyene Ramos</div>
</font></span><br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br></blockquote></div><br></div>


<HTML><BODY style="word-wrap: break-word; -khtml-nbsp-mode: space; -khtml-line-break: after-white-space; ">I recently switched to OpenMPI (v1.1.1) from LAM/MPI.  My application runs at approximately 1/4th the speed of the same program running under LAM.  Let me explain my setup.<DIV><BR class="khtml-block-placeholder"></DIV><DIV>The program is executed as 16 processes on 8 dual-processor Apple Xserve Nodes with one gigabit card (per node) interfaced to a gigabit switch.  The application requires communication for every 1 ms of model time (under LAM the program used to run slightly faster than realtime).   When communication occurs every process needs information from each of the other processes.  The information that needs to be transmitted from any given process varies from one int (4 bytes) to about 1200-1500 bytes (just under one normal ethernet frame).  Jumbo frames are not supported by the switch.  The case of 4-50 bytes happens often &gt; 80 % of the time.</DIV><DIV><BR class="khtml-block-placeholder"></DIV><DIV>The communication scheme that I had generated to compress the traffic was this.  Each node transfers data from the higher ranked process on that node to the other via shared memory.  Then the lower ranked processes from each node communicate in a treed round-robin scheme (to avoid contention for resources [the nic] and minimise traffic).  See pseudo code below.  Then the lower ranked process on each node tells the higher rank process via shared memory.  Under both LAM and OpenMPI the processes are distributed "--byslots."  And, yes this scheme was ~3x faster than a Alltoallv or AllGatherv under LAM.  One more point first, the transfers were partioned into packets of 1500 bytes at each stage and padded if necessary.  </DIV><DIV><BR class="khtml-block-placeholder"></DIV><DIV>Pseudocode for tree'd round-robbin scheme:</DIV><DIV><BR class="khtml-block-placeholder"></DIV><DIV>// share on node first</DIV><DIV>if (mpi_rank % 2 == 0) {</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>MPI_recv();</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>Merge_current_info_with_new_info;</DIV><DIV>} else {</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>MPI_send();</DIV><DIV>}</DIV><DIV>// share between nodes</DIV><DIV>for (i = 1; i &lt; ceil(log2(mpi_size)); i++) {</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>share_partner = mpi_rank ^ (1 &lt;&lt; i);</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>if (share_partner &lt; mpip_size) { // does partner exist?</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">		</SPAN>MPI_isend();</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">		</SPAN>MPI_irecv();</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">		</SPAN>MPI_Waitall();</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">		</SPAN>Merge_current_info_with_new_info;</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>} <BR><DIV> <SPAN class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: auto; -khtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-adjust: auto; text-transform: none; orphans: 2; white-space: normal; widows: 2; word-spacing: 0px; "><SPAN class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: auto; -khtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-adjust: auto; text-transform: none; orphans: 2; white-space: normal; widows: 2; word-spacing: 0px; ">}</SPAN></SPAN></DIV><DIV>// share on node afterward</DIV><DIV>if (mpi_rank % 2 == 0) {</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>MPI_send();</DIV><DIV>} else {</DIV><DIV><SPAN class="Apple-tab-span" style="white-space:pre">	</SPAN>MPI_recv(); </DIV><DIV>}</DIV><DIV><SPAN class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: auto; -khtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-adjust: auto; text-transform: none; orphans: 2; white-space: normal; widows: 2; word-spacing: 0px; "><SPAN class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: auto; -khtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-adjust: auto; text-transform: none; orphans: 2; white-space: normal; widows: 2; word-spacing: 0px; "><BR class="Apple-interchange-newline"><SPAN class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: auto; -khtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-adjust: auto; text-transform: none; orphans: 2; white-space: normal; widows: 2; word-spacing: 0px; "><SPAN class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; text-align: auto; -khtml-text-decorations-in-effect: none; text-indent: 0px; -apple-text-size-adjust: auto; text-transform: none; orphans: 2; white-space: normal; widows: 2; word-spacing: 0px; "><DIV><BR class="khtml-block-placeholder"></DIV><DIV>I know this is a detailed email, but it is important I resolve this (the faster the model runs, the faster I graduate).  One more interesting tidbit, under LAM this scaled up to the 8 nodes (linear scaling up to 4 nodes) for this program.  OpenMPI performance is just about all the same beyond 1 node (2 processes). </DIV><DIV><BR class="khtml-block-placeholder"></DIV><DIV>Thanks for any help!!!</DIV><DIV><BR class="khtml-block-placeholder"></DIV><DIV>Karl Dockendorf</DIV><DIV>Research Fellow</DIV><DIV>Department of Biomedical Engineering</DIV><DIV>University of Florida</DIV><DIV><A href="mailto:karld@ufl.edu">karld@ufl.edu</A></DIV><BR class="Apple-interchange-newline"></SPAN></SPAN></SPAN></SPAN> </DIV><BR></DIV></BODY></HTML>

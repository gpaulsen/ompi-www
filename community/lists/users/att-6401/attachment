<html><body>
<p>Hi Jitendra<br>
<br>
Before you worry too much about the inefficiency of using a contiguous scratch buffer to pack into and send from and a second contiguous scratch buffer to receive into and unpack from, it would be worth knowing how OpenMPI processes a discontiguous datatype on your platform.  <br>
<br>
Gathering outgoing data directly from discontiguous memory to a network interface and scattering incoming data from a network interface directly to discontiguous memory is practical in some cases but not in all. When it is not practical, the fallback inside the MPI implementation can involve allocating scratch buffers under the covers and doing pack/unpack guided by the datatype.   If that is what is happening then you can do the pack/unpack at least as efficiently as libmpi interpreting a datatype to do the same thing.<br>
<br>
If the data is being passed via shared memory then it should be practical for the MPI implementation to avoid pack/unpack scratch buffers.<br>
<br>
The use of a datatype is clearly more elegant and when the MPI implementation is able to avoid intermediate buffering, it is likely to be more efficient as well.<br>
<br>
<br>
Dick Treumann  -  MPI Team         <br>
IBM Systems &amp; Technology Group<br>
Dept 0lva / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<tt>users-bounces@open-mpi.org wrote on 08/20/2008 02:07:47 PM:<br>
<br>
&gt; George,<br>
&gt; Yes that's what I understood after struggling with it over a week. I<br>
&gt; need to send such messages frequently so creating and destroying the<br>
&gt; data type each time may be expensive. What would be the best alternative<br>
&gt; for sending such malloced data ? Though I can always pack the data in a<br>
&gt; long array and unpack at the opposite end as I know the structure of the<br>
&gt; data at each node. Anything more efficient and elegant will be better.<br>
&gt; <br>
&gt; Thanks for the help.<br>
&gt; Jitendra<br>
&gt; <br>
</tt></body></html>

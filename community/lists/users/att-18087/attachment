<html><body><div style="color:#000; background-color:#fff; font-family:verdana, helvetica, sans-serif;font-size:14pt"><div><font size="3"><span>Dear All,</span></font></div><div><font size="3"><br><span></span></font></div><div><font size="3"><span>I read a little more about MPI derived data types, and to answer my own question:</span></font></div><div><font size="3"><br><span></span></font></div><div><font size="3"><span>In general, we cannot assume portability of sending a C/C++ struct as a stream of bytes. There must be a promise that data representation on machines involved in the transmission must perform the same data layout. <br></span></font></div><div><font size="3"><br><span></span></font></div><div><font size="3"><span>Also, there was a +1 on using derived data types in terms of clarity of code.</span></font></div><div><font size="3"><br><span></span></font></div><div><font size="3"><span>But, now that I decided to use it, I run into another
 problem.</span></font></div><div><font size="3"><br><span></span></font></div><div><font size="3"><span>I have a function that commits the new datatype: Add_New_MPITypes(). This is called just after MPI_Init(...).</span></font></div><div><font size="3"><span>After a few subsequent function calls, I am doing MPI-Send/Receive in another function, which looks like:</span></font></div><div><font size="3"><br><span></span></font></div><div><font size="3"><span><span style="color: rgb(0, 0, 191);">void sendMessagetoSlave(void* Payload, int MESSAGETYPE)</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">{</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp; switch (MESSAGETYPE)</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp; {</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp; case
 MSGINSTALLP:</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Add_MPI_msgInstallP_Type();</span> /*Was already done in </span><span>Add_New_MPITypes() */</span><br style="color: rgb(0, 0, 191);"><span><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgInstallP InstallPMessage;</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InstallPMessage = *(msgInstallP*)Payload;</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Ssend(</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0,
 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (void*)Payload,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Payload */</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(msgInstallP),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* size of the payload */</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_MSGINSTALLP,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* MPI Data type */</span><br style="color:
 rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InstallPMessage.location,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* location to which the message is being sent */</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MASTERSLAVECONTROLMESSAGE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Tag */</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_COMM_WORLD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Communicator */</span><br style="color:
 rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span><br style="color: rgb(0, 0, 191);"><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp; default:</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">&nbsp;&nbsp;&nbsp; }</span><br style="color: rgb(0, 0, 191);"><span style="color: rgb(0, 0, 191);">}</span><br><br></span></font></div><div><font size="3">The linker complains that it does not know MPI_MSGINSTALLP derived datatype. Specifically,
 the message from the linker is:</font></div><div><font size="3"><br></font></div><div><font size="3">"‘MPI_MSGINSTALLP’ was not declared in this scope".</font></div><div><font size="3"><br></font></div><div><font size="3">I have using mpic++ (1.4.2) to compile, and g++ (4.5.3) to link.</font></div><div><font size="3"><br></font></div><div><font size="3">Can anyone help?</font></div><div><font size="3"><br></font></div><div><font size="3">Best.</font></div><div><font size="3"><br></font></div><div><font size="3"><br></font></div><div><font size="3">Devendra<br></font></div><div style="font-family: verdana, helvetica, sans-serif; font-size: 14pt;"> <div style="font-family: times new roman, new york, times, serif; font-size: 12pt;"> <div dir="ltr"> <font size="3" face="Arial"> <hr size="1">  <b><span style="font-weight:bold;">From:</span></b> devendra rai &lt;rai.devendra@yahoo.co.uk&gt;<br> <b><span style="font-weight: bold;">To:</span></b> Open MPI
 Users &lt;users@open-mpi.org&gt; <br> <b><span style="font-weight: bold;">Sent:</span></b> Wednesday, 4 January 2012, 17:31<br> <b><span style="font-weight: bold;">Subject:</span></b> [OMPI users] Can we avoid derived datatypes?<br> </font> </div> <font size="3"><br></font><div id="yiv1359142203"><div><div style="color:#000;background-color:#fff;font-family:Courier New, courier, monaco, monospace, sans-serif;font-size:10pt;"><font style="font-family:verdana, helvetica, sans-serif;" size="3">Hello All,<br><br>I need to send a struct- datatype over MPI. Currently, I send the strcture as a series of MPI_BYTEs and on the other end, I dereference it as though it were a struct- type.<br><br>Something like this:<br><br style="color:rgb(0, 0, 255);"><span style="color:rgb(0, 0, 255);">MPI_Ssend((void*)&amp;MasterSlavePayload, sizeof(MasterSlavePayload), MPI_BYTE, destNode,MASTERSLAVECONTROLMESSAGE,MPI_COMM_WORLD);</span><br><br>where <span style="color:rgb(0,
 0, 255);">MasterSlavePayload</span> is a structure variable.<br><br><br>This currently seems to work, where we have a homogenous environment: same hardware configuration, and same operating system.<br><br>The question is: Is this approach portable? Safe? And whether this will work on a
 system of nodes with mixed processor types?<br><br>I read from <a rel="nofollow" target="_blank" href="http://goo.gl/msXW6">MPI tutorials</a><br><br><span style="background-color:rgb(96, 191, 0);">"...Primitive data types are contiguous. Derived data types allow you to 
    specify non-contiguous data in a convenient manner and to treat it as 
    though it was contiguous. "</span><br><br>So, since I am using a primitive data type, does it mean that the packing of elements is maintained across the MPI_Send/MPI_Recv process? If so, it would mean that the approach that I use should work.<br><br>Any ideas?<br><br>Thanks a lot,<br><br>best<br><br>Devendra<br><br><br> </font><div style="font-family:verdana, helvetica, sans-serif;font-size:10pt;"><font size="3"> </font></div><font style="font-family:verdana, helvetica, sans-serif;" size="3">  </font></div></div></div><font size="3"><br>_______________________________________________<br>users mailing list<br><a ymailto="mailto:users@open-mpi.org" href="mailto:users@open-mpi.org">users@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br><br></font> </div> </div><font size="3">  </font></div></body></html>

<html>
<head>
<style><!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--></style></head>
<body class='hmmessage'><div dir='ltr'>
<pre>My concern is how do the C side know fortran integer using 8 bytes?<br>My valgrind check show something like:<br><br>==8482== Invalid read of size 8<br>==8482==    at 0x5F4A50E: ompi_op_base_minloc_2integer (op_base_functions.c:631)<br>==8482==    by 0xBF70DD1: ompi_coll_tuned_allreduce_intra_recursivedoubling (op.h:498)<br>==8482==    by 0x5F031CB: PMPI_Allreduce (pallreduce.c:105)<br>==8482==    by 0x62E2F22: PMPI_ALLREDUCE (pallreduce_f.c:77)<br>==8482==    by 0x5C8934: mumps_276_ (mumps_part9.F:4667)<br>==8482==    by 0x54D89A: dmumps_ (dmumps_part1.F:157)<br>==8482==    by 0x43D358: dmumps_f77_ (dmumps_part3.F:6651)<br>==8482==    by 0x41420C: dmumps_c (mumps_c.c:422)<br>==8482==    by 0x412CB4: main (my_cExample_client.c:80)<br>==8482==  Address 0x7369608 is 0 bytes after a block of size 8 alloc'd<br>==8482==    at 0x4A0610C: malloc (vg_replace_malloc.c:195)<br>==8482==    by 0xBF709B9: ompi_coll_tuned_allreduce_intra_recursivedoubling (coll_tuned_allreduce.c:158)<br>==8482==    by 0x5F031CB: PMPI_Allreduce (pallreduce.c:105)<br>==8482==    by 0x62E2F22: PMPI_ALLREDUCE (pallreduce_f.c:77)<br>==8482==    by 0x5C8934: mumps_276_ (mumps_part9.F:4667)<br>==8482==    by 0x54D89A: dmumps_ (dmumps_part1.F:157)<br>==8482==    by 0x43D358: dmumps_f77_ (dmumps_part3.F:6651)<br>==8482==    by 0x41420C: dmumps_c (mumps_c.c:422)<br>==8482==    by 0x412CB4: main (my_cExample_client.c:80)<br><br><br>The fortran side:<br><br>      INTEGER IN( 2 ), OUT( 2 )<br>  <br>      CALL MPI_ALLREDUCE( IN, OUT, 1, MPI_2INTEGER, MPI_MINLOC,<br>     &amp;                    COMM, IERR)<br><br>The compiler options will take care of IN be INTEGER*8, but will<br>it do the same for MPI_2INTEGER in the C side<br><br>Thanks.<br><br>Regards,<br><br>William<br><br><br><br>Date: Fri, 29 Jun 2012 07:03:18 -0400<br>From: Jeff Squyres &lt;jsquyres@cisco.com&gt;<br>Subject: Re: [OMPI users] fortran program with integer kind=8 using<br>	openmpi<br>To: &lt;warren@atmos.washington.edu&gt;, Open MPI Users &lt;users@open-mpi.org&gt;<br>Message-ID: &lt;6FFEA644-3F39-4B6E-ADD6-3721F485525F@cisco.com&gt;<br>Content-Type: text/plain; charset=iso-8859-1<br> <br>On Jun 28, 2012, at 8:37 PM, David Warren wrote:<br> <br>&gt; You should not have to recompile openmpi, but you do have to use the correct type. You can check the size of integers in your fortrana nd use MPI_INTEGER4 or MPI_INTEGER8 depending on what you get.<br> <br>If you configure ompi with -fdefault-integer-8, then OMPI will assume that Fortran integers are always 8 bytes, so be sure to also compile all of your MPI applications the same way.  Indeed, you may want to configure OMPI with something like:<br> <br>./configure FCFLAGS=-fdefault-integer-8 FFLAGS=-fdefault-integer-8 \<br>   --with-wrapper-fflags=-fdefault-integer-8 \<br>   --with-wrapper-fcflags=-fdefault-integer-8<br> <br>This will add -fdefault-integer-8 to the mpif77 and mpif90 command lines automatically so that you *can't* compile without that flag.<br> <br>Be aware that 8-byte Fortran integers *should work* in Open MPI, but it is probably not well tested.  You may well run into some issues; be sure to let us know if you run into bugs.  Sending small test programs that show the problem are usually the best way to help us identify/fix the precise problem.<br> <br>&gt; in gfortran use<br>&gt; integer i<br>&gt; if(sizeof(i) .eq. 8) then<br>&gt;     mpi_int_type=MPI_INTEGER8<br>&gt; else<br>&gt;     mpi_int_type=MPI_INTEGER4<br>&gt; endif<br> <br>I don't think that this should be necessary -- as long as you configured OMPI with the 8-byte-integer setting, then MPI_INTEGER should represent an 8 byte integer.<br> <br>-- <br>Jeff Squyres<br>jsquyres@cisco.com<br>For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br> </pre> 		 	   		  </div></body>
</html>

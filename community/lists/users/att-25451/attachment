<div dir="ltr"><br><div class="gmail_extra"><br><div class="gmail_quote">2014-10-03 15:17 GMT+00:00 Diego Avesani <span dir="ltr">&lt;<a href="mailto:diego.avesani@gmail.com" target="_blank">diego.avesani@gmail.com</a>&gt;</span>:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div class="gmail_extra">Dear all,</div><div class="gmail_extra">using ifort -r8, will reduce the error,</div><div class="gmail_extra">I am sure that every variable is in double precision, even when I convert an integer to a real with real(X) or when I use FLOOR.</div></div></blockquote><div>Yes, that is the whole point of -r8. It is not the root cause of your problems.</div><div>But rather than using that, _why are you using it_.</div><div>It seems to me that you do not fully understand the implications of adding this flag to your code. If you agree on this point, then you should definitely NOT use it :) (this is not to diminish your level of understanding... sorry if it hurts your feelings, I do not know how to put it any other way...)</div><div><br></div><div>Consider this small C snippet:</div><div><br></div><div>float f = 1.</div><div>double d =1.</div><div><br></div><div>what you &quot;basically&quot; are doing is:</div><div>#define float double</div><div>float f = 1.</div><div>double d = 1.</div><div><br></div><div>Now why on earth would you do that? Well it has its usages, but if you do not see the implications it might have later, then the general consensus is to _explicitly_ tell the variable which precision it has.</div><div>Do NOT consider -r8 a solution to your problems, it will (almost) certainly create more than you solve.</div><div><br></div><div><br></div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div class="gmail_extra"><br></div><div class="gmail_extra">So, where con I insert the flag.</div><div class="gmail_extra"><br></div><div class="gmail_extra">Now I am converting the code with DP just to be able to debug my code</div><div class="gmail_extra"><br></div><div class="gmail_extra">What do you thing?</div></div></blockquote><div>I think that you should always use DP and never -r8. </div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div class="gmail_extra">Am I wrong?</div></div></blockquote><div> No you are not wrong, I would just call it &quot;bad practice&quot;.</div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div class="gmail_extra"><br></div><div class="gmail_extra">Thanks again</div></div></blockquote><div><br></div><div>It seems to me as if you want the double precision of the real&#39;s, and then you did:</div><div><br></div><div>type :: ...</div><div>real :: RR(2), QQ(4)</div><div>end type</div><div>TYPES(1)=MPI_INTEGER                           !We have three variables type in the new varible<br>TYPES(2)=MPI_DOUBLE_PRECISION       !Integer and Real and Real<br> TYPES(3)=MPI_DOUBLE_PRECISION       !Integer and Real and Real<br> nBLOCKS(1)=1                                              !number of element in each block <br> nBLOCKS(2)=2<br>  nBLOCKS(3)=4</div><div><br></div><div>then you compiled and encountered problems. You added -r8 and it solved the problems... Hmm... This is not the way to solve the problem.</div><div><br></div><div>In fortran a real is a single precision quantity. If you want it in double precision you have to tell the program that it is in double precision.</div><div><br></div><div>In general coding I would advice you to use a module along the lines of this:</div><div><br></div><div>module prec<br>  integer, parameter :: is = selected_int_kind(9)<br>  integer, parameter :: il = selected_int_kind(18)<br>  integer, parameter :: sp = selected_real_kind(p=6)<br>  integer, parameter :: dp = selected_real_kind(p=15)<br></div><div>end module prec</div><div><br></div><div>Every time you need a double precision variable do:</div><div>real(dp) :: double_precision</div><div>Every time you need a single precision variable you do:</div><div>real :: single_precision</div><div>or even better:</div><div>real(sp) :: single_precision</div><div><br></div><div>If you want a &quot;single&quot; precision integer (int) you do:</div><div>integer :: int</div><div>or even better:</div><div>integer(is) :: int</div><div>If you want a &quot;double&quot; precision integer (long) you do:</div><div>integer(il) :: long</div><div><br></div><div>Resorting to compiler flags to solve your problems should ALWAYS (in my honest opinion :) ) be the definite absolute last thing. Not second to last, really _the_ last thing. :)</div><div>I hope I made my point clear, if not I am at a loss... :)</div><div><br></div><div> </div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div class="gmail_extra"><br></div><div class="gmail_extra"><br><div class="gmail_quote">On 3 October 2014 17:03, Nick Papior Andersen <span dir="ltr">&lt;<a href="mailto:nickpapior@gmail.com" target="_blank">nickpapior@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">selected_real_kind</blockquote></div><span class=""><font color="#888888"><br><br><br clear="all"><div>Diego<br><br></div>
</font></span></div></div>
<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2014/10/25449.php" target="_blank">http://www.open-mpi.org/community/lists/users/2014/10/25449.php</a><br></blockquote></div><br><br clear="all"><br>-- <br><div dir="ltr"><div>Kind regards Nick</div></div>
</div></div>


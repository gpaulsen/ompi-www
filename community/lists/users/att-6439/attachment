<html><body>
<p>Hi Robert<br>
<br>
Dick Treumann  -  MPI Team           <br>
IBM Systems &amp; Technology Group<br>
Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<tt>users-bounces@open-mpi.org wrote on 08/27/2008 11:55:58 AM:<br>
<br>
&lt;&lt; snip &gt;&gt;</tt><br>
<tt>&gt; <br>
&gt; However from an application point of view I see an odd result here. <br>
&gt; On the sender side I can use a buffered send to &quot;queue&quot; messages for<br>
&gt; delivery and decide how many messages my buffer should contain <br>
&gt; before the MPI_Bsend blocks if it's running out of space.</tt><br>
<tt>The BSEND should not be assumed to block if the attached buffer is full. &nbsp;</tt><br>
<tt>It may raise an error which is fatal by default. The user is expected </tt><br>
<tt>to make sure he does not stack up more BSEND data than his attached buffer</tt><br>
<tt>can hold. MPI provides guidelines on doing this and it is not hard to </tt><br>
<tt>get right.</tt><br>
<tt>&gt; <br>
&gt; On the receiving side I have no control over the number of messages <br>
&gt; that MPI can buffer. This is basically left to the implementation <br>
&gt; details as you very well described. Shouldn't the user be allowed to<br>
&gt; specify a memory space to buffer messages on the receiving side, <br>
&gt; just like on the send?</tt><br>
<tt>On the receive side, the buffer space could be filled by messages from</tt><br>
<tt>multiple sources so managing it in the application can be very complex </tt><br>
<tt>and a semantic that said the MPI job can fail if the buffer overflows is </tt><br>
<tt>pretty nasty when it is so hard for applications to prevent overflow. </tt><br>
<br>
<tt>So, the MPI Forum chose to require that the MPI_SEND only ship data</tt><br>
<tt>eagerly if it &quot;knows&quot; there is space in the libmpi managed buffer at </tt><br>
<tt>the destination. If the MPI_SEND side cannot &quot;know&quot; there is space at </tt><br>
<tt>the destination, the SEND is required to block until a matching </tt><br>
<tt>receive is posted.</tt><br>
<br>
<tt>The MPI Forum concluded there are so many options in how an MPI implementation</tt><br>
<tt>might do this efficiently that there is no reasonable, portable way to let the</tt><br>
<tt>user control it. &nbsp;Also, an amount of buffer a user might decide to set aside</tt><br>
<tt>for one platform may be most of the memory on another so the application will</tt><br>
<tt>not port to the second platform well. User interest in having control was </tt><br>
<tt>recognized as MPI was developed but the Forum decided it would cause more</tt><br>
<tt>potential for harm that it was worth.</tt><br>
<br>
<tt>Many MPI implementations have a default buffer and some nonstandard way to </tt><br>
<tt>specify how much buffer is to be provided if you do not like the default. </tt><br>
<tt>Typically there is an environment variable. &nbsp;</tt><br>
<tt>&gt; <br>
&lt;&lt; snip &gt;&gt;</tt></body></html>

<div dir="ltr">Hi Nick,<div><br></div><div>Thanks for your detailed info. In my case, I expect to spawn multiple threads from each MPI process. I could use MPI_THREAD_FUNNELED or MPI_THREAD_SERIALIZED to do so - I think MPI_THREAD_MULTIPLE is not supported on InfiniBand, which I am using. Currently, I use OpenMPI + Boost::Thread - no plan to shift to Boost::MPI yet. </div>
<div><br></div><div style>I still have a couple of questions to ask:</div><div style><br></div><div style>1. In both MPI_THREAD_FUNNELED and MPI_THREAD_SERIALIZED modes, the MPI calls are serialized at only one thread (in the former case, only the rank main thread can make MPI calls, while in the latter case the threads need to be coordinated so that only one thread makes MPI calls at a time). So are there any performance implications associated with choosing between FUNNELED or SERIALIZED?</div>
<div style><br></div><div style>2. My current code uses many MPI collective calls (gather/scatter/broadcast, etc.). It seems that these collective calls have some negative impact on performance because ALL MPI processes need to wait on each of these calls. I would like to explore the idea of decoupling computation from MPI communication - so if one thread of each MPI rank is blocked at a MPI call, the other threads can still make progress. I am wondering if I could still make MPI calls from the other non-blocked threads using  MPI_THREAD_FUNNELED or MPI_THREAD_SERIALIZED mode (assuming that the blocked thread is the main thread in the rank)?</div>
<div style><br></div><div style>Any advice is highly appreciated!</div><div style><br></div><div style><br></div><div style>Cheers!</div><div style><br></div><div style><br></div><div style>Jacky</div><div style><br></div>
<div style><br></div><div><div class="gmail_extra"><br><br><div class="gmail_quote">On Tue, Apr 23, 2013 at 12:46 PM, Nick Edmonds <span dir="ltr">&lt;<a href="mailto:ngedmond@cs.indiana.edu" target="_blank">ngedmond@cs.indiana.edu</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">Hi Jacky,<br>
<br>
I&#39;m a regular reader of this list but seldom a poster.  In this case however I might actually be qualified to answer some questions or provide some insight given I&#39;m not sure how many other folks here use Boost.Thread.  The first question is really what sort of threading model you want to use with MPI, which others here are probably more qualified to advise you on.<br>

<br>
In our applications we&#39;re using Boost.Thread with MPI_THREAD_MULTIPLE, which is a not all-together enjoyable experience because the openib BTL lacks support for thread multiple (at least as of the last time I checked).  That being said, Boost.Thread behaves just like any pthread code on the linux clusters we run on, as well as one BlueGene/P.  With MPI_THREAD_SERIALIZED writing hybrid-parallel code is pretty painless.  Most of the work required involved adding two-stage collectives such that threads first perform collectives locally and then a single thread participates in the MPI collective operation.<br>

<br>
If you end up using Boost.MPI you could probably even write your own wrappers to encapsulate the local computation required for MPI collective operations.  Unfortunately Boost.MPI currently lacks full support for even MPI-2 but if it includes the subset of functionality you need it may be worthwhile.  Extensions are fairly straightforward to implement as well.<br>

<br>
I&#39;ve implemented a few different approaches to MPI + threading in the context of Boost, from explicit thread management to thread pools, and currently a complete runtime system.  Most of it is research code, though there&#39;s no reason it couldn&#39;t be released, and some of it probably will be eventually.  If you&#39;d like to describe your intended use case I&#39;m happy to offer any advice I can based on what I&#39;ve learned.<br>

<br>
Cheers,<br>
Nick<br>
<div><div class="h5"><br>
On Apr 22, 2013, at 3:25 PM, Thomas Watson wrote:<br>
<br>
&gt; Hi,<br>
&gt;<br>
&gt; I would like to create a pool of threads (using Boost::Thread) within each OpenMPI process to accelerate my application on multicore CPUs. My application is already built on OpenMPI, but it currently exploits parallelism only at the process level.<br>

&gt;<br>
&gt; I am wondering if anyone can point me to some good tutorials/documents/examples on how to integrate Boost multithreading with OpenMPI applications?<br>
&gt;<br>
&gt; Thanks!<br>
&gt;<br>
&gt; Jacky<br>
</div></div>&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
<br>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</blockquote></div><br></div></div></div>


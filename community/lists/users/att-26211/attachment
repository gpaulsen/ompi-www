<div dir="ltr">Dear all, Dear Gus, Dear George,<div>have you seen my example program? (in the attachment)</div><div>As you suggested I have tried to <span style="font-size:12.8000001907349px"> <i>think </i></span><span style="font-size:12.8000001907349px"><i>recursively about the datatypes</i></span></div><div><span style="font-size:12.8000001907349px">but there is something wrong that I am not bale to understand, what do you think?</span></div><div><span style="font-size:12.8000001907349px"><br></span></div><div><span style="font-size:12.8000001907349px">thanks a lot </span><br></div></div><div class="gmail_extra"><br clear="all"><div><div class="gmail_signature">Diego<br><br></div></div>
<br><div class="gmail_quote">On 16 January 2015 at 23:23, Gus Correa <span dir="ltr">&lt;<a href="mailto:gus@ldeo.columbia.edu" target="_blank">gus@ldeo.columbia.edu</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hi George<br>
<br>
Many thanks for your answer and interest in my questions.<br>
... so ... more questions inline ...<span class=""><br>
<br>
On 01/16/2015 03:41 PM, George Bosilca wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
Gus,<br>
<br>
Please see my answers inline.<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
On Jan 16, 2015, at 14:24 , Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu" target="_blank">gus@ldeo.columbia.edu</a>&gt; wrote:<br>
<br>
Hi George<br>
<br>
It is still not clear to me how to deal with strides in MPI_Create_type_subarray.<br>
The function/subroutine interface doesn’t mention strides at all.<br>
</blockquote>
<br>
That’s indeed a little tricky.<br>
However, the trick here is that when you try to understand the subarray<br>
type you should think recursively about the datatypes involved in the operation.<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
It is a pity that there is little literature (books) about MPI,<br>
and the existing books are lagging behind the new MPI developments and standards (MPI-2, MPI-3).<br>
My most reliable sources so far were the &quot;MPI - The complete reference&quot; books, vol-1 (2nd ed.) and vol-2 (which presumably covers MPI-2).<br>
However, they do not even mention MPI_Create_type_subarray,<br>
which is part of the MPI-2 standard.<br>
</blockquote>
<br>
Let me do a wild guess: you two guys must be the firsts to ask questions about it …<br>
<br>
</blockquote>
<br></span>
Did anybody but the MPI developers actually *used* MPI_Create_type_subarray?<br>
Could this explain the scarcity of questions about it?  :)<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
I found it in the MPI-2 standard on the web, but it is not clear to me<br>
how to achieve the same effect of strides that are available in MPI_Type_vector.<br>
MPI_Create_type_subarray is in section 4.1.3.<br>
The OMPI MPI_Create_type_subarray man page says there is an example in section 9.9.2 of the MPI-2 standard.<br>
However, there is no section 9.9.2.<br>
Chapter 9 is about something else (&quot;The info object&quot;), not derived types.<br>
No good example of MPI_Create_type_subarray in section 4.1.3 either,<br>
which is written in the typical terse and hermetic style in which<br>
standards are.<br>
</blockquote>
<br>
No comments on subjective topics … ;)<br>
</blockquote>
<br></span>
It flows almost as smoothly as Backus-Naur prose.<br>
Makes a great reading with some Mozart in the background.<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
You just blew my day away, I was totally under the impression that the<br>
MPI standard reads like a children’s bedtime story book !!!<br>
<br>
</blockquote>
<br>
<br></span>
Did you write it?<br>
Do you read it for your kids at bed time?<br>
Do they fall asleep right away?<br>
<br>
Oh, if AEsop, Grimm Brothers, Charles Perrault, Andersen could only have helped as copy-desks ...<span class=""><br>
<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
So, how can one handle strides in MPI_Create_type_subarray?<br>
Would one have to first create several MPI_Type_vector for the various dimensions, then use them as &quot;oldtype&quot; in  MPI_Create_type_subarray?<br>
That sounds awkward, because there is only one “oldtype&quot; in MPI_Create_type_subarray, not one for each dimension.<br>
</blockquote>
<br>
Exactly. Take a look at how we handle the subarray in Open MPI,<br>
more precisely at the file ompi/datatype/ompi_datatype_<u></u>create_subarray.c.<br>
My comment from few days ago referred exactly to this code, where the<br>
subarray is basically described in terms of vector<br>
(well maybe vector as I was lazy to check the LB/UB).<br>
<br>
</blockquote>
<br></span>
When documentation equates to reading actual function code ...<br>
... that is when users drop trying to use new developments ...<br>
<br>
BTW, ominously a bug report on LB/UB misuse in MPI_Type_struct<br>
*and* in  MPI_Type_create_subarray ... gosh ...<br>
<br>
<a href="http://lists.mpich.org/pipermail/discuss/2015-January/003608.html" target="_blank">http://lists.mpich.org/<u></u>pipermail/discuss/2015-<u></u>January/003608.html</a><br>
<br>
But hopefully that doesn&#39;t affect Open MPI, right?<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
As I said above think recursively.<br>
You start with the old type,<br>
then build another try on a dimension,<br>
then you use this to expose the second dimensions and so on.<br>
For each dimension your basic type is not the user provided old type,<br>
but the type you built so far.<br>
<br>
- size_array[i] is the number of elements in big data in the dimension i<br>
- subsize_array[i] is the of element you will include in your datatype in the dimension i<br>
- start_array[i] is how many elements you will skip in the dimension i before you start including them in your datatype. start[i] + subside[i] must be smaller or equal to size[i]<br>
<br>
</blockquote>
<br></span>
OK, that starts to make more sense than the yawning bedtime story<br>
in the MPI-2 standard.<br>
<br>
I should peel off (that would be recursive)<br>
or build up (that would be non-recursive, right?) each dimension,<br>
one by one,<br>
like an onion,<br>
creating new subarrays of increasing dimensions,<br>
one by one,<br>
based on the subarray previously created.<br>
Did I get it right?<br>
So, should I peel off or build up the dimensions?<br>
<br>
In which regard is this any better than using MPI_Type_Vector,<br>
which can be setup in a single non-recursive call,<br>
as long as the sizes, strides, etc, are properly calculated?<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
Is there any simple example of how to achieve  stride effect with<br>
MPI_Create_type_subarray in a multi-dimensional array?<br>
</blockquote>
<br>
Not as far as I know.<br>
But now that people expressed interest in this topic,<br>
maybe someone will write a blog or something about.<br>
<br>
</blockquote>
<br></span>
An example, just a simple example ...<br>
... to help those that have to write all steps from 1 to N,<br>
when it comes to thinking recursively ...<br>
When it comes to recursion, I stopped at the Fibonacci numbers.<br>
<br>
Well, even if it is on a blog ...<br>
Nobody seem to care about books or printed matter anymore.<br>
It is all about blogs, wikis, ..., please don&#39;t move the OMPI documentation to Twitter, Facebook, or Instagram OK?<br>
I don&#39;t have an account on any of those.<br>
At least keep the FAQ on the web.<br>
Our local library here was phased out,<br>
will be replaced with a media center ...<br>
When I hear news like those I always think of<br>
Ray Bradbury&#39;s Fahrenheit 451 (and Franc,ois Truffaut&#39;s beautiful movie).<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
BTW, when are you gentlemen going to write an updated version of the<br>
“MPI - The Complete Reference&quot;?  :)<br>
</blockquote>
<br>
Maybe after the release of MPI 4.0 would be a good target …<br>
</blockquote>
<br></span>
Not any sooner than that?<br>
MPI-2 is already poorly covered in the literature,<br>
MPI-3 only by the standard (yawn ...).<br>
And when MPI 4 comes, would we have to wait for MPI-5 to get<br>
the examples?<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
A lot of new and exciting technologies will hopefully be going in by then,<br>
</blockquote>
<br></span>
... which won&#39;t be used if people don&#39;t get the word about them,<br>
on how to use them effectively ... please, don&#39;t let MPI-3-4-5-6-<br>
become a [MPI-]chat only amongst the [[[&gt;&gt;&gt;MPI developers&lt;&lt;&lt;]]] ...<span class=""><br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
writing a new book might be worth the effort.<br>
<br>
</blockquote>
<br></span>
Always worth it, with examples, etc.<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
   George.<br>
<br>
</blockquote>
<br>
Thank you, George!<br>
<br>
Gus Correa<div><div class="h5"><br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
<br>
<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
Thank you,<br>
Gus Correa<br>
(Hijacking Diego Avesani&#39;s thread, apologies to Diego.)<br>
(Also, I know this question is not about Open MPI, but about MPI in general.  But the lack of examples may warrant asking the question here.)<br>
<br>
<br>
On 01/16/2015 01:39 AM, George Bosilca wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
  The subarray creation is an multi-dimension extension of the vector type.<br>
</blockquote>
You can see it as a vector of vector of vector and so on, one vector per dimension.<br>
The stride array is used to declare on each dimension what is the relative displacement<br>
(in number of elements) from the beginning of the dimension array.<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
It is important to use regular type creation when you can take advantage of such<br>
</blockquote>
regularity instead of resorting to use of struct or h*. This insure better<br>
packing/unpacking performance, as well as possible future support for one-sided<br>
communications.<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
George.<br>
<br>
<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
On Jan 15, 2015, at 19:31, Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu" target="_blank">gus@ldeo.columbia.edu</a>&gt; wrote:<br>
<br>
I never used MPI_Type_create_subarray, only MPI_Type_Vector.<br>
What I like about MPI_Type_Vector is that you can define a stride,<br>
hence you can address any regular pattern in memory.<br>
However, it envisages the array layout in memory as a big 1-D array,<br>
with a linear index progressing in either Fortran or C order.<br>
<br>
Somebody correct me please if I am wrong, but at first sight MPI_Type_Vector sounds more flexible to me than MPI_Type_create_subarray, exactly because the latter doesn&#39;t have strides.<br>
<br>
The downside is that you need to do some index arithmetic to figure<br>
the right strides, etc, to match the corresponding<br>
Fortran90 array sections.<br>
<br>
There are good examples in the &quot;MPI - The complete reference&quot; books I suggested to you before (actually in vol 1).<br>
<br>
Online I could find the two man pages (good information, but no example):<br>
<br>
<a href="http://www.open-mpi.org/doc/v1.8/man3/MPI_Type_vector.3.php" target="_blank">http://www.open-mpi.org/doc/<u></u>v1.8/man3/MPI_Type_vector.3.<u></u>php</a><br>
<a href="http://www.open-mpi.org/doc/v1.8/man3/MPI_Type_create_subarray.3.php" target="_blank">http://www.open-mpi.org/doc/<u></u>v1.8/man3/MPI_Type_create_<u></u>subarray.3.php</a><br>
<br>
There is a very simple 2D example of MPI_Type_vector using strides here:<br>
<br>
<a href="https://computing.llnl.gov/tutorials/mpi/#Derived_Data_Types" target="_blank">https://computing.llnl.gov/<u></u>tutorials/mpi/#Derived_Data_<u></u>Types</a><br>
<br>
and a similar one here:<br>
<br>
<a href="http://static.msi.umn.edu/tutorial/scicomp/general/MPI/content6.html" target="_blank">http://static.msi.umn.edu/<u></u>tutorial/scicomp/general/MPI/<u></u>content6.html</a><br>
<br>
Gus Correa<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
On 01/15/2015 06:53 PM, Diego Avesani wrote:<br>
dear George, dear Gus, dear all,<br>
Could you please tell me where I can find a good example?<br>
I am sorry but I can not understand the 3D array.<br>
<br>
<br>
Really Thanks<br>
<br>
Diego<br>
<br>
<br>
On 15 January 2015 at 20:13, George Bosilca &lt;<a href="mailto:bosilca@icl.utk.edu" target="_blank">bosilca@icl.utk.edu</a><br>
&lt;mailto:<a href="mailto:bosilca@icl.utk.edu" target="_blank">bosilca@icl.utk.edu</a>&gt;&gt; wrote:<br>
<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
    On Jan 15, 2015, at 06:02 , Diego Avesani &lt;<a href="mailto:diego.avesani@gmail.com" target="_blank">diego.avesani@gmail.com</a><br>
    &lt;mailto:<a href="mailto:diego.avesani@gmail.com" target="_blank">diego.avesani@gmail.<u></u>com</a>&gt;&gt; wrote:<br>
<br>
    Dear Gus, Dear all,<br>
    Thanks a lot.<br>
    MPI_Type_Struct works well for the first part of my problem, so I<br>
    am very happy to be able to use it.<br>
<br>
    Regarding MPI_TYPE_VECTOR.<br>
<br>
    I have studied it and for simple case it is clear to me what id<br>
    does (at least I believe). Foe example if I have a matrix define as:<br>
    REAL, ALLOCATABLE (AA(:,:))<br>
    ALLOCATE AA(100,5)<br>
<br>
    I could send part of it defining<br>
<br>
    CALL MPI_TYPE_VECTOR(5,1,5,MPI_<u></u>DOUBLE_PRECISION,/MY_NEW_TYPE/<u></u>)<br>
<br>
    after that I can send part of it with<br>
<br>
    CALL MPI_SEND( AA(1:/10/,:), /10/, /MY_NEW_TYPE/, 1, 0,<br>
    MPI_COMM_WORLD );<br>
<br>
    Have I understood correctly?<br>
<br>
    What I can do in case of three dimensional array? for example<br>
    AA(:,:,:), I am looking to MPI_TYPE_CREATE_SUBARRAY.<br>
    Is that the correct way?<br>
<br>
    Thanks again<br>
</blockquote>
<br>
    Indeed, using the subarray is the right approach independent on the<br>
    number of dimensions of the data (you can use it instead of<br>
    MPI_TYPE_VECTOR as well).<br>
<br>
       George.<br>
<br>
<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
<br>
<br>
<br>
    Diego<br>
<br>
<br>
    On 13 January 2015 at 19:04, Gus Correa &lt;<a href="mailto:gus@ldeo.columbia.edu" target="_blank">gus@ldeo.columbia.edu</a><br>
    &lt;mailto:<a href="mailto:gus@ldeo.columbia.edu" target="_blank">gus@ldeo.columbia.edu</a>&gt;<u></u>&gt; wrote:<br>
<br>
        Hi Diego<br>
        I guess MPI_Type_Vector is the natural way to send and receive<br>
        Fortran90 array sections (e.g. your QQMLS(:,50:100,:)).<br>
        I used that before and it works just fine.<br>
        I think that is pretty standard MPI programming style.<br>
        I guess MPI_Type_Struct tries to emulate Fortran90 and C<br>
        structures<br>
        (as you did in your previous code, with all the surprises<br>
        regarding alignment, etc), not array sections.<br>
        Also, MPI type vector should be more easy going (and probably<br>
        more efficient) than MPI type struct, with less memory<br>
        alignment problems.<br>
        I hope this helps,<br>
        Gus Correa<br>
<br>
        PS - These books have a quite complete description and several<br>
        examples<br>
        of all MPI objects and functions, including MPI types (native<br>
        and user defined):<br>
        <a href="http://mitpress.mit.edu/books/__mpi-complete-reference-0" target="_blank">http://mitpress.mit.edu/books/<u></u>__mpi-complete-reference-0</a><br>
        &lt;<a href="http://mitpress.mit.edu/books/mpi-complete-reference-0" target="_blank">http://mitpress.mit.edu/<u></u>books/mpi-complete-reference-0</a><u></u>&gt;<br>
        <a href="http://mitpress.mit.edu/books/__mpi-complete-reference-1" target="_blank">http://mitpress.mit.edu/books/<u></u>__mpi-complete-reference-1</a><br>
        &lt;<a href="http://mitpress.mit.edu/books/mpi-complete-reference-1" target="_blank">http://mitpress.mit.edu/<u></u>books/mpi-complete-reference-1</a><u></u>&gt;<br>
<br>
        [They cover MPI 1 and 2. I guess there is a new/upcoming book<br>
        with MPI 3, but for what you&#39;re doing 1 and 2 are more than<br>
        enough.]<br>
<br>
<br>
        On 01/13/2015 09:22 AM, Diego Avesani wrote:<br>
<br>
            Dear all,<br>
<br>
            I had some wonderful talking about MPI_type_create_struct adn<br>
            isend\irecv with<br>
            Gilles, Gustavo, George, Gus, Tom and Jeff. Now all is<br>
            more clear and my<br>
            program works.<br>
<br>
            Now I have another question. In may program I have matrix:<br>
<br>
            /QQMLS(:,:,:) /that is allocate as<br>
<br>
            /ALLOCATE(QQMLS(9,npt,18)/), where npt is the number of<br>
            particles<br>
<br>
            QQMLS is double precision.<br>
<br>
            I would like to sent form a CPU to another part of it, for<br>
            example,<br>
            sending QQMLS(:,50:100,:). I mean sending the QQMLS of the<br>
            particles<br>
            between 50 to 100.<br>
            I suppose that i could use MPI_Type_vector but I am not<br>
            sure. The<br>
            particle that I want to sent could be from 25 to 50 ecc..<br>
            ecc..so<br>
              blocklength changes everytime.<br>
<br>
            Do I have to use MPI_type_create_struct?<br>
            Do I have correctly understood MPI_Type_vector?<br>
<br>
            Thanks a lot<br>
<br>
<br>
            Diego<br>
<br>
<br>
<br>
            ______________________________<u></u>___________________<br>
            users mailing list<br>
            <a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a> &lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a>&gt;<br>
            Subscription:<br>
            <a href="http://www.open-mpi.org/__mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/__<u></u>mailman/listinfo.cgi/users</a><br>
            &lt;<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a>&gt;<br>
            Link to this post:<br>
            <a href="http://www.open-mpi.org/__community/lists/users/2015/01/__26171.php" target="_blank">http://www.open-mpi.org/__<u></u>community/lists/users/2015/01/<u></u>__26171.php</a><br>
            &lt;<a href="http://www.open-mpi.org/community/lists/users/2015/01/26171.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26171.php</a>&gt;<br>
<br>
<br>
        ______________________________<u></u>___________________<br>
        users mailing list<br>
        <a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a> &lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a>&gt;<br>
        Subscription:<br>
        <a href="http://www.open-mpi.org/__mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/__<u></u>mailman/listinfo.cgi/users</a><br>
        &lt;<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a>&gt;<br>
        Link to this post:<br>
        <a href="http://www.open-mpi.org/__community/lists/users/2015/01/__26172.php" target="_blank">http://www.open-mpi.org/__<u></u>community/lists/users/2015/01/<u></u>__26172.php</a><br>
        &lt;<a href="http://www.open-mpi.org/community/lists/users/2015/01/26172.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26172.php</a>&gt;<br>
<br>
<br>
    ______________________________<u></u>_________________<br>
    users mailing list<br>
    <a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a> &lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a>&gt;<br>
    Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
    Link to this post:<br>
    <a href="http://www.open-mpi.org/community/lists/users/2015/01/26184.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26184.php</a><br>
</blockquote>
<br>
<br>
    ______________________________<u></u>_________________<br>
    users mailing list<br>
    <a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a> &lt;mailto:<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a>&gt;<br>
    Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
    Link to this post:<br>
    <a href="http://www.open-mpi.org/community/lists/users/2015/01/26192.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26192.php</a><br>
<br>
<br>
<br>
<br>
______________________________<u></u>_________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26193.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26193.php</a><br>
</blockquote>
<br>
______________________________<u></u>_________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26194.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26194.php</a><br>
</blockquote>
______________________________<u></u>_________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26195.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26195.php</a><br>
<br>
</blockquote>
<br>
______________________________<u></u>_________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26206.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26206.php</a><br>
</blockquote>
<br>
______________________________<u></u>_________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26208.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26208.php</a><br>
<br>
</blockquote>
<br>
______________________________<u></u>_________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/<u></u>mailman/listinfo.cgi/users</a><br></div></div>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26210.php" target="_blank">http://www.open-mpi.org/<u></u>community/lists/users/2015/01/<u></u>26210.php</a></blockquote></div><br></div>


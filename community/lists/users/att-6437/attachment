<html><body>
<p>Robert -<br>
<br>
A return from a blocking send means the application send buffer is available for reuse.  If it is a BSEND, the application buffer could be available because the message data has been copied to the attached buffer or because the data has been delivered to the destination.  The application on the side that used BSEND only cares that the application send buffer is available and a receive on the destination side can get the data from somewhere.<br>
<br>
A return from a blocking receive means the data is available in the application receive buffer.  If there were a BRECV in the standard, what would it mean? It cannot return until the data is in the application receive buffer so at the same time the BRECV call is able to tell libmpi to &quot;use a scratch buffer&quot;, libmpi is also being told the address of the application buffer and would have no use for a scratch buffer. Before the BRECV call, libmpi could not know if the message will be matched by BRECV or some other kind of receive.<br>
<br>
There is a hidden optimization in most MPI implementations that will allow small sends to ship their data to the destination eagerly. When the data shows up at the destination and there is no matching receive, the data is buffered in space hidden within the MPI implementation.  When a receive call is made, libmpi will first check to see if the data is already available in this hidden scratch buffer. In this optimization, when there is a matching receive waiting for the data at the moment it arrives, the hidden buffering is bypassed.<br>
<br>
There is nothing in the MPI API to let an application say a receive or send should  use this hidden buffering. That is up to libmpi.<br>
<br>
There is a ready send defined  by the MPI standard which allows the send side to dictate that the message go immediately and libmpi need not attempt to buffer it.  If the application can be certain the matching receive is posted before the RSEND call is made, there is a possibility of some performance gains but pre-posting receives with absolute reliability is not as easy as you might expect.<br>
<br>
The danger with RSEND is that if the receive is not available the data must be discarded.  Since the MPI standard does not allow data to be lost, the next thing the MPI library will do after discarding the data is abort the job.<br>
<br>
<br>
Dick Treumann  -  MPI Team           <br>
IBM Systems &amp; Technology Group<br>
Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<tt>users-bounces@open-mpi.org wrote on 08/27/2008 08:41:59 AM:<br>
<br>
&gt; [image removed] </tt><br>
<tt>&gt; <br>
&gt; Re: [OMPI users] MPI_Brecv vs multiple MPI_Irecv</tt><br>
<tt>&gt; <br>
&gt; Robert Kubrick </tt><br>
<tt>&gt; <br>
&gt; to:</tt><br>
<tt>&gt; <br>
&gt; Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; 08/27/2008 08:51 AM</tt><br>
<tt>&gt; <br>
&gt; Sent by:</tt><br>
<tt>&gt; <br>
&gt; users-bounces@open-mpi.org</tt><br>
<tt>&gt; <br>
&gt; Cc:</tt><br>
<tt>&gt; <br>
&gt; mpich-discuss</tt><br>
<tt>&gt; <br>
&gt; Please respond to Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; Interesting, MPI_Brecv is not in the standard (MPI_Bsend is). I don't &nbsp;<br>
&gt; understand why a recv could not implemented with an external buffer.<br>
&gt; Anyway, my bad, I was assuming MPI_Brecv was on. Thanks George for &nbsp;<br>
&gt; pointing this out.<br>
&gt; <br>
&gt; On Aug 27, 2008, at 7:14 AM, George Bosilca wrote:<br>
&gt; <br>
&gt; &gt; What is the definition of a buffered receive ?<br>
&gt; &gt;<br>
&gt; &gt; &nbsp; george.<br>
&gt; &gt;<br>
&gt; &gt; On Aug 26, 2008, at 10:17 PM, Robert Kubrick wrote:<br>
&gt; &gt;<br>
&gt; &gt;&gt; From a performance point of view, which one is better:<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; MPI_Battach(10*sizeof(MSG))<br>
&gt; &gt;&gt; MPI_Brecv()<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; or<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; MPI_recv_init()<br>
&gt; &gt;&gt; MPI_recv_init()<br>
&gt; &gt;&gt; MPI_recv_init()<br>
&gt; &gt;&gt; ... /* 10 recv handlers */<br>
&gt; &gt;&gt; MPI_Start(all recv)<br>
&gt; &gt;&gt; MPI_Waitany()<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; I understand MPI_Brecv will require an extra message copy, from &nbsp;<br>
&gt; &gt;&gt; the attached buffer to the MPI_Brecv() buffer. I'd like to know if &nbsp;<br>
&gt; &gt;&gt; there other differences between the two methods.<br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; Thanks,<br>
&gt; &gt;&gt; Rob<br>
&gt; &gt;&gt; _______________________________________________<br>
&gt; &gt;&gt; users mailing list<br>
&gt; &gt;&gt; users@open-mpi.org<br>
&gt; &gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; &gt;<br>
&gt; &gt; _______________________________________________<br>
&gt; &gt; users mailing list<br>
&gt; &gt; users@open-mpi.org<br>
&gt; &gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; <br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; users@open-mpi.org<br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</tt></body></html>

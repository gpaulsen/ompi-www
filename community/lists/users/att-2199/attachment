<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<TITLE>RE: [OMPI users] removing hard-coded paths from OpenMPI shared libraries</TITLE>
</HEAD>
<BODY>
<!-- Converted from text/plain format -->

<P><FONT SIZE=2>Not knowing the openmpi build system, I am a little reluctant to say.&nbsp; But in most projects&nbsp; there is usually multiple paths that can be set at configure time.&nbsp; In most autoconfed projects it is called prefix.&nbsp; There are other ones that can be set for headers, etc.<BR>
<BR>
&nbsp;-----Original Message-----<BR>
From: &nbsp; Patrick Jessee [<A HREF="mailto:pj@fluent.com">mailto:pj@fluent.com</A>]<BR>
Sent:&nbsp;&nbsp; Mon Nov 20 11:56:48 2006<BR>
To:&nbsp;&nbsp;&nbsp;&nbsp; users@open-mpi.org<BR>
Subject:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [OMPI users] removing hard-coded paths from OpenMPI shared libraries<BR>
<BR>
<BR>
Hello.&nbsp; I'm wondering if anyone knows of a way to get OpenMPI to compile<BR>
shared libraries without hard-coding the installation directory in<BR>
them.&nbsp; After compiling and installing OpenMPI, the shared libraries have<BR>
the installation libraries hard-coded in them.&nbsp; For instance:<BR>
<BR>
$ ldd libmpi.so<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; liborte.so.0 =&gt;<BR>
/usr/local/fluent/develop/multiport4.4/packages/lnamd64/openmpi/openmpi-1.1.2/lib/liborte.so.0<BR>
(0x0000002a956ea000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libnsl.so.1 =&gt; /lib64/libnsl.so.1 (0x0000002a95852000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libutil.so.1 =&gt; /lib64/libutil.so.1 (0x0000002a95968000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libm.so.6 =&gt; /lib64/tls/libm.so.6 (0x0000002a95a6c000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libpthread.so.0 =&gt; /lib64/tls/libpthread.so.0 (0x0000002a95bc4000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libc.so.6 =&gt; /lib64/tls/libc.so.6 (0x0000002a95cd8000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libopal.so.0 =&gt;<BR>
/usr/local/fluent/develop/multiport4.4/packages/lnamd64/openmpi/openmpi-1.1.2/lib/libopal.so.0<BR>
(0x0000002a95f00000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /lib64/ld-linux-x86-64.so.2 (0x000000552aaaa000)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libdl.so.2 =&gt; /lib64/libdl.so.2 (0x0000002a9605a000)<BR>
<BR>
<BR>
In the above,<BR>
&quot;/usr/local/fluent/develop/multiport4.4/packages/lnamd64/openmpi/openmpi-1.1.2/lib&quot;<BR>
is hardcoded into libmpi.so using --rpath when libmpi.so is compiled.<BR>
<BR>
This is problematic because the installation cannot be moved after it is<BR>
installed.&nbsp; It is often useful to compile/install libraries on one<BR>
machine and then move the libraries to a different location on other<BR>
machines (of course, LD_LIBRARY_PATH or some means then needs to be used<BR>
to pick up libs are runtime).&nbsp; This relocation is also useful when<BR>
redistributing the MPI installation with an application.&nbsp; The hard-coded<BR>
paths prohibit this.<BR>
<BR>
I've tried to modify the &quot;--rpath&quot; argument in libtool and<BR>
opal/libltdl/libtool, but have not gotten this to work.<BR>
<BR>
Has anyone else had experience with this?&nbsp; (I'm building OpenMPI 1.1.2<BR>
on linux x86_64.)&nbsp; Thanks in advance for any potential help.<BR>
<BR>
Regards,<BR>
<BR>
-Patrick<BR>
<BR>
<BR>
</FONT>
</P>

</BODY>
</HTML>

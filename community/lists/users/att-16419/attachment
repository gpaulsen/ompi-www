<table cellspacing="0" cellpadding="0" border="0" ><tr><td valign="top" style="font: inherit;"><blockquote style="border-left: 2px solid rgb(16, 16, 255); margin-left: 5px; padding-left: 5px;"><br>From: Randolph Pullen &lt;randolph_pullen@yahoo.com.au&gt;<br>Subject: Re: Re: [OMPI users] is there an equiv of iprove for bcast?<br>To: users@open-mpi.or<br>Received: Monday, 2 May, 2011, 12:53 PM<br><br><div id="yiv1162651450"><table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td valign="top" style="font:inherit;">Non blocking Bcasts or tests would do it.<div>I currently have the clearing-house solution working but it is unsatisfying because of its serial node. - As it scales it will overload this node.<br><br></div><div>The problem rephrased:</div><div>Instead of n*2 processes, I am having to use n*2+1 with the extra process serially receiving listener messages on behalf of the workers before transmitting these messages to workers in its
 comm_group.</div><div><br></div><div>Is there a way to Bcast directly from each listener to the worker pool? &nbsp;(listeners must monitor their ports most of the time and cant participate in global bcasts)</div><div>Not knowing which listener is going to transmit prevents the correct comm_group being used with Bcast calls.</div><div><br>--- On <b>Sat, 30/4/11, Jeff Squyres <i>&lt;jsquyres@cisco.com&gt;</i></b> wrote:<br><blockquote style="border-left:2px solid rgb(16, 16, 255);margin-left:5px;padding-left:5px;"><br>From: Jeff Squyres &lt;jsquyres@cisco.com&gt;<br>Subject: Re: [OMPI users] is there an equiv of iprove for bcast?<br>To: randolph_pullen@yahoo.com.au, "Open MPI Users" &lt;users@open-mpi.org&gt;<br>Received: Saturday, 30 April, 2011, 7:17 AM<br><br><div class="yiv1162651450plainMail">On Apr 29, 2011, at 1:21 AM, Randolph Pullen wrote:<br><br>&gt; I am having a design issue:<br>&gt; My server application has 2 processes per node, 1 listener
 and 1 worker.<br>&gt; Each listener monitors a specified port for incoming TCP connections with the goal that on receipt of a request it will distribute it over the workers in a SIMD fashion.<br>&gt; <br>&gt; My problem is this: how can I get the workers to accept work from any of the listeners?<br>&gt; Making a separate communicator does not help as the sender is unknown.&nbsp; Other than making a serial 'clearing house' process I cant think
 of a way&nbsp; - Iprobe for Bcast would be useful.<br><br>I'm not quite sure I understand your question.<br><br>There currently is no probe for collectives, but MPI-3 has non-blocking collectives which you could MPI_Test for.&nbsp; There's a 3rd party library implementation called libNBC (non-blocking collectives) that you could use until such things become natively available.<br><br>-- <br>Jeff Squyres<br><a rel="nofollow">jsquyres@cisco.com</a><br>For corporate legal information go to:<br><a rel="nofollow" target="_blank" href="http://www.cisco.com/web/about/doing_business/legal/cri/">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br><br></div></blockquote></div></td></tr></tbody></table></div></blockquote></td></tr></table>

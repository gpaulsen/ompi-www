<html><head><meta http-equiv="Content-Type" content="text/html charset=us-ascii"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"><br><div><div>On Nov 12, 2013, at 8:56 AM, Matthieu Brucher &lt;<a href="mailto:matthieu.brucher@gmail.com">matthieu.brucher@gmail.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><div style="font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">It seems that argv[argc] should always be NULL according to the<br>standard.</div></blockquote><div><br></div>That is definitely true.</div><div><br></div><div><blockquote type="cite"><div style="font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;">So OMPI failure is not actually a bug!<br></div></blockquote><div><br></div><div>I think that is true as well, though I suppose we could try to catch it (doubtful - what if it isn't NULL but garbage? after all, you are looking past the end of the array)</div><div><br></div><div>Something else is also wrong here. You are never allowed to release argv entries as those belong to the system, so the last loop in your program is wrong. Also, you do something else that is wrong - you create a new argv array (argv_new), but then you set argv to point to that array - which messes up the system array again. On top of that, you changed the system value of argc instead of setting your own variable.</div><div><br></div><div><br></div></div><div><blockquote type="cite"><div style="font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><br>Cheers,<br><br>2013/11/12 Matthieu Brucher &lt;<a href="mailto:matthieu.brucher@gmail.com">matthieu.brucher@gmail.com</a>&gt;:<br><blockquote type="cite">Interestingly enough, in ompi_mpi_init, opal_argv_join is called<br>without then array length, so I suppose that in the usual argc/argv<br>couple, you have an additional value to argv which may be NULL. So try<br>allocating 3 additional values, the last being NULL, and it may work.<br><br>Cheers,<br><br>Matthieu<br><br>2013/11/12 Tang, Yu-Hang &lt;<a href="mailto:yuhang_tang@brown.edu">yuhang_tang@brown.edu</a>&gt;:<br><blockquote type="cite">I tried the following code without CUDA, the error is still there:<br><br>#include "mpi.h"<br><br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br><br>int main(int argc, char **argv)<br>{<br>&nbsp;&nbsp;&nbsp;// override command line arguments to make sure cudaengine get the<br>correct one<br>&nbsp;&nbsp;&nbsp;char **argv_new = new char*[ argc + 2 ];<br>&nbsp;&nbsp;&nbsp;for( int i = 0 ; i &lt; argc ; i++ )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;argv_new[i] = new char[ strlen( argv[i] ) + 1 ];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy( argv_new[i], argv[i] );<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;argv_new[ argc &nbsp;&nbsp;] = new char[ 32 ];<br>&nbsp;&nbsp;&nbsp;argv_new[ argc+1 ] = new char[ 32 ];<br>&nbsp;&nbsp;&nbsp;strcpy( argv_new[argc], &nbsp;&nbsp;"-device" );<br>&nbsp;&nbsp;&nbsp;sprintf( argv_new[argc+1], "%d", 0 );<br><br>&nbsp;&nbsp;&nbsp;argc += 2;<br>&nbsp;&nbsp;&nbsp;argv = argv_new;<br><br>&nbsp;&nbsp;&nbsp;MPI_Init(&amp;argc,&amp;argv);<br><br>&nbsp;&nbsp;&nbsp;// do something...<br><br>&nbsp;&nbsp;&nbsp;MPI_Finalize();<br><br>&nbsp;&nbsp;&nbsp;for( int i = 0 ; i &lt; argc ; i++ ) delete [] argv[i];<br>&nbsp;&nbsp;&nbsp;delete [] argv;<br>}<br><br>At the end of the program the pointer stored in argv is exactly that of<br>argv_new so this should not be a problem. Manually inserting printf tells me<br>that the fault occured at MPI_Init. The code works fine if I use<br>MPI_Init(NULL,NULL) instead. The same code also compiles and runs without a<br>problem on my laptop with mpich2-1.4.<br><br>Best,<br>Yu-Hang<br><br><br><br>On Tue, Nov 12, 2013 at 11:18 AM, Matthieu Brucher<br>&lt;<a href="mailto:matthieu.brucher@gmail.com">matthieu.brucher@gmail.com</a>&gt; wrote:<br><blockquote type="cite"><br>Hi,<br><br>Are you sure this is the correct code? This seems strange and not a good<br>idea:<br><br>&nbsp;&nbsp;MPI_Init(&amp;argc,&amp;argv);<br><br>&nbsp;&nbsp;&nbsp;// do something...<br><br>&nbsp;&nbsp;&nbsp;for( int i = 0 ; i &lt; argc ; i++ ) delete [] argv[i];<br>&nbsp;&nbsp;&nbsp;delete [] argv;<br><br>Did you mean argc_new and argv_new instead?<br>Do you have the same error without CUDA?<br><br>Cheers,<br><br>Matthieu<br><br><br>2013/11/12 Tang, Yu-Hang &lt;<a href="mailto:yuhang_tang@brown.edu">yuhang_tang@brown.edu</a>&gt;:<br><blockquote type="cite">Hi,<br><br>I tried to augment the command line argument list by allocating my own<br>list<br>of strings and passing them to MPI_Init, yet I got a segmentation fault<br>for<br>both OpenMPI 1.6.3 and 1.7.2, while the code works fine with MPICH2. The<br>code is:<br><br>#include "mpi.h"<br>#include "cuda_runtime.h"<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;cmath&gt;<br><br>int main(int argc, char **argv)<br>{<br>&nbsp;&nbsp;&nbsp;int device = 0;<br>&nbsp;&nbsp;&nbsp;int skip = 0;<br>&nbsp;&nbsp;&nbsp;bool skipmode = false;<br>&nbsp;&nbsp;&nbsp;bool specified = false;<br>&nbsp;&nbsp;&nbsp;for( int i = 0 ; i &lt; argc ; i++ )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( strcmp( argv[i], "-device" ) == 0 )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( argv[i][0] == '-' )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipmode = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skip = fabs( atoi( argv[i] ) );<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skipmode = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device = atoi( argv[i] );<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specified = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;if ( !specified || skipmode )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char* var;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int dev_count, local_rank = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( (var = getenv("SLURM_LOCALID")) != NULL) local_rank =<br>atoi(var);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if( (var = getenv("MV2_COMM_WORLD_LOCAL_RANK")) &nbsp;!= NULL)<br>local_rank = atoi(var);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if( (var = getenv("OMPI_COMM_WORLD_LOCAL_RANK")) != NULL)<br>local_rank = atoi(var);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cudaGetDeviceCount( &amp;dev_count );<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( skipmode )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( device == skip ) local_rank++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while( local_rank-- &gt; 0 )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device = (++device) % dev_count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( device == skip ) local_rank++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else device = local_rank % dev_count;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;// override command line arguments to make sure cudaengine get the<br>correct one<br>&nbsp;&nbsp;&nbsp;char **argv_new = new char*[ argc + 2 ];<br>&nbsp;&nbsp;&nbsp;for( int i = 0 ; i &lt; argc ; i++ )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;argv_new[i] = new char[ strlen( argv[i] ) + 1 ];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy( argv_new[i], argv[i] );<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;argv_new[ argc &nbsp;&nbsp;] = new char[ 32 ];<br>&nbsp;&nbsp;&nbsp;argv_new[ argc+1 ] = new char[ 32 ];<br>&nbsp;&nbsp;&nbsp;strcpy( argv_new[argc], &nbsp;&nbsp;"-device" );<br>&nbsp;&nbsp;&nbsp;sprintf( argv_new[argc+1], "%d", device );<br>&nbsp;&nbsp;&nbsp;argc += 2;<br>&nbsp;&nbsp;&nbsp;argv = argv_new;<br><br>&nbsp;&nbsp;&nbsp;cudaSetDevice( device );<br><br>&nbsp;&nbsp;&nbsp;MPI_Init(&amp;argc,&amp;argv);<br><br>&nbsp;&nbsp;&nbsp;// do something...<br><br>&nbsp;&nbsp;&nbsp;MPI_Finalize();<br><br>&nbsp;&nbsp;&nbsp;cudaDeviceReset();<br>&nbsp;&nbsp;&nbsp;for( int i = 0 ; i &lt; argc ; i++ ) delete [] argv[i];<br>&nbsp;&nbsp;&nbsp;delete [] argv;<br>}<br><br>When compiled using nvcc -ccbin mpic++, The error I got was:<br><br>[jueying:16317] *** Process received signal ***<br>[jueying:16317] Signal: Segmentation fault (11)<br>[jueying:16317] Signal code: Address not mapped (1)<br>[jueying:16317] Failing at address: 0x21<br>[jueying:16317] [ 0] /usr/lib64/libpthread.so.0() [0x39e5e0f000]<br>[jueying:16317] [ 1] /usr/lib64/libc.so.6() [0x39e5760551]<br>[jueying:16317] [ 2]<br>/opt/openmpi/1.7.2/lib/libopen-pal.so.5(opal_argv_join+0x39)<br>[0x7f460b993079]<br>[jueying:16317] [ 3]<br>/opt/openmpi/1.7.2/lib/libmpi.so.1(ompi_mpi_init+0x347)<br>[0x7f460c106a57]<br>[jueying:16317] [ 4] /opt/openmpi/1.7.2/lib/libmpi.so.1(MPI_Init+0x16b)<br>[0x7f460c12523b]<br>[jueying:16317] [ 5] ./lmp_jueying() [0x40c035]<br>[jueying:16317] [ 6] /usr/lib64/libc.so.6(__libc_start_main+0xf5)<br>[0x39e5621a05]<br>[jueying:16317] [ 7] ./lmp_jueying() [0x40dd21]<br>[jueying:16317] *** End of error message ***<br><br>Thanks for the help.<br><br>Best regards,<br>Yu-Hang Tang<br><br>_______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/users<br></blockquote><br><br><br>--<br>Information System Engineer, Ph.D.<br>Blog: <a href="http://matt.eifelle.com">http://matt.eifelle.com</a><br>LinkedIn: <a href="http://www.linkedin.com/in/matthieubrucher">http://www.linkedin.com/in/matthieubrucher</a><br>Music band: <a href="http://liliejay.com/">http://liliejay.com/</a><br>_______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/users<br></blockquote><br><br><br><br>--<br>Yu-Hang Tang<br>Room 105, 37 Manning St<br>Division of Applied Mathematics, Brown University<br>Providence, RI 02912<br><br>_______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/users<br></blockquote><br><br><br>--<br>Information System Engineer, Ph.D.<br>Blog: <a href="http://matt.eifelle.com">http://matt.eifelle.com</a><br>LinkedIn: <a href="http://www.linkedin.com/in/matthieubrucher">http://www.linkedin.com/in/matthieubrucher</a><br>Music band: <a href="http://liliejay.com/">http://liliejay.com/</a><br></blockquote><br><br><br>--<span class="Apple-converted-space">&nbsp;</span><br>Information System Engineer, Ph.D.<br>Blog:<span class="Apple-converted-space">&nbsp;</span><a href="http://matt.eifelle.com/">http://matt.eifelle.com</a><br>LinkedIn:<span class="Apple-converted-space">&nbsp;</span><a href="http://www.linkedin.com/in/matthieubrucher">http://www.linkedin.com/in/matthieubrucher</a><br>Music band:<span class="Apple-converted-space">&nbsp;</span><a href="http://liliejay.com/">http://liliejay.com/</a><br>_______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a></div></blockquote></div><br></body></html>

<html><body>
<p>The caller of <font size="4">MPI_INIT_THREAD </font>says what level of thread safety he would like to get from the MPI implementation. The implementation says what level of thread safety it provides.<br>
<br>
The implementation is free to provide more or less thread safety than requested.  The caller of <font size="4">MPI_INIT_THREAD</font> should look at the level the implementation says it is providing and act accordingly. If the application needs and  asks for  <font size="4">THREAD_MULTIPLE</font> and gets less than <font size="4">THREAD_MULTIPLE</font>, it must terminate itself.  If the application has a preferred mode that uses <font size="4">THREAD_MULTIPLE</font> and a mode that uses FUNNELED then when the <font size="4">MPI_INIT_THREAD</font> call returns FUNNELED, the application must adopt the FUNNELED mode.<br>
<br>
An application that asks for THREAD_SINGLE may hope there is a THREAD_SINGLE mode that gives better performance but nothing in a THREAD_SINGLE application can be made incorrect by an implementation providing <font size="4">THREAD_MULTIPLE</font>.<br>
<br>
If the application will make MPI calls from multiple threads and <font size="4">MPI_INIT_THREAD</font> has returned FUNNELED, the application must be willing to take the steps that ensure there will never be concurrent calls to MPI from the threads. The threads will take turns - without fail.<br>
<br>
<br>
Dick Treumann  -  MPI Team           <br>
IBM Systems &amp; Technology Group<br>
Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<tt>users-bounces@open-mpi.org wrote on 03/03/2010 11:59:45 AM:<br>
<br>
&gt; [image removed] </tt><br>
<tt>&gt; <br>
&gt; Re: [OMPI users] MPI_Init() and MPI_Init_thread()</tt><br>
<tt>&gt; <br>
&gt; Brian Budge </tt><br>
<tt>&gt; <br>
&gt; to:</tt><br>
<tt>&gt; <br>
&gt; Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; 03/03/2010 12:04 PM</tt><br>
<tt>&gt; <br>
&gt; Sent by:</tt><br>
<tt>&gt; <br>
&gt; users-bounces@open-mpi.org</tt><br>
<tt>&gt; <br>
&gt; Please respond to Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; I believe that it specifies the *minimum* threading model <br>
&gt; supported.  If I recall, opmi is already funnel safe even in single <br>
&gt; mode.  However, if mpi calls are made from outside the main thread, <br>
&gt; you should specify funneled for portability</tt><br>
<tt>&gt;   Brian</tt><br>
<tt>&gt; On Mar 2, 2010 11:59 PM, &quot;Terry Frankcombe&quot; &lt;terry@chem.gu.se&gt; wrote:<br>
&gt; <br>
&gt; I can't speak for the developers.  However, I think it's to do with the<br>
&gt; library internals.<br>
&gt; <br>
&gt; <br>
&gt; <br>
&gt; &gt;From here: <a href="http://www.mpi-forum.org/docs/mpi-20-html/node165.htm">http://www.mpi-forum.org/docs/mpi-20-html/node165.htm</a><br>
&gt; <br>
&gt; &quot;Advice to implementors.<br>
&gt; <br>
&gt; &quot;If provided is not MPI_THREAD_SINGLE then the MPI library should not<br>
&gt; invoke C/ C++/Fortran library calls that are not thread safe, e.g., in<br>
&gt; an environment where malloc is not thread safe, then malloc should not<br>
&gt; be used by the MPI library.<br>
&gt; <br>
&gt; &quot;Some implementors may want to use different MPI libraries for different<br>
&gt; levels of thread support. They can do so using dynamic linking and<br>
&gt; selecting which library will be linked when MPI_INIT_THREAD is invoked.<br>
&gt; If this is not possible, then optimizations for lower levels of thread<br>
&gt; support will occur only when the level of thread support required is<br>
&gt; specified at link time. ( End of advice to implementors.)&quot;</tt><br>
<tt>&gt; <br>
&gt; <br>
&gt; <br>
&gt; On Wed, 2010-03-03 at 16:33 +0900, Yuanyuan ZHANG wrote:<br>
&gt; &gt; Hi all,<br>
&gt; &gt; <br>
&gt; &gt; I am a beginner of MPI an..._______________________________________________<br>
&gt; users mailing list<br>
&gt; users@open-mpi.org<br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a></tt></body></html>

Hi,  I am attempting to debug a memory corruption in an mpi program using valgrind.  Howver, when I run with valgrind I get semi-random segfaults and valgrind messages with the openmpi library.  Here is an example of such a seg fault:<br>

<br>==6153==<br>==6153== Invalid read of size 8<br>==6153==    at 0x19102EA0: (within /usr/lib/openmpi/lib/openmpi/mca_btl_sm.so)<br>==6153==    by 0x182ABACB: (within /usr/lib/openmpi/lib/openmpi/mca_pml_ob1.so)<br>==6153==    by 0x182A3040: (within /usr/lib/openmpi/lib/openmpi/mca_pml_ob1.so)<br>

==6153==    by 0xB425DD3: PMPI_Isend (in /usr/lib/openmpi/lib/libmpi.so.0.0.0)<br>==6153==    by 0x7B83DA8: int Uintah::SFC&lt;double&gt;::MergeExchange&lt;unsigned char&gt;(int, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;) (SFC.h:2989)<br>

==6153==    by 0x7B84A8F: void Uintah::SFC&lt;double&gt;::Batchers&lt;unsigned char&gt;(std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;) (SFC.h:3730)<br>

==6153==    by 0x7B8857B: void Uintah::SFC&lt;double&gt;::Cleanup&lt;unsigned char&gt;(std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;, std::vector&lt;Uintah::History&lt;unsigned char&gt;, std::allocator&lt;Uintah::History&lt;unsigned char&gt; &gt; &gt;&amp;) (SFC.h:3695)<br>

==6153==    by 0x7B88CC6: void Uintah::SFC&lt;double&gt;::Parallel0&lt;3, unsigned char&gt;() (SFC.h:2928)<br>==6153==    by 0x7C00AAB: void Uintah::SFC&lt;double&gt;::Parallel&lt;3, unsigned char&gt;() (SFC.h:1108)<br>==6153==    by 0x7C0EF39: void Uintah::SFC&lt;double&gt;::GenerateDim&lt;3&gt;(int) (SFC.h:694)<br>

==6153==    by 0x7C0F0F2: Uintah::SFC&lt;double&gt;::GenerateCurve(int) (SFC.h:670)<br>==6153==    by 0x7B30CAC: Uintah::DynamicLoadBalancer::useSFC(Uintah::Handle&lt;Uintah::Level&gt; const&amp;, int*) (DynamicLoadBalancer.cc:429)<br>

==6153==  Address 0x10 is not stack&#39;d, malloc&#39;d or (recently) free&#39;d<br>^G^G^GThread &quot;main&quot;(pid 6153) caught signal SIGSEGV at address (nil) (segmentation violation)<br><br>Looking at the code for our isend at SFC.h:298 does not seem to have any errors:  <br>

<br>=============================================<br>  MergeInfo&lt;BITS&gt; myinfo,theirinfo;<br><br>  MPI_Request srequest, rrequest;<br>  MPI_Status status;<br><br>  myinfo.n=n;<br>  if(n!=0)<br>  {<br>    myinfo.min=sendbuf[0].bits;<br>

    myinfo.max=sendbuf[n-1].bits;<br>  }<br>  //cout &lt;&lt; rank &lt;&lt; &quot; n:&quot; &lt;&lt; n &lt;&lt; &quot; min:&quot; &lt;&lt; (int)myinfo.min &lt;&lt; &quot;max:&quot; &lt;&lt; (int)myinfo.max &lt;&lt; endl;<br>

<br>  MPI_Isend(&amp;myinfo,sizeof(MergeInfo&lt;BITS&gt;),MPI_BYTE,to,0,Comm,&amp;srequest);<br>==============================================<br><br>myinfo is a struct located on the stack, to is the rank of the processor that the message is being sent to, and srequest is also on the stack.  When I don&#39;t run with valgrind my program runs past this point just fine.  <br>

<br>I am currently using openmpi 1.3 from the debian unstable branch.  I also see the same type of segfault in a different portion of the code involving an MPI_Allgather which can be seen below:<br><br>==============================================<br>

==22736== Use of uninitialised value of size 8<br>==22736==    at 0x19104775: mca_btl_sm_component_progress (opal_list.h:322)<br>==22736==    by 0x1382CE09: opal_progress (opal_progress.c:207)<br>==22736==    by 0xB404264: ompi_request_default_wait_all (condition.h:99)<br>

==22736==    by 0x1A1ADC16: ompi_coll_tuned_sendrecv_actual (coll_tuned_util.c:55)<br>==22736==    by 0x1A1B61E1: ompi_coll_tuned_allgatherv_intra_bruck (coll_tuned_util.h:60)<br>==22736==    by 0xB418B2E: PMPI_Allgatherv (pallgatherv.c:121)<br>

==22736==    by 0x646CCF7: Uintah::Level::setBCTypes() (Level.cc:728)<br>==22736==    by 0x646D823: Uintah::Level::finalizeLevel() (Level.cc:537)<br>==22736==    by 0x6465457: Uintah::Grid::problemSetup(Uintah::Handle&lt;Uintah::ProblemSpec&gt; const&amp;, Uintah::ProcessorGroup const*, bool) (Grid.cc:866)<br>

==22736==    by 0x8345759: Uintah::SimulationController::gridSetup() (SimulationController.cc:243)<br>==22736==    by 0x834F418: Uintah::AMRSimulationController::run() (AMRSimulationController.cc:117)<br>==22736==    by 0x4089AE: main (sus.cc:629)<br>

==22736==<br>==22736== Invalid read of size 8<br>==22736==    at 0x19104775: mca_btl_sm_component_progress (opal_list.h:322)<br>==22736==    by 0x1382CE09: opal_progress (opal_progress.c:207)<br>==22736==    by 0xB404264: ompi_request_default_wait_all (condition.h:99)<br>

==22736==    by 0x1A1ADC16: ompi_coll_tuned_sendrecv_actual (coll_tuned_util.c:55)<br>==22736==    by 0x1A1B61E1: ompi_coll_tuned_allgatherv_intra_bruck (coll_tuned_util.h:60)<br>==22736==    by 0xB418B2E: PMPI_Allgatherv (pallgatherv.c:121)<br>

==22736==    by 0x646CCF7: Uintah::Level::setBCTypes() (Level.cc:728)<br>==22736==    by 0x646D823: Uintah::Level::finalizeLevel() (Level.cc:537)<br>==22736==    by 0x6465457: Uintah::Grid::problemSetup(Uintah::Handle&lt;Uintah::ProblemSpec&gt; const&amp;, Uintah::ProcessorGroup const*, bool) (Grid.cc:866)<br>

==22736==    by 0x8345759: Uintah::SimulationController::gridSetup() (SimulationController.cc:243)<br>==22736==    by 0x834F418: Uintah::AMRSimulationController::run() (AMRSimulationController.cc:117)<br>==22736==    by 0x4089AE: main (sus.cc:629)<br>

================================================================<br><br>Are these problems with openmpi and is there any known work arounds?<br><br>Thanks,<br>Justin<br>


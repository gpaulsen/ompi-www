<html><body><div style="color:#000; background-color:#fff; font-family:times new roman, new york, times, serif;font-size:12pt"><div><span><font class="Apple-style-span" size="3">I have already&nbsp;</font>implemented<font class="Apple-style-span" size="3">&nbsp;test/sleep code but the main problem is with the broadcasts that send out the SIMD instructions, because these are blocking and when the system is idle, its these guys who consume the CPU while waiting for work.</font></span></div><div><span>Implementing<font class="Apple-style-span" size="3">&nbsp;</font></span><font class="Apple-style-span" size="3">&nbsp;</font></div>






<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Template>Normal.dotm</o:Template>
  <o:Revision>0</o:Revision>
  <o:TotalTime>0</o:TotalTime>
  <o:Pages>1</o:Pages>
  <o:Words>7</o:Words>
  <o:Characters>40</o:Characters>
  <o:Company>Gridmatics</o:Company>
  <o:Lines>1</o:Lines>
  <o:Paragraphs>1</o:Paragraphs>
  <o:CharactersWithSpaces>49</o:CharactersWithSpaces>
  <o:Version>12.0</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>0</w:Zoom>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:PunctuationKerning/>
  <w:DrawingGridHorizontalSpacing>18 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>18 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:DontGrowAutofit/>
   <w:DontAutofitConstrainedTables/>
   <w:DontVertAlignInTxbx/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="276">
 </w:LatentStyles>
</xml><![endif]-->

<!--[if gte mso 10]>
<style>
 /* Style Definitions */
table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin-top:0cm;
	mso-para-margin-right:0cm;
	mso-para-margin-bottom:10.0pt;
	mso-para-margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-ascii-font-family:Cambria;
	mso-ascii-theme-font:minor-latin;
	mso-hansi-font-family:Cambria;
	mso-hansi-theme-font:minor-latin;}
</style>
<![endif]-->



<!--StartFragment-->



<div class="MsoNormal" style="font-family: 'times new roman', 'new york', times, serif; font-size: 12pt; margin-top: 0cm; margin-right: 23pt; margin-left: 23pt; margin-bottom: 0.0001pt; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(218, 218, 218); background-position: initial initial; background-repeat: initial initial; "><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;;
mso-bidi-font-family:Courier;color:black;background:white">echo "1"
&gt; /proc/sys/kernel/sched_compat_yield<o:p></o:p></span></div>

<!--EndFragment--><div><font class="Apple-style-span" size="3">Helps quite a bit (thanks Jeff) in that it makes yield more&nbsp;aggressive&nbsp;but the&nbsp;</font>fundamental<font class="Apple-style-span" size="3">&nbsp;problem still remains.</font></div><div style="font-family: 'times new roman', 'new york', times, serif; font-size: 12pt; "><br></div><div style="font-family: 'times new roman', 'new york', times, serif; font-size: 12pt; ">A non-blocking broadcast would fix it, and/or a good scheduler.</div><div style="font-family: 'times new roman', 'new york', times, serif; font-size: 12pt; "><br></div><div style="font-family: 'times new roman', 'new york', times, serif; font-size: 12pt; ">Do other MPI's use busy loops so extensively in there comms?</div><div style="font-family: 'times new roman', 'new york', times, serif; font-size: 12pt; "><br></div><div style="font-size: 12pt; font-family: 'times new roman', 'new york', times, serif; "><div
 style="font-size: 12pt; font-family: 'times new roman', 'new york', times, serif; "><font size="2" face="Arial"><hr size="1"><b><span style="font-weight:bold;">From:</span></b> Jeff Squyres &lt;jsquyres@cisco.com&gt;<br><b><span style="font-weight: bold;">To:</span></b> Open MPI Users &lt;users@open-mpi.org&gt;<br><b><span style="font-weight: bold;">Sent:</span></b> Friday, 2 September 2011 9:45 PM<br><b><span style="font-weight: bold;">Subject:</span></b> Re: [OMPI users] High CPU usage with yield_when_idle =1 on CFS<br></font><br>This might also be in reference to the issue that shed_yield() really does nothing in recent Linux kernels (there was big debate about this at kernel.org).&nbsp; <br><br>IIRC, there's some kernel parameter that you can tweak to make it behave better, but I'm afraid I don't remember what it is.&nbsp; Some googling might find it...?<br><br><br>On Sep 1, 2011, at 10:06 PM, Eugene Loh wrote:<br><br>&gt; On 8/31/2011 11:48 PM,
 Randolph Pullen wrote:<br>&gt;&gt; I recall a discussion some time ago about yield, the Completely F%â€™d Scheduler (CFS) and OpenMPI.<br>&gt;&gt; <br>&gt;&gt; My system is currently suffering from massive CPU use while busy waiting.&nbsp; This gets worse as I try to bump up user concurrency.<br>&gt; Yup.<br>&gt;&gt; I am running with yield_when_idle but its not enough.<br>&gt; Yup.<br>&gt;&gt; Is there anything else I can do to release some CPU resource?<br>&gt;&gt; I recall seeing one post where usleep(1) was inserted around the yields, is this still feasible?<br>&gt;&gt; <br>&gt;&gt; I'm using 1.4.1 - is there a fix to be found in upgrading?<br>&gt;&gt; Unfortunately I am stuck&nbsp; with the CFS as I need Linux.&nbsp; Currently its Ubuntu 10.10 with 2.6.32.14<br>&gt; I think OMPI doesn't yet do (much/any) better than what you've observed.&nbsp; You might be able to hack something up yourself.&nbsp; In something I did recently, I replaced blocking
 sends and receives with test/nanosleep loops.&nbsp; An "optimum" solution (minimum latency, optimal performance at arbitrary levels of under and oversubscription) might be elusive, but hopefully you'll quickly be able to piece together something for your particular purposes.&nbsp; In my case, I was lucky and the results were very gratifying... my bottleneck vaporized for modest levels of oversubscription (2-4 more processes than processors).<br>&gt; _______________________________________________<br>&gt; users mailing list<br>&gt; <a ymailto="mailto:users@open-mpi.org" href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br><br><br>-- <br>Jeff Squyres<br><a ymailto="mailto:jsquyres@cisco.com" href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>For corporate legal information go to:<br><a
 href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br><br><br>_______________________________________________<br>users mailing list<br><a ymailto="mailto:users@open-mpi.org" href="mailto:users@open-mpi.org">users@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br><br><br></div></div></div></body></html>

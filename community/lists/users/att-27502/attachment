<div dir="ltr">Roy,<div><br></div><div>First and foremost the two datatype markers (MPI_LB and MPI_UB) have been deprecated from MPI 3.0 for exactly the reason you encountered. Once a datatype is annotated with these markers, they are propagated to all derived types, leading to an unnatural datatype definition. This behavior is enforced by the definition of the typemap specified by the equation on Section 4.1 page 105 line 18. Unfortunately, the only way to circumvent this issue, is to manually set the UB to all newly created datatypes.</div><div><br></div><div>Thus, to fix your datatype composition you just have to add an explicit MPI_LB (set to 0) when calling the MPI_Type_struct on your second struct datatype.</div><div><br></div><div>  George.</div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Tue, Aug 25, 2015 at 10:57 PM, Roy Stogner <span dir="ltr">&lt;<a href="mailto:roystgnr@ices.utexas.edu" target="_blank">roystgnr@ices.utexas.edu</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
This may be a general MPI question rather than an OpenMPI-specific<br>
question.  I apologize if I&#39;ve picked the wrong mailing list for such,<br>
and in that case I&#39;d welcome being redirected to a more appropriate<br>
forum.<br>
<br>
I&#39;m trying to debug a problem in a much more complex system, but<br>
I&#39;ve boiled it down to a ~100 line MPI-1 test case which exhibits<br>
similarly unexpected behavior.  The test case first uses<br>
MPI_Type_struct to create a data type corresponding to a 2D point (two<br>
doubles), then again to create a heterogenous pair of a single double<br>
preceding the 2D point data type.<br>
<br>
If I use a single block to create the inner data type, then the result<br>
works as expected for all operations I&#39;ve tested.<br>
<br>
If I use MPI_LB to indicate a lower bound of 0 on the inner data type<br>
(which I believe should be redundant in this case, but which can be<br>
necessary for more intricate data types in the complex system), then<br>
the result fails.<br>
<br>
Specifically, the recursive data type then gives corrupt results when<br>
communicating vectors of these pairs, and even without communication<br>
we can see unexpected behavior by querying its extents: A triplet of<br>
doubles should begin at byte 0 and end at byte 24, but querying<br>
MPI_Type_lb gives a beginning at byte 8 if MPI_LB has been used in the<br>
construction.<br>
<br>
Running mpicxx on the attached file (equivalently, the code pasted at<br>
<a href="https://github.com/libMesh/libmesh/issues/631#issuecomment-134800297" rel="noreferrer" target="_blank">https://github.com/libMesh/libmesh/issues/631#issuecomment-134800297</a><br>
in case file attachments get stripped here) demonstrates the problem<br>
on my (64-bit) system.  For simplicity the displacements here are<br>
hard-coded rather than portable, but the original MPI_Address and<br>
MPI_Get_address based routines failed in the same way.<br>
<br>
Our full system only fails with MPICH2, but that may just have been<br>
luck?  With this test case I&#39;m seeing failures with both MPICH2 and<br>
OpenMPI and so I&#39;ve got to assume my own code is at fault.  Any help<br>
would be appreciated.  If there&#39;s anything I can do to make the issue<br>
easier to replicate please let me know.<br>
<br>
Thanks,<br>
---<br>
Roy Stogner<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" rel="noreferrer" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/08/27495.php" rel="noreferrer" target="_blank">http://www.open-mpi.org/community/lists/users/2015/08/27495.php</a><br></blockquote></div><br></div>


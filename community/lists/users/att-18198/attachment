Hi,
<br>
<br>for several days I am trying to create MPI derived datatype in order to send/receive an user defined object. I&#39;m trying to implement it
using MPI::Datatype::Create_struct. 
<br>I have consulted several threads from the archive<br><br><a href="http://www.open-mpi.org/community/lists/users/2012/01/18093.php">http://www.open-mpi.org/community/lists/users/2012/01/18093.php</a><br><a href="http://www.open-mpi.org/community/lists/users/2005/08/0123.php">http://www.open-mpi.org/community/lists/users/2005/08/0123.php</a><br>

<a href="http://www.open-mpi.org/community/lists/users/2008/08/6302.php">http://www.open-mpi.org/community/lists/users/2008/08/6302.php</a><br><br>but I&#39;m still havening difficulties to solve this issue.<br>There are some particular features that makes the task more difficult. Let me explain: the obj. that I want to transmit is instantiated from a class called MemberBlock. This class is a template class and contains: dynamic allocating arrays, and objs. instantiated from other classes. Bellow is the class declaration.<br>

<br>Therefore how can I construct a MPI dervied data type in this situation? Any suggestions are highly appreciated <br><br>Thank you,<br>Victor Pomponiu<br><br>-------------------------------------------------------------------------------------------------------------------------<br>

/**<br> * VecData.h:         Interface class for data appearing in vector format.<br> */<br># include &quot;DistData.h&quot;         //Interface class for data having a pairwise distance measure.<br>
<br>class VecData: public DistData {<br><br>public:<br>// no properties, only public/private methods;<br>.........<br>}<br><br>/**<br> * VecDataBlock.h:    Base class for storable data having a pairwise <br> *                             distance measure.<br>


*/ <br><br>class VecDataBlock {<br><br>public:<br>  VecData** dataList;           // Array of data items for this block.                                                                      <br>  int numItems;                   // Number of data items assigned to the block.<br>


  int blockID;                      // Integer identifier for this block.<br>  int sampleID;                   // The sample identifier for this block                             <br>  int globalOffset;               // Index of the first block item relative to the full data set.<br>


  char* fileNamePrefix;       // The file name prefix used for saving data to disk.<br>  char commentChar;         // The character denoting input comment lines.<br><br>// methods ..........<br>}<br><br><br>/**<br> * MemberBlock.h:   Class storing and managing member lists for a given<br>


 *                            block of data objects.<br> */<br><br>class MemberBlock_base {<br>public:<br>  virtual ~MemberBlock_base () {};<br>};<br><br>template &lt;class ScoreType&gt;<br>class MemberBlock: public MemberBlock_base {<br>


<br>public:<br>  char* fileNamePrefix;         // The file name prefix for the block save file.<br>  ofstream* saveFile;           // refers to an open file currently being used for accumulating<br>  VecDataBlock* dataBlock; // The block of data items upon which                               <br>


  int globalOffset;                // The position of this block with respect to the global ordering.<br>  int numItems;                  // The number of data items assigned to the block.<br>  int sampleLevel;              // The sample level from which                                <br>


  ScoreType** memberScoreLList;  // the scores of members associated with<br>                                                   //   each data the item.                             <br>  int** memberIndexLList;    //  for each data item a list of global indices of its members.                               <br>


  int* memberSizeList;        //   the number of list members.<br><br>  int memberListBufferSize;   // buffer size for storing an individual member list.<br>  int saveCount;                // Keeps track of the number of member lists  saved <br>


  float* tempDistBuffer;      // A temporary buffer for storing distances, used for breaking<br><br>//methods....<br>}<br><br>


<div dir="ltr">I&#39;m not entirely clear on the sequence of commands here. Is the user requesting a new allocation from maui/torque for each run? In this case, it&#39;s possible we aren&#39;t correctly picking up the external binding from Torque. This would likely be a bug we would need to fix.<div><br></div><div>Or is the user obtaining a single allocation of the entire node, and then using mpirun to start multiple jobs in parallel? In this case, the issue is that the user needs to tell mpirun which cpus to confine itself to or else it will always assume that all cpus belong to it. This will lead to overloading the lower core numbers. The problem here can be resolved by adding --cpuset 0,1,2 (or whatever pattern you like) to each cmd line.<br><div><br></div><div>You might also consider updating to 1.8.4 as we did fix some integration bugs. I don&#39;t recall something specific to this question, but it could be my memory at fault.</div></div><div><br></div><div>Ralph</div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Tue, Jan 27, 2015 at 11:39 PM, DOHERTY, Greg <span dir="ltr">&lt;<a href="mailto:gdz@ansto.gov.au" target="_blank">gdz@ansto.gov.au</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">





<div lang="EN-AU" link="blue" vlink="purple">
<div>
<p class="MsoNormal">This might or might not be related to openmpi 1.8.1. I have not seen the problem with the same program and previous versions of openmpi<u></u><u></u></p>
<p class="MsoNormal">We have 64 core AMD nodes. I have recently recompiled  a large Monte Carlo program using 1.8.1 version of openmpi. Users start this program using maui/torque asking for a number of cores, usually on only one node. One run of the program
 asking for any number of cores up to 64 runs with full cpu utilisation on each core. A user might start a run asking for 16 cores – fine. Then he starts a second run on the same node, asking for another 16 cores. Immediately the cpu utilisation on all cores
 of the first job drops to 50%, as it is for the newly starting job. If a different program were using the remaining 32 cores on the same node at the same time, the cpu utilisation of its cores is unaffected. If we qdel the second 16 core job, the cpu utilisation
 of each core of the first job immediately climbs back to 100%. Any suggestions please, on where I might start looking for the solution to this problem?   <u></u><u></u></p>
<p class="MsoNormal">Greg Doherty<u></u><u></u></p>
<p class="MsoNormal">ANSTO<u></u><u></u></p>
</div>
</div>

<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2015/01/26239.php" target="_blank">http://www.open-mpi.org/community/lists/users/2015/01/26239.php</a><br></blockquote></div><br></div>


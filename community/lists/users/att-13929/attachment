<table cellspacing="0" cellpadding="0" border="0" ><tr><td valign="top" style="font: inherit;">Thanks,&nbsp; although “An intercommunicator cannot be used for collective communication.” i.e ,&nbsp; bcast calls., I can see how the MPI_Group_xx calls can be used to produce a useful group and then communicator;&nbsp; - thanks again but this is really the side issue to my main question about MPI_Bcast.<br><br>I seem to have duplicate concurrent processes interfering with each other.&nbsp; This would appear to be a breach of the MPI safety dictum, ie MPI_COMM_WORD is supposed to only include the processes started by a single mpirun command and isolate these processes from other similar groups of processes safely.<br><br>So, it would appear to be a bug.&nbsp; If so this has significant implications for environments such as mine, where it may often occur that the same program is run by different users simultaneously.&nbsp; <br><br>It is really this issue
 that it concerning me, I can rewrite the code but if it can crash when 2 copies run at the same time, I have a much bigger problem.<br><br>My suspicion is that a within the MPI_Bcast handshaking, a syncronising broadcast call may be colliding across the environments.&nbsp; My only evidence is an otherwise working program waits on broadcast reception forever when two or more copies are run at [exactly] the same time.<br><br>Has anyone else seen similar behavior in concurrently running programs that perform lots of broadcasts perhaps?<br><br>Randolph<br><br><br>--- On <b>Sun, 8/8/10, David Zhang <i>&lt;solarbikedz@gmail.com&gt;</i></b> wrote:<br><blockquote style="border-left: 2px solid rgb(16, 16, 255); margin-left: 5px; padding-left: 5px;"><br>From: David Zhang &lt;solarbikedz@gmail.com&gt;<br>Subject: Re: [OMPI users] MPI_Bcast issue<br>To: "Open MPI Users" &lt;users@open-mpi.org&gt;<br>Received: Sunday, 8 August, 2010, 12:34 PM<br><br><div
 class="plainMail">In particular, intercommunicators<br><br>On 8/7/10, Aurélien Bouteiller &lt;<a ymailto="mailto:bouteill@eecs.utk.edu" href="/mc/compose?to=bouteill@eecs.utk.edu">bouteill@eecs.utk.edu</a>&gt; wrote:<br>&gt; You should consider reading about communicators in MPI.<br>&gt;<br>&gt; Aurelien<br>&gt; --<br>&gt; Aurelien Bouteiller, Ph.D.<br>&gt; Innovative Computing Laboratory, The University of Tennessee.<br>&gt;<br>&gt; Envoyé de mon iPad<br>&gt;<br>&gt; Le Aug 7, 2010 à 1:05, Randolph Pullen &lt;<a ymailto="mailto:randolph_pullen@yahoo.com.au" href="/mc/compose?to=randolph_pullen@yahoo.com.au">randolph_pullen@yahoo.com.au</a>&gt; a<br>&gt; écrit :<br>&gt;<br>&gt;&gt; I seem to be having a problem with MPI_Bcast.<br>&gt;&gt; My massive I/O intensive data movement program must broadcast from n to n<br>&gt;&gt; nodes. My problem starts because I require 2 processes per node, a sender<br>&gt;&gt; and a receiver and I have implemented
 these using MPI processes rather<br>&gt;&gt; than tackle the complexities of threads on MPI.<br>&gt;&gt;<br>&gt;&gt; Consequently, broadcast and calls like alltoall are not completely<br>&gt;&gt; helpful.&nbsp; The dataset is huge and each node must end up with a complete<br>&gt;&gt; copy built by the large number of contributing broadcasts from the sending<br>&gt;&gt; nodes.&nbsp; Network efficiency and run time are paramount.<br>&gt;&gt;<br>&gt;&gt; As I don’t want to needlessly broadcast all this data to the sending nodes<br>&gt;&gt; and I have a perfectly good MPI program that distributes globally from a<br>&gt;&gt; single node (1 to N), I took the unusual decision to start N copies of<br>&gt;&gt; this program by spawning the MPI system from the PVM system in an effort<br>&gt;&gt; to get my N to N concurrent transfers.<br>&gt;&gt;<br>&gt;&gt; It seems that the broadcasts running on concurrent MPI environments<br>&gt;&gt; collide and cause all but
 the first process to hang waiting for their<br>&gt;&gt; broadcasts.&nbsp; This theory seems to be confirmed by introducing a sleep of<br>&gt;&gt; n-1 seconds before the first MPI_Bcast&nbsp; call on each node, which results<br>&gt;&gt; in the code working perfectly.&nbsp; (total run time 55 seconds, 3 nodes,<br>&gt;&gt; standard TCP stack)<br>&gt;&gt;<br>&gt;&gt; My guess is that unlike PVM, OpenMPI implements broadcasts with broadcasts<br>&gt;&gt; rather than multicasts.&nbsp; Can someone confirm this?&nbsp; Is this a bug?<br>&gt;&gt;<br>&gt;&gt; Is there any multicast or N to N broadcast where sender processes can<br>&gt;&gt; avoid participating when they don’t need to?<br>&gt;&gt;<br>&gt;&gt; Thanks in advance<br>&gt;&gt; Randolph<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt;<br>&gt;&gt; _______________________________________________<br>&gt;&gt; users mailing list<br>&gt;&gt; <a ymailto="mailto:users@open-mpi.org"
 href="/mc/compose?to=users@open-mpi.org">users@open-mpi.org</a><br>&gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>&gt;<br><br>-- <br>Sent from my mobile device<br><br>David Zhang<br>University of California, San Diego<br><br>_______________________________________________<br>users mailing list<br><a ymailto="mailto:users@open-mpi.org" href="/mc/compose?to=users@open-mpi.org">users@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br></div></blockquote></td></tr></table><br>



      &nbsp;

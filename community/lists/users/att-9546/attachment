<html><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; ">If it helps, note that Open MPI already includes hooks (and just added some more) to support this area of research. Note that Open MPI does -not- kill your job when a process dies or leaves without calling MPI_Finalize. What it actually does is call an Error Manager (denoted as "errmgr") in the underlying RTE, which then decides what action to take in response to that event.<div><br></div><div>It is true that the default errmgr which ships with Open MPI releases kills the entire job, but that is by no means a requirement - it is simply the default. We deliberately designed the errmgr to be an MCA framework for exactly this reason - to allow anyone to write their own errmgr component and experiment with alternative fault responses.</div><div><br></div><div>You currently have two options you can pursue:<div><br></div><div>1. if you want to use 1.2.8 or 1.3.2 (the latter is a superior platform), you can write your own errmgr component and use it. Look at the orte/mca/errmgr directory and you will see a "base" that contains some common functions for startup, and a "default" that contains the default errmgr component. Either add you own component (see the Open MPI home page for a detailed writeup on how to do this), or modify the default component to suit your needs.</div><div><br></div><div>2. if you want to use the developer's trunk, additional capabilities to support FT research were just added to it. In particular, we implemented an ability to register a callback function in the errmgr so that an application can receive a callback when a specified type of error occurs - and can then take whatever action it desires. Second, we added a new "resilient mapper" component that automatically re-maps failed processes to other available nodes, and then restarts them. You could use these, for example, to write your own version of a "fault tolerant mpiexec" - an example of how to do this will be added to the developer's trunk over the weekend.</div><div><br></div><div>Note that, in either case, you will still have to deal with all the MPI issues mentioned by Dick - all OMPI does for you is provide an infrastructure so that you don't have to do all the nitty-gritty stuff of mapping process locations, launching the procs, detecting errors, etc.</div><div><br></div><div>Instead, you get to do the "simple" things, like figure out how to deal with failures in the middle of a collective! :-)</div><div><br></div><div>HTH</div><div>Ralph</div><div><br><div><div>On Jun 4, 2009, at 7:20 AM, Richard Treumann wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><div><p>Tee Wen Kai -<br> <br> You asked "<font size="4">Just to find out more about the consequences for exiting MPI processes without calling MPI_Finalize, will it cause memory leak or other fatal problem?</font>"<br> <br> Be aware that Jeff has offered you an OpenMPI implementation oriented answer rather than an MPI standard oriented answer.  <br> <br> When there is a communicator involving 2 or more tasks and any task involved in that communicator goes down, all other tasks that are members of that communicator enter a state the MPI standard says cannot be trusted.  It is legitimate for the process that manages an MPI job as a single entity to recognize that the loss of a member task has made the state of all connected tasks untrustworthy and bring down all previously connected tasks too.<br> <br> When you use MPI_Comm_spawn, one result is an intercommunicator connecting the task that did the spawn to the task(s) that were spawned so the two sides are "connected".  If you intend to use MPI to communicate between the spawn caller and the spawned tasks they must remain connected. You can explicitly disconnect them and then a failure of the spawned task is harmless to the task that spawned it but doing the disconnect costs you the communication path.<br> <br> The MPI standard does not require that connected tasks be brought down but it is a valid MPI implementation behavior. This makes some sense when you consider the fact that there is no MPI mechanism by which the other tasks can see that the communicator involving the lost task is now broken and there is no way a collective communication can work "correctly" on a communicator that has lost a member task. <br> <br> For example, what would it mean to call MPI_Reduce on MPI_COMM_WORLD when a member of MPI_COMM_WORLD has been lost (especially if it is the root that was lost)? If you had an MPI application that  computed for hours between the loss of one task and the next collective call on MPI_ COMM_WORLD, would you prefer to pay for hours of computation and then deadlock at the collective call or just abort ASAP after the job is recognizably broken.<br> <br> There is a fault tolerance working group trying to define something for MPI 3.0 but at this stage they are still trying to work out a proposal to bring before the MPI Forum.  You might be interested in getting involved in that effort.  They try to address question like:<br> - how would a task know it should not make collective  calls on the broken communicator?<br> - should the communicator still support point to point communications with remaining tasks?<br> - If a task has posted a receive and the expected sender is then lost, how should the posted receive act?<br> - is there a clean way to "repair"  the broken communicator by spawning a replacement task?<br> - is there a clean way to  "shrink" the broken communicator <br> <br> The Fault Tolerance Working Group has taken on a very tough problem.  The list above is just a tiny sample of the challenges in making MPI fault tolerant.<br> <br>             Dick <br> <br> <br> Dick Treumann  -  MPI Team           <br> IBM Systems &amp; Technology Group<br> Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br> Tele (845) 433-7846         Fax (845) 433-8363<br> <br> <br> <span>&lt;graycol.gif></span><font color="#424282">Jeff Squyres ---06/04/2009 07:32:25 AM---On Jun 4, 2009, at 2:16 AM, Tee Wen Kai wrote: > Just to find out more about the consequences for ex</font><br> <br> <table width="100%" border="0" cellspacing="0" cellpadding="0"> <tbody><tr valign="top"><td width="1%"><span>&lt;ecblank.gif></span><br> <font size="2" color="#5F5F5F">From:</font></td><td width="100%"><span>&lt;ecblank.gif></span><br> <font size="2">Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>></font></td></tr> <tr valign="top"><td width="1%"><span>&lt;ecblank.gif></span><br> <font size="2" color="#5F5F5F">To:</font></td><td width="100%"><span>&lt;ecblank.gif></span><br> <font size="2">"Open MPI Users" &lt;<a href="mailto:users@open-mpi.org">users@open-mpi.org</a>></font></td></tr> <tr valign="top"><td width="1%"><span>&lt;ecblank.gif></span><br> <font size="2" color="#5F5F5F">Date:</font></td><td width="100%"><span>&lt;ecblank.gif></span><br> <font size="2">06/04/2009 07:32 AM</font></td></tr> <tr valign="top"><td width="1%"><span>&lt;ecblank.gif></span><br> <font size="2" color="#5F5F5F">Subject:</font></td><td width="100%"><span>&lt;ecblank.gif></span><br> <font size="2">Re: [OMPI users] Exit Program Without Calling MPI_Finalize	ForSpecial Case</font></td></tr> <tr valign="top"><td width="1%"><span>&lt;ecblank.gif></span><br> <font size="2" color="#5F5F5F">Sent by:</font></td><td width="100%"><span>&lt;ecblank.gif></span><br> <font size="2"><a href="mailto:users-bounces@open-mpi.org">users-bounces@open-mpi.org</a></font></td></tr> </tbody></table> </p><hr width="100%" size="2" align="left" noshade="" style="color:#8091A5; "><br> <br> <br> <tt>On Jun 4, 2009, at 2:16 AM, Tee Wen Kai wrote:<br> <br> > Just to find out more about the consequences for exiting MPI &nbsp;<br> > processes without calling MPI_Finalize, will it cause memory leak or &nbsp;<br> > other fatal problem?<br> <br> If you're exiting the process, you won't cause any kind of problems -- &nbsp;<br> the OS will clean up everything.<br> <br> However, we might also have the orted clean up some things when MPI &nbsp;<br> processes unexpectedly die (e.g., filesystem temporary files in / <br> tmp). &nbsp;So you might want to leave those around to clean themselves up &nbsp;<br> and die naturally.<br> <br> -- <br> Jeff Squyres<br> Cisco Systems<br> <br> _______________________________________________<br> users mailing list<br> <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br> </tt><tt><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a></tt><tt><br> </tt><br> <br> </div> _______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/users</blockquote></div><br></div></div></body></html>

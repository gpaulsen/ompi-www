<div dir="ltr">See attached.  Output below.  Note that the base you get for ranks 0 and 1 is the same, so you need to use the fact that size=0 at rank=0 to know not to dereference that pointer and expect to be writing into rank 0&#39;s memory, since you will write into rank 1&#39;s.<div><br></div><div>I would probably add &quot;if (size==0) base=NULL;&quot; for good measure.<br><div><br></div><div>Jeff<br><div><br></div><div>







<p class=""><span class="">$</span><span class=""> mpirun -n 4 ./a.out</span></p>
<p class=""><span class="">query: me=0, them=0, size=0, disp=1, base=0x10bd64000</span></p>
<p class=""><span class="">query: me=0, them=1, size=4, disp=1, base=0x10bd64000</span></p>
<p class=""><span class="">query: me=0, them=2, size=4, disp=1, base=0x10bd64004</span></p>
<p class=""><span class="">query: me=0, them=3, size=4, disp=1, base=0x10bd64008</span></p>
<p class=""><span class="">query: me=0, them=PROC_NULL, size=4, disp=1, base=0x10bd64000</span></p>
<p class=""><span class="">query: me=1, them=0, size=0, disp=1, base=0x102d3b000</span></p>
<p class=""><span class="">query: me=1, them=1, size=4, disp=1, base=0x102d3b000</span></p>
<p class=""><span class="">query: me=1, them=2, size=4, disp=1, base=0x102d3b004</span></p>
<p class=""><span class="">query: me=1, them=3, size=4, disp=1, base=0x102d3b008</span></p>
<p class=""><span class="">query: me=1, them=PROC_NULL, size=4, disp=1, base=0x102d3b000</span></p>
<p class=""><span class="">query: me=2, them=0, size=0, disp=1, base=0x10aac1000</span></p>
<p class=""><span class="">query: me=2, them=1, size=4, disp=1, base=0x10aac1000</span></p>
<p class=""><span class="">query: me=2, them=2, size=4, disp=1, base=0x10aac1004</span></p>
<p class=""><span class="">query: me=2, them=3, size=4, disp=1, base=0x10aac1008</span></p>
<p class=""><span class="">query: me=2, them=PROC_NULL, size=4, disp=1, base=0x10aac1000</span></p>
<p class=""><span class="">query: me=3, them=0, size=0, disp=1, base=0x100fa2000</span></p>
<p class=""><span class="">query: me=3, them=1, size=4, disp=1, base=0x100fa2000</span></p>
<p class=""><span class="">query: me=3, them=2, size=4, disp=1, base=0x100fa2004</span></p>
<p class=""><span class="">query: me=3, them=3, size=4, disp=1, base=0x100fa2008</span></p>
<p class=""><span class="">query: me=3, them=PROC_NULL, size=4, disp=1, base=0x100fa2000</span></p></div></div></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Thu, Feb 11, 2016 at 8:55 AM, Jeff Hammond <span dir="ltr">&lt;<a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><span class=""><br><br>On Thu, Feb 11, 2016 at 8:46 AM, Nathan Hjelm &lt;<a href="mailto:hjelmn@lanl.gov" target="_blank">hjelmn@lanl.gov</a>&gt; wrote:<br>&gt;<br>&gt;<br>&gt; On Thu, Feb 11, 2016 at 02:17:40PM +0000, Peter Wind wrote:<br>&gt; &gt;    I would add that the present situation is bound to give problems for some<br>&gt; &gt;    users.<br>&gt; &gt;    It is natural to divide an array in segments, each process treating its<br>&gt; &gt;    own segment, but needing to read adjacent segments too.<br>&gt; &gt;    MPI_Win_allocate_shared seems to be designed for this.<br>&gt; &gt;    This will work fine as long as no segment as size zero. It can also be<br>&gt; &gt;    expected that most testing would be done with all segments larger than<br>&gt; &gt;    zero.<br>&gt; &gt;    The document adding &quot;size = 0 is valid&quot;, would also make people confident<br>&gt; &gt;    that it will be consistent for that special case too.<br>&gt;<br>&gt; Nope, that statement says its ok for a rank to specify that the local<br>&gt; shared memory segment is 0 bytes. Nothing more. The standard<br>&gt; unfortunately does not define what pointer value is returned for a rank<br>&gt; that specifies size = 0. Not sure if the RMA working group intentionally<br>&gt; left that undefine... Anyway, Open MPI does not appear to be out of<br>&gt; compliance with the standard here.<br>&gt;<br><br></span>MPI_Alloc_mem doesn&#39;t say what happens if you pass size=0 either.  The RMA working group intentionally tries to maintain consistency with the rest of the MPI standard whenever possible, so we did not create a new semantic here.<br><br>MPI_Win_shared_query text includes this:<div><br>&quot;If all processes in the group attached to the window specified size = 0, then the call returns size = 0 and a baseptr as if MPI_ALLOC_MEM was called with size = 0.&quot;<span class=""><br> <br>&gt;<br>&gt; To be safe you should use MPI_Win_shared_query as suggested. You can<br>&gt; pass MPI_PROC_NULL as the rank to get the pointer for the first non-zero<br>&gt; sized segment in the shared memory window.<br><br></span>Indeed!  I forgot about that.  MPI_Win_shared_query solves this problem for the user brilliantly.<span class="HOEnZb"><font color="#888888"><br><br>Jeff</font></span><span class=""><br><br>--<br>Jeff Hammond<br><a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a><br><a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a></span></div></div>
</blockquote></div><br><br clear="all"><div><br></div>-- <br><div class="gmail_signature">Jeff Hammond<br><a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a><br><a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a></div>
</div>


<html>
  <head>

    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
  </head>
  <body text="#000000" bgcolor="#FFFFFF">
    I'm interested in connecting new Java programs with legacy programs
    written in C and Fortran using MPI (so that they are machine
    independent and parallel). To try this out at first, I was hoping to
    simply Send arrays of basic datatypes (integer, floats, etc.) from a
    Java program to a simple C or Fortran program. So, I put together a
    simple example, but am unable to Send or Receive anything (the
    program just freezes... I'm guessing it freezes at the MPI_Send and
    MPI_Recv calls). What am I doing wrong (see code below)? <br>
    <div class="moz-forward-container"> <br>
      <b>Java program - interopj.java (sending program): </b><br>
      <tt><small>import mpi.*; <br>
          public class interopj<br>
          {<br>
          &nbsp;&nbsp;&nbsp; public static void main(String args[]) <br>
          &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; try <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; MPI.Init(args); <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int rank = MPI.COMM_WORLD.Rank(); <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int size = MPI.COMM_WORLD.Size();<br>
          <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int offset = 0, cnt = 1; <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; int buf[] = new int[cnt];<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (int i = 1; i &lt; size; i++) <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; buf[0] = i;<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println("Sending " + i); <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; MPI.COMM_WORLD.Send(buf, offset, cnt, MPI.INT, i,
          0);<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
          &nbsp;&nbsp;&nbsp; catch (Exception e) <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.printStackTrace();<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
          &nbsp;&nbsp;&nbsp; finally<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; MPI.Finalize();<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; catch(Exception ex) <br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ex.printStackTrace();<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
          &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
          &nbsp;&nbsp;&nbsp; }<br>
          }</small></tt><br>
      <br>
      <b>C program - interop.c (receiving program):&nbsp; </b><br>
      <small><tt>#include "mpi.h" </tt><tt><br>
        </tt><tt>int main(int argc, char *argv[]) </tt><tt><br>
        </tt><tt>{</tt><tt><br>
        </tt><tt>&nbsp; int rank, size; </tt><tt><br>
        </tt><tt>&nbsp; int i, bsize; </tt><tt><br>
        </tt><tt>&nbsp; MPI_Status status; </tt><tt><br>
        </tt><tt><br>
        </tt><tt>&nbsp; MPI_Init(&amp;argc, &amp;argv); </tt><tt><br>
        </tt><tt>&nbsp; MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank); </tt><tt><br>
        </tt><tt>&nbsp; MPI_Comm_size(MPI_COMM_WORLD, &amp;size);</tt><tt><br>
        </tt><tt><br>
        </tt><tt>&nbsp; bsize = 1;&nbsp; </tt><tt><br>
        </tt><tt>&nbsp; int buf[bsize];</tt><tt><br>
        </tt><tt>&nbsp; printf("Waiting for an integer");</tt><tt><br>
        </tt><tt>&nbsp; MPI_Recv(&amp;buf, 1, MPI_INT, 0, 0, MPI_COMM_WORLD,
          &amp;status);</tt><tt><br>
        </tt><tt>&nbsp; printf("Received %d", buf[0]);</tt><tt><br>
        </tt><tt><br>
        </tt><tt>&nbsp; MPI_Finalize();</tt><tt><br>
        </tt><tt>&nbsp; return 0;</tt><tt><br>
        </tt><tt>}</tt><tt><br>
        </tt></small><br>
      <b>Makefile: </b><br>
      <small><tt>CC = mpicc</tt><tt><br>
        </tt><tt>JCC = mpijavac</tt><tt><br>
        </tt><tt>LIB = /usr/local/lib</tt><tt><br>
        </tt><tt><br>
        </tt><tt>all: interop interopj</tt><tt><br>
        </tt><tt><br>
        </tt><tt>interop: interop.c </tt><tt><br>
        </tt><tt>&nbsp;&nbsp;&nbsp; $(CC) -o interop interop.c</tt><tt><br>
        </tt><tt><br>
        </tt><tt>interopj: interopj.java</tt><tt><br>
        </tt><tt>&nbsp;&nbsp;&nbsp; $(JCC) -cp $(LIB)/mpi.jar interopj.java</tt></small><br>
      <br>
      <b>Shell file to run a test: </b><br>
      <small><tt>echo Building</tt><tt><br>
        </tt><tt>make -B </tt><tt><br>
        </tt><tt>echo Running </tt><tt><br>
        </tt><tt>mpirun -np 1 java interopj : -np 2 interop</tt></small><br>
      <br>
      Thanks for your help in advance, <br>
      <br>
      Andr&eacute; <br>
      <br>
      <br>
      <br>
    </div>
    <br>
  </body>
</html>


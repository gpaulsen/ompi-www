is there a searchable archive of this mailing list? <br><br>I am helping someone use Openmpi with Sun&#39;s compilers that came with SolarisStudio. I used the --showme  with mpif90 and got this <br><br><font size="1"><span style="font-family: courier new,monospace;">gfortran -I/opt/openmpi/include -pthread -I/opt/openmpi/lib ring_f90.f90 -L/opt/openmpi/lib -lmpi_f90 -lmpi_f77 -lmpi -lopen-rte -lopen-pal -ldl -Wl,--export-dynamic -lnsl -lutil -lm -ldl</span></font><br style="font-family: courier new,monospace;">
<br>that line compiles fine and so does the mpif90 command but when I replace gfortran with sunf90 or the absoulute path to my solaris studio compilers I get this <br clear="all"><br><font style="font-family: courier new,monospace;" size="1">$ f90 -I/opt/openmpi/include -pthread -I/opt/openmpi/lib ring_f90.f90 -L/opt/openmpi/lib -lmpi_f90 -lmpi_f77 -lmpi -lopen-rte -lopen-pal -ldl -Wl,--export-dynamic -lnsl -lutil -lm -ldl<br>
f90: Warning: Option -pthread passed to ld, if ld is invoked, ignored otherwise<br>f90: Warning: Option -Wl,--export-dynamic passed to ld, if ld is invoked, ignored otherwise<br><br>  use mpi<br>      ^   <br>&quot;ring_f90.f90&quot;, Line = 10, Column = 7: ERROR: &quot;MPI&quot; is specified as the module name on a USE statement, but the compiler cannot find it.<br>
<br>  call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)<br>                     ^                           <br>&quot;ring_f90.f90&quot;, Line = 17, Column = 22: ERROR: IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object &quot;MPI_COMM_WORLD&quot;.<br>
<br>     call MPI_SEND(message, 1, MPI_INTEGER, next, tag, MPI_COMM_WORLD, ierr)<br>                               ^                                             <br>&quot;ring_f90.f90&quot;, Line = 34, Column = 32: ERROR: IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object &quot;MPI_INTEGER&quot;.<br>
<br>        MPI_STATUS_IGNORE, ierr)<br>        ^                        <br>&quot;ring_f90.f90&quot;, Line = 46, Column = 9: ERROR: IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object &quot;MPI_STATUS_IGNORE&quot;.<br>
<br>f90comp: 73 SOURCE LINES<br>f90comp: 4 ERRORS, 0 WARNINGS, 0 OTHER MESSAGES, 0 ANSI</font><br><br>and the file contains this (from <span style="font-family: courier new,monospace;">cat ring_f90.f90</span> ):<br><br><span style="font-family: courier new,monospace;">!</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">!                         University Research and Technology</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">!                         Corporation.  All rights reserved.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! Copyright (c) 2006      Cisco Systems, Inc.  All rights reserved.</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">!</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! Simple ring test program</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">!</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">program ring</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  use mpi</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  implicit none</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  integer :: rank, size, tag, next, from, message, ierr</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! Start up MPI</span><br style="font-family: courier new,monospace;">
<br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  call MPI_INIT(ierr)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierr)</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  call MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierr)</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! Calculate the rank of the next process in the ring.  Use the modulus</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! operator so that the last process &quot;wraps around&quot; to rank zero.</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  tag = 201</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  next = mod((rank + 1), size)</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  from = mod((rank + size - 1), size)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">      </span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! If we are the &quot;master&quot; process (i.e., MPI_COMM_WORLD rank 0), put</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! the number of times to go around the ring in the message.</span><br style="font-family: courier new,monospace;">
<br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  if (rank .eq. 0) then</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     message = 10</span><br style="font-family: courier new,monospace;">
<br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     print *, &#39;Process 0 sending &#39;, message, &#39; to &#39;, next, &#39; tag &#39;, tag, &#39; (&#39;, size, &#39; processes in ring)&#39;</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">     call MPI_SEND(message, 1, MPI_INTEGER, next, tag, MPI_COMM_WORLD, ierr)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     print *, &#39;Process 0 sent to &#39;, next</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  endif</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! Pass the message around the ring.  The exit mechanism works as</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! follows: the message (a positive integer) is passed around the ring.</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! Each time it passes rank 0, it is decremented.  When each processes</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! receives a message containing a 0 value, it passes the message on to</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! the next process and then quits.  By passing the 0 message first,</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! every process gets the 0 message and can quit normally.</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">10 call MPI_RECV(message, 1, MPI_INTEGER, from, tag, MPI_COMM_WORLD, &amp;</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">        MPI_STATUS_IGNORE, ierr)</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  if (rank .eq. 0) then</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">     message = message - 1</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     print *, &#39;Process 0 decremented value:&#39;, message</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  endif</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  call MPI_SEND(message, 1, MPI_INTEGER, next, tag, MPI_COMM_WORLD, ierr)</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">      </span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  if (message .eq. 0) then</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">     print *, &#39;Process &#39;, rank, &#39; exiting&#39;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">     goto 20</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  endif</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  goto 10</span><br style="font-family: courier new,monospace;">
<br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! The last process does one extra send to process 0, which needs to be</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">! received before the program can exit</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;"> 20 if (rank .eq. 0) then</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">     call MPI_RECV(message, 1, MPI_INTEGER, from, tag, MPI_COMM_WORLD, &amp;</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">          MPI_STATUS_IGNORE, ierr)</span><br style="font-family: courier new,monospace;">
<span style="font-family: courier new,monospace;">  endif</span><br style="font-family: courier new,monospace;"><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">! All done</span><br style="font-family: courier new,monospace;">
<br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">  call MPI_FINALIZE(ierr)</span><br style="font-family: courier new,monospace;"><span style="font-family: courier new,monospace;">end program</span><br>
<br><br>Now, i must warn you, I don&#39;t know FORTRAN but I am supporting someone who does. I have them CC <br><br>-- <br>Nehemiah I. Dacres<br>System Administrator <div>
Advanced Technology Group Saint Louis University</div><br>


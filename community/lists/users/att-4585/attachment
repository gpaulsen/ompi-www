Hi, although I did my due&nbsp;diligence&nbsp;on searching for this question, I&nbsp;apologise&nbsp;if this is a repeat.<div><br class="webkit-block-placeholder"></div><div>From an architectural point of view does it make sense to use MPI in the following scenario (for the purposes of&nbsp;resilience&nbsp;as much as parallelization):
</div><div><br class="webkit-block-placeholder"></div><div>Each process is a long-running process (runs non-interrupted for weeks, months or even years) that collects and crunches some streaming data, for example temperature readings, and the data is replicated to R nodes.
</div><div><br class="webkit-block-placeholder"></div><div>Because this is a diversion from the normal modus operandi (i.e. all data is immediately available), is there any obvious MPI issues that I am not considering in designing such an application?
</div><div><br class="webkit-block-placeholder"></div><div>Here is a more detailed description of the app:&nbsp;</div><div><br class="webkit-block-placeholder"></div><div>A master receives the data and dispatches it according to some function such that each tuple is replicated R times to R of the N nodes (with R&lt;=N). Suppose that there are K regions from which temperature readings stream in &nbsp;in the form of &lt;K,T&gt; where K is the region id and T is the temperature reading. The master sends &lt;K,T&gt; to R of the N nodes. These nodes maintain a long-term state of, say, the min/max readings. If R=N=2, the system is basically duplicated and if one of the two nodes dies inadvertently, the other one still has accounted for all the data.
</div><div><br class="webkit-block-placeholder"></div><div>Here is some pseudo-code:</div><div><br class="webkit-block-placeholder"></div><div>int main(argc, argv)</div><div><br class="webkit-block-placeholder"></div><div>
int N=10, R=3, K=200;</div><div><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica"><br class="webkit-block-placeholder"></p><p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica">Init(argc,argv);
</p>
<p style="margin: 0.0px 0.0px 0.0px 0.0px; font: 12.0px Helvetica">int rank=COMM_WORLD.Get_rank();</p></div><div>if(rank==0) {</div><div>&nbsp;&nbsp; &nbsp; int lastnode = 1;</div><div>&nbsp;&nbsp; &nbsp; while(read &lt;k,T&gt; from socket)</div><div>
&nbsp;&nbsp; &nbsp; &nbsp; for(i in 0:R)&nbsp;<span class="Apple-style-span" style="font-family: Helvetica; font-size: 12px; ">COMM_WORLD.Send(&lt;k,T&gt;,1,tuple,++lastnode%N,tag);</span></div><div>} else {</div><div>&nbsp;&nbsp; &nbsp;&nbsp;<span class="Apple-style-span" style="font-family: Helvetica; font-size: 12px; ">
COMM_WORLD.Recv(&lt;k,T&gt;,1,tuple,any,tag,Info);</span></div><div><span class="Apple-style-span" style="font-family: Helvetica; font-size: 12px;">&nbsp;&nbsp; &nbsp; &nbsp; process_message(&lt;k,T&gt;);</span></div><div>}</div><div><br class="webkit-block-placeholder">
</div><div>Many thanks for your time!</div><div>Regards</div><div>Dok</div>


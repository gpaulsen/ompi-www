<div dir="ltr"><div><br></div>Hi Dave,<br><div class="gmail_extra"><br><div class="gmail_quote"><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">With which compiler, and even optimized?<br>
<br>
  $ `mpif90 --showme` --version | head -n1<br>
  GNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-17)<br>
  $ cat a.f90<br>
  use mpi<br>
  if (mpi_version == 3) call undefined()<br>
  print *, mpi_version<br>
  end<br>
  $ mpif90 a.f90 &amp;&amp; ./a.out<br>
             2<span class=""><br></span></blockquote><div><br></div><div>No, optimized works, actually - unoptimized is the issue.  I should&#39;ve added that in the beginning.  Since MPI_VERSION is a parameter, the optimizer <i>knows</i> the code path won&#39;t be used, and thus it doesn&#39;t include it in the binary and life is good.  Compiling with -O0 results in an issue, however, at least with Intel 15/16 compilers, and I&#39;d guess gfortran too(?). </div><div><br></div><div>So, once again, maybe I&#39;m trying too hard to find a problem.  ;-)</div><div><br></div><div>If I don&#39;t ever need to build with -O0, <i>or</i> simply request the user to provide the -DMPI3 (or maybe -DMPI2, since that&#39;s the less-common one now) flag, I have no issues.  </div><div><br></div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Yes, not using cmake is definitely better -- people like me should be<br>
able to build the result!  With autoconf, you could run the above to get<br>
mpi_version, or adapt it to produce a link-time error for a specific<br>
version if cross-compiling.  However, you should test for the routines<br>
you need in the normal autoconf way.  Presumably checking one is enough<br>
for a particular standard level.<br></blockquote><div><br></div><div>Yes, this is an option too.  It&#39;s more a mild nuisance in the dissimilarity of how C/C++ can, by default, process the #defines due to the preprocessor, whereas Fortran code doesn&#39;t have the same flexibility.  Autoconf to provide the -D flag is an option, indeed.</div><div> </div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">I&#39;d hope you could modularize things and select the right modules to<br>
link using a configure test and possibly automake.  That&#39;s probably<br>
easier for Fortran than the sort of C I encounter.<br></blockquote><div><br></div><div>I&#39;m only responsible for a tiny fraction of the code, none of which is the build process.  I think I&#39;m attempting to over-simplify an already fairly-simple-but-not-quite-perfect reality.  ;)</div><div> </div><div>  Thanks for the feedback and ideas!</div><div><br></div><div>  - Brian</div></div></div></div>


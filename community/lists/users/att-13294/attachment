Thanks for the reply.  I&#39;ve somewhat figured it out the reason.  It seems that when a non-blocking send is posted, mpi doesn&#39;t spawn another process that takes care the sending.  The sending occurs only when the processor is idle.  Since the data I sent was immense (20000) elements, there wasn&#39;t sufficient free processor time during the sleep_fortran command to send the entire vector.  When I changed the send and receive pair to work only with a scalar, I got the expected behavior.<br>

<br>Eugene, you&#39;re absolutely right about Iprobe returning true when the message header is received.  Even when Iprobe returns true doesn&#39;t mean the message buffer can be read.  This is not quite what I wanted, so I think I&#39;ll be using non-blocking receive and periodic mpi_test polling instead.<br>

<br><div class="gmail_quote">On Wed, Jun 9, 2010 at 9:38 AM, Eugene Loh <span dir="ltr">&lt;<a href="mailto:eugene.loh@oracle.com">eugene.loh@oracle.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">




  
  

<div>
I&#39;ll take a stab at this since I don&#39;t remember seeing any other
replies.<br>
<br>
At least in the original code you sent out, you used Isend/sleep/Wait
to send messages.  So, I&#39;m guessing that part of the message is sent,
Iprobe detects that a matching message is in-coming, and then the
receiver goes into MPI_Recv.  This call then can begin to receive the
message, but it&#39;s stuck waiting for the remainder of the message to
arrive.  Off hand, I don&#39;t know if that is how MPI_Iprobe is supposed
to behave or not. <br><br></div></blockquote><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div bgcolor="#ffffff" text="#000000">
<br>
<a href="http://www.mpi-forum.org/docs/mpi-11-html/node50.html#Node50" target="_blank">http://www.mpi-forum.org/docs/mpi-11-html/node50.html#Node50</a><br>
MPI_IPROBE(source, tag, comm, flag, status) returns flag = true if
there is a message that can be received and that matches the pattern
specified by the arguments source, tag, and comm.<br>
<br>
I suppose this language leaves open the possibility that the message is
not yet 100% available to be read, but only that the message header has
been received and that it sufficiently matches that specified matching
criteria.<div><div></div><div class="h5"><br>
<br>
David Zhang wrote:
<blockquote cite="http://mid15739_1275849354_o56IZn5f009814_AANLkTimVV-BOmw2rKnBQj26VHam0ndEfnk01ALh5LLu6@mail.gmail.com" type="cite">I have modified the code so that all the terminal outputs
are done by one executable.  I have attached the source files, after
compiling type &quot;make go&quot; and the code will execute.<br>
  <br>
The previous code output was from a supercomputer cluster where the two
processes resides on two different nodes.  When running the same code
on a regular-multiprocessor machine (mac mini in this case), I got this
output:<br>
 F<br>
 F<br>
 T<br>
           1<br>
 F<br>
 T<br>
           2<br>
 F<br>
 T<br>
           3<br>
 F<br>
 T<br>
           4<br>
  <br>
If I&#39;m sending a message every 2 seconds and I&#39;m polling every 0.05
second, I would expect 39 F and 1 T between each number.  At least when
I ran it on the supercomputer, this is true during the very beginning;
however I don&#39;t even see this when I&#39;m running the code on my mac mini.<br>
  <br>
  <div class="gmail_quote">On Sat, Jun 5, 2010 at 2:44 PM, David Zhang <span dir="ltr">&lt;<a href="mailto:solarbikedz@gmail.com" target="_blank">solarbikedz@gmail.com</a>&gt;</span>
wrote:<br>
  <blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
    <div>
    <div>Dear all:<br>
    <br>
I&#39;m using mpi_iprobe to serve as a way to send signals between
different mpi executables. I&#39;m using the following test codes (fortran):<br>
    <br>
#1<br>
program send<br>
implicit none<br>
        include &#39;mpif.h&#39;<br>
    <br>
real*8 :: vec(20000)=1.0<br>
integer :: ierr,i=0,request(1)<br>
    <br>
        call mpi_init(ierr)<br>
        do<br>
                call mpi_isend(vec,20000,mpi_real8,
    <div>0,1,mpi_comm_world,request(1),ierr)<br>
                i=i+1<br>
                print *,i<br>
                vec=-vec<br>
                call usleep_fortran(2.d0)<br>
                call mpi_wait(request(1),MPI_STATUS_IGNORE,ierr)<br>
        end do<br>
    <br>
end program send<br>
--------------------------------------------------<br>
#2<br>
program send<br>
implicit none<br>
        include &#39;mpif.h&#39;<br>
    <br>
real*8 :: vec(20000)<br>
integer :: ierr<br>
    <br>
        call mpi_init(ierr)<br>
        do<br>
                if(key_present()) then<br>
                        call
mpi_recv(vec,20000,mpi_real8,1,1,mpi_comm_world,MPI_STATUS_IGNORE,ierr)<br>
                end if<br>
                call usleep_fortran(0.05d0)<br>
    <br>
        end do<br>
    <br>
contains<br>
    <br>
function key_present()<br>
implicit none<br>
  logical :: key_present<br>
    <br>
        key_present = .false.<br>
        call
mpi_iprobe(1,1,mpi_comm_world,key_present,MPI_STATUS_IGNORE,ierr)<br>
        print *, key_present<br>
    <br>
end function key_present<br>
    <br>
end program send<br>
-----------------------------------<br>
The usleep_fortran is a routine I&#39;ve written to pause the program for
that amount of time (in seconds).  As you can see, on the receiving end
I&#39;m probing to see whether the message has being received every 0.05
seconds, where each probing would result a print of the probing result;
while the sending is once every 2 seconds.  <br>
    <br>
Doing<br>
mpirun -np 1 recv : -np 1 send<br>
 Naturally I expect the output to be something like:<br clear="all">
    <br>
1<br>
(fourty or so F)<br>
T<br>
2<br>
(another fourty or so F)<br>
T<br>
3<br>
    <br>
however this is the output I get:<br>
    <br>
1<br>
(fourty or so F)<br>
T<br>
2<br>
(about a two second delay)<br>
T<br>
3<br>
    <br>
It seems to me that after the first set of probes, once the message was
received, the non-blocking mpi probe becomes blocking for some strange
reason.  I&#39;m using mpi_iprobe for the first time, so I&#39;m not sure if
I&#39;m doing something blatantly wrong.</div>
    </div>
    </div>
  </blockquote>
  </div>
</blockquote>
</div></div></div>

<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br></blockquote></div><br><br clear="all"><br>-- <br>David Zhang<br>University of California, San Diego<br>




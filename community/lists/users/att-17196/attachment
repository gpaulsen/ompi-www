<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body text="#000000" bgcolor="#ffffff">
    I agree sentimentally with Ghislain.&nbsp; The time spent in a barrier
    should conceptually be some wait time, which can be very long
    (possibly on the order of milliseconds or even seconds), and the
    time to execute the barrier operations, which should essentially be
    "instantaneous" on some time scale... in any case, very fast
    (probably on the order of microseconds).&nbsp; The "laggard" who holds up
    the barrier operation should report a very fast time.&nbsp; The other
    processes might show very much longer times, depending on how well
    synchronized they were.&nbsp; At least one, however, should be "fast".<br>
    <br>
    I agree with others that it'd be nice to know the time units so that
    we can judge the speeds.<br>
    <br>
    Anyhow, is this on the first barrier of the program?&nbsp; If one repeats
    the timing operation several times in succession, do the barrier
    times remain high?<br>
    <br>
    On 09/08/11 10:27, Jai Dayal wrote:
    <blockquote
cite="mid:CAMJ-YiQRgEmS6s-Pss9j6DiePJu4tRJDV+uRB_ivXrxEBKk54Q@mail.gmail.com"
      type="cite">what tick value are you using (i.e., what units are
      you using?)<br>
      <br>
      <div class="gmail_quote">On Thu, Sep 8, 2011 at 10:25 AM, Ghislain
        Lartigue <span dir="ltr">&lt;<a moz-do-not-send="true"
            href="mailto:ghislain.lartigue@coria.fr">ghislain.lartigue@coria.fr</a>&gt;</span>
        wrote:<br>
        <blockquote class="gmail_quote" style="margin: 0pt 0pt 0pt
          0.8ex; border-left: 1px solid rgb(204, 204, 204);
          padding-left: 1ex;">Thanks,<br>
          <br>
          I understand this but the delays that I measure are huge
          compared to a classical ack procedure... (1000x more)<br>
          And this is repeatable: as far as I understand it, this shows
          that the network is not involved.<br>
          <br>
          Ghislain.<br>
          <br>
          <br>
          Le 8 sept. 2011 &agrave; 16:16, Teng Ma a &eacute;crit :<br>
          <div>
            <div class="h5"><br>
              &gt; I guess you forget to count the "leaving
              time"(fan-out). &nbsp;When everyone<br>
              &gt; hits the barrier, it still needs "ack" to leave. &nbsp;And
              remember in most<br>
              &gt; cases, leader process will send out "acks" in a
              sequence way. &nbsp;It's very<br>
              &gt; possible:<br>
              &gt;<br>
              &gt; P0 barrier time = 29 + send/recv ack 0<br>
              &gt; P1 barrier time = 14 + send ack 0 &nbsp;+ send/recv ack 1<br>
              &gt; P2 barrier time = 0 + send ack 0 + send ack 1 +
              send/recv ack 2<br>
              &gt;<br>
              &gt; That's your measure time.<br>
              &gt;<br>
              &gt; Teng<br>
              &gt;&gt; This problem as nothing to do with stdout...<br>
              &gt;&gt;<br>
              &gt;&gt; Example with 3 processes:<br>
              &gt;&gt;<br>
              &gt;&gt; P0 hits barrier at t=12<br>
              &gt;&gt; P1 hits barrier at t=27<br>
              &gt;&gt; P2 hits barrier at t=41<br>
              &gt;&gt;<br>
              &gt;&gt; In this situation:<br>
              &gt;&gt; P0 waits 41-12 = 29<br>
              &gt;&gt; P1 waits 41-27 = 14<br>
              &gt;&gt; P2 waits 41-41 = 00<br>
              &gt;<br>
              &gt;<br>
              &gt;<br>
              &gt;&gt; So I should see something &nbsp;like (no ordering is
              expected):<br>
              &gt;&gt; barrier_time = 14<br>
              &gt;&gt; barrier_time = 00<br>
              &gt;&gt; barrier_time = 29<br>
              &gt;&gt;<br>
              &gt;&gt; But what I see is much more like<br>
              &gt;&gt; barrier_time = 22<br>
              &gt;&gt; barrier_time = 29<br>
              &gt;&gt; barrier_time = 25<br>
              &gt;&gt;<br>
              &gt;&gt; See? No process has a barrier_time equal to zero
              !!!<br>
              &gt;&gt;<br>
              &gt;&gt;<br>
              &gt;&gt;<br>
              &gt;&gt; Le 8 sept. 2011 &agrave; 14:55, Jeff Squyres a &eacute;crit :<br>
              &gt;&gt;<br>
              &gt;&gt;&gt; The order in which you see stdout printed
              from mpirun is not necessarily<br>
              &gt;&gt;&gt; reflective of what order things were actually
              printers. &nbsp;Remember that<br>
              &gt;&gt;&gt; the stdout from each MPI process needs to
              flow through at least 3<br>
              &gt;&gt;&gt; processes and potentially across the network
              before it is actually<br>
              &gt;&gt;&gt; displayed on mpirun's stdout.<br>
              &gt;&gt;&gt;<br>
              &gt;&gt;&gt; MPI process -&gt; local Open MPI daemon -&gt;
              mpirun -&gt; printed to mpirun's<br>
              &gt;&gt;&gt; stdout<br>
              &gt;&gt;&gt;<br>
              &gt;&gt;&gt; Hence, the ordering of stdout can get
              transposed.<br>
              &gt;&gt;&gt;<br>
              &gt;&gt;&gt;<br>
              &gt;&gt;&gt; On Sep 8, 2011, at 8:49 AM, Ghislain Lartigue
              wrote:<br>
              &gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt; Thank you for this explanation but indeed
              this confirms that the LAST<br>
              &gt;&gt;&gt;&gt; process that hits the barrier should go
              through nearly instantaneously<br>
              &gt;&gt;&gt;&gt; (except for the broadcast time for the
              acknowledgment signal).<br>
              &gt;&gt;&gt;&gt; And this is not what happens in my code :
              EVERY process waits for a<br>
              &gt;&gt;&gt;&gt; very long time before going through the
              barrier (thousands of times<br>
              &gt;&gt;&gt;&gt; more than a broadcast)...<br>
              &gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt; Le 8 sept. 2011 &agrave; 14:26, Jeff Squyres a
              &eacute;crit :<br>
              &gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt; Order in which processes hit the
              barrier is only one factor in the<br>
              &gt;&gt;&gt;&gt;&gt; time it takes for that process to
              finish the barrier.<br>
              &gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt; An easy way to think of a barrier
              implementation is a "fan in/fan out"<br>
              &gt;&gt;&gt;&gt;&gt; model. &nbsp;When each nonzero rank
              process calls MPI_BARRIER, it sends a<br>
              &gt;&gt;&gt;&gt;&gt; message saying "I have hit the
              barrier!" (it usually sends it to its<br>
              &gt;&gt;&gt;&gt;&gt; parent in a tree of all MPI processes
              in the communicator, but you can<br>
              &gt;&gt;&gt;&gt;&gt; simplify this model and consider that
              it sends it to rank 0). &nbsp;Rank 0<br>
              &gt;&gt;&gt;&gt;&gt; collects all of these messages. &nbsp;When
              it has messages from all<br>
              &gt;&gt;&gt;&gt;&gt; processes in the communicator, it
              sends out "ok, you can leave the<br>
              &gt;&gt;&gt;&gt;&gt; barrier now" messages (again, it's
              usually via a tree distribution,<br>
              &gt;&gt;&gt;&gt;&gt; but you can pretend that it directly,
              linearly sends a message to each<br>
              &gt;&gt;&gt;&gt;&gt; peer process in the communicator).<br>
              &gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt; Hence, the time that any individual
              process spends in the communicator<br>
              &gt;&gt;&gt;&gt;&gt; is relative to when every other
              process enters the communicator. &nbsp;But<br>
              &gt;&gt;&gt;&gt;&gt; it's also dependent upon
              communication speed, congestion in the<br>
              &gt;&gt;&gt;&gt;&gt; network, etc.<br>
              &gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt; On Sep 8, 2011, at 6:20 AM, Ghislain
              Lartigue wrote:<br>
              &gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; Hello,<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; at a given point in my
              (Fortran90) program, I write:<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; ===================<br>
              &gt;&gt;&gt;&gt;&gt;&gt; start_time = MPI_Wtime()<br>
              &gt;&gt;&gt;&gt;&gt;&gt; call MPI_BARRIER(...)<br>
              &gt;&gt;&gt;&gt;&gt;&gt; new_time = MPI_Wtime() -
              start_time<br>
              &gt;&gt;&gt;&gt;&gt;&gt; write(*,*) "barrier time
              =",new_time<br>
              &gt;&gt;&gt;&gt;&gt;&gt; ==================<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; and then I run my code...<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; I expected that the values of
              "new_time" would range from 0 to Tmax<br>
              &gt;&gt;&gt;&gt;&gt;&gt; (1700 in my case)<br>
              &gt;&gt;&gt;&gt;&gt;&gt; As I understand it, the first
              process that hits the barrier should<br>
              &gt;&gt;&gt;&gt;&gt;&gt; print Tmax and the last process
              that hits the barrier should print 0<br>
              &gt;&gt;&gt;&gt;&gt;&gt; (or a very low value).<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; But this is not the case: all
              processes print values in the range<br>
              &gt;&gt;&gt;&gt;&gt;&gt; 1400-1700!<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; Any explanation?<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; Thanks,<br>
              &gt;&gt;&gt;&gt;&gt;&gt; Ghislain.<br>
              &gt;&gt;&gt;&gt;&gt;&gt;<br>
              &gt;&gt;&gt;&gt;&gt;&gt; PS:<br>
              &gt;&gt;&gt;&gt;&gt;&gt; This small code behaves perfectly
              in other parts of my code...<br>
            </div>
          </div>
        </blockquote>
      </div>
    </blockquote>
  </body>
</html>


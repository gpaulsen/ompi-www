<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1">
  <title></title>
</head>
<body text="#000000" bgcolor="#ffffff">
Hi group.&nbsp; I posted a general MPI question a while ago to the mpi
newsgroup but didn't get a response.&nbsp; I need to figure this out so I
thought I would try it on you.<br>
<br>
<p>I have written a piece of code that fills a 2D array sequentially so
<br>
that I can keep track of which elements are being dropped in the <br>
message passing. &nbsp;I use the type_vector datatype to generate a datatype
<br>
for passing the columns. &nbsp;In C, I can see that the scatter operation <br>
passes the first matrix to process 0 correctly but that the second <br>
matrix to process 1 is screwed up because the elements are set <br>
backwards by two. &nbsp;In other words, the second matrix begins with the <br>
lucky 13th element instead of the 15th like it should. &nbsp;There is <br>
overlap -- the same elements appear in both of the scattered matrices. <br>
The C++ code goes over like a lead baloon. &nbsp;The operation is clearly <br>
asking for data outside of the range for the filled matrix and so the <br>
values of the scattered matrix are all screwed up. &nbsp;I am using the LAM <br>
MPI v. 7.1.1 and Mac OS 10.3.8 <br>
with gcc v. 3.3.&nbsp; I got similar results using MPICH-2 on Linux.<br>
Here's a piece of code written in C. <br>
</p>
<p>#include &lt;mpi.h&gt; <br>
#include &lt;iostream&gt; <br>
</p>
<p>int main(int argc,char* argv[]){ <br>
MPI_Init(&amp;argc,&amp;argv); <br>
int my_rank = MPI::COMM_WORLD.Get_rank(),n_g<wbr>lobal = 10,n_procs = <br>
MPI::COMM_WORLD.Get_size(), <br>
d=3,n_local = n_global/n_procs,i,k,root=0; <br>
double A_global[n_global][d],A_local[<wbr>n_local][d]; <br>
MPI_Datatype scatter; <br>
MPI_Type_vector(n_local,1,d,MP<wbr>I_DOUBLE,&amp;scatter); <br>
MPI_Type_commit(&amp;scatter); <br>
if(my_rank==root){ <br>
for(i=0;i&lt;n_global;i++) <br>
for(k=0;k&lt;d;k++) <br>
A_global[i][k] = i*d+k; <br>
for(k=0;k&lt;d;k++) <br>
MPI_Scatter(&amp;(A_global[0][k]),<wbr>1,scatter,&amp;(A_local[0][k]),1,s<wbr>catter,root,MPI_COMM_WORLD);
<br>
for(i=0;i&lt;n_local;i++){ <br>
for(k=0;k&lt;d;k++) <br>
cout &lt;&lt; A_local[i][k] &lt;&lt; "\t"; <br>
cout &lt;&lt; endl; <br>
</p>
<div id="qhide_23617" style="display: block;" class="qt">} <br>
<br>
</div>
MPI_Finalize(); <br>
return 0; <br>
<div id="qhide_23618" style="display: block;" class="qt">} <br>
<br>
</div>
In C++, the code is <br>
#include &lt;mpi.h&gt; <br>
#include &lt;iostream&gt; <br>
<p>int main(int argc,char* argv[]){ <br>
MPI::Init(); <br>
int my_rank = MPI::COMM_WORLD.Get_rank(),n_g<wbr>lobal = 10,n_procs = <br>
MPI::COMM_WORLD.Get_size(), <br>
d=3,n_local = n_global/n_procs,i,k,root=0; <br>
double A_global[n_global][d],A_local[<wbr>n_local][d]; <br>
MPI::Datatype scatter(MPI::DOUBLE); <br>
scatter.Create_vector(n_local,<wbr>1,d); <br>
scatter.Commit(); <br>
if(my_rank==root){ <br>
for(i=0;i&lt;n_global;i++) <br>
for(k=0;k&lt;d;k++) <br>
A_global[i][k] = i*d+k; <br>
for(k=0;k&lt;d;k++) <br>
MPI::COMM_WORLD.Scatter(&amp;(A_gl<wbr>obal[0][k]),1,scatter,&amp;(A_loca<wbr>l[0][k]),1,scatter,root);
<br>
for(i=0;i&lt;n_local;i++){ <br>
for(k=0;k&lt;d;k++) <br>
cout &lt;&lt; A_local[i][k] &lt;&lt; "\t"; <br>
cout &lt;&lt; endl; <br>
</p>
<div id="qhide_23619" style="display: block;" class="qt">} <br>
<br>
</div>
MPI::Finalize(); <br>
return 0; <br>
<div id="qhide_23620" style="display: block;" class="qt">} <br>
<br>
</div>
I'm running the process (after a lamboot) with the command <br>
<p>mpirun -np 2 scatter.out <br>
</p>
<p>and compiling with the command <br>
</p>
<p>mpic++ Scatter.cpp -o scatter.out <br>
</p>
<p>Can anyone help out with this?&nbsp; I don't <br>
understand why the commands for C++ are returning erroneous results <br>
that are *different* than they are from the C program. <br>
</p>
<p>Thanks, <br>
</p>
Joel <br>
</body>
</html>


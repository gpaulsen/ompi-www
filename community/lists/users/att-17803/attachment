Thanks a lot Jeff.<br><br>PIN is a dynamic binary instrumentation tool from Intel. It runs on top 
of the Binary in the MPI node. When its given function calls to 
instrument, it will insert trappings before/after that funtion call in 
the binary of the program you are instrumenting and you can insert your 
own functions. <br>

<br>I am doing some memory address profiling on benchmarks running on 
MPI and I was using PIN to get the Load/Store addresses. Furthermore I 
needed to know which LD/ST were coming from actual socket communication 
and which are coming from shared memory optimizations. So i needed to 
know which functions/where exactly were they taking that decision so 
that I can instrument the appropriate MPI library function call (the 
actual low level function, not the API like MPI_Sends/Recvs) in PIN. 
Hence I guess I am actually zooming down to a 1000 ft view :)<br>

<br>Any suggestion is welcome. I will go into the ob1 directory and try to hunt around to see how exactly its being done.<br><br>Regards,<br>Shamik<br><br><div class="gmail_quote">On Tue, Nov 22, 2011 at 10:08 AM, Shamik Ganguly <span dir="ltr">&lt;<a href="mailto:shamik.ganguly@gmail.com" target="_blank">shamik.ganguly@gmail.com</a>&gt;</span> wrote:<br>


<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Thanks a lot Jeff.<br><br>PIN is a dynamic binary instrumentation tool from Intel. It runs on top of the Binary in the MPI node. When its given function calls to instrument, it will insert trappings before/after that funtion call in the binary of the program you are instrumenting and you can insert your own functions. <br>



<br>I am doing some memory address profiling on benchmarks running on MPI and I was using PIN to get the Load/Store addresses. Furthermore I needed to know which LD/ST were coming from actual socket communication and which are coming from shared memory optimizations. So i needed to know which functions/where exactly were they taking that decision so that I can instrument the appropriate MPI library function call (the actual low level function, not the API like MPI_Sends/Recvs) in PIN. Hence I guess I am actually zooming down to a 1000 ft view :)<br>



<br>I will go into the ob1 directory and try to hunt around to see how exactly its being done.<br><br>Regards,<br>Shamik<div><div><br><br><div class="gmail_quote">On Tue, Nov 22, 2011 at 9:04 AM, Jeff Squyres <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br>



<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div>On Nov 22, 2011, at 1:09 AM, Shamik Ganguly wrote:<br>
<br>
&gt; I want to trace when the MPI  library prevents an MPI_Send from going to the socket and makes it access shared memory because the target node is on the same chip (CMP). I want to use PIN to trace this. Can you please give me some pointers about which functions are taking this decision so that I can instrument the appropriate library calls in PIN?<br>




<br>
</div>What&#39;s PIN?<br>
<br>
The decision is made in the ob1 PML plugin.  Way back during MPI_INIT, each MPI process creates lists of BTLs to use to contact each MPI process peer.<br>
<br>
When a process is on the same *node* (e.g., a single server) -- not just the same processor socket/chip -- the shared memory BTL is given preference to all other BTLs by use of a priority mechanism.  Hence, the &quot;sm&quot; BTL is put at the front of the BML lists (BML = BTL multiplexing layer -- it&#39;s essentially just list management for BTLs).<br>




<br>
Later, when MPI_SEND comes through, it uses the already-setup BML lists to determine which BTL(s) to use to send a message.<br>
<br>
That&#39;s the 50,000 foot view.<br>
<span><font color="#888888"><br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a><br>
For corporate legal information go to:<br>
<a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
<br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org" target="_blank">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</font></span></blockquote></div><br><br clear="all"><br></div></div><span><font color="#888888">-- <br>Shamik Ganguly<br><br>
</font></span></blockquote></div><br><br clear="all"><br>-- <br>Shamik Ganguly<br>2nd year, MS (CSE-Hardware), University of Michigan, Ann Arbor<br>B.Tech.(E&amp;ECE), IITKGP (2008)<br>


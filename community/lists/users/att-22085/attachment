<div dir="ltr"><div><div><div>I have done a search on this and I haven&#39;t found an explanation. I am not a C/C++ nor MPI expert. I am getting a strange error when I use the C++ new keyword to allocate memory and then call a file read on OpenMPI. (Tech detail: 4-core Intel running Ubuntu 64-bit and OpenMPI 1.4.5. Everything is local. Total processes is
5.)<br><br></div>In the source code you can see three different approaches to allocating the memory for the char array where the file&#39;s contents will go. With the C-style and MPI Alloc choices, there is no error even with buffer sizes in the MB range. However, if I use the C++ new keyword, I get an error for any read larger than 24 bytes. <br>
<br></div><div>As I say, I&#39;m not a C/C++ expert, but if I&#39;m writing C++ code I was under the impression it was wise to use the C++ new approach rather than malloc. Am I missing something in getting this to work with MPI? <br>
</div><div><br></div>Error (the important bit):<br><br>*** glibc detected *** MPIIO_Test: free(): invalid next size (fast): 0x00000000015524e0 ***<br><br></div>Code:<br><br>int main(int argc, char* argv[]){<br>    int  my_rank;<br>
    MPI_Status status ;<br>    int errorCode;<br>    MPI_File _filehandle;<br><br>    MPI_Init(&amp;argc, &amp;argv);<br>    MPI_Comm_rank(MPI_COMM_WORLD, &amp;my_rank);<br><br>    // Open File<br>    errorCode = MPI_File_open(MPI_COMM_WORLD, &quot;TEST1A&quot;, MPI_MODE_RDONLY, MPI_INFO_NULL, &amp;_filehandle);<br>
<br>    if (errorCode != 0)<br>    {<br>        int errorStringLen;<br>        char *errorString = (char*) malloc(MPI_MAX_ERROR_STRING);<br><br>        // Get MPI file I/O error string and print it<br>        MPI_Error_string(errorCode, errorString, &amp;errorStringLen);<br>
<br>        printf(&quot;MPI Error opening Data File: %s \n&quot;, errorString);<br><br>        free(errorString);<br>    }<br><br>    // Works with new at 24, fails at 25<br>    int dataLength = 25, numBytesRead;<br>    char *data = NULL;<br>
//    data = (char*) malloc(dataLength);<br>    data = new char(dataLength);<br>//    MPI_Alloc_mem(dataLength, MPI_INFO_NULL, &amp;data);<br><br>    // File I/O<br>    errorCode = MPI_File_read_at(_filehandle, my_rank*dataLength, data, dataLength, MPI_CHAR, &amp;status);<br>
    MPI_Get_count(&amp;status, MPI_CHAR, &amp;numBytesRead);<br>    printf(&quot;Rank: %d Start: %d Expected: %d Read: %d \n&quot;, my_rank, my_rank*dataLength, dataLength, numBytesRead);<br><br>    if (errorCode != 0)<br>
    {<br>        int errorStringLen;<br>        char *errorString = (char*) malloc(MPI_MAX_ERROR_STRING);<br><br>        // Get MPI file I/O error string and print it<br>        MPI_Error_string(errorCode, errorString, &amp;errorStringLen);<br>
<br>        printf(&quot;MPI Error reading from Data File: %s \n&quot;, errorString);<br><br>        free(errorString);<br>    }<br><br>    // Free memory<br>//    free(data);<br>    delete[] data;<br>//    MPI_Free_mem(data);<br>
<br>    // Close file<br>    MPI_File_close(&amp;_filehandle);<br><br>    MPI_Finalize();<br>    return 0;<br>}<br><br><div><div><div><br><br></div></div></div></div>


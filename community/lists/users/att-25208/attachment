<div dir="ltr">Based on the MPI standard (MPI 3.0 section 10.5.4 page 399) there is no need to disconnect the child processes from the parent in order to cleanly finalize. From this perspective, the original example is correct, but sub-optimal as the parent processes calling MPI_Finalize might block until all connected processes (in this case all the children processes) will call MPI_Finalize. To be more precise, the disconnect has a single role to redivide the application in separated groups of connected processes in order to prevent error propagation (such as MPI_Abort).<div>
<div><br></div><div>  George.</div><div><br></div></div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Mon, Sep 1, 2014 at 12:58 AM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">You need to disconnect the parent/child from each other prior to finalizing - see the attached example<br>
<br>
<br><br>
<br>
On Aug 31, 2014, at 9:44 PM, Roy &lt;<a href="mailto:openmpi@jsp.selfip.org">openmpi@jsp.selfip.org</a>&gt; wrote:<br>
<br>
&gt; Hi all,<br>
&gt;<br>
&gt; I&#39;m using MPI_Comm_spawn to start new child process.<br>
&gt; I found that if the parent process execute MPI_Finalize before the child<br>
&gt; process, the child process core dump on MPI_Finalize.<br>
&gt;<br>
&gt; I couldn&#39;t find the correct way to have a clean shutdown of all processes<br>
&gt; ( parent and child ).<br>
&gt; What that I found is that sleep(2) in the parent process just before<br>
&gt; calling MPI_Finalize, gives the CPU cycle for the child process to finish<br>
&gt; its own MPI_Finalize, and only then there is no core dump.<br>
&gt;<br>
&gt; Although this resolve the issue, I can&#39;t accept this as acceptable solution.<br>
&gt;<br>
&gt; I guess I&#39;m doing something wrong ( implementation or design ), so this is<br>
&gt; why I&#39;m sending this email to the group ( and yes, I did check the FAQ,<br>
&gt; and done some search on the distribution list archive ).<br>
&gt;<br>
&gt; Here is the entire code to reproduce the issue :<br>
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
&gt; #include &lt;stdio.h&gt;<br>
&gt; #include &lt;string.h&gt;<br>
&gt; #include &lt;unistd.h&gt;<br>
&gt; #include &lt;mpi.h&gt;<br>
&gt; #include &lt;stdlib.h&gt;<br>
&gt;<br>
&gt; int main(int argc, char* argv[]){<br>
&gt;       int  my_rank; /* rank of process */<br>
&gt;       int  p;       /* number of processes */<br>
&gt;       int source;   /* rank of sender */<br>
&gt;       int dest;     /* rank of receiver */<br>
&gt;       int tag=0;    /* tag for messages */<br>
&gt;       char message[100];        /* storage for message */<br>
&gt;       MPI_Status status ;   /* return status for receive */<br>
&gt;<br>
&gt;       /* start up MPI */<br>
&gt;<br>
&gt;       MPI_Init(&amp;argc, &amp;argv);<br>
&gt;<br>
&gt;       /* find out process rank */<br>
&gt;       MPI_Comm_rank(MPI_COMM_WORLD, &amp;my_rank);<br>
&gt;       fprintf(stderr,&quot;My rank is : %d\n&quot;,my_rank);<br>
&gt;       /* find out number of processes */<br>
&gt;       MPI_Comm_size(MPI_COMM_WORLD, &amp;p);<br>
&gt;<br>
&gt;       MPI_Comm parent;<br>
&gt;       MPI_Comm_get_parent(&amp;parent);<br>
&gt;<br>
&gt;       if ( parent != MPI_COMM_NULL){<br>
&gt;               /* create message */<br>
&gt;               dest = 0;<br>
&gt;               /* use strlen+1 so that &#39;\0&#39; get transmitted */<br>
&gt;<br>
&gt;               MPI_Recv(message, 100, MPI_CHAR, 0, tag,parent, &amp;status);<br>
&gt;               fprintf(stderr,&quot;Got [%s] from root\n&quot;,message);<br>
&gt;               /* shut down MPI */<br>
&gt;               MPI_Finalize();<br>
&gt;<br>
&gt;       }<br>
&gt;       else{<br>
&gt;               printf(&quot;Hello MPI World From process 0: Num processes: %d\n&quot;,p);<br>
&gt;               MPI_Comm everyone;<br>
&gt;               MPI_Comm_spawn(&quot;mpitest&quot;,MPI_ARGV_NULL,1,MPI_INFO_NULL,0,       MPI_COMM_SELF,&amp;everyone,<br>
&gt; MPI_ERRCODES_IGNORE);<br>
&gt;               /* find out number of processes */<br>
&gt;               MPI_Comm_size(everyone, &amp;p);<br>
&gt;               fprintf(stderr,&quot;New world size:%d\n&quot;,p);<br>
&gt;               for (source = 0; source &lt; p; source++) {<br>
&gt;                       sprintf(message, &quot;Hello MPI World from root to process %d!&quot;, source);<br>
&gt;                       MPI_Send(message, strlen(message)+1, MPI_CHAR,source, tag, everyone);<br>
&gt;               }<br>
&gt;<br>
&gt;               /**<br>
&gt;                * Why this sleep resolve my core dump issues ?<br>
&gt;                * Any timing between the parent to child process ?<br>
&gt;                * Based on the document, and FAQ, I couldn&#39;t not find an answer for<br>
&gt; this issue.<br>
&gt;                *<br>
&gt;                * If you comment out the sleep(2), the child process will crash on the<br>
&gt; MPI_Finalize with<br>
&gt;                * singal 11, Segmentation fault.<br>
&gt;                */<br>
&gt;               //sleep(2); //un-comment this line to have the sleep, and avoid the core<br>
&gt; dumps.<br>
&gt;<br>
&gt;               /* shut down MPI */<br>
&gt;               MPI_Finalize();<br>
&gt;<br>
&gt;       }<br>
&gt;       return 0;<br>
&gt; }<br>
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
&gt;<br>
&gt; Anyone for the rescue ?<br>
&gt;<br>
&gt;<br>
&gt; Thank you,<br>
&gt; Roy Avidor<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; Searchable archives: <a href="http://www.open-mpi.org/community/lists/users/2014/09/index.php" target="_blank">http://www.open-mpi.org/community/lists/users/2014/09/index.php</a><br>
<br>
<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2014/09/25207.php" target="_blank">http://www.open-mpi.org/community/lists/users/2014/09/25207.php</a><br></blockquote></div><br></div>


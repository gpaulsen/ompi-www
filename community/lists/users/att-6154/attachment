<div dir="ltr">In trying to run a simple &quot;hello world&quot; type program to test my MPI setup, I&#39;ve come across an interesting problem I can&#39;t seem to work out. But first, a bit about my setup:<br><br>I have 3 dual-core Athlon machine all running ubuntu 8.04 and they&#39;ve been readied with openmpi <a href="http://1.2.6.">1.2.6.</a> The program I&#39;m trying to run is the following simple test:<br>
<br>#include &lt;mpi.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br><br>#define RING_TAG&nbsp; 0xdead<br>#define RING_ROOT 0<br><br>int main (int argc, char *argv[]) {<br>&nbsp;&nbsp;&nbsp; int size&nbsp;&nbsp; = 0;<br>&nbsp;&nbsp;&nbsp; int rank&nbsp;&nbsp; = 0;<br>
&nbsp;&nbsp;&nbsp; int next&nbsp;&nbsp; = 0;<br>&nbsp;&nbsp;&nbsp; int prev&nbsp;&nbsp; = 0;<br>&nbsp;&nbsp;&nbsp; int value&nbsp; = 0;<br>&nbsp;&nbsp;&nbsp; int result = 0;<br>&nbsp;&nbsp;&nbsp; int gresult = 0;<br>&nbsp;&nbsp;&nbsp; MPI_Status status;<br>&nbsp;&nbsp;&nbsp; MPI_Request request;<br><br>char * host;<br>host = getenv (&quot;HOSTNAME&quot;);<br>
&nbsp;&nbsp;&nbsp; MPI_Init(&amp;argc, &amp;argv);<br>&nbsp;&nbsp;&nbsp; MPI_Comm_size(MPI_COMM_WORLD, &amp;size);<br>&nbsp;&nbsp;&nbsp; MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);<br><br>&nbsp;&nbsp;&nbsp; //sleep(20);<br><br>&nbsp;&nbsp;&nbsp; if ( 1 &lt; size ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* compute the neighbours */<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; next = (rank+1) % size;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prev = (size + (rank-1)) % size;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* post recv */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Irecv(&amp;value, 1, MPI_INT, prev, RING_TAG, MPI_COMM_WORLD, &amp;request);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* send data */<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Send(&amp;rank, 1, MPI_INT, next, RING_TAG, MPI_COMM_WORLD);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* wait for data */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Wait(&amp;request, &amp;status);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* validate data */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( value != prev ) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* gather results */<br>&nbsp;&nbsp;&nbsp; printf (&quot;%s - %d) Before\n&quot;, host, rank); fflush(stdout);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Reduce(&amp;result, &amp;gresult, 1, MPI_INT, MPI_SUM, RING_ROOT, MPI_COMM_WORLD);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //MPI_Allreduce(&amp;result, &amp;gresult, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);<br><br>&nbsp;&nbsp;&nbsp; printf (&quot;%s - %d) After\n&quot;, host, rank); fflush(stdout);<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( rank == RING_ROOT ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( 0 == gresult ) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;PASSED : %i errors.\n&quot;, gresult);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;FAILED : %i errors.\n&quot;, gresult);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br><br>&nbsp;&nbsp;&nbsp; } else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf (&quot;You have to use more than 1 process.\n&quot;);<br>
&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; MPI_Finalize();<br><br>&nbsp;&nbsp;&nbsp; return 0;<br>}<br><br><br><br><br><br><br>This program runs just fine under the following conditions:<br><br>1) If I run on a single node<br>2) If I run on multiple nodes but change the MPI_Reduce operation to anything else (MPI_Bcast, MPI_Allreduce, etc)<br>
<br>But it hangs if I run on multiple nodes and keep the MPI_Reduce as it is. <br><br>The problem is especially frustrating because there is no reason that all the other functions should work without a problem, and the Reduce operations causes the entire process to hang. The symptoms are as follows during a hang:<br>
<br>1) Output ends (I get some of the printf() statements through, but some of the cores on any of the nodes will never get to the &quot;After&quot; printed statement) and hangs.<br>2) Checking the other nodes with a &#39;top&#39; command shows that the correct number of processes are being executed and run at 100% of the cpu.<br>
<br>I&#39;m confident that this isn&#39;t an issue with path settings or environment variables, as I mentioned before that the program executes and finishes just fine when anything other than an MPI_Reduce is used.<br><br>
Has anyone encountered a problem like this?<br><br>Thank you,<br>~Eric<br></div>


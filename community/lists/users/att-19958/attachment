Hi,<br><br>Indeed I try to make the equivalent of this Fortran program in C. The Fortran version works fine but I have problems now in C.<br><br>I can&#39;t get to exchange between 2 processes a single column.<br><br>Could you try please to compile and execute the following test code wich simply sends a column from the rank=2 and received by rank=0 ( you need to execute it with nproc=4) :<br>
<br>--------------------------------------------------------------------------------------------------<br><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;math.h&gt;<br>#include &quot;mpi.h&quot;<br>
<br>int main(int argc, char *argv[]) <br>    {<br>      /* size of the discretization */<br><br>      double** x;<br>      double** x0;<br>      int bonk1, bonk2;      <br>      int i,j,k,l;<br>      int nproc;<br>      int ndims; <br>
      int S=0, E=1, N=2, W=3;<br>      int NeighBor[4];<br>      int xcell, ycell, size_tot_x, size_tot_y;<br>      int *xs,*ys,*xe,*ye;<br>      int size_x = 4;<br>      int size_y = 4;<br>      int me;<br>      int x_domains=2;<br>
      int y_domains=2;<br>      int flag = 1;      <br>      MPI_Comm comm, comm2d;<br>      int dims[2];<br>      int periods[2];<br>      int reorganisation = 0;<br>      int row;<br>      MPI_Datatype column_type;<br>      MPI_Status status;<br>
      <br>      <br>      size_tot_x=size_x+2*x_domains+2;<br>      size_tot_y=size_y+2*y_domains+2;<br>      <br>      xcell=(size_x/x_domains);<br>      ycell=(size_y/y_domains);<br><br>      MPI_Init(&amp;argc, &amp;argv);<br>
      comm = MPI_COMM_WORLD;<br>      MPI_Comm_size(comm,&amp;nproc);<br>      MPI_Comm_rank(comm,&amp;me);<br><br>      x = malloc(size_tot_y*sizeof(double*));<br>      x0 = malloc(size_tot_y*sizeof(double*));<br><br><br>
      for(j=0;j&lt;=size_tot_y-1;j++) {<br>        x[j] = malloc(size_tot_x*sizeof(double));<br>        x0[j] = malloc(size_tot_x*sizeof(double));<br>      }<br><br>      xs = malloc(nproc*sizeof(int));<br>      xe = malloc(nproc*sizeof(int));<br>
      ys = malloc(nproc*sizeof(int));<br>      ye = malloc(nproc*sizeof(int));<br><br>      /* Create 2D cartesian grid */<br>      periods[0] = 0;<br>      periods[1] = 0;<br><br>      ndims = 2;<br>      dims[0]=x_domains;<br>
      dims[1]=y_domains;<br><br>      MPI_Cart_create(comm, ndims, dims, periods, reorganisation, &amp;comm2d);<br><br>      /* Identify neighbors */<br>      NeighBor[0] = MPI_PROC_NULL;<br>      NeighBor[1] = MPI_PROC_NULL;<br>
      NeighBor[2] = MPI_PROC_NULL;<br>      NeighBor[3] = MPI_PROC_NULL;<br><br>      /* Left/West and right/Est neigbors */<br>      MPI_Cart_shift(comm2d,0,1,&amp;NeighBor[W],&amp;NeighBor[E]);<br>      /* Bottom/South and Upper/North neigbors */<br>
      MPI_Cart_shift(comm2d,1,1,&amp;NeighBor[S],&amp;NeighBor[N]);<br><br>      /* coordinates of current cell with me rank */<br><br>      xcell=(size_x/x_domains);<br>      ycell=(size_y/y_domains);<br><br>      ys[me]=(y_domains-me%(y_domains)-1)*(ycell+2)+2;<br>
      ye[me]=ys[me]+ycell-1;<br><br>      for(i=0;i&lt;=y_domains-1;i++) <br>      {xs[i]=2;}<br>      <br>      for(i=0;i&lt;=y_domains-1;i++) <br>      {xe[i]=xs[i]+xcell-1;}<br><br>      for(i=1;i&lt;=(x_domains-1);i++)<br>
         { for(j=0;j&lt;=(y_domains-1);j++) <br>              {<br>               xs[i*y_domains+j]=xs[(i-1)*y_domains+j]+xcell+2;<br>               xe[i*y_domains+j]=xs[i*y_domains+j]+xcell-1;<br>              }<br>         }<br>
              <br>      for(i=0;i&lt;=size_tot_y-1;i++)<br>          { for(j=0;j&lt;=size_tot_x-1;j++)<br>            { x0[i][j]= i+j;<br>        }        <br>      }<br>      <br>      /*  Create column data type to communicate with South and North neighbors */<br>
<br><br><br>      MPI_Type_vector( ycell, 1, size_tot_x, MPI_DOUBLE, &amp;column_type);  <br>      MPI_Type_commit(&amp;column_type);<br>             <br>       if(me==2) {<br>       printf(&quot;Before Send - Process 2 subarray\n&quot;);<br>
                    for(i=ys[me]-1;i&lt;=ye[me]+1;i++)<br>                    { for(j=xs[me]-1;j&lt;=xe[me]+1;j++)<br>                      { printf(&quot;%f &quot;,x0[i][j]);<br>                      }<br>                      printf(&quot;\n&quot;);<br>
                    }<br>                    printf(&quot;\n&quot;);<br>        <br>       <br>       <br>       MPI_Send(&amp;(x0[ys[2]][xs[2]]), 1, column_type,  0, flag, comm2d );<br>       }<br><br>         if(me==0) {<br>
     <br>     MPI_Recv(&amp;(x0[ys[0]][xe[0]]), 1, column_type,  2, flag, comm2d , &amp;status);<br>     printf(&quot;After Receive - Process 0 subarray\n&quot;);<br>                    for(i=ys[me]-1;i&lt;=ye[me]+1;i++)<br>
                    { for(j=xs[me]-1;j&lt;=xe[me]+1;j++)<br>                      { printf(&quot;%f &quot;,x0[i][j]);<br>                      }<br>                      printf(&quot;\n&quot;);<br>                    }<br>
                    printf(&quot;\n&quot;);<br>            <br>        MPI_Get_count(&amp;status,column_type,&amp;bonk1);<br>        MPI_Get_elements(&amp;status,MPI_DOUBLE,&amp;bonk2);<br>        printf(&quot;got %d elements of type column_type\n&quot;,bonk1);<br>
        printf(&quot;which contained %d elements of type MPI_DOUBLE\n&quot;,bonk2);<br>    printf(&quot;\n&quot;);<br>            <br>         }<br><br>              for(i=0;i&lt;=size_tot_y-1;i++)<br>           {<br>            free(x[i]);<br>
            free(x0[i]);<br>           }     <br>     <br>        free(x);<br>        free(x0);<br><br>        free(xs);<br>        free(xe);<br>        free(ys);<br>        free(ye);<br>     <br>        MPI_Finalize();<br>
<br>        return 0;<br>    }        <br><br>--------------------------------------------------------------------------------------------------<br><br>xs[me] and xe[me] correspond respectively to x_start[me] and x_end[me] of rank = me. This is the same for ys[me] and ye[me].<br>
<br>As I said in the precedent post, there&#39;s only the first value of the column which is received par <br>process of rank 0. Here&#39;s the output of this program :<br><br>Before Send - Process 2 subarray<br>10.000000 11.000000 12.000000 13.000000 <br>
11.000000 <b><u>12.000000</u> 13.000000</b> 14.000000 <br>12.000000 <b><u>13.000000</u> 14.000000</b> 15.000000 <br>13.000000 14.000000 15.000000 16.000000 <br><br>After Receive - Process 0 subarray<br>6.000000 7.000000 8.000000 9.000000 <br>
7.000000 <b>8.000000 <u>12.000000</u></b> 10.000000 <br>8.000000 <b>9.000000 <u>10.000000</u></b> 11.000000 <br>9.000000 10.000000 11.000000 12.000000 <br><br>got 1 elements of type column_type<br>which contained 2 elements of type MPI_DOUBLE<br>
<br>------------------------------------------------------------------------<br><br>I get &quot;12.00000&quot; for the first element but for the second element, I have &quot;10.00000&quot; instead of &quot;13.00000&quot;.<br>
<br>Any help would be really appreciated.<br><br><br><div class="gmail_quote">On Sun, Aug 19, 2012 at 6:25 PM, Rayson Ho <span dir="ltr">&lt;<a href="mailto:raysonlogin@gmail.com" target="_blank">raysonlogin@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hi Christian,<br>
<br>
The code you posted is very similar to another school assignment sent<br>
to this list 2 years ago:<br>
<br>
<a href="http://www.open-mpi.org/community/lists/users/2010/10/14619.php" target="_blank">http://www.open-mpi.org/community/lists/users/2010/10/14619.php</a><br>
<br>
At that time, the code was written in Fortran, and now it is written<br>
in C - however, the variable names, logic, etc are quite similar! :-D<br>
<br>
Remember, debugging and bug fix is part of the (home) work!<br>
<br>
Rayson<br>
<br>
==================================================<br>
Open Grid Scheduler - The Official Open Source Grid Engine<br>
<a href="http://gridscheduler.sourceforge.net/" target="_blank">http://gridscheduler.sourceforge.net/</a><br>
<div><div class="h5"><br>
<br>
On Sun, Aug 19, 2012 at 12:59 AM, Christian Perrier<br>
&lt;<a href="mailto:christian01.perrier@gmail.com">christian01.perrier@gmail.com</a>&gt; wrote:<br>
&gt; Hi,<br>
&gt;<br>
&gt; I have a problem with MPI_Senrecv communication where I send columns on<br>
&gt; edges between processes.<br>
&gt; For debugging, I show you below a basic example where I initialize a 10x10<br>
&gt; matrix (&quot;x0&quot; array) with x_domain=4<br>
&gt; and y_domain=4. For the test, I simply initialize the 2D array values with<br>
&gt; x0[i][j] = i+j . After, in updateBound.c&quot;, I&#39;m<br>
&gt; using the MPI_Sendrecv functions for the North-South and Est-West process.<br>
&gt;<br>
&gt; Here&#39;s the main program &quot;example.c&quot; :<br>
&gt;<br>
&gt; -------------------------------------------------------------------------------------------<br>
&gt;<br>
&gt; #include &lt;stdio.h&gt;<br>
&gt; #include &lt;stdlib.h&gt;<br>
&gt; #include &lt;math.h&gt;<br>
&gt; #include &quot;mpi.h&quot;<br>
&gt;<br>
&gt; int main(int argc, char *argv[])<br>
&gt;     {<br>
&gt;       /* size of the discretization */<br>
&gt;<br>
&gt;       double** x;<br>
&gt;       double** x0;<br>
&gt;<br>
&gt;       int i,j,k,l;<br>
&gt;       int nproc;<br>
&gt;       int ndims;<br>
&gt;       int S=0, E=1, N=2, W=3;<br>
&gt;       int NeighBor[4];<br>
&gt;       int xcell, ycell, size_tot_x, size_tot_y;<br>
&gt;       int *xs,*ys,*xe,*ye;<br>
&gt;       int size_x = 4;<br>
&gt;       int size_y = 4;<br>
&gt;       int me;<br>
&gt;       int x_domains=2;<br>
&gt;       int y_domains=2;<br>
&gt;<br>
&gt;       MPI_Comm comm, comm2d;<br>
&gt;       int dims[2];<br>
&gt;       int periods[2];<br>
&gt;       int reorganisation = 0;<br>
&gt;       int row;<br>
&gt;       MPI_Datatype column_type;<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt;       size_tot_x=size_x+2*x_domains+2;<br>
&gt;       size_tot_y=size_y+2*y_domains+2;<br>
&gt;<br>
&gt;       xcell=(size_x/x_domains);<br>
&gt;       ycell=(size_y/y_domains);<br>
&gt;<br>
&gt;       MPI_Init(&amp;argc, &amp;argv);<br>
&gt;       comm = MPI_COMM_WORLD;<br>
&gt;       MPI_Comm_size(comm,&amp;nproc);<br>
&gt;       MPI_Comm_rank(comm,&amp;me);<br>
&gt;<br>
&gt;       x = malloc(size_tot_y*sizeof(double*));<br>
&gt;       x0 = malloc(size_tot_y*sizeof(double*));<br>
&gt;<br>
&gt;<br>
&gt;       for(j=0;j&lt;=size_tot_y-1;j++) {<br>
&gt;         x[j] = malloc(size_tot_x*sizeof(double));<br>
&gt;         x0[j] = malloc(size_tot_x*sizeof(double));<br>
&gt;       }<br>
&gt;<br>
&gt;       xs = malloc(nproc*sizeof(int));<br>
&gt;       xe = malloc(nproc*sizeof(int));<br>
&gt;       ys = malloc(nproc*sizeof(int));<br>
&gt;       ye = malloc(nproc*sizeof(int));<br>
&gt;<br>
&gt;       /* Create 2D cartesian grid */<br>
&gt;       periods[0] = 0;<br>
&gt;       periods[1] = 0;<br>
&gt;<br>
&gt;       ndims = 2;<br>
&gt;       dims[0]=x_domains;<br>
&gt;       dims[1]=y_domains;<br>
&gt;<br>
&gt;       MPI_Cart_create(comm, ndims, dims, periods, reorganisation, &amp;comm2d);<br>
&gt;<br>
&gt;       /* Identify neighbors */<br>
&gt;<br>
&gt;       NeighBor[0] = MPI_PROC_NULL;<br>
&gt;       NeighBor[1] = MPI_PROC_NULL;<br>
&gt;       NeighBor[2] = MPI_PROC_NULL;<br>
&gt;       NeighBor[3] = MPI_PROC_NULL;<br>
&gt;<br>
&gt;       /* Left/West and right/Est neigbors */<br>
&gt;<br>
&gt;       MPI_Cart_shift(comm2d,0,1,&amp;NeighBor[W],&amp;NeighBor[E]);<br>
&gt;<br>
&gt;       /* Bottom/South and Upper/North neigbors */<br>
&gt;<br>
&gt;       MPI_Cart_shift(comm2d,1,1,&amp;NeighBor[S],&amp;NeighBor[N]);<br>
&gt;<br>
&gt;       /* coordinates of current cell with me rank */<br>
&gt;<br>
&gt;       xcell=(size_x/x_domains);<br>
&gt;       ycell=(size_y/y_domains);<br>
&gt;<br>
&gt;       ys[me]=(y_domains-me%(y_domains)-1)*(ycell+2)+2;<br>
&gt;       ye[me]=ys[me]+ycell-1;<br>
&gt;<br>
&gt;       for(i=0;i&lt;=y_domains-1;i++)<br>
&gt;       {xs[i]=2;}<br>
&gt;<br>
&gt;       for(i=0;i&lt;=y_domains-1;i++)<br>
&gt;       {xe[i]=xs[i]+xcell-1;}<br>
&gt;<br>
&gt;       for(i=1;i&lt;=(x_domains-1);i++)<br>
&gt;          { for(j=0;j&lt;=(y_domains-1);j++)<br>
&gt;               {<br>
&gt;                xs[i*y_domains+j]=xs[(i-1)*y_domains+j]+xcell+2;<br>
&gt;                xe[i*y_domains+j]=xs[i*y_domains+j]+xcell-1;<br>
&gt;               }<br>
&gt;          }<br>
&gt;<br>
&gt;       for(i=0;i&lt;=size_tot_y-1;i++)<br>
&gt;           { for(j=0;j&lt;=size_tot_x-1;j++)<br>
&gt;             { x0[i][j]= i+j;<br>
&gt;         //  printf(&quot;%f\n&quot;,x0[i][j]);<br>
&gt;         }<br>
&gt;       }<br>
&gt;<br>
&gt;       /*  Create column data type to communicate with South and North<br>
&gt; neighbors */<br>
&gt;<br>
&gt;       MPI_Type_vector( ycell, 1, size_tot_x, MPI_DOUBLE, &amp;column_type);<br>
&gt;       MPI_Type_commit(&amp;column_type);<br>
&gt;<br>
&gt;       updateBound(x0, NeighBor, comm2d, column_type, me, xs, ys, xe, ye,<br>
&gt; xcell);<br>
&gt;<br>
&gt;<br>
&gt;               for(i=0;i&lt;=size_tot_y-1;i++)<br>
&gt;            {<br>
&gt;             free(x[i]);<br>
&gt;             free(x0[i]);<br>
&gt;            }<br>
&gt;<br>
&gt;         free(x);<br>
&gt;         free(x0);<br>
&gt;<br>
&gt;         free(xs);<br>
&gt;         free(xe);<br>
&gt;         free(ys);<br>
&gt;         free(ye);<br>
&gt;<br>
&gt;         MPI_Finalize();<br>
&gt;<br>
&gt;         return 0;<br>
&gt;     }<br>
&gt; -------------------------------------------------------------------------------------------<br>
&gt;<br>
&gt; and the second file &quot;updateBound.c&quot; which sends the columns and rows<br>
&gt;<br>
&gt;<br>
&gt; -------------------------------------------------------------------------------------------<br>
&gt;<br>
&gt;<br>
&gt; #include &quot;mpi.h&quot;<br>
&gt; #include &lt;stdio.h&gt;<br>
&gt;<br>
&gt; /*******************************************************************/<br>
&gt; /*    Update Bounds of subdomain with me process      */<br>
&gt; /*******************************************************************/<br>
&gt;<br>
&gt;   void updateBound(double** x,int NeighBor[], MPI_Comm comm2d, MPI_Datatype<br>
&gt; column_type , int me, int* xs, int* ys, int* xe, int* ye, int xcell)<br>
&gt;   {<br>
&gt;<br>
&gt;   int S=0, E=1, N=2, W=3;<br>
&gt;   int flag;<br>
&gt;   MPI_Status status;<br>
&gt;<br>
&gt;   int i,j;<br>
&gt;<br>
&gt;          if(me==0) {printf(&quot;verif_update_before\n&quot;);<br>
&gt;                     for(i=ys[me]-1;i&lt;=ye[me]+1;i++)<br>
&gt;                     { for(j=xs[me]-1;j&lt;=xe[me]+1;j++)<br>
&gt;                       { printf(&quot;%f &quot;,x[i][j]);<br>
&gt;                       }<br>
&gt;                       printf(&quot;\n&quot;);<br>
&gt;                     }<br>
&gt;                     printf(&quot;\n&quot;);<br>
&gt;          }<br>
&gt;<br>
&gt; /********* North/South communication **********************************/<br>
&gt;   flag = 1;<br>
&gt;   /*Send my boundary to North and receive from South*/<br>
&gt;   MPI_Sendrecv(&amp;x[ys[me]][xs[me]], xcell, MPI_DOUBLE, NeighBor[N], flag,<br>
&gt; &amp;x[ye[me]+1][xs[me]], xcell, MPI_DOUBLE, NeighBor[S], flag, comm2d,<br>
&gt; &amp;status);<br>
&gt;<br>
&gt;   /*Send my boundary to South and receive from North*/<br>
&gt;   MPI_Sendrecv(&amp;x[ye[me]][xs[me]], xcell, MPI_DOUBLE, NeighBor[S], flag,<br>
&gt; &amp;x[ys[me]-1][xs[me]], xcell, MPI_DOUBLE, NeighBor[N], flag, comm2d,<br>
&gt; &amp;status);<br>
&gt;<br>
&gt; /********* Est/West communication ************************************/<br>
&gt;   flag = 2;<br>
&gt;   /*Send my boundary to Est and receive from West*/<br>
&gt;   MPI_Sendrecv(&amp;x[ys[me]][xe[me]], 1, column_type, NeighBor[E], flag,<br>
&gt; &amp;x[ys[me]][xs[me]-1], 1, column_type, NeighBor[W], flag, comm2d, &amp;status);<br>
&gt;<br>
&gt;   /*Send my boundary to West and receive from Est*/<br>
&gt;   MPI_Sendrecv(&amp;x[ys[me]][xs[me]], 1, column_type, NeighBor[W], flag,<br>
&gt; &amp;x[ys[me]][xe[me]+1], 1, column_type, NeighBor[E], flag, comm2d, &amp;status);<br>
&gt;<br>
&gt;          if(me==0) {printf(&quot;verif_update_after\n&quot;);<br>
&gt;                     for(i=ys[me]-1;i&lt;=ye[me]+1;i++)<br>
&gt;                     { for(j=xs[me]-1;j&lt;=xe[me]+1;j++)<br>
&gt;                       { printf(&quot;%f &quot;,x[i][j]);<br>
&gt;                       }<br>
&gt;                       printf(&quot;\n&quot;);<br>
&gt;                     }<br>
&gt;                     printf(&quot;\n&quot;);<br>
&gt;          }<br>
&gt;   }<br>
&gt;<br>
&gt; ------------------------------------------------------------------------------<br>
&gt;<br>
&gt; Running with nproc=4, I print the values of the subarray with rank=0 (so at<br>
&gt; left bottom of the grid) and I get before and after the<br>
&gt; bounds udpate  :<br>
&gt;<br>
&gt; verif_update_before<br>
&gt; 6.000000 7.000000 8.000000 9.000000<br>
&gt; 7.000000 8.000000 9.000000 10.000000<br>
&gt; 8.000000 9.000000 10.000000 11.000000<br>
&gt; 9.000000 10.000000 11.000000 12.000000<br>
&gt;<br>
&gt; verif_update_after<br>
&gt; 6.000000 5.000000 6.000000 9.000000<br>
&gt; 7.000000 8.000000 9.000000 12.000000<br>
&gt; 8.000000 9.000000 10.000000 11.000000<br>
&gt; 9.000000 10.000000 11.000000 12.000000<br>
&gt;<br>
&gt; As you can see, after the udpate, I don&#39;t have the correct value ( in<br>
&gt; underligned bold : 11.0 ) at the second element<br>
&gt; of the column coming from the Est. I expected 13.0 instead of 11.0.<br>
&gt;<br>
&gt; So there&#39;s a problem with the column datatype which only send the first<br>
&gt; element of this column.<br>
&gt;<br>
&gt; In &quot;example.c&quot;, I define the column as following :<br>
&gt;<br>
&gt;       MPI_Type_vector( ycell, 1, size_tot_x, MPI_DOUBLE, &amp;column_type);<br>
&gt;       MPI_Type_commit(&amp;column_type);<br>
&gt;<br>
&gt; However, It seems ok and the computation of begin and end coordinates as a<br>
&gt; function of rank &quot;me&quot; is also good.<br>
&gt;<br>
&gt; I make you notice there&#39;s no problem between the exchange of rows between<br>
&gt; the North and the South, only<br>
&gt; between columns.<br>
&gt;<br>
&gt; If you could help me, I don&#39;t know what to do.<br>
&gt;<br>
&gt; Regards<br>
&gt;<br>
&gt;<br>
</div></div>&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</blockquote></div><br>


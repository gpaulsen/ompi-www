<html><body><div style="color:#000; background-color:#fff; font-family:times new roman, new york, times, serif;font-size:12pt"><div id="yiv1747658560"><div style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); font-family: times new roman,new york,times,serif; font-size: 12pt;"><div id="yiv1747658560yui_3_2_0_13_131482267730740">Hello,<span></span></div><div id="yiv1747658560yui_3_2_0_13_131482267730740"><br id="yiv1747658560yui_3_2_0_13_131482267730770"></div><div id="yiv1747658560spelling-correction" class="yiv1747658560gt-spell-correct-message 
yiv1747658560gt-spell-vkeyboard-on" style="display: none;">Traduzir do: <a rel="nofollow">português</a></div><div id="yiv1747658560gt-src-tools"><div id="yiv1747658560gt-src-tools-l"><div class="yiv1747658560trans-keyboard-button yiv1747658560goog-toolbar-button" style="" id="yiv1747658560gt-src-keyboard"><span class="yiv1747658560jfk-button-img"></span></div><div class="yiv1747658560" id="yiv1747658560inputt13n" style="display: none;"><span dir="ltr" style="" class="yiv1747658560jfk-checkbox yiv1747658560goog-inline-block" id="yiv1747658560t13nimg"></span><span id="yiv1747658560t13ntext" dir="ltr"></span></div></div><div id="yiv1747658560gt-src-tools-r"><div style="display: none;" class="yiv1747658560trans-listen-button yiv1747658560goog-toolbar-button" id="yiv1747658560gt-src-listen"><span class="yiv1747658560jfk-button-img"></span></div><div class="yiv1747658560trans-roman-button 
yiv1747658560goog-toolbar-button" style="display: none;" id="yiv1747658560gt-src-roman"><span class="yiv1747658560jfk-button-img"></span></div></div></div>
 <div style="display: none;" id="yiv1747658560select_document">Digite um texto ou 
endereço de um site ou <a rel="nofollow" target="_blank" href="http://translate.google.com.br/?tr=f&amp;hl=pt-BR">traduza um 
documento.</a></div><div id="yiv1747658560file_div" class="yiv1747658560file" style="display: none;"><div style="display: none;" id="yiv1747658560select_text"><a rel="nofollow" target="_blank" href="http://translate.google.com.br/?tr=t&amp;hl=pt-BR">Cancelar</a></div><input style="display: none;" name="file" id="yiv1747658560file" size="40" type="file"></div>
  <div id="yiv1747658560autotrans" style="display: none; visibility: visible;" class="yiv1747658560"><h3 id="yiv1747658560headingtext" class="yiv1747658560">Tradução do português 
para inglês</h3></div><div id="yiv1747658560gt-res-content" class="yiv1747658560almost_half_cell"><div id="yiv1747658560yui_3_2_0_13_131482267730787" dir="ltr" style=""><div id="yiv1747658560tts_button" style="display: none;" class="yiv1747658560"></div><span id="yiv1747658560result_box" class="yiv1747658560" lang="en"><span class="yiv1747658560hps">I have three</span> <span class="yiv1747658560hps">processes
 that communicate</span> <span class="yiv1747658560hps">with each other.</span> <span class="yiv1747658560hps">The</span> <span class="yiv1747658560hps">first</span> <span class="yiv1747658560hps">process
 creates</span> <span class="yiv1747658560hps">the other two</span> <span class="yiv1747658560hps">processes</span>
 <span class="yiv1747658560hps">(using</span> <span class="yiv1747658560hps">MPI_Comm_spaw</span> <span class="yiv1747658560hps yiv1747658560atn">(</span><span>...</span><span>))</span><span>.</span><br>
 <span class="yiv1747658560hps">When one of the</span> <span class="yiv1747658560hps">processes</span>
 <span class="yiv1747658560hps">performs</span> <span class="yiv1747658560hps">MPI_Finalize</span>
 <span class="yiv1747658560hps">(), it</span> <span id="yiv1747658560yui_3_2_0_13_1314822677307227" class="yiv1747658560hps">continues </span>in execution, stopped<span id="yiv1747658560yui_3_2_0_13_131482267730786" class="yiv1747658560hps"> </span><span id="yiv1747658560yui_3_2_0_13_1314822677307110" class="yiv1747658560hps">in</span> <span class="yiv1747658560hps">MPI_Finalize</span> <span class="yiv1747658560hps">function</span> <span class="yiv1747658560hps">() (in</span> <span class="yiv1747658560hps">busy waiting</span><span>,</span>
 <span class="yiv1747658560hps">ie</span><span>,</span> <span class="yiv1747658560hps">using</span>
 <span class="yiv1747658560hps">CPU)</span> <span class="yiv1747658560hps">and just executes</span>
 <span class="yiv1747658560hps">the next instruction</span> <span class="yiv1747658560hps">only 
when</span> <span class="yiv1747658560hps">the other two</span> <span class="yiv1747658560hps">processes
 run</span> <span class="yiv1747658560hps">MPI_Finalize</span> <span class="yiv1747658560hps">().</span>
 <span class="yiv1747658560hps">It seems that</span> <span class="yiv1747658560hps">MPI_Finalize</span>
 <span class="yiv1747658560hps">()</span> <span class="yiv1747658560hps">behaves like</span> <span class="yiv1747658560hps">MPI_Barrier</span> <span class="yiv1747658560hps">().</span> <span class="yiv1747658560hps">This</span> <span class="yiv1747658560hps">behavior only</span> <span class="yiv1747658560hps">occurs</span> <span class="yiv1747658560hps">when processes</span> <span class="yiv1747658560hps">communicate with each other</span> <span class="yiv1747658560hps">(when,</span>
 <span class="yiv1747658560hps">for example, use</span> <span class="yiv1747658560hps">MPI_Send</span><span>,</span>&nbsp; <span class="yiv1747658560hps">MPI_Isend</span>, <span id="yiv1747658560yui_3_2_0_13_1314822677307142" class="yiv1747658560hps">MPI_Bsend. or MPI_Ssend</span><span>)</span><span>.</span><br>I would like to know if we can avoid this behavior of MPI_Finalize when processes communicate with each other.<br><br>Here there are the codes:<br><br>Process Master:<br><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;mpi.h&gt;<br><br>int main(int argc, char** argv) {<br>&nbsp;&nbsp;&nbsp; int i;<br>&nbsp;&nbsp;&nbsp; char other[200];<br>&nbsp;&nbsp;&nbsp; getcwd(other, 199);<br>&nbsp;&nbsp;&nbsp; strcat(other, "/otherProcess");<br>&nbsp;&nbsp;&nbsp; MPI_Init(&amp;argc, &amp;argv);<br>&nbsp;&nbsp;&nbsp; MPI_Comm com;<br>&nbsp;&nbsp;&nbsp; MPI_Status s;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;
 MPI_Comm_spawn(other, MPI_ARGV_NULL, 2, MPI_INFO_NULL, 0,
 MPI_COMM_WORLD, &amp;com, MPI_ERRCODES_IGNORE);<br>&nbsp;&nbsp;&nbsp; MPI_Recv(&amp;i, 1, MPI_INT, 0, 0, com, &amp;s);<br>&nbsp;&nbsp;&nbsp; sleep(15); // Make the otherProcess wait the Master process in MPI_Finalize().<br>&nbsp;&nbsp;&nbsp; MPI_Finalize();<br>&nbsp;&nbsp;&nbsp; return 0; <br>}<br><br>Other Process (process Master calls otherProcess):<br><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;mpi.h&gt;<br><br>int main(int argc, char * argv[]) {<br>&nbsp;&nbsp;&nbsp; int dest;<br>&nbsp;&nbsp;&nbsp; MPI_Comm parent;<br>&nbsp;&nbsp;&nbsp; MPI_Init(&amp;argc, &amp;argv);<br>&nbsp;&nbsp;&nbsp; MPI_Comm_get_parent(&amp;parent);<br>&nbsp;&nbsp;&nbsp; MPI_Send(&amp;dest, 1, MPI_INT, 0, 0, parent); // If this line is removed, the process doesn't stop in MPI_Finalize.<br>&nbsp;&nbsp;&nbsp; printf("Before MPI_Finalize\n");<br>&nbsp;&nbsp;&nbsp; MPI_Finalize();&nbsp; // The process stay here waiting all process execute
 MPI_Finalize.<br>&nbsp;&nbsp;&nbsp; printf("After MPI_Finalize\n");<br>&nbsp;&nbsp;&nbsp; return 0;<br>}<br><br></span><span id="yiv1747658560result_box" class="yiv1747658560short_text" lang="en"><span class="yiv1747658560hps">I've
 tried</span> <span class="yiv1747658560hps">several things</span> <span id="yiv1747658560yui_3_2_0_13_1314822677307244" class="yiv1747658560hps">but
 nothing worked.</span></span> I don't want that otherProcess stay waiting in MPI_Finalize().<br>Could someone help-me?<br><br>Thanks.<br><span id="yiv1747658560result_box" class="yiv1747658560" lang="en"><br><br><br><br><br><span class="yiv1747658560hps"></span></span></div></div></div></div></div></body></html>

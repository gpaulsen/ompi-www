No clarification necessary. Standard is not user guide. Semantics are clear from what is defined. Users who don&#39;t like the interface can write a library that does what they want. <div><br></div><div>Jeff <span></span><br><br>On Thursday, February 11, 2016, Nathan Hjelm &lt;<a href="mailto:hjelmn@lanl.gov">hjelmn@lanl.gov</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
I should also say that I think this is something that may be worth<br>
clarifying in the standard. Either semantic is fine with me but there is<br>
no reason to change the behavior if it does not violate the standard.<br>
<br>
-Nathan<br>
<br>
On Thu, Feb 11, 2016 at 01:35:28PM -0700, Nathan Hjelm wrote:<br>
&gt;<br>
&gt; Jeff probably ran with MPICH. Open MPI&#39;s are consistent with our choice<br>
&gt; of definition for size=0:<br>
&gt;<br>
&gt; query: me=1, them=0, size=0, disp=1, base=0x0<br>
&gt; query: me=1, them=1, size=4, disp=1, base=0x1097e30f8<br>
&gt; query: me=1, them=2, size=4, disp=1, base=0x1097e30fc<br>
&gt; query: me=1, them=3, size=4, disp=1, base=0x1097e3100<br>
&gt; query: me=2, them=0, size=0, disp=1, base=0x0<br>
&gt; query: me=2, them=1, size=4, disp=1, base=0x109fe10f8<br>
&gt; query: me=2, them=2, size=4, disp=1, base=0x109fe10fc<br>
&gt; query: me=2, them=3, size=4, disp=1, base=0x109fe1100<br>
&gt; query: me=2, them=PROC_NULL, size=4, disp=1, base=0x109fe10f8<br>
&gt; query: me=3, them=0, size=0, disp=1, base=0x0<br>
&gt; query: me=3, them=1, size=4, disp=1, base=0x1088f30f8<br>
&gt; query: me=3, them=2, size=4, disp=1, base=0x1088f30fc<br>
&gt; query: me=3, them=3, size=4, disp=1, base=0x1088f3100<br>
&gt; query: me=3, them=PROC_NULL, size=4, disp=1, base=0x1088f30f8<br>
&gt; query: me=0, them=0, size=0, disp=1, base=0x0<br>
&gt; query: me=0, them=1, size=4, disp=1, base=0x105b890f8<br>
&gt; query: me=0, them=2, size=4, disp=1, base=0x105b890fc<br>
&gt; query: me=0, them=3, size=4, disp=1, base=0x105b89100<br>
&gt; query: me=0, them=PROC_NULL, size=4, disp=1, base=0x105b890f8<br>
&gt; query: me=1, them=PROC_NULL, size=4, disp=1, base=0x1097e30f8<br>
&gt;<br>
&gt; To be portable only use MPI_Win_shared_query and do not rely on the<br>
&gt; return value of base if you pass size = 0.<br>
&gt;<br>
&gt; -Nathan<br>
&gt;<br>
&gt; On Thu, Feb 11, 2016 at 08:23:16PM +0000, Peter Wind wrote:<br>
&gt; &gt;    Thanks Jeff, that was an interesting result. The pointers are here well<br>
&gt; &gt;    defined, also for the zero size segment.<br>
&gt; &gt;    However I can&#39;t reproduce your output. I still get null pointers (output<br>
&gt; &gt;    below).<br>
&gt; &gt;    (I tried both 1.8.5 and 1.10.2 versions)<br>
&gt; &gt;    What could be the difference?<br>
&gt; &gt;    Peter<br>
&gt; &gt;    mpirun -np 4 a.out<br>
&gt; &gt;    query: me=0, them=0, size=0, disp=1, base=(nil)<br>
&gt; &gt;    query: me=0, them=1, size=4, disp=1, base=0x2aee280030d0<br>
&gt; &gt;    query: me=0, them=2, size=4, disp=1, base=0x2aee280030d4<br>
&gt; &gt;    query: me=0, them=3, size=4, disp=1, base=0x2aee280030d8<br>
&gt; &gt;    query: me=0, them=PROC_NULL, size=4, disp=1, base=0x2aee280030d0<br>
&gt; &gt;    query: me=1, them=0, size=0, disp=1, base=(nil)<br>
&gt; &gt;    query: me=1, them=1, size=4, disp=1, base=0x2aabbb9ce0d0<br>
&gt; &gt;    query: me=1, them=2, size=4, disp=1, base=0x2aabbb9ce0d4<br>
&gt; &gt;    query: me=1, them=3, size=4, disp=1, base=0x2aabbb9ce0d8<br>
&gt; &gt;    query: me=1, them=PROC_NULL, size=4, disp=1, base=0x2aabbb9ce0d0<br>
&gt; &gt;    query: me=2, them=0, size=0, disp=1, base=(nil)<br>
&gt; &gt;    query: me=2, them=1, size=4, disp=1, base=0x2b1579dd40d0<br>
&gt; &gt;    query: me=2, them=2, size=4, disp=1, base=0x2b1579dd40d4<br>
&gt; &gt;    query: me=2, them=3, size=4, disp=1, base=0x2b1579dd40d8<br>
&gt; &gt;    query: me=2, them=PROC_NULL, size=4, disp=1, base=0x2b1579dd40d0<br>
&gt; &gt;    query: me=3, them=0, size=0, disp=1, base=(nil)<br>
&gt; &gt;    query: me=3, them=1, size=4, disp=1, base=0x2ac8d2c350d0<br>
&gt; &gt;    query: me=3, them=2, size=4, disp=1, base=0x2ac8d2c350d4<br>
&gt; &gt;    query: me=3, them=3, size=4, disp=1, base=0x2ac8d2c350d8<br>
&gt; &gt;    query: me=3, them=PROC_NULL, size=4, disp=1, base=0x2ac8d2c350d0<br>
&gt; &gt;<br>
&gt; &gt;      ----------------------------------------------------------------------<br>
&gt; &gt;<br>
&gt; &gt;      See attached.  Output below.  Note that the base you get for ranks 0 and<br>
&gt; &gt;      1 is the same, so you need to use the fact that size=0 at rank=0 to know<br>
&gt; &gt;      not to dereference that pointer and expect to be writing into rank 0&#39;s<br>
&gt; &gt;      memory, since you will write into rank 1&#39;s.<br>
&gt; &gt;      I would probably add &quot;if (size==0) base=NULL;&quot; for good measure.<br>
&gt; &gt;      Jeff<br>
&gt; &gt;<br>
&gt; &gt;      $ mpirun -n 4 ./a.out<br>
&gt; &gt;<br>
&gt; &gt;      query: me=0, them=0, size=0, disp=1, base=0x10bd64000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=0, them=1, size=4, disp=1, base=0x10bd64000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=0, them=2, size=4, disp=1, base=0x10bd64004<br>
&gt; &gt;<br>
&gt; &gt;      query: me=0, them=3, size=4, disp=1, base=0x10bd64008<br>
&gt; &gt;<br>
&gt; &gt;      query: me=0, them=PROC_NULL, size=4, disp=1, base=0x10bd64000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=1, them=0, size=0, disp=1, base=0x102d3b000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=1, them=1, size=4, disp=1, base=0x102d3b000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=1, them=2, size=4, disp=1, base=0x102d3b004<br>
&gt; &gt;<br>
&gt; &gt;      query: me=1, them=3, size=4, disp=1, base=0x102d3b008<br>
&gt; &gt;<br>
&gt; &gt;      query: me=1, them=PROC_NULL, size=4, disp=1, base=0x102d3b000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=2, them=0, size=0, disp=1, base=0x10aac1000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=2, them=1, size=4, disp=1, base=0x10aac1000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=2, them=2, size=4, disp=1, base=0x10aac1004<br>
&gt; &gt;<br>
&gt; &gt;      query: me=2, them=3, size=4, disp=1, base=0x10aac1008<br>
&gt; &gt;<br>
&gt; &gt;      query: me=2, them=PROC_NULL, size=4, disp=1, base=0x10aac1000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=3, them=0, size=0, disp=1, base=0x100fa2000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=3, them=1, size=4, disp=1, base=0x100fa2000<br>
&gt; &gt;<br>
&gt; &gt;      query: me=3, them=2, size=4, disp=1, base=0x100fa2004<br>
&gt; &gt;<br>
&gt; &gt;      query: me=3, them=3, size=4, disp=1, base=0x100fa2008<br>
&gt; &gt;<br>
&gt; &gt;      query: me=3, them=PROC_NULL, size=4, disp=1, base=0x100fa2000<br>
&gt; &gt;<br>
&gt; &gt;      On Thu, Feb 11, 2016 at 8:55 AM, Jeff Hammond &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;jeff.science@gmail.com&#39;)">jeff.science@gmail.com</a>&gt;<br>
&gt; &gt;      wrote:<br>
&gt; &gt;<br>
&gt; &gt;        On Thu, Feb 11, 2016 at 8:46 AM, Nathan Hjelm &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;hjelmn@lanl.gov&#39;)">hjelmn@lanl.gov</a>&gt; wrote:<br>
&gt; &gt;        &gt;<br>
&gt; &gt;        &gt;<br>
&gt; &gt;        &gt; On Thu, Feb 11, 2016 at 02:17:40PM +0000, Peter Wind wrote:<br>
&gt; &gt;        &gt; &gt;    I would add that the present situation is bound to give<br>
&gt; &gt;        problems for some<br>
&gt; &gt;        &gt; &gt;    users.<br>
&gt; &gt;        &gt; &gt;    It is natural to divide an array in segments, each process<br>
&gt; &gt;        treating its<br>
&gt; &gt;        &gt; &gt;    own segment, but needing to read adjacent segments too.<br>
&gt; &gt;        &gt; &gt;    MPI_Win_allocate_shared seems to be designed for this.<br>
&gt; &gt;        &gt; &gt;    This will work fine as long as no segment as size zero. It can<br>
&gt; &gt;        also be<br>
&gt; &gt;        &gt; &gt;    expected that most testing would be done with all segments<br>
&gt; &gt;        larger than<br>
&gt; &gt;        &gt; &gt;    zero.<br>
&gt; &gt;        &gt; &gt;    The document adding &quot;size = 0 is valid&quot;, would also make people<br>
&gt; &gt;        confident<br>
&gt; &gt;        &gt; &gt;    that it will be consistent for that special case too.<br>
&gt; &gt;        &gt;<br>
&gt; &gt;        &gt; Nope, that statement says its ok for a rank to specify that the<br>
&gt; &gt;        local<br>
&gt; &gt;        &gt; shared memory segment is 0 bytes. Nothing more. The standard<br>
&gt; &gt;        &gt; unfortunately does not define what pointer value is returned for a<br>
&gt; &gt;        rank<br>
&gt; &gt;        &gt; that specifies size = 0. Not sure if the RMA working group<br>
&gt; &gt;        intentionally<br>
&gt; &gt;        &gt; left that undefine... Anyway, Open MPI does not appear to be out of<br>
&gt; &gt;        &gt; compliance with the standard here.<br>
&gt; &gt;        &gt;<br>
&gt; &gt;        MPI_Alloc_mem doesn&#39;t say what happens if you pass size=0 either.  The<br>
&gt; &gt;        RMA working group intentionally tries to maintain consistency with the<br>
&gt; &gt;        rest of the MPI standard whenever possible, so we did not create a new<br>
&gt; &gt;        semantic here.<br>
&gt; &gt;        MPI_Win_shared_query text includes this:<br>
&gt; &gt;        &quot;If all processes in the group attached to the window specified size =<br>
&gt; &gt;        0, then the call returns size = 0 and a baseptr as if MPI_ALLOC_MEM<br>
&gt; &gt;        was called with size = 0.&quot;<br>
&gt; &gt;<br>
&gt; &gt;        &gt;<br>
&gt; &gt;        &gt; To be safe you should use MPI_Win_shared_query as suggested. You can<br>
&gt; &gt;        &gt; pass MPI_PROC_NULL as the rank to get the pointer for the first<br>
&gt; &gt;        non-zero<br>
&gt; &gt;        &gt; sized segment in the shared memory window.<br>
&gt; &gt;        Indeed!  I forgot about that.  MPI_Win_shared_query solves this<br>
&gt; &gt;        problem for the user brilliantly.<br>
&gt; &gt;        Jeff<br>
&gt; &gt;        --<br>
&gt; &gt;        Jeff Hammond<br>
&gt; &gt;        <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;jeff.science@gmail.com&#39;)">jeff.science@gmail.com</a><br>
&gt; &gt;        <a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a><br>
&gt; &gt;<br>
&gt; &gt;      --<br>
&gt; &gt;      Jeff Hammond<br>
&gt; &gt;      <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;jeff.science@gmail.com&#39;)">jeff.science@gmail.com</a><br>
&gt; &gt;      <a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a><br>
&gt; &gt;      _______________________________________________<br>
&gt; &gt;      users mailing list<br>
&gt; &gt;      <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;users@open-mpi.org&#39;)">users@open-mpi.org</a><br>
&gt; &gt;      Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; &gt;      Link to this post:<br>
&gt; &gt;      <a href="http://www.open-mpi.org/community/lists/users/2016/02/28508.php" target="_blank">http://www.open-mpi.org/community/lists/users/2016/02/28508.php</a><br>
&gt;<br>
&gt; &gt; _______________________________________________<br>
&gt; &gt; users mailing list<br>
&gt; &gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;users@open-mpi.org&#39;)">users@open-mpi.org</a><br>
&gt; &gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; &gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2016/02/28511.php" target="_blank">http://www.open-mpi.org/community/lists/users/2016/02/28511.php</a><br>
&gt;<br>
<br>
<br>
<br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;users@open-mpi.org&#39;)">users@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/users/2016/02/28513.php" target="_blank">http://www.open-mpi.org/community/lists/users/2016/02/28513.php</a><br>
<br>
</blockquote></div><br><br>-- <br>Jeff Hammond<br><a href="mailto:jeff.science@gmail.com" target="_blank">jeff.science@gmail.com</a><br><a href="http://jeffhammond.github.io/" target="_blank">http://jeffhammond.github.io/</a><br>


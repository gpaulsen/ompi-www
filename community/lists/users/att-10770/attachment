It looks like the buffering operations consume about 15% as much time as the allreduce operations.  Not huge, but not trivial, all the same.  Is there any way to avoid the buffering step?<br><br><br><br><div class="gmail_quote">
On Thu, Sep 24, 2009 at 6:03 PM, Eugene Loh <span dir="ltr">&lt;<a href="mailto:Eugene.Loh@sun.com">Eugene.Loh@sun.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">



  
  

<div bgcolor="#ffffff" text="#000000"><div><div></div><div class="h5">
Greg Fischer wrote:
<blockquote cite="http://midc615a6650909241444q6116bf7eid334dc9395920a76@mail.gmail.com" type="cite">(I apologize in advance for the simplistic/newbie
question.)<br>
  <br>
I&#39;m performing an ALLREDUCE operation on a multi-dimensional array. 
This operation is the biggest bottleneck in the code, and I&#39;m wondering
if there&#39;s a way to do it more efficiently than what I&#39;m doing now. 
Here&#39;s a representative example of what&#39;s happening:<br>
  <br>
  <span style="font-family: courier new,monospace;">   ir=1</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   do ikl=1,km</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">     do ij=1,jm</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">       do ii=1,im</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">        
albuf(ir)=array(ii,ij,ikl,nl,0,ng)</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">         ir=ir+1</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">       enddo</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">     enddo</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   enddo</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   agbuf=0.0</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   call
mpi_allreduce(albuf,agbuf,im*jm*kmloc(coords(2)+1),mpi_real,mpi_sum,ang_com,ierr)</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   ir=1</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   do ikl=1,km<br>
  </span><span style="font-family: courier new,monospace;">     do
ij=1,jm</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">       do ii=1,im</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">        
phim(ii,ij,ikl,nl,0,ng)=agbuf(ir)</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">         ir=ir+1</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">       enddo</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">     enddo</span><br style="font-family: courier new,monospace;">
  <span style="font-family: courier new,monospace;">   enddo</span><br>
  <br>
Is there any way to just do this in one fell swoop, rather than
buffering, transmitting, and unbuffering?  This operation is looped
over many times.  Are there savings to be had here?<br>
</blockquote></div></div>
There are three steps here:  buffering, transmitting, and unbuffering. 
Any idea how the run time is distributed among those three steps? 
E.g., if most time is spent in the MPI call, then combining all three
steps into one is unlikely to buy you much... and might even hurt.  If
most of the time is spent in the MPI call, then there may be some
tuning of collective algorithms to do.  I don&#39;t have any experience
doing this with OMPI.  I&#39;m just saying it makes some sense to isolate
the problem a little bit more.<br>
</div>

<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br></blockquote></div><br>


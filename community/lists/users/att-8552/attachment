<html><body>
<p>There is no synchronization operation in MPI that promises all tasks will exit at the same time. For MPI_Barrier they will exit as close to the same time as the implementation can reasonably support but as long as the application is distributed and there are delays in the interconnect, it is not possible to provide strict exit synchronization. <br>
<br>
If a task involved in the MPI_Barrier happens to be de-scheduled by the OS in the middle of carrying out an MPI_Barrier, the skew can be quite significant (even several milliseconds)<br>
<br>
The MPI standard only stipulates that no task in the group may exit MPI_Barrier until all tasks have entered.<br>
<br>
As covered in an extensive discussion a couple week back, very few applications actually require MPI_Barrier synchronization at all.  Applications in which tasks are affected by outside events or use non-MPI communications can require MPI_Barrier.  Tasks that use MPI_ANY_SOURCE or MPI_ANY_TAG receive can act in unexpected ways without judicious use of MPI_Barrier.<br>
<br>
               Dick <br>
<br>
Dick Treumann  -  MPI Team           <br>
IBM Systems &amp; Technology Group<br>
Dept X2ZA / MS P963 -- 2455 South Road -- Poughkeepsie, NY 12601<br>
Tele (845) 433-7846         Fax (845) 433-8363<br>
<br>
<br>
<tt>users-bounces@open-mpi.org wrote on 03/23/2009 05:11:05 PM:<br>
<br>
&gt; [image removed] </tt><br>
<tt>&gt; <br>
&gt; Re: [OMPI users] Collective operations and synchronization</tt><br>
<tt>&gt; <br>
&gt; Ralph Castain </tt><br>
<tt>&gt; <br>
&gt; to:</tt><br>
<tt>&gt; <br>
&gt; Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; 03/23/2009 05:12 PM</tt><br>
<tt>&gt; <br>
&gt; Sent by:</tt><br>
<tt>&gt; <br>
&gt; users-bounces@open-mpi.org</tt><br>
<tt>&gt; <br>
&gt; Please respond to Open MPI Users</tt><br>
<tt>&gt; <br>
&gt; Just one point to emphasize - Eugene said it, but many times people &nbsp;<br>
&gt; don't fully grasp the implication.<br>
&gt; <br>
&gt; On an MPI_Allreduce, the algorithm requires that all processes -enter- &nbsp;<br>
&gt; the call before anyone can exit.<br>
&gt; <br>
&gt; It does -not- require that they all exit at the same time.<br>
&gt; <br>
&gt; So if you want to synchronize on the -exit-, as your question &nbsp;<br>
&gt; indicated, then you must add the MPI_Barrier as you describe.<br>
&gt; <br>
&gt; Ralph<br>
&gt; <br>
&gt; <br>
&gt; On Mar 23, 2009, at 3:01 PM, Eugene Loh wrote:<br>
&gt; <br>
&gt; &gt; Shaun Jackman wrote:<br>
&gt; &gt;<br>
&gt; &gt;&gt; I've just read in the Open MPI documentation [1]<br>
&gt; &gt;<br>
&gt; &gt; That's the MPI spec, actually.<br>
&gt; &gt;<br>
&gt; &gt;&gt; that collective operations, such as MPI_Allreduce, may synchronize, &nbsp;<br>
&gt; &gt;&gt; but do not necessarily synchronize. My algorithm requires a &nbsp;<br>
&gt; &gt;&gt; collective operation and synchronization; is there a better (more &nbsp;<br>
&gt; &gt;&gt; efficient?) method than simply calling MPI_Allreduce followed by &nbsp;<br>
&gt; &gt;&gt; MPI_Barrier?<br>
&gt; &gt;<br>
&gt; &gt; MPI_Allreduce is a case that actually &quot;requires&quot; synchronization in &nbsp;<br>
&gt; &gt; that no participating process may exit before all processes have &nbsp;<br>
&gt; &gt; entered. &nbsp;So, there should be no need to add additional &nbsp;<br>
&gt; &gt; synchronization. &nbsp;A special case might be an MPI_Allreduce of a 0- <br>
&gt; &gt; length message, in which case I suppose an MPI implementation could &nbsp;<br>
&gt; &gt; simple &quot;do nothing&quot;, and the synchronization side-effect would be &nbsp;<br>
&gt; &gt; lost.<br>
&gt; &gt;<br>
&gt; &gt; The MPI spec is mainly talking about a &quot;typical&quot; collective where &nbsp;<br>
&gt; &gt; one could imagine a process exiting before some processes have &nbsp;<br>
&gt; &gt; entered. &nbsp;E.g., in a broadcast or scatter, the root could exit &nbsp;<br>
&gt; &gt; before any other process has entered the operation. &nbsp;In a reduce or &nbsp;<br>
&gt; &gt; gather, the root could enter after all other processes have exited. &nbsp; <br>
&gt; &gt; For all-to-all, allreduce, or allgather, however, no process can &nbsp;<br>
&gt; &gt; exit before all processes have entered, which is the synchronization &nbsp;<br>
&gt; &gt; condition effected by a barrier. &nbsp;(Again, null message lengths can &nbsp;<br>
&gt; &gt; change things.)<br>
&gt; &gt;<br>
&gt; &gt;&gt; [1] <a href="http://www.mpi-forum.org/docs/mpi21-report-bw/node85.htm">http://www.mpi-forum.org/docs/mpi21-report-bw/node85.htm</a><br>
&gt; &gt;&gt; _______________________________________________<br>
&gt; &gt;&gt; users mailing list<br>
&gt; &gt;&gt; users@open-mpi.org<br>
&gt; &gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; &gt;<br>
&gt; &gt;<br>
&gt; &gt; _______________________________________________<br>
&gt; &gt; users mailing list<br>
&gt; &gt; users@open-mpi.org<br>
&gt; &gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
&gt; <br>
&gt; _______________________________________________<br>
&gt; users mailing list<br>
&gt; users@open-mpi.org<br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br>
</tt></body></html>

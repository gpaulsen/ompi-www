<div class="gmail_quote">Hi All.<br><br>I have parallel PDE/CFD code in fortran.<br>Let we consider it consisting of two parts:<br><br>1) Startup part; that  includes input reads, splits, distributions, forming neighborhood information arrays, grid arrays, and all related. It includes most of the necessary array declarations.<br>

<br>2) Iterative part; we proceed the solution in time.<br><br><br>Approach One:<br>============<br>What I do is that during the Startup phase, I declare the most array allocatable and then allocate them sizes depending upon the input reads and domain partitioning. And then In the iterative phase I utilize those arrays. But I &quot;do not&quot; allocate/deallocate new arrays in the iterative part.<br>

<br><br>Approach Two:<br>============<br>I think that,  what if I first use to run only the start -up phase of my parallel code having allocatable like things and get the sizes-values required for array allocations for a specific problem size and partitioning. Then I use these values as constant in another version of my code in which I will declare array with the constant values obtained.<br>

<br>So my question is that will there be any significant performance/efficiency difference in the &quot;ITERATIVE part&quot; if the approach two is used (having arrays declared fixed sizes/values)?<br><br><br>--------------------<br>
<pre><font style="font-family: tahoma,sans-serif;" size="2">ANOTHER QUESTION ABOUT CALLING SUBROUTINES:<br>Assume two ways:<br>1) One way is that we declare arrays in some global module and &quot;USE&quot;<br>arrays in subroutines which ever is needed there.<br>
<br>2) We pass a large number of arrays (10, 20 or 30 may be) in the header<br>while making call to a  subroutine.<br><br>Which way is quite fast and efficient over the other?</font><br></pre><br><br><br>Thank You for your kind attention.<br>

<br>with best regards,<br><font color="#888888">Amjad Ali. <br>
</font></div><br>


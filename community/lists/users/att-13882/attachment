<font><font size="2">I&#39;m trying to parallelize a Fortran code with 
rather complicated derived types full of pointer arrays.  When I build 
the MPI type for sending, all the static components are sent, but the 
pointer arrays are not (and retain initial values).  I imagine this has 
to do with memory addresses when creating the MPI struct,
 but I have no idea how to fix it.<br>
<br>
I&#39;ve included a simple code illustrating my issue below.  Any 
suggestions?<br>
<br>
Thanks,<br>
Jeremy<br>
<br>
program mpi_struct_example<br>
      use mpi<br>
      implicit none<br>
      ! declarations<br>
      type :: small<br>
          real, pointer :: array(:)<br>
      end type small<br>
      type(small) :: lala<br>
      integer :: stat, counts(1), types(1), ierr, iam, n=0, MPI_SMALL<br>
      integer (kind=MPI_ADDRESS_KIND) :: displs(1)<br>
      ! initialize MPI and get my rank<br>
      call MPI_INIT( ierr )<br>
      call MPI_COMM_RANK( MPI_COMM_WORLD, iam, ierr )<br>
      n = 20<br>
      allocate( lala%array(n) )<br>
      lala%array = 2.0<br>
      ! build block counts, displacements, and oldtypes<br>
      counts     = (/n/)<br>
      displs     = (/0/)<br>
      types      = (/MPI_REAL/)<br>
      ! make and commit new type<br>
      call MPI_TYPE_CREATE_STRUCT( 1, counts, displs, types, MPI_SMALL, 
ierr )<br>
      call MPI_TYPE_COMMIT( MPI_SMALL, ierr )<br>
      if (iam .eq. 0) then<br>
            ! reset the value of the array<br>
            lala%array  = 1.0 <br>
            call MPI_SEND( lala, 1, MPI_SMALL, 1, 1, MPI_COMM_WORLD, 
ierr)       ! this doesn&#39;t work<br>
            !call MPI_SEND( lala%array, n, MPI_REAL, 1, 1, 
MPI_COMM_WORLD, ierr) ! this does work<br>
            write (*,*) &quot;iam &quot;,iam,&quot; and lala%array(1)  = &quot;, 
lala%array(1)<br>
      else<br>
            call MPI_RECV( lala, 1, MPI_SMALL, 0, 1, MPI_COMM_WORLD, 
stat, ierr )       ! this doesn&#39;t work<br>
            !call MPI_RECV( lala%array, n, MPI_REAL, 0, 1, 
MPI_COMM_WORLD, stat, ierr ) ! this does work<br>
            write (*,*) &quot;iam &quot;,iam,&quot; and lala%array(1)  = &quot;, 
lala%array(1), &quot; ( should be 1.0)&quot;<br>
      end if<br>
      call MPI_FINALIZE(ierr)<br>
end program mpi_struct_example</font></font>


<?
$subject_val = "[OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2";
include("../../include/msg-header.inc");
?>
<!-- received="Thu Sep 20 02:27:26 2012" -->
<!-- isoreceived="20120920062726" -->
<!-- sent="Thu, 20 Sep 2012 15:25:07 +0900" -->
<!-- isosent="20120920062507" -->
<!-- name="tmishima_at_[hidden]" -->
<!-- email="tmishima_at_[hidden]" -->
<!-- subject="[OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2" -->
<!-- id="OF4EE73F4F.3D5482A0-ON49257A7F.00225804-49257A7F.002374B3_at_jcity.maeda.co.jp" -->
<!-- charset="US-ASCII" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> [OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2<br>
<strong>From:</strong> <a href="mailto:tmishima_at_[hidden]?Subject=Re:%20[OMPI%20users]%20-DUSE_TSD_DATA_HACK%20problem%20in%20openmpi's%20ptmalloc2"><em>tmishima_at_[hidden]</em></a><br>
<strong>Date:</strong> 2012-09-20 02:25:07
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="20250.php">Ralph Castain: "Re: [OMPI users] How can use comm_spawn  when the host is off-line"</a>
<li><strong>Previous message:</strong> <a href="20248.php">rushing: "[OMPI users] How can use comm_spawn  when the host is off-line"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="20330.php">Jeff Squyres: "Re: [OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2"</a>
<li><strong>Reply:</strong> <a href="20330.php">Jeff Squyres: "Re: [OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2"</a>
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
Hello, I found a problem in openmpi's ptmalloc2. The problem is that
<br>
TSD (thread specific data) does not work properly and it may cause
<br>
peformance loss and segfault.  In my case, heavy memory allocating
<br>
applications sometimes make segfault.
<br>
<p>Please see opal/mca/memory/linux/sysdeps/pthread/malloc-machine.h.
<br>
<p>When USE_TSD_DATA_HACK is defined, which is default of openmpi, the
<br>
hacked TSD is used as shown below.
<br>
<p>&nbsp;&nbsp;#if defined(__sgi) || defined(USE_TSD_DATA_HACK)
<br>
&nbsp;&nbsp;typedef void *tsd_key_t[256];
<br>
&nbsp;&nbsp;#define tsd_key_create(key, destr) do { \
<br>
&nbsp;&nbsp;&nbsp;&nbsp;int i; \
<br>
&nbsp;&nbsp;&nbsp;&nbsp;for(i=0; i&lt;256; i++) (*key)[i] = 0; \
<br>
&nbsp;&nbsp;} while(0)
<br>
&nbsp;&nbsp;#define tsd_setspecific(key, data) \
<br>
&nbsp;&nbsp;&nbsp;(key[(unsigned)pthread_self() % 256] = (data))
<br>
&nbsp;&nbsp;#define tsd_getspecific(key, vptr) \
<br>
&nbsp;&nbsp;&nbsp;(vptr = key[(unsigned)pthread_self() % 256])
<br>
<p>On the other hand, thread ID(=pthread_self()) generated by pthread is
<br>
not a continuous number, at least in my environment.
<br>
<p>&nbsp;&nbsp;An example of threads created by t-test1 included in ptmalloc2:
<br>
&nbsp;&nbsp;[mishima_at_manage ptmalloc2]$ ./t-test1 4 4
<br>
&nbsp;&nbsp;Using posix threads.
<br>
&nbsp;&nbsp;total=4 threads=4 i_max=10000 size=10000 bins=200
<br>
&nbsp;&nbsp;Created thread 41cb4940.
<br>
&nbsp;&nbsp;Created thread 41eb5940.
<br>
&nbsp;&nbsp;Created thread 420b6940.
<br>
&nbsp;&nbsp;Created thread 422b7940.
<br>
<p>Since the interval of ID number is much larger than 256, each thread may
<br>
share key-array address. Most of [pthread_self() % 256] is 64 as shown
<br>
above, which means that the hacked TSD does not function at all.
<br>
<p>I think -DUSE_TSD_DATA_HACK=1 should be removed from openmpi's
<br>
configuration. As far as I checked, when I use pthread's TSD by
<br>
&quot;#undef USE_DATA_HACK&quot;, the problem goes away.
<br>
<p>One more request is PGI compiler issue. PGI compiler does not have
<br>
pre-defined macro __GNUC__. Therefore, PGI does not use fast inline
<br>
mutex_lock wrriten in malloc-machine.h. Please consider to add 4 lines
<br>
arround the head of malloc.c.
<br>
<p>--- opal/mca/memory/linux/malloc.c.org  2012-08-30 16:15:19.000000000 +0900
<br>
+++ opal/mca/memory/linux/malloc.c      2012-08-31 07:57:16.000000000 +0900
<br>
@@ -43,6 +43,11 @@
<br>
&nbsp;#define MORECORE opal_memory_linux_free_ptmalloc2_sbrk
<br>
&nbsp;#define munmap(a,b) opal_memory_linux_free_ptmalloc2_munmap(a,b,1)
<br>
<p>+/* For PGI compiler to activate inline mutex_lock */
<br>
+#if defined(__PGI)
<br>
+#define __GNUC__ 1
<br>
+#endif
<br>
+
<br>
&nbsp;/* make some non-GCC compilers happy */
<br>
&nbsp;#ifndef __GNUC__
<br>
&nbsp;#define __const const
<br>
<p>P.S.
<br>
Since GNU and Intel compiler uses inline mutex_lock, mutex initialization
<br>
is very fast and the hacked TSD problem does not cause segfault. Only
<br>
the perfomance loss could be induced. The reason is a very long story,
<br>
please let it omitted today.
<br>
<p>Best regards,
<br>
Tetsuya Mishima
<br>
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="20250.php">Ralph Castain: "Re: [OMPI users] How can use comm_spawn  when the host is off-line"</a>
<li><strong>Previous message:</strong> <a href="20248.php">rushing: "[OMPI users] How can use comm_spawn  when the host is off-line"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="20330.php">Jeff Squyres: "Re: [OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2"</a>
<li><strong>Reply:</strong> <a href="20330.php">Jeff Squyres: "Re: [OMPI users] -DUSE_TSD_DATA_HACK problem in openmpi's ptmalloc2"</a>
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

<span style='font-family:Verdana'><span style='font-size:12px'><span style="font-family: verdana;"><span style="font-size: 12px;">hi,<br /> 
<br /> 
i need use open-mpi with g95 on debian linux lenny 5.0 - x86_64<br /> 
i compile it with FC=g95 F77=g95 and test on my example.c file<br /> 
but with g95 mpirun dont use process1 just process 0.<br /> 
perhaps my compile option are wrong ?<br /> 
<br /> 
i want that mpirun use process 0 and 1 both.<br /> 
<br /> 
hostname paola12<br /> 
<br /> 
mpicc example.c<br /> 
mpirun -np 2 a.out<br /> 
C Process 0 on paola12<br /> 
0 [1 3 ]<br /> 
0 [1.000000 3.000000 ]<br /> 
C Process 0 on paola12<br /> 
0 [1 3 ]<br /> 
0 [1.000000 3.000000 ]<br /> 
<br /> 
<br /> 
with gfortran ( 4.3.2 )&nbsp; + openmpi </span></span><br /> 
mpirun -np 2 a.out<br /> 
<pre> 
C Process 0 on paola12 
C Process 1 on paola12 
0 [2 9 ] 
1 [2 9 ] 
0 [3.000000 6.000000 ] 
1 [3.000000 6.000000 </pre> 
<br /> 
<br /> 
<br /> 
<br /> 
<span style="font-family: verdana;"><span style="font-size: 12px;">example.c<br /> 
<br /> 
#include &lt;stdlib.h&gt;<br /> 
#include &lt;stdio.h&gt;<br /> 
#include &lt;math.h&gt;<br /> 
#include &lt;mpi.h&gt;<br /> 
<br /> 
int main(int argc, char** argv) {<br /> 
&nbsp;&nbsp;&nbsp; MPI_Init(&amp;argc, &amp;argv);<br /> 
&nbsp;&nbsp;&nbsp; int rank;<br /> 
&nbsp;&nbsp;&nbsp; int namelen;<br /> 
&nbsp;&nbsp;&nbsp; char processor_name[MPI_MAX_PROCESSOR_NAME];<br /> 
&nbsp;&nbsp;&nbsp; MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);<br /> 
&nbsp;&nbsp;&nbsp; MPI_Get_processor_name(processor_name, &amp;namelen);<br /> 
&nbsp;&nbsp;&nbsp; printf("C Process %d on %s \n", rank, processor_name);<br /> 
&nbsp;&nbsp;&nbsp; MPI_Barrier(MPI_COMM_WORLD);<br /> 
<br /> 
&nbsp;&nbsp;&nbsp; int size = 2;<br /> 
&nbsp;&nbsp;&nbsp; int *array, *reducedValues;<br /> 
&nbsp;&nbsp;&nbsp; array = (int *) malloc((size) * sizeof (int));<br /> 
&nbsp;&nbsp;&nbsp; reducedValues = (int *) malloc((size) * sizeof (int));<br /> 
&nbsp;&nbsp;&nbsp; array[0] = rank+1;<br /> 
&nbsp;&nbsp;&nbsp; array[1] = 3;<br /> 
&nbsp;&nbsp;&nbsp; MPI_Allreduce(array, reducedValues, size, MPI_INTEGER, MPI_PROD, MPI_COMM_WORLD);<br /> 
&nbsp;&nbsp;&nbsp; int i;<br /> 
&nbsp;&nbsp;&nbsp; printf("%d [", rank);<br /> 
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; size; i++) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("%d ", reducedValues[i]);<br /> 
&nbsp;&nbsp;&nbsp; }<br /> 
&nbsp;&nbsp;&nbsp; printf("]\n");<br /> 
&nbsp;&nbsp;&nbsp; free(reducedValues);<br /> 
&nbsp;&nbsp;&nbsp; free(array);<br /> 
<br /> 
&nbsp;&nbsp;&nbsp; /* Verif triviale pour un seul entier (OK)<br /> 
&nbsp;&nbsp;&nbsp; size=1;<br /> 
&nbsp;&nbsp;&nbsp; int *array1, *reducedValues1;<br /> 
&nbsp;&nbsp;&nbsp; array1 = (int *) malloc((size) * sizeof (int));<br /> 
&nbsp;&nbsp;&nbsp; reducedValues1 = (int *) malloc((size) * sizeof (int));<br /> 
&nbsp;&nbsp;&nbsp; array[0] = rank+1;<br /> 
&nbsp;&nbsp;&nbsp; MPI_Allreduce(array1, reducedValues1, size, MPI_INTEGER, MPI_PROD, MPI_COMM_WORLD);<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(" C scalaire %d \n", reducedValues1[0]);<br /> 
&nbsp;&nbsp;&nbsp; free(reducedValues1);<br /> 
&nbsp;&nbsp;&nbsp; free(array1);<br /> 
&nbsp;&nbsp;&nbsp; */<br /> 
<br /> 
&nbsp;&nbsp;&nbsp; /* Verif pour les doubles */<br /> 
&nbsp;&nbsp;&nbsp; size=2;<br /> 
&nbsp;&nbsp;&nbsp; double *Darray, *DreducedValues;<br /> 
&nbsp;&nbsp;&nbsp; Darray = (double *) malloc((size) * sizeof (double));<br /> 
&nbsp;&nbsp;&nbsp; DreducedValues = (double *) malloc((size) * sizeof (double));<br /> 
&nbsp;&nbsp;&nbsp; Darray[0] = (rank+1)*1.0;<br /> 
&nbsp;&nbsp;&nbsp; Darray[1] = 3.0;<br /> 
&nbsp;&nbsp;&nbsp; MPI_Allreduce(Darray, DreducedValues, size, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);<br /> 
&nbsp;&nbsp;&nbsp; printf("%d [", rank);<br /> 
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; size; i++) {<br /> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("%f ", DreducedValues[i]);<br /> 
&nbsp;&nbsp;&nbsp; }<br /> 
&nbsp;&nbsp;&nbsp; printf("]\n");<br /> 
&nbsp;&nbsp;&nbsp; free(DreducedValues);<br /> 
&nbsp;&nbsp;&nbsp; free(Darray);<br /> 
&nbsp;&nbsp;&nbsp; MPI_Finalize();<br /> 
}<br /> 
<br /> 
<br /> 
greetings.<br /> 
<br /> 
nicolas cordier</span></span><br /> 
</span></span>


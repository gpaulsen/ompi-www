Hello all,<br>        I have 2 rather simple questions and have been scratching my head for the last hour for an answer. Probably just need a fresh pair of eyes!. My MPI lib is Intel MPI 3.2.1<br><br>The code segment that has been the bane of my last hour of existence is :<br>
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (MPI_Bcast(ssx,tp, MPI_INT, 0, cartcomm) != MPI_SUCCESS)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error broadcasting\n&quot;);</span><br style="color: rgb(0, 0, 102);">
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (MPI_Bcast(ssy,tp, MPI_INT, 0, cartcomm) != MPI_SUCCESS)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error broadcasting\n&quot;);</span><br style="color: rgb(0, 0, 102);">
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (MPI_Bcast(ssz,tp, MPI_INT, 0, cartcomm) != MPI_SUCCESS)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error broadcasting\n&quot;);</span><br style="color: rgb(0, 0, 102);">
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (MPI_Bcast(eex,tp, MPI_INT, 0, cartcomm) != MPI_SUCCESS)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error broadcasting\n&quot;);</span><br style="color: rgb(0, 0, 102);">
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (MPI_Bcast(eey,tp, MPI_INT, 0, cartcomm) != MPI_SUCCESS)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error broadcasting\n&quot;);</span><br style="color: rgb(0, 0, 102);">
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (MPI_Bcast(eez,tp, MPI_INT, 0, cartcomm) != MPI_SUCCESS)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error broadcasting\n&quot;);</span><br style="color: rgb(0, 0, 102);">
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        if (myrank != 0) {</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                MPI_Recv(data2, (int) (sizeof(data2)/sizeof(short)), MPI_SHORT, 0, 123, cartcomm, &amp;status[0]);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">        }</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        else {</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                short data[dim_siz[0]][dim_siz[1]][dim_siz[2]];</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                if (nc_get_var_short(ncid, varid, &amp;data[0][0][0]) != NC_NOERR)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        printf(&quot;Error 2&quot;);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                rank = 1;</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                while (rank &lt;= numprocs-1) {</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                        for (l=ssz[rank]; l&lt;eez[rank]; l+=1)</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                                for (m=ssy[rank]; m&lt;eey[rank]; m+=1)</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                                        for (n=ssx[rank]; n&lt;eex[rank]; n+=1) {</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                                                data2[l-ssz[rank]][m-ssy[rank]][n-ssx[rank]] = data[l][m][n];</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                                        }</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                        MPI_Isend(&amp;data2[0][0][0], (int) (sizeof(data2)/sizeof(short)), MPI_SHORT, rank, 123, cartcomm,&amp;request[rank-1]);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                        printf(&quot;My rank is %d and my ending value is %d on Data2 and %d on Data\n&quot;, rank, data2[l-ssz[rank]-1][m-ssy[rank]-1][n-ssx[rank]-1], data[l-1][m-1][n-1]);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                        printf(&quot;My rank is %d and my starting value is %d on Data2 and %d on Data\n&quot;, rank, data2[0][0][0], data[ssz[rank]][ssy[rank]][ssx[rank]]);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">                        rank++;</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                }</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">                MPI_Waitall(numprocs-1, request, status);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">        }</span><br style="color: rgb(0, 0, 102);"><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">        printf(&quot;My rank is %d and my starting value is %d on Data2\n&quot;, myrank, data2[0][0][0]);</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">        printf(&quot;My rank is %d and my ending value is %d on Data2\n&quot;, myrank, data2[l-ssz[myrank]-1][m-ssy[myrank]-1][n-ssx[myrank]-1]);<br><br>cartcomm is the cartesian grid communicator and size of data is 512^3.<br style="color: rgb(0, 0, 102);">
</span><br>The objective of this part of the code is to distribute data in a checkerboard pattern to np procs. Unfortunately I am running into 2 complications.<br><br>1) When I use MPI_SHORT instead of short to count the number of data transferred I get an array that is half the size. (ie <span style="color: rgb(0, 0, 0);">MPI_Isend(&amp;data2[0][0][0], (int) (sizeof(data2)/sizeof(MPI_SHORT)), MPI_SHORT, rank, 123, cartcomm,&amp;request[rank-1]);<br>
<br> So is there any possible way MPI_SHORT can be set to 32 bit? I have never come across this before and was stumped to notice! Maybe my ignorance comes from having only installed openmpi on my personal system?<br><br>2) The output from this part of the code segment, for eg. when run on 8 procs, looks like all the ranks from 1 - 7 have exactly the same array and the array should actually only belong to rank 7. .. the op spewed out by gdb is below :<br>
<br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 1 and my ending value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 1 and my starting value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">0:  My rank is 2 and my ending value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 2 and my starting value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">0:  My rank is 3 and my ending value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 3 and my starting value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">0:  My rank is 4 and my ending value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 4 and my starting value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">0:  My rank is 5 and my ending value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 5 and my starting value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">0:  My rank is 6 and my ending value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 6 and my starting value is 3277 on Data2 and 3277 on Data</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">0:  <b>My rank is 7 and my ending value is 3277 on Data2 and 3277 on Data</b></span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  <b>My rank is 7 and my starting value is 3866 on Data2 and 3866 on Data</b></span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">1:  My rank is 1 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">2:  My rank is 2 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">3:  My rank is 3 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">1:  My rank is 1 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">2:  My rank is 2 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">3:  My rank is 3 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">7:  My rank is 7 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">7:  My rank is 7 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">5:  My rank is 5 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">6:  My rank is 6 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">6:  My rank is 6 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">0:  My rank is 0 and my starting value is 3866 on Data2</span><span style="color: rgb(0, 0, 102);"></span><span style="color: rgb(0, 0, 102);"></span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">1-3,6-7:  (gdb) 4:  My rank is 4 and my starting value is 3866 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">5:  My rank is 5 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);">
<span style="color: rgb(0, 0, 102);">1-3,6-7:  (gdb) 0:  My rank is 0 and my ending value is 3277 on Data2</span><br style="color: rgb(0, 0, 102);"><span style="color: rgb(0, 0, 102);">4:  My rank is 4 and my ending value is 3277 on Data2<br>
<br><br><br><span style="color: rgb(0, 0, 0);">I was wondering if someone might be able to point out what I am doing wrong here that only the last block of  the array is getting transmitted to all procs?<br><br><br>My apologies for the vagueness of the question. Appreciate any help!<br>
<br><br>Cheers and thanks in advance,<br><br>C.S.N</span></span><span style="color: rgb(0, 0, 102);"></span><span style="color: rgb(0, 0, 102);"></span><br><br></span><br>      <br>


subroutine foobar
  use mpi

  type, BIND(C) :: mytype
     integer :: i
     real :: x
     double precision :: d
     logical :: l
  end type mytype

  type(mytype) :: foo, fooarr(5)
  integer :: blocklen(4), type(4)
  integer(KIND=MPI_ADDRESS_KIND) :: disp(4), base, lb, extent

  call MPI_GET_ADDRESS(foo%i, disp(1), ierr)
  call MPI_GET_ADDRESS(foo%x, disp(2), ierr)
  call MPI_GET_ADDRESS(foo%d, disp(3), ierr)
  call MPI_GET_ADDRESS(foo%l, disp(4), ierr)

  base = disp(1)
  disp(1) = disp(1) - base
  disp(2) = disp(2) - base
  disp(3) = disp(3) - base
  disp(4) = disp(4) - base

  blocklen(1) = 1
  blocklen(2) = 1
  blocklen(3) = 1
  blocklen(4) = 1
  type(1) = MPI_INTEGER
  type(2) = MPI_REAL
  type(3) = MPI_DOUBLE_PRECISION
  type(4) = MPI_LOGICAL

  call MPI_TYPE_CREATE_STRUCT(4, blocklen, disp, type, newtype, ierr)
  call MPI_TYPE_COMMIT(newtype, ierr)

  ! call MPI_SEND(foo%i, 1, newtype, dest, tag, comm, ierr)
  ! or
  call MPI_SEND(foo, 1, newtype, dest, tag, comm, ierr)
  ! expects that base == address(foo%i) == address(foo)

  call MPI_GET_ADDRESS(fooarr(1), disp(1), ierr)
  call MPI_GET_ADDRESS(fooarr(2), disp(2), ierr)
  extent = disp(2) - disp(1)
  lb = 0
  call MPI_TYPE_CREATE_RESIZED(newtype, lb, extent, newarrtype, ierr)
  call MPI_TYPE_COMMIT(newarrtype, ierr)

  call MPI_SEND(fooarr, 5, newarrtype, dest, tag, comm, ierr)

end subroutine foobar


<div dir="ltr"><div><span style="font-family:monospace,monospace">Hello!<br><br></span></div><div><span style="font-family:monospace,monospace">I have a program that basically is (first implementation):<br><span style="color:rgb(0,0,255)">for i in N:<br></span></span></div><div><span style="color:rgb(0,0,255)"><span style="font-family:monospace,monospace">  local_computation(i)<br></span></span></div><div><span style="font-family:monospace,monospace"><span style="color:rgb(0,0,255)">  mpi_allreduce(in_place, i)<br></span><br></span></div><div><span style="font-family:monospace,monospace">In order to try to mitigate the implicit barrier of the mpi_allreduce, I tried to start an mpi_Iallreduce. Like this(second implementation):<br><span style="color:rgb(0,0,255)"><font size="2">for i in N:<br></font></span></span><div><span style="color:rgb(0,0,255)"><span style="font-family:monospace,monospace"><font size="2">  local_computation(i)<br></font></span></span></div><div><span style="color:rgb(0,0,255)"><span style="font-family:monospace,monospace"><font size="2">  j = i<br></font></span></span></div><div><span style="color:rgb(0,0,255)"><span style="font-family:monospace,monospace"><font size="2">  if i is not first:<br></font></span></span></div><div><span style="color:rgb(0,0,255)"><span style="font-family:monospace,monospace"><font size="2">    mpi_wait(request)<br></font></span></span></div><span style="font-family:monospace,monospace"><span style="color:rgb(0,0,255)"><font size="2">  mpi_Iallreduce(in_place, j, request)</font></span><br><br>The result was that the second was a lot worse. The processes spent 3 times more time on the mpi_wait than on the mpi_allreduce from the first implementation. I know it could be worst, but not that much.<br><br></span></div><div><span style="font-family:monospace,monospace">So, I made a microbenchmark to stress this, in Fortran. Here is the implementation:<br></span></div><div><span style="font-family:monospace,monospace">Blocking:<br><span style="color:rgb(0,0,255)">do i = 1, total_iter ! [<br>    t_0 = mpi_wtime()<br><br>    call mpi_allreduce(MPI_IN_PLACE, val, nx*ny*nz, MPI_REAL, MPI_SUM, MPI_COMM_WORLD, ierror)<br>    if (ierror .ne. 0) then ! [<br>        write(*,*) &quot;Error in line &quot;, __LINE__, &quot; rank = &quot;, rank<br>        call mpi_abort(MPI_COMM_WORLD, ierror, ierror2)<br>    end if ! ]<br>    t_reduce = t_reduce + (mpi_wtime() - t_0)<br>end do ! ]</span><br><br></span></div><div><span style="font-family:monospace,monospace">Non-Blocking:<br><span style="color:rgb(0,0,255)">do i = 1, total_iter ! [<br>    t_0 = mpi_wtime()<br>    call mpi_iallreduce(MPI_IN_PLACE, val, nx*ny*nz, MPI_REAL, MPI_SUM, MPI_COMM_WORLD, request, ierror)<br>    if (ierror .ne. 0) then ! [<br>        write(*,*) &quot;Error in line &quot;, __LINE__, &quot; rank = &quot;, rank<br>        call mpi_abort(MPI_COMM_WORLD, ierror, ierror2)<br>    end if ! ]<br>    t_reduce = t_reduce + (mpi_wtime() - t_0)<br><br>    t_0 = mpi_wtime()<br>    call mpi_wait(request, status, ierror)<br>    if (ierror .ne. 0) then ! [<br>        write(*,*) &quot;Error in line &quot;, __LINE__, &quot; rank = &quot;, rank<br>        call mpi_abort(MPI_COMM_WORLD, ierror, ierror2)<br>    end if ! ]<br>    t_reduce = t_reduce + (mpi_wtime() - t_0)<br><br>end do ! ]</span><br><br></span></div><div><span style="font-family:monospace,monospace">The non-blocking was about five times slower. I tried Intel&#39;s MPI and it was of 3 times, instead of 5.<br><br></span></div><div><span style="font-family:monospace,monospace"><span style="font-family:monospace,monospace">Question 1: Do you think that all this overhead makes sense?</span><br><br>Question 2: Why is there so much overhead for non-blocking collective calls?<br></span><br><span style="font-family:monospace,monospace"><span style="font-family:monospace,monospace">Question 3: Can I change the algorithm for the non-blocking allReduce to improve this?</span><br></span></div><div><span style="font-family:monospace,monospace"><br><br></span></div><div><span style="font-family:monospace,monospace">Best regards,<br>--<br></span></div><span style="font-family:monospace,monospace">Felipe<br></span></div>


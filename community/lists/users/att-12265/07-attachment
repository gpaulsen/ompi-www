<html><head><base href="x-msg://21/"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><div></div><div><br><div><div>On Mar 6, 2010, at 9:35 AM, abc def wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><div class="hmmessage" style="font-size: 10pt; font-family: Verdana; ">Thanks for your kind help so far.<br><br>Following your suggestions I've been trying to figure out MPI_COMM_SPAWN, but it's at the edge of my understanding so it's not easy.<br><br>I read that the changing of directories can be achieved using info keys, however these are very cryptic: I can't seem to find any precise information anywhere about how to use them. I tried the following:<span class="Apple-converted-space">&nbsp;</span><br><br>-------------------------------------<br>WRITE(crank,'(I1)') irank<br>dir="test-" // crank<br><br>CALL SYSTEM("mkdir " // dir)<br><br>CALL MPI_COMM_SPAWN("mpitest-2.ex",MPI_ARGV_NULL,1,"wdir ./" // dir,irank,MPI_COMM_SELF,ierr)<br>---------------------------------------<br><br>MPI_ARGV_NULL: there are no arguments to mpitest-2.ex<br><br>1: I want to spawn 1 process per original process (the original process sitting idle, maybe waiting for a return parameter from its child - have not figured out how to achieve communication between the two processes yet, but that's the next step)<br><br>"wdir ./test-1" (for example): the directory in which the new process should run. I don't think this is correct, but as I say, I can't find precise information about the info keys (at least, in a way that I can understand it) - can anyone help me here?<br><br>irank: the current rank of the process, so every process spawns its own process<br><br>MPI_COMM_SELF: I assume this is the new name for the child processes, like MPI_COMM_WORLD.<br><br>ierr: error value<br><br>So it compiles, but crashes once I reach the spawn command.<br><br>Can you help?<br>Thank you very much.<br><br>&gt; From:<span class="Apple-converted-space">&nbsp;</span><a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>&gt; Date: Fri, 5 Mar 2010 15:02:57 -0500<br>&gt; To:<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>&gt; Subject: Re: [OMPI users] running externalprogram	on	same	processor	(Fortran)<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; On Mar 5, 2010, at 2:38 PM, Ralph Castain wrote:<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; &gt;&gt; CALL SYSTEM("cd " // TRIM(dir) // " ; mpirun -machinefile ./machinefile -np 1 /home01/group/Execute/DLPOLY.X &gt; job.out 2&gt; job.err ; cd - &gt; /dev/null")<br>&gt; &gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; &gt; That is guaranteed not to work. The problem is that mpirun sets environmental variables for the original launch. Your system call carries over those envars, causing mpirun to become confused.<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; You should be able to use MPI_COMM_SPAWN to launch this MPI job. Check the man page for MPI_COMM_SPANW; I believe we have info keys to specify things like what hosts to launch on, etc.<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; &gt;&gt; Do you think MPI_COMM_SPAWN can help?<br>&gt; &gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; &gt; It's the only method supported by the MPI standard. If you need it to block until this new executable completes, you could use a barrier or other MPI method to determine it.<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; I believe that the user said they wanted to use the same cores as their original MPI job occupies for the new job -- they basically want the old job to block until the new job completes. Keep in mind that OMPI busy-polls waiting for progress, so you might actually get hosed here (two procs competing for time on the same core).<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; I'm not immediately thinking of a good way to avoid this issue -- perhaps you could kludge something up such that the parent job polls on sleep() and checking to see if a message has arrived from the child (i.e., the last thing the child does before it calls MPI_FINALIZE is to send a message to its parents and then MPI_COMM_DISCONNECT from its parents). If the parent finds that it has a message from the child(ren), it can MPI_COMM_DISCONNECT and continue processing.<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; Kinda hackey, but it might work...?<br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; --<span class="Apple-converted-space">&nbsp;</span><br>&gt; Jeff Squyres<br>&gt;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>&gt; For corporate legal information go to:<br>&gt;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.cisco.com/web/about/doing_business/legal/cri/">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt;<span class="Apple-converted-space">&nbsp;</span><br>&gt; _______________________________________________<br>&gt; users mailing list<br>&gt;<span class="Apple-converted-space">&nbsp;</span><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>&gt;<span class="Apple-converted-space">&nbsp;</span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br><br><hr>We want to hear all your funny, exciting and crazy Hotmail stories.<span class="Apple-converted-space">&nbsp;</span><a href="http://clk.atdmt.com/UKM/go/195013117/direct/01/" target="_new">Tell us now</a><span class="Apple-converted-space">&nbsp;</span>_______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a></div></blockquote></div><br></div></body></html>

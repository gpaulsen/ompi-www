Jed,<div><br></div><div>my 0.02US$</div><div><br></div><div>we recently had a kind of similar discussion about MPI_DATATYPE_NULL, and we concluded</div><div>ompi should do its best to implement the MPI standard, and not what some of us think the standard should be.</div><div><br></div><div>in your configure script, you can simply try to compile a simple fortran MPI hello world.</div><div>if it fails, then you can assume fortran bindings are not available, and not use fortran types in your application.</div><div><br></div><div>Cheers,</div><div><br></div><div>Gilles<br><br>On Tuesday, February 9, 2016, Jed Brown &lt;<a href="mailto:jed@jedbrown.org">jed@jedbrown.org</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">George Bosilca &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;bosilca@icl.utk.edu&#39;)">bosilca@icl.utk.edu</a>&gt; writes:<br>
<br>
&gt; Now we can argue if DOUBLE PRECISION in Fortran is a double in C. As these<br>
&gt; languages are interoperable, and there is no explicit conversion function,<br>
&gt; it is safe to assume this is the case. Thus, is seems to me absolutely<br>
&gt; legal to provide the MPI-required support for DOUBLE PRECISION despite the<br>
&gt; fact that Fortran support is not enabled.<br>
<br>
Isn&#39;t that entirely dependent on the Fortran compiler?  There is no<br>
universal requirement that there be a relationship between Fortran<br>
INTEGER and C int, for example.<br>
<br>
&gt; Now taking a closer look at the op, I see nothing in the standard the would<br>
&gt; require to provide the op if the corresponding language is not supported.<br>
&gt; While it could be nice (as a convenience for the users and also because<br>
&gt; there is no technical reason not to) to enable the loc op, on non native<br>
&gt; datatypes, this is not mandatory. Thus, the current behavior exposed by<br>
&gt; Open MPI is acceptable from the standard perspective.<br>
<br>
I believe the question is not whether it&#39;s standard-compliant to define<br>
the types when they are not supported (the OP&#39;s usage doesn&#39;t sound<br>
valid anyway because they are using the Fortran MPI datatypes to refer<br>
to C types).  Rather, the question is: if those types are<br>
non-functional, can/should they be removed from the header.  This, for<br>
example, allows a configure script to test whether those datatypes<br>
exist.<br>
<br>
Feature tests are far more reliable, accurate, and lower maintenance<br>
than platform/version tests.  When a package defines macros/symbols that<br>
fail at run-time, it makes feature tests much more expensive.  Even more<br>
so when cross-compiling, where run-time tests require batch submission.<br>
<br>
The fact is that if a package makes it impractical to test features, the<br>
end-user experience reflects poorly on that package and all of its<br>
dependencies (though which user support passes).  It&#39;s the sort of thing<br>
that drives users and developers away from the platform.<br>
<br>
Since I don&#39;t think you can make the Fortran types reliable without<br>
access to a Fortran compiler, my suggestion would be remove the symbols<br>
when Fortran is not available.<br>
</blockquote></div>


<html>
<head>
<style><!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Verdana
}
--></style>
</head>
<body class='hmmessage'>
People can correct me if I am wrong, but are you NOT suppose to&nbsp;run applications directly and only suppose to submit them using the batch process&nbsp;&nbsp;"qsub" to prevent all this overuse of resources?<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
&nbsp;<BR>
<BR>&nbsp;<BR>&gt; Date: Thu, 19 Nov 2009 19:21:46 +0100<BR>&gt; From: kapinos@rz.rwth-aachen.de<BR>&gt; To: users@open-mpi.org<BR>&gt; Subject: [OMPI users] exceedingly virtual memory consumption of MPI environment if higher-setting "ulimit -s"<BR>&gt; <BR>&gt; Hi volks,<BR>&gt; <BR>&gt; we see an exeedingly *virtual* memory consumtion through MPI processes <BR>&gt; if "ulimit -s" (stack size)in profile configuration was setted higher.<BR>&gt; <BR>&gt; Furthermore we believe, every mpi process started, wastes about the <BR>&gt; double size of `ulimit -s` value which will be set in a fresh console <BR>&gt; (that is, the value is configurated in e.g. .zshenv, *not* the value <BR>&gt; actually setted in the console from which the mpiexec runs).<BR>&gt; <BR>&gt; Sun MPI 8.2.1, an empty mpi-HelloWorld program<BR>&gt; ! either if running both processes on the same host..<BR>&gt; <BR>&gt; .zshenv: ulimit -s 10240 --&gt; VmPeak: 180072 kB<BR>&gt; .zshenv: ulimit -s 102400 --&gt; VmPeak: 364392 kB<BR>&gt; .zshenv: ulimit -s 1024000 --&gt; VmPeak: 2207592 kB<BR>&gt; .zshenv: ulimit -s 2024000 --&gt; VmPeak: 4207592 kB<BR>&gt; .zshenv: ulimit -s 20240000 --&gt; VmPeak: 39.7 GB!!!!<BR>&gt; (see the attached files; the a.out binary is a mpi helloworld program <BR>&gt; running an never ending loop).<BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; Normally, the stack size ulimit is set to some 10 MB by us, but we see a <BR>&gt; lot of codes which needs *a lot* of stack space, e.g. Fortran codes, <BR>&gt; OpenMP codes (and especially fortran OpenMP codes). Users tends to <BR>&gt; hard-code the setting-up the higher value for stack size ulimit.<BR>&gt; <BR>&gt; Normally, the using of a lot of virtual memory is no problem, because <BR>&gt; there is a lot of this thing :-) But... If more than one person is <BR>&gt; allowed to work on a computer, you have to divide the ressources in such <BR>&gt; a way that nobody can crash the box. We do not know how to limit the <BR>&gt; real RAM used so we need to divide the RAM by means of setting virtual <BR>&gt; memory ulimit (in our batch system e.g.. That is, for us<BR>&gt; "virtual memory consumption" = "real memory consumption".<BR>&gt; And real memory is not that way cheap than virtual memory.<BR>&gt; <BR>&gt; <BR>&gt; So, why consuming the *twice* amount of stack size for each process?<BR>&gt; <BR>&gt; And, why consuming the virtual memory at all? We guess this virtual <BR>&gt; memory is allocated for the stack (why else it will be related to the <BR>&gt; stack size ulimit). But, is such allocation really needed? Is there a <BR>&gt; way to avoid the vaste of virtual memory?<BR>&gt; <BR>&gt; best regards,<BR>&gt; Paul Kapinos<BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; <BR>&gt; -- <BR>&gt; Dipl.-Inform. Paul Kapinos - High Performance Computing,<BR>&gt; RWTH Aachen University, Center for Computing and Communication<BR>&gt; Seffenter Weg 23, D 52074 Aachen (Germany)<BR>&gt; Tel: +49 241/80-24915<BR> 		 	   		  </body>
</html>

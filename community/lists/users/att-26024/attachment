<div dir="ltr"><div class="gmail_extra"><div class="gmail_quote">On Wed, Dec 17, 2014 at 7:29 PM, Jeff Squyres (jsquyres) <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Returning to a super-old thread that was never finished...<br>
<span class=""><br>
<br>
On Dec 2, 2014, at 6:49 PM, George Bosilca &lt;<a href="mailto:bosilca@icl.utk.edu">bosilca@icl.utk.edu</a>&gt; wrote:<br>
<br>
&gt; That&#39;s not enough. They will have to check for the right version of Open MPI and then for the availability of the OMPI_&lt;something&gt; functions. That looks as having the sabe cost as checking for the MPIX_&lt;something&gt; function without looking for a specific MPI library.<br>
<br>
</span>I don&#39;t understand how MPIX_&lt;something&gt; is better.<br>
<br>
Given that there is *zero* commonality between any MPI extension implemented between MPI implementations, how exactly is having the same prefix any less confusing?<br></blockquote><div><br></div><div>This is an overstatement. There were quite a few examples over the last few years (PERUSE, libNBC, ULFM). They all took different approaches for the naming of their functions, increasing the potential users confusion. As a developer for one of these MPI extensions I would rather go with a unique naming scheme to free our users from the hassle of the name checking.</div><div> <br></div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">My point is that using an extension is inherently non-portable.  The chances for &lt;something&gt; to collide between different MPI implementations is actually quite high.  Indeed, if everyone uses MPIX_&lt;something&gt;, then there&#39;s a very real possibility that MPIX_Foo != MPIX_Foo != MPIX_Foo.  That&#39;s *horrible*.<br></blockquote><div><br></div><div>Horrible sure, but highly improbable (function names have a meaning)</div><div><br></div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
This is at least slightly more readable, and more clear that you&#39;re using an Open MPI-specific extension:<br>
<br>
-----<br>
#if defined(OPEN_MPI) &amp;&amp; OPEN_MPI<br>
  OMPI_Foo(a,b,c);<br>
#endif<br>
<br>
...<br>
<br>
#if defined(MPICH) &amp;&amp; MPICH<br>
  MPIX_Foo(f,e,d,c,b,a);<br>
#endif<br>
-----<br></blockquote><div><br></div><div>This is horrible! This is the kind of solution that neither a developer or a user of such an extension would promote.</div><div> </div><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">I guess my fundamental question is: why impose commonality of names where there is no commonality of function signature and behavior?<br></blockquote><div><br></div><div>The overarching goal of an MPI extension is to show the interest of the approach and eventually become part of the standard. A well designed extension will have a unique function signature and behavior, not only across different implementations but across different versions.</div><div><br></div><div>As I mentioned earlier, as a developer of such extensions I do consider that having a common naming scheme across multiple MPI implementation for extensions is a good thing. However, as an alternative I don&#39;t care about ditching all-together the library specific flavor from the naming scheme, and going directly to something extension specific (&lt;MYEXT&gt;_Foo).</div><div><br></div><div>  George.</div><div><br></div></div></div></div>


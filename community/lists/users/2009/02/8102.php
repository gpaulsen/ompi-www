<?
$subject_val = "Re: [OMPI users] OpenMPI and Valgrind";
include("../../include/msg-header.inc");
?>
<!-- received="Thu Feb 19 07:58:44 2009" -->
<!-- isoreceived="20090219125844" -->
<!-- sent="Thu, 19 Feb 2009 07:58:37 -0500" -->
<!-- isosent="20090219125837" -->
<!-- name="Jeff Squyres" -->
<!-- email="jsquyres_at_[hidden]" -->
<!-- subject="Re: [OMPI users] OpenMPI and Valgrind" -->
<!-- id="D26A9BFE-A74D-4E32-AEE9-F061230304AE_at_cisco.com" -->
<!-- charset="US-ASCII" -->
<!-- inreplyto="200902141517.12065.techlist_at_pathfinder.phys.utk.edu" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> Re: [OMPI users] OpenMPI and Valgrind<br>
<strong>From:</strong> Jeff Squyres (<em>jsquyres_at_[hidden]</em>)<br>
<strong>Date:</strong> 2009-02-19 07:58:37
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="8103.php">Jeff Squyres: "Re: [OMPI users] support for gamess us?"</a>
<li><strong>Previous message:</strong> <a href="8101.php">Jeff Squyres: "Re: [OMPI users] Error during ./configure."</a>
<li><strong>In reply to:</strong> <a href="8071.php">RDB: "Re: [OMPI users] OpenMPI and Valgrind"</a>
<!-- nextthread="start" -->
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
Hmm.  I'm unfortunately unable to replicate your results -- I get the  
<br>
same valgrind output with your test program regardless of whether I  
<br>
use gfortran or mpif90 (i.e., it shows the lost block).  :-\
<br>
<p>FWIW, I'm using RHEL4U4 (and U6) with gfortran 4.1.0 and Valgrind 3.4.0.
<br>
<p><p>On Feb 14, 2009, at 3:17 PM, RDB wrote:
<br>
<p><span class="quotelev1">&gt; On Thursday 12 February 2009 4:30:27 pm George Bosilca wrote:
</span><br>
<span class="quotelev2">&gt;&gt; Some of the configure options changed their name for the 1.3. Here is
</span><br>
<span class="quotelev2">&gt;&gt; the updated list you should use in order to get valgrind support for
</span><br>
<span class="quotelev2">&gt;&gt; the 1.3:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; --enable-memchecker --with-valgrind --with-memory-manager=none
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;   george.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; For some reason that still doesn't work for me. I tried both
</span><br>
<span class="quotelev1">&gt; flag &quot;--with-memory-manager=none&quot; and &quot;--without-memory-manager&quot; and  
</span><br>
<span class="quotelev1">&gt; it
</span><br>
<span class="quotelev1">&gt; didn't seem to make any difference.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Attached is my config.log generated by configure script.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Here's what I get, when compiling with mpif90
</span><br>
<span class="quotelev1">&gt; $ /opt/openmpi/1.3/gcc/4.3/bin/mpif90 testMemchek.f90
</span><br>
<span class="quotelev1">&gt; $ valgrind --leak-check=full ./a.out
</span><br>
<span class="quotelev1">&gt; ==7884== Memcheck, a memory error detector.
</span><br>
<span class="quotelev1">&gt; ==7884== Copyright (C) 2002-2006, and GNU GPL'd, by Julian Seward et  
</span><br>
<span class="quotelev1">&gt; al.
</span><br>
<span class="quotelev1">&gt; ==7884== Using LibVEX rev 1658, a library for dynamic binary  
</span><br>
<span class="quotelev1">&gt; translation.
</span><br>
<span class="quotelev1">&gt; ==7884== Copyright (C) 2004-2006, and GNU GPL'd, by OpenWorks LLP.
</span><br>
<span class="quotelev1">&gt; ==7884== Using valgrind-3.2.1, a dynamic binary instrumentation  
</span><br>
<span class="quotelev1">&gt; framework.
</span><br>
<span class="quotelev1">&gt; ==7884== Copyright (C) 2000-2006, and GNU GPL'd, by Julian Seward et  
</span><br>
<span class="quotelev1">&gt; al.
</span><br>
<span class="quotelev1">&gt; ==7884== For more details, rerun with: -v
</span><br>
<span class="quotelev1">&gt; ==7884==
</span><br>
<span class="quotelev1">&gt;  0.55669999
</span><br>
<span class="quotelev1">&gt; ==7884==
</span><br>
<span class="quotelev1">&gt; ==7884== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from  
</span><br>
<span class="quotelev1">&gt; 1)
</span><br>
<span class="quotelev1">&gt; ==7884== malloc/free: in use at exit: 0 bytes in 0 blocks.
</span><br>
<span class="quotelev1">&gt; ==7884== malloc/free: 0 allocs, 0 frees, 0 bytes allocated.
</span><br>
<span class="quotelev1">&gt; ==7884== For counts of detected errors, rerun with: -v
</span><br>
<span class="quotelev1">&gt; ==7884== All heap blocks were freed -- no leaks are possible.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; This is different than if I just use gfortran:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; $ gfortran43 testMemchek.f90
</span><br>
<span class="quotelev1">&gt; $ valgrind --leak-check=full ./a.out
</span><br>
<span class="quotelev1">&gt; ==7892== Memcheck, a memory error detector.
</span><br>
<span class="quotelev1">&gt; ==7892== Copyright (C) 2002-2006, and GNU GPL'd, by Julian Seward et  
</span><br>
<span class="quotelev1">&gt; al.
</span><br>
<span class="quotelev1">&gt; ==7892== Using LibVEX rev 1658, a library for dynamic binary  
</span><br>
<span class="quotelev1">&gt; translation.
</span><br>
<span class="quotelev1">&gt; ==7892== Copyright (C) 2004-2006, and GNU GPL'd, by OpenWorks LLP.
</span><br>
<span class="quotelev1">&gt; ==7892== Using valgrind-3.2.1, a dynamic binary instrumentation  
</span><br>
<span class="quotelev1">&gt; framework.
</span><br>
<span class="quotelev1">&gt; ==7892== Copyright (C) 2000-2006, and GNU GPL'd, by Julian Seward et  
</span><br>
<span class="quotelev1">&gt; al.
</span><br>
<span class="quotelev1">&gt; ==7892== For more details, rerun with: -v
</span><br>
<span class="quotelev1">&gt; ==7892==
</span><br>
<span class="quotelev1">&gt;  0.55669999
</span><br>
<span class="quotelev1">&gt; ==7892==
</span><br>
<span class="quotelev1">&gt; ==7892== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from  
</span><br>
<span class="quotelev1">&gt; 1)
</span><br>
<span class="quotelev1">&gt; ==7892== malloc/free: in use at exit: 40 bytes in 1 blocks.
</span><br>
<span class="quotelev1">&gt; ==7892== malloc/free: 12 allocs, 11 frees, 25,892 bytes allocated.
</span><br>
<span class="quotelev1">&gt; ==7892== For counts of detected errors, rerun with: -v
</span><br>
<span class="quotelev1">&gt; ==7892== searching for pointers to 1 not-freed blocks.
</span><br>
<span class="quotelev1">&gt; ==7892== checked 83,816 bytes.
</span><br>
<span class="quotelev1">&gt; ==7892==
</span><br>
<span class="quotelev1">&gt; ==7892== 40 bytes in 1 blocks are definitely lost in loss record 1  
</span><br>
<span class="quotelev1">&gt; of 1
</span><br>
<span class="quotelev1">&gt; ==7892==    at 0x4A05809: malloc (vg_replace_malloc.c:149)
</span><br>
<span class="quotelev1">&gt; ==7892==    by 0x40083A: MAIN__ (in /home/reubendb/tmp/a.out)
</span><br>
<span class="quotelev1">&gt; ==7892==    by 0x4009AB: main (fmain.c:21)
</span><br>
<span class="quotelev1">&gt; ==7892==
</span><br>
<span class="quotelev1">&gt; ==7892== LEAK SUMMARY:
</span><br>
<span class="quotelev1">&gt; ==7892==    definitely lost: 40 bytes in 1 blocks.
</span><br>
<span class="quotelev1">&gt; ==7892==      possibly lost: 0 bytes in 0 blocks.
</span><br>
<span class="quotelev1">&gt; ==7892==    still reachable: 0 bytes in 0 blocks.
</span><br>
<span class="quotelev1">&gt; ==7892==         suppressed: 0 bytes in 0 blocks.
</span><br>
<span class="quotelev1">&gt; ==7892== Reachable blocks (those to which a pointer was found) are  
</span><br>
<span class="quotelev1">&gt; not shown.
</span><br>
<span class="quotelev1">&gt; ==7892== To see them, rerun with: --show-reachable=yes
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Here's the very simple test code:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; $ cat testMemchek.f90
</span><br>
<span class="quotelev1">&gt; program testMemcheck
</span><br>
<span class="quotelev1">&gt;  real, dimension(:), pointer :: &amp;
</span><br>
<span class="quotelev1">&gt;    mypointer
</span><br>
<span class="quotelev1">&gt;  real, dimension(3), target :: &amp;
</span><br>
<span class="quotelev1">&gt;    mytarget
</span><br>
<span class="quotelev1">&gt;  mytarget = 2.345
</span><br>
<span class="quotelev1">&gt;  allocate(mypointer(10))
</span><br>
<span class="quotelev1">&gt;  mypointer = .5567
</span><br>
<span class="quotelev1">&gt;  print*,  mypointer(2)
</span><br>
<span class="quotelev1">&gt;  mypointer =&gt; mytarget
</span><br>
<span class="quotelev1">&gt; end program testMemcheck
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Am I missing something ? Thanks.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; RDB
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; On Feb 12, 2009, at 16:23 , Reuben D. Budiardja wrote:
</span><br>
<span class="quotelev3">&gt;&gt;&gt; On Thursday 12 February 2009 11:50:07 am Ashley Pittman wrote:
</span><br>
<span class="quotelev1">&gt;&gt;&gt;&gt;&gt; I am using OpenMPI-1.2.8 with all the default configure option.  
</span><br>
<span class="quotelev1">&gt;&gt;&gt;&gt;&gt; What
</span><br>
<span class="quotelev1">&gt;&gt;&gt;&gt;&gt; should I
</span><br>
<span class="quotelev1">&gt;&gt;&gt;&gt;&gt; do to be able use Valgrind with program compiled by OpenMPI ?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; -- 
</span><br>
<span class="quotelev1">&gt; Reuben Budiardja
</span><br>
<span class="quotelev1">&gt; Dept. of Physics and Astronomy
</span><br>
<span class="quotelev1">&gt; University of Tennessee
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; &lt;config.log.bz2&gt;_______________________________________________
</span><br>
<span class="quotelev1">&gt; users mailing list
</span><br>
<span class="quotelev1">&gt; users_at_[hidden]
</span><br>
<span class="quotelev1">&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/users">http://www.open-mpi.org/mailman/listinfo.cgi/users</a>
</span><br>
<p><p><pre>
-- 
Jeff Squyres
Cisco Systems
</pre>
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="8103.php">Jeff Squyres: "Re: [OMPI users] support for gamess us?"</a>
<li><strong>Previous message:</strong> <a href="8101.php">Jeff Squyres: "Re: [OMPI users] Error during ./configure."</a>
<li><strong>In reply to:</strong> <a href="8071.php">RDB: "Re: [OMPI users] OpenMPI and Valgrind"</a>
<!-- nextthread="start" -->
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

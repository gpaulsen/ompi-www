I can&#39;t speak to all of the OMPI code, but I can certainly create a new configure option --valgrind-friendly that would initialize the OOB comm buffers and other RTE-related memory to eliminate such warnings.<br><br>I would prefer to configure it out rather than adding a bunch of &quot;if-then&quot; checks for envars to avoid having the performance hit when not needed.<br>
<br>Would that help?<br><br><div class="gmail_quote">On Tue, Jun 9, 2009 at 11:40 AM, tom fogal <span dir="ltr">&lt;<a href="mailto:tfogal@alumni.unh.edu">tfogal@alumni.unh.edu</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div class="im">jody &lt;<a href="mailto:jody.xha@gmail.com">jody.xha@gmail.com</a>&gt; writes:<br>
&gt; I made a suppression file for the irrelevant memory leaks of ompi:  I<br>
&gt; make no claim that it catches all possible ones, but it catches all<br>
&gt; that appear in my code.<br>
</div>[snip]<br>
<br>
Thanks, Jody.<br>
<br>
What are the chances something like this could be added / maintained in<br>
the OpenMPI tree?  It would be great to have something 1) maintained by<br>
someone more knowledgeable about these errors than me, and 2) installed<br>
by default when I setup my toolchain for parallel debugging.<br>
<div class="im"><br>
&gt; On Tue, Jun 9, 2009 at 3:28 PM, Jeff Squyres&lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt; wrote:<br>
&gt; &gt; This is worth adding to the FAQ.<br>
&gt; &gt;<br>
&gt; &gt; On Jun 9, 2009, at 2:31 AM, Ashley Pittman wrote:<br>
&gt; &gt;<br>
&gt; &gt;&gt; On Mon, 2009-06-08 at 23:41 -0600, tom fogal wrote:<br>
&gt; &gt;&gt; &gt; George Bosilca &lt;<a href="mailto:bosilca@eecs.utk.edu">bosilca@eecs.utk.edu</a>&gt; writes:<br>
&gt; &gt;&gt; &gt; &gt; There is a whole page on valgrind web page about this topic. Please<br>
&gt; &gt;&gt; &gt; &gt; read<br>
&gt; &gt;&gt; &gt; &gt; <a href="http://valgrind.org/docs/manual/manual-core.html#manual-core.suppress" target="_blank">http://valgrind.org/docs/manual/manual-core.html#manual-core.suppress</a><br>
&gt; &gt;&gt; &gt; &gt;   for more information.<br>
&gt; &gt;&gt; &gt;<br>
&gt; &gt;&gt; &gt; Even better, Ralph (et al.) is if we could just make valgrind think<br>
&gt; &gt;&gt; &gt; this is defined memory.  One can do this with client requests:<br>
&gt; &gt;&gt; &gt;<br>
&gt; &gt;&gt; &gt;   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.clientreqs" target="_blank">http://valgrind.org/docs/manual/mc-manual.html#mc-manual.clientreqs</a><br>
&gt; &gt;&gt;<br>
&gt; &gt;&gt; Using the Valgrind client requests unnecessarily is a very bad idea,<br>
&gt; &gt;&gt; they are intended for where applications use their own memory allocator<br>
&gt; &gt;&gt; (i.e. replace malloc/free) or are using custom kernel modules or<br>
&gt; &gt;&gt; hardware which Valgrind doesn&#39;t know about.<br>
<br>
</div>Okay, sure, I realize it was a bit of an abuse of the intended use of<br>
the tool.<br>
<div class="im"><br>
&gt; &gt;&gt; The correct solution is either to not send un-initialised memory<br>
&gt; &gt;&gt; or to suppress the error using a suppression file as George<br>
&gt; &gt;&gt; said.  As the error is from MPI_Init() you can safely ignore it<br>
&gt; &gt;&gt; from a end-user perspective.<br>
<br>
</div>As I mentioned in my initial message, MPI_Init is only one such<br>
error; I get them in a lot of MPI calls, seemingly anything that does<br>
communication.  Though I&#39;ve heard differently on this list, this led me<br>
to believe I was doing something wrong in my code.<br>
<br>
It seems like the only way I could verify that I&#39;m not causing these<br>
errors myself is to grok the call stacks I&#39;m given for each vg error<br>
and figure out where the uninitialized memory comes from, and then make<br>
a judgement call for myself whether this makes sense to suppress.  Or<br>
I could mail the list about every error I see and ask for confirmation<br>
that it&#39;s benign/suppressable.  Most likely, I&#39;ll take the simple<br>
approach and just use the suppression file I was given, but that&#39;s<br>
prone to be fragile and break with a future OpenMPI release.<br>
<br>
What about an environment variable which enables slower,<br>
valgrind-friendly behavior?  There&#39;s precedent in other libraries, e.g.<br>
glib [1].<br>
<br>
-tom<br>
<br>
[1] <a href="http://library.gnome.org/devel/glib/stable/glib-running.html" target="_blank">http://library.gnome.org/devel/glib/stable/glib-running.html</a><br>
<br>_______________________________________________<br>
users mailing list<br>
<a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/users</a><br></blockquote></div><br>


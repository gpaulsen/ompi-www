<table cellspacing="0" cellpadding="0" border="0" ><tr><td valign="top" style="font: inherit;">Thanks,<div><br><div>The messages are small and frequent (they flash metadata across the cluster). &nbsp;The current approach works fine for small to medium clusters but I want it to be able to go big. &nbsp;Maybe up to several hundred or even a thousands of nodes.<br><br></div><div>Its these larger deployments that concern me. &nbsp;The current scheme may see the clearinghouse become overloaded in a very large cluster.</div><div><br></div><div>From what you have &nbsp;said, a possible strategy may be to combine the listener and worker into a single process, using the non-blocking bcast just for that group, while each worker scanned its own port for an incoming request, which it would in turn bcast to its peers.</div><div><br></div><div>As you have indicated though, this would depend on the load the non-blocking bcast would cause. &nbsp;- At least the load
 would be fairly even over the cluster.</div><div><br></div><div><br>--- On <b>Mon, 9/5/11, Jeff Squyres <i>&lt;jsquyres@cisco.com&gt;</i></b> wrote:<br><blockquote style="border-left: 2px solid rgb(16, 16, 255); margin-left: 5px; padding-left: 5px;"><br>From: Jeff Squyres &lt;jsquyres@cisco.com&gt;<br>Subject: Re: [OMPI users] is there an equiv of iprove for bcast?<br>To: randolph_pullen@yahoo.com.au<br>Cc: "Open MPI Users" &lt;users@open-mpi.org&gt;<br>Received: Monday, 9 May, 2011, 11:27 PM<br><br><div class="plainMail">On May 3, 2011, at 8:20 PM, Randolph Pullen wrote:<br><br>&gt; Sorry, I meant to say:<br>&gt; - on each node there is 1 listener and 1 worker.<br>&gt; - all workers act together when any of the listeners send them a request.<br>&gt; - currently I must use an extra clearinghouse process to receive from any of the listeners and bcast to workers, this is unfortunate because of the potential scaling issues<br>&gt; <br>&gt; I think you have
 answered this in that I must wait for MPI-3's non-blocking collectives.<br><br>Yes and no.&nbsp; If each worker starts N non-blocking broadcasts just to be able to test for completion of any of them, you might end up consuming a bunch of resources for them (I'm *anticipating* that pending non-blocking collective requests maybe more heavyweight than pending non-blocking point-to-point requests).<br><br>But then again, if N is small, it might not matter.<br><br>&gt; Can anyone suggest another way?&nbsp; I don't like the serial clearinghouse approach.<br><br>If you only have a few workers and/or the broadcast message is small and/or the broadcasts aren't frequent, then MPI's built-in broadcast algorithms might not offer much more optimization than doing your own with point-to-point mechanisms.&nbsp; I don't usually recommend this, but it may be possible for your case.<br><br>-- <br>Jeff Squyres<br><a ymailto="mailto:jsquyres@cisco.com"
 href="/mc/compose?to=jsquyres@cisco.com">jsquyres@cisco.com</a><br>For corporate legal information go to:<br><a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br><br></div></blockquote></div></div></td></tr></table>

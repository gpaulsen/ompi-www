<html><head><meta http-equiv="Content-Type" content="text/html charset=windows-1252"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; ">The win_compat.h file is not only for 32 bits targets. However, it should be needed only for building Open MPI with VC, which is not your case. The file is automatically included (from opal_config_bottom.h) if a Windows target is detected (the define __WINDOWS__). So my guess is that your compiler must define _WIN32 or WIN32 or WIN64 triggering the inclusion of the win_compat.h header.<div><br></div><div>The asm.c is only necessary for some 32 SPARC architectures lacking support for atomic operations (except CAS). &nbsp;This should be of no use in your specific environment. Regarding the comment, the define for this architecture changed from OMPI_SPARC32 to OMPI_SPARC but we missed the comment. This can be safe to ignore.<br><div><br></div><div>Based on your configure file the target architecture was detected as AMD64, which explains why we use the 64bits atomic header. So far so good, this is correct. The problem seems to be with the assembler, it tries to generate by default 32bits code out of a 64bits assembly file. Obviously … not good.</div><div><br></div><div>I would suggest you play with&nbsp;AM_CCASFLAGS to force a 64bits output.</div><div><br></div><div>&nbsp; George.</div><div><br><div><br></div><div><br><div><div>On Aug 22, 2013, at 04:53 , Richard Haney &lt;<a href="mailto:rfhaney@gmail.com">rfhaney@gmail.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><div dir="ltr"><span class="" style="">Hmmm</span>...<div><br></div><div>Thanks, Jeremiah, for the suggestion.</div><div><br></div><div>File win_<span class="" style="">compat</span>.h is in directory&nbsp;opal/win32 , a directory which by its name is supposedly concerned only with producing a 32-bit target, and so, because we are doing a build for a 64-bit target, it seems make should not be having anything to do with files in that directory.</div>
<div><br></div><div>What seems a more likely approach is to consider what happens in&nbsp;<span class="" style="">asm</span>.c , which appears to be where make has problems. &nbsp;I gather that either some command is executed to create&nbsp;<span class="" style="">asm</span>.lo earlier in the make processing (although make output does not show any earlier command to do that) or else, which seems more likely, <span class="" style="">gcc</span> (in command " &nbsp; CC &nbsp; &nbsp; <span class="" style="">asm</span>.lo " ) knows how to interpret the file name <span class="" style="">asm</span>.lo so as to look at <span class="" style="">asm</span>.c for build purposes.</div>
<div><br></div><div>So what does <span class="" style="">asm</span>.c do??? &nbsp;After a bunch of initial #include statements in <span class="" style="">asm</span>.c there is next the statement</div><div><br></div><div>#if OPAL_ASSEMBLY_ARCH == <span class="" style="">OMPI</span>_<span class="" style="">SPARC</span><br>
</div><div><br></div><div>But note that directory opal/<span class="" style="">asm</span>/base has a bunch of files whose names suggest that <span class="" style="">SPARC</span> is an alternative architecture to&nbsp;AMD64 . &nbsp;So it seems the <span class="" style="">preprocessor</span> #if condition should evaluate to false. &nbsp;The other end of this #if statement is<br>
</div><div><br></div><div>#<span class="" style="">endif</span> /* OPAL_ASSEMBLY_ARCH == <span class="" style="">OMPI</span>_SPARC32 */<br></div><div><br></div><div>at the very end of the file. &nbsp;So it seems the result is that there is no code in <span class="" style="">asm</span>.c to compile (or assemble); the resulting preprocessed file consists only of included headers.</div>
<div><br></div><div>So I'm thinking that the thing to do is to gut <span class="" style="">asm</span>.c and replace it with a dummy routine so that at least an object file will be produced so that make will not get confused for lack of an object file.</div>
<div><br></div><div>But this assumes that&nbsp;<span class="" style="">asm</span>.c is not supposed to produce any&nbsp;entry points or other loader variables to link to other modules in Open <span class="" style="">MPI</span>.</div><div>
<br></div><div>That is a big question. &nbsp;One possibility is to find some equivalent 32-bit file alternative to the supposed 64-bit <span class="" style="">asm</span>.c and to try to manually re-interpret and modify that code so as to become an equivalent 64-bit code.</div>
<div><br></div><div>So maybe I should do a 32-bit build and somehow adjust the relevant <span class="" style="">Makefile</span> so that a file of 32-bit preprocessed C or assembly code is produced from <span class="" style="">asm</span>.c &nbsp;But I suppose this would require knowing what the command "CC &nbsp; &nbsp; <span class="" style="">asm</span>.lo" is actually supposed to do even in the 32-bit case.</div>
<div><br></div><div>I am wondering whether such a 32-bit "build" for preprocessed output from <span class="" style="">asm</span>.c can be done as a quick, stand-alone run without having to rerun configure and make for context.</div>
<div><br></div><div>---</div><div><br></div><div>Note also the <span class="" style="">OMPI</span>_SPARC32 in the comment for #<span class="" style="">endif</span> . &nbsp;That suggests the author may have been vacillating as to whether <span class="" style="">SPARC</span> is a 32-bit architecture.</div>
<div><br></div><div>There is likely lots of guessing in this approach; so unless someone can suggest a more direct and definitive solution to resolve this issue fairly soon, I think I may take a little vacation and perhaps come back to this question later.</div>
<div><br></div><div>Richard Haney</div><div><br></div><div class="gmail_extra"><br><div class="gmail_quote">On Tue, Aug 20, 2013 at 7:41 PM, Jeremiah <span class="" style="">Willcock</span> <span dir="ltr">&lt;<a href="mailto:jewillco@crest.iu.edu" target="_blank"><span class="" style="">jewillco</span>@crest.<span class="" style="">iu</span>.<span class="" style="">edu</span></a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">The file win_compat.h seems to be very strange (many #defines of function names, #defines of type names rather than typedefs, etc.). &nbsp;It might make sense to avoid including it entirely for MinGW (it is included from opal/include/opal_config_<u></u>bottom.h), or edit it to be correct for 64-bit systems. &nbsp;You might want to try commenting out the entire body of win_compat.h and re-enabling only those parts that are truly necessary (and don't have MinGW headers that should be used instead, such as for ssize_t).<br>

<br>
-- Jeremiah Willcock<br><br></blockquote></div></div></div>
_______________________________________________<br>users mailing list<br><a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/users</blockquote></div><br></div></div></div></body></html>

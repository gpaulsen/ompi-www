<div dir="ltr">Hi,<div><br><div>My requirement: </div><div>1. Avoid the OS from scheduling tasks on cores 0-7 allocated to my process. </div><div>2. Avoid rescheduling of processes to other cores.</div><div><br></div><div>

My solution: I use Linux&#39;s CPU-shielding. </div><div>[ Man page: </div><div><a href="http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html">http://www.kernel.org/doc/man-pages/online/pages/man7/cpuset.7.html</a> </div>

<div>]</div><div>I create a cpuset called &quot;socket1&quot; with cores 8-15 in the dev fs. I iterate through all the tasks in /dev/cpuset/tasks and copy them to /dev/cpuset/socket1/tasks</div><div>I create a cpuset called &quot;socket0&quot; with cores 0-7 .</div>

<div>At the start of the application, (before MPI_Init()), I schedule my MPI process on the cpuset as follows:</div><div>------------------------------------------------------<br></div><div>sprintf(str,&quot;/bin/echo %d &gt;&gt; /dev/cpuset/socket0/tasks &quot;,mypid);<br>

</div><div>system(str);</div><div>------------------------------------------------------<br></div><div>In order to ensure that my processes remain bound to the cores, I am passing the --bind-to-core option to mpirun. I do this, instead of using sched_setaffinity from within the application. Is there a chance that mpirun&#39;s &quot;binding-to-core&quot; will clash with the above ? </div>

<div><br></div><div>While this solution seems to work temporarily, I am not sure whether this is good solution, given mpirun&#39;s own techniques of binding to cores, scheduling processes by slot, et al.</div><div><br></div>

<div>Will mpirun&#39;s bind-by-slot technique guarantee cpu shielding?</div><div><br></div><div>I would be highly obliged if some one could direct me to the right direction.</div><div><br></div><div>Many thanks</div><div>

Sincerely</div><div>Siddhartha Jana</div></div></div>


<html>
<head>
<style><!--
.hmmessage P
{
margin:0px;
padding:0px
}
body.hmmessage
{
font-size: 10pt;
font-family:Tahoma
}
--></style>
</head>
<body class='hmmessage'>
Thanks,<div style="text-indent: 0px !important; "><br style="text-indent: 0px !important; "></div><div style="text-indent: 0px !important; ">From &nbsp;<a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.mpiwrap">http://valgrind.org/docs/manual/mc-manual.html#mc-manual.mpiwrap</a></div><div style="text-indent: 0px !important; "><br></div><div style="text-indent: 0px !important; ">I find that&nbsp;</div><div style="text-indent: 0px !important; "><span class="Apple-style-span" style="color: rgb(32, 32, 32); font-family: Arial, Geneva, Helvetica, sans-serif; font-size: 14px; line-height: 17px; "><br></span></div><div style="text-indent: 0px !important; "><span class="Apple-style-span" style="color: rgb(32, 32, 32); font-family: Arial, Geneva, Helvetica, sans-serif; font-size: 14px; line-height: 17px; ">"Currently the wrappers are only buildable with&nbsp;<code class="computeroutput" style="color: rgb(118, 21, 150); ">mpicc</code>s which are based on GNU GCC or Intel's C++ Compiler."</span></div><div style="text-indent: 0px !important; "><span class="Apple-style-span" style="color: rgb(32, 32, 32); font-family: Arial, Geneva, Helvetica, sans-serif; font-size: 14px; line-height: 17px; "><br></span></div><div style="text-indent: 0px !important; "><span class="Apple-style-span" style="color: rgb(32, 32, 32); font-family: Arial, Geneva, Helvetica, sans-serif; font-size: 14px; line-height: 17px; ">The cluster which I am working on is using GNU Open MPI mpic++. i am afraid that the Valgrind wrapper can work here.&nbsp;</span></div><div style="text-indent: 0px !important; "><span class="Apple-style-span" style="color: rgb(32, 32, 32); font-family: Arial, Geneva, Helvetica, sans-serif; font-size: 14px; line-height: 17px; "><br></span></div><div style="text-indent: 0px !important; ">I do not have system administrator authorization.&nbsp;</div><div style="text-indent: 0px !important; "><br></div><div style="text-indent: 0px !important; ">Are there other mem-checkers (open source) that can do this ?</div><div style="text-indent: 0px !important; "><br></div><div style="text-indent: 0px !important; ">thanks</div><div style="text-indent: 0px !important; "><br></div><div style="text-indent: 0px !important; ">Jack</div><br>&gt; Subject: Re: [OMPI users] OMPI seg fault by a class with weird address.<br>&gt; From: jsquyres@cisco.com<br>&gt; Date: Tue, 15 Mar 2011 06:19:53 -0400<br>&gt; CC: dtustudy68@hotmail.com<br>&gt; To: users@open-mpi.org<br>&gt; <br>&gt; You may also want to run your program through a memory-checking debugger such as valgrind to see if it turns up any other problems.<br>&gt; <br>&gt; AFIK, ptmalloc should be fine for use with STL vector allocation.<br>&gt; <br>&gt; <br>&gt; On Mar 15, 2011, at 4:00 AM, Belaid MOA wrote:<br>&gt; <br>&gt; &gt; Hi Jack,<br>&gt; &gt;   I may need to see the whole code to decide but my quick look suggest that ptmalloc is causing a problem with STL-vector allocation. ptmalloc is the openMPI internal malloc library. Could you try to build openMPI without memory management (using --without-memory-manager) and let us know the outcome. ptmalloc is not needed if you are not using an RDMA interconnect.<br>&gt; &gt; <br>&gt; &gt;   With best regards,<br>&gt; &gt; -Belaid.<br>&gt; &gt; <br>&gt; &gt; From: dtustudy68@hotmail.com<br>&gt; &gt; To: belaid_moa@hotmail.com; users@open-mpi.org<br>&gt; &gt; Subject: RE: [OMPI users] OMPI seg fault by a class with weird address.<br>&gt; &gt; Date: Tue, 15 Mar 2011 00:30:19 -0600<br>&gt; &gt; <br>&gt; &gt; Hi, <br>&gt; &gt; <br>&gt; &gt; Because the code is very long, I just  show the calling relationship of functions. <br>&gt; &gt; <br>&gt; &gt; main()<br>&gt; &gt; {<br>&gt; &gt;     scheduler();<br>&gt; &gt; <br>&gt; &gt; }<br>&gt; &gt; scheduler()<br>&gt; &gt; {<br>&gt; &gt;      ImportIndices();<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; ImportIndices()<br>&gt; &gt; {<br>&gt; &gt; 	Index IdxNode ;<br>&gt; &gt; 	IdxNode = ReadFile("fileName");<br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; Index ReadFile(const char* fileinput) <br>&gt; &gt; {<br>&gt; &gt; 	Index TempIndex;<br>&gt; &gt;         .........<br>&gt; &gt; <br>&gt; &gt; }<br>&gt; &gt; <br>&gt; &gt; vector&lt;int&gt; Index::GetPosition() const { return Position; }<br>&gt; &gt; vector&lt;int&gt; Index::GetColumn() const { return Column; }<br>&gt; &gt; vector&lt;int&gt; Index::GetYear() const { return Year; }<br>&gt; &gt; vector&lt;string&gt; Index::GetName() const { return Name; }<br>&gt; &gt; int Index::GetPosition(const int idx) const { return Position[idx]; }<br>&gt; &gt; int Index::GetColumn(const int idx) const { return Column[idx]; }<br>&gt; &gt; int Index::GetYear(const int idx) const { return Year[idx]; }<br>&gt; &gt; string Index::GetName(const int idx) const { return Name[idx]; }<br>&gt; &gt; int Index::GetSize() const { return Position.size(); }<br>&gt; &gt; <br>&gt; &gt; The sequential code works well, and there is no  scheduler(). <br>&gt; &gt; <br>&gt; &gt; The parallel code output from gdb:<br>&gt; &gt; ----------------------------------------------<br>&gt; &gt; Breakpoint 1, myNeplanTaskScheduler(CNSGA2 *, int, int, int, ._85 *, char, int, message_para_to_workers_VecT &amp;, MPI_Datatype, int &amp;, int &amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &amp;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &amp;, int, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &amp;, MPI_Datatype, int, MPI_Datatype, int) (nsga2=0x118c490, <br>&gt; &gt;     popSize=&lt;value optimized out&gt;, nodeSize=&lt;value optimized out&gt;, <br>&gt; &gt;     myRank=&lt;value optimized out&gt;, myChildpop=0x1208d80, genCandTag=65 'A', <br>&gt; &gt;     generationNum=1, myPopParaVec=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     message_to_master_type=0x7fffffffd540, myT1Flag=@0x7fffffffd68c, <br>&gt; &gt;     myT2Flag=@0x7fffffffd688, <br>&gt; &gt;     resultTaskPackageT1=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     resultTaskPackageT2Pr=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     xdataV=std::vector of length 4, capacity 4 = {...}, objSize=7, <br>&gt; &gt;     resultTaskPackageT12=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     xdata_to_workers_type=0x121c410, myGenerationNum=1, <br>&gt; &gt;     Mpara_to_workers_type=0x121b9b0, nconNum=0)<br>&gt; &gt;     at src/nsga2/myNetplanScheduler.cpp:109<br>&gt; &gt; 109                     ImportIndices();<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 2, ImportIndices () at src/index.cpp:120<br>&gt; &gt; 120             IdxNode = ReadFile("prepdata/idx_node.csv");<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 4, ReadFile (fileinput=0xd8663d "prepdata/idx_node.csv")<br>&gt; &gt;     at src/index.cpp:86<br>&gt; &gt; 86              Index TempIndex;<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 5, Index::Index (this=0x7fffffffcb80) at src/index.cpp:20<br>&gt; &gt; 20              Name(0) {}<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Program received signal SIGSEGV, Segmentation fault.<br>&gt; &gt; 0x00002aaaab3b0b81 in opal_memory_ptmalloc2_int_malloc ()<br>&gt; &gt;    from /opt/openmpi-1.3.4-gnu/lib/libopen-pal.so.0<br>&gt; &gt; <br>&gt; &gt; ---------------------------------------<br>&gt; &gt; the backtrace output from the above parallel OpenMPI code:<br>&gt; &gt; <br>&gt; &gt; (gdb) bt<br>&gt; &gt; #0  0x00002aaaab3b0b81 in opal_memory_ptmalloc2_int_malloc ()<br>&gt; &gt;    from /opt/openmpi-1.3.4-gnu/lib/libopen-pal.so.0<br>&gt; &gt; #1  0x00002aaaab3b2bd3 in opal_memory_ptmalloc2_malloc ()<br>&gt; &gt;    from /opt/openmpi-1.3.4-gnu/lib/libopen-pal.so.0<br>&gt; &gt; #2  0x0000003f7c8bd1dd in operator new(unsigned long) ()<br>&gt; &gt;    from /usr/lib64/libstdc++.so.6<br>&gt; &gt; #3  0x00000000004646a7 in __gnu_cxx::new_allocator&lt;int&gt;::allocate (<br>&gt; &gt;     this=0x7fffffffcb80, __n=0)<br>&gt; &gt;     at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/ext/new_allocator.h:88<br>&gt; &gt; #4  0x00000000004646cf in std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (this=0x7fffffffcb80, __n=0)<br>&gt; &gt;     at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h:127<br>&gt; &gt; #5  0x0000000000464701 in std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (this=0x7fffffffcb80, __n=0, __a=...)<br>&gt; &gt;     at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h:113<br>&gt; &gt; #6  0x0000000000464d0b in std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (<br>&gt; &gt;     this=0x7fffffffcb80, __n=0, __value=@0x7fffffffc968, __a=...)<br>&gt; &gt;     at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_vector.h:216<br>&gt; &gt; #7  0x00000000004890d7 in Index::Index (this=0x7fffffffcb80)<br>&gt; &gt; ---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---<br>&gt; &gt;     at src/index.cpp:20<br>&gt; &gt; #8  0x000000000048927a in ReadFile (fileinput=0xd8663d "prepdata/idx_node.csv")<br>&gt; &gt;     at src/index.cpp:86<br>&gt; &gt; #9  0x0000000000489533 in ImportIndices () at src/index.cpp:120<br>&gt; &gt; #10 0x0000000000445e0e in myNeplanTaskScheduler(CNSGA2 *, int, int, int, ._85 *, char, int, message_para_to_workers_VecT &amp;, MPI_Datatype, int &amp;, int &amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &amp;, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &amp;, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &amp;, int, std::vector&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt;, std::allocator&lt;std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt; &gt; &amp;, MPI_Datatype, int, MPI_Datatype, int) (nsga2=0x118c490, <br>&gt; &gt;     popSize=&lt;value optimized out&gt;, nodeSize=&lt;value optimized out&gt;, <br>&gt; &gt;     myRank=&lt;value optimized out&gt;, myChildpop=0x1208d80, genCandTag=65 'A', <br>&gt; &gt;     generationNum=1, myPopParaVec=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     message_to_master_type=0x7fffffffd540, myT1Flag=@0x7fffffffd68c, <br>&gt; &gt;     myT2Flag=@0x7fffffffd688, <br>&gt; &gt;     resultTaskPackageT1=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     resultTaskPackageT2Pr=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     xdataV=std::vector of length 4, capacity 4 = {...}, objSize=7, <br>&gt; &gt;     resultTaskPackageT12=std::vector of length 4, capacity 4 = {...}, <br>&gt; &gt;     xdata_to_workers_type=0x121c410, myGenerationNum=1, <br>&gt; &gt;     Mpara_to_workers_type=0x121b9b0, nconNum=0)<br>&gt; &gt; ---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---<br>&gt; &gt;     at src/nsga2/myNetplanScheduler.cpp:109<br>&gt; &gt; #11 0x000000000044f44b in main (argc=1, argv=0x7fffffffd998)<br>&gt; &gt;     at src/nsga2/main-parallel2.cpp:216<br>&gt; &gt; ----------------------------------------------------<br>&gt; &gt; <br>&gt; &gt; What is "opal_memory_ptmalloc2_int_malloc ()" ?<br>&gt; &gt; <br>&gt; &gt; The gdb output from sequential code: <br>&gt; &gt; -------------------------------------<br>&gt; &gt; Breakpoint 1, main (argc=&lt;value optimized out&gt;, argv=&lt;value optimized out&gt;)<br>&gt; &gt;     at src/nsga2/main-seq.cpp:32<br>&gt; &gt; 32              ImportIndices();<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 2, ImportIndices () at src/index.cpp:115<br>&gt; &gt; 115             IdxNode = ReadFile("prepdata/idx_node.csv");<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 4, ReadFile (fileinput=0xd6bb9d "prepdata/idx_node.csv")<br>&gt; &gt;     at src/index.cpp:86<br>&gt; &gt; 86              Index TempIndex;<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 5, Index::Index (this=0x7fffffffd6d0) at src/index.cpp:20<br>&gt; &gt; 20              Name(0) {}<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 4, ReadFile (fileinput=0xd6bbb3 "prepdata/idx_ud.csv")<br>&gt; &gt;     at src/index.cpp:86<br>&gt; &gt; 86              Index TempIndex;<br>&gt; &gt; (gdb) bt<br>&gt; &gt; #0  ReadFile (fileinput=0xd6bbb3 "prepdata/idx_ud.csv") at src/index.cpp:86<br>&gt; &gt; #1  0x0000000000471cc9 in ImportIndices () at src/index.cpp:116<br>&gt; &gt; #2  0x000000000043bba6 in main (argc=&lt;value optimized out&gt;, <br>&gt; &gt;     argv=&lt;value optimized out&gt;) at src/nsga2/main-seq.cpp:32<br>&gt; &gt; <br>&gt; &gt; --------------------------------------<br>&gt; &gt; thanks<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; From: belaid_moa@hotmail.com<br>&gt; &gt; To: users@open-mpi.org; dtustudy68@hotmail.com<br>&gt; &gt; Subject: RE: [OMPI users] OMPI seg fault by a class with weird address.<br>&gt; &gt; Date: Tue, 15 Mar 2011 06:16:35 +0000<br>&gt; &gt; <br>&gt; &gt; Hi Jack,<br>&gt; &gt; 1- Where is your main function to see how you called your class?<br>&gt; &gt; 2- I do not see the implementation of GetPosition, GetName, etc.?<br>&gt; &gt; <br>&gt; &gt; With best regards,<br>&gt; &gt; -Belaid.<br>&gt; &gt;   <br>&gt; &gt; <br>&gt; &gt; From: dtustudy68@hotmail.com<br>&gt; &gt; To: users@open-mpi.org<br>&gt; &gt; Date: Mon, 14 Mar 2011 19:04:12 -0600<br>&gt; &gt; Subject: [OMPI users] OMPI seg fault by a class with weird address.<br>&gt; &gt; <br>&gt; &gt; Hi, <br>&gt; &gt; <br>&gt; &gt; I got a run-time error of a Open MPI C++ program. <br>&gt; &gt; <br>&gt; &gt; The following output is from gdb: <br>&gt; &gt; <br>&gt; &gt; --------------------------------------------------------------------------<br>&gt; &gt; Program received signal SIGSEGV, Segmentation fault.<br>&gt; &gt; 0x00002aaaab3b0b81 in opal_memory_ptmalloc2_int_malloc ()<br>&gt; &gt;    from /opt/openmpi-1.3.4-gnu/lib/libopen-pal.so.0<br>&gt; &gt; <br>&gt; &gt; At the point <br>&gt; &gt; <br>&gt; &gt; Breakpoint 9, Index::Index (this=0x7fffffffcb80) at src/index.cpp:20<br>&gt; &gt; 20              Name(0) {}<br>&gt; &gt; <br>&gt; &gt; The Index has been called before this point and no problem:<br>&gt; &gt; -------------------------------------------------------<br>&gt; &gt; Breakpoint 9, Index::Index (this=0x117d800) at src/index.cpp:20<br>&gt; &gt; 20              Name(0) {}<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; <br>&gt; &gt; Breakpoint 9, Index::Index (this=0x117d860) at src/index.cpp:20<br>&gt; &gt; 20              Name(0) {}<br>&gt; &gt; (gdb) c<br>&gt; &gt; Continuing.<br>&gt; &gt; ----------------------------------------------------------------------------<br>&gt; &gt; <br>&gt; &gt; It seems that the 0x7fffffffcb80 address is a problem. <br>&gt; &gt; <br>&gt; &gt; But, I donot know the reason and how to remove the bug. <br>&gt; &gt; <br>&gt; &gt; Any help is really appreciated. <br>&gt; &gt; <br>&gt; &gt; thanks<br>&gt; &gt; <br>&gt; &gt; the following is the index definition.<br>&gt; &gt; <br>&gt; &gt; ---------------------------------------------------------<br>&gt; &gt; class Index {<br>&gt; &gt;     public:<br>&gt; &gt;         Index();<br>&gt; &gt;         Index(const Index&amp; rhs);<br>&gt; &gt;         ~Index();<br>&gt; &gt;         Index&amp; operator=(const Index&amp; rhs);<br>&gt; &gt; 		<br>&gt; &gt; 		vector&lt;int&gt; GetPosition() const;<br>&gt; &gt; 		vector&lt;int&gt; GetColumn() const;<br>&gt; &gt; 		vector&lt;int&gt; GetYear() const;<br>&gt; &gt; 		vector&lt;string&gt; GetName() const;<br>&gt; &gt; 		int GetPosition(const int idx) const;<br>&gt; &gt; 		int GetColumn(const int idx) const;<br>&gt; &gt; 		int GetYear(const int idx) const;<br>&gt; &gt; 		string GetName(const int idx) const;<br>&gt; &gt; 		int GetSize() const;<br>&gt; &gt; 		<br>&gt; &gt; 		void Add(const int idx, const int col, const string&amp; name);<br>&gt; &gt; 		void Add(const int idx, const int col, const int year, const string&amp; name);<br>&gt; &gt; 		void Add(const int idx, const Step&amp; col, const string&amp; name);<br>&gt; &gt; 		void WriteFile(const char* fileinput) const;<br>&gt; &gt; 		<br>&gt; &gt;     private:<br>&gt; &gt; 		vector&lt;int&gt; Position;<br>&gt; &gt; 		vector&lt;int&gt; Column;<br>&gt; &gt; 		vector&lt;int&gt; Year;<br>&gt; &gt; 		vector&lt;string&gt; Name;<br>&gt; &gt; };<br>&gt; &gt; // Contructors and destructor for the Index class<br>&gt; &gt; Index::Index() :<br>&gt; &gt; 	Position(0),<br>&gt; &gt; 	Column(0),<br>&gt; &gt; 	Year(0),<br>&gt; &gt; 	Name(0) {}<br>&gt; &gt; <br>&gt; &gt; Index::Index(const Index&amp; rhs) :<br>&gt; &gt; 	Position(rhs.GetPosition()),<br>&gt; &gt; 	Column(rhs.GetColumn()),<br>&gt; &gt; 	Year(rhs.GetYear()),<br>&gt; &gt; 	Name(rhs.GetName()) {}<br>&gt; &gt; <br>&gt; &gt; Index::~Index() {}<br>&gt; &gt; <br>&gt; &gt; Index&amp; Index::operator=(const Index&amp; rhs) {<br>&gt; &gt;     Position = rhs.GetPosition();<br>&gt; &gt; 	Column = rhs.GetColumn(),<br>&gt; &gt; 	Year = rhs.GetYear(),<br>&gt; &gt; 	Name = rhs.GetName();<br>&gt; &gt;     return *this;<br>&gt; &gt; }<br>&gt; &gt; ----------------------------------------------------------<br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; <br>&gt; &gt; _______________________________________________ users mailing list users@open-mpi.org http://www.open-mpi.org/mailman/listinfo.cgi/users<br>&gt; &gt; _______________________________________________<br>&gt; &gt; users mailing list<br>&gt; &gt; users@open-mpi.org<br>&gt; &gt; http://www.open-mpi.org/mailman/listinfo.cgi/users<br>&gt; <br>&gt; <br>&gt; -- <br>&gt; Jeff Squyres<br>&gt; jsquyres@cisco.com<br>&gt; For corporate legal information go to:<br>&gt; http://www.cisco.com/web/about/doing_business/legal/cri/<br>&gt; <br> 		 	   		  </body>
</html>

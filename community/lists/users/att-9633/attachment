I have a small test code that I&#39;ve managed to duplicate the results from a larger code. In essence, using the sm btl with ISend, I wind up with the communication being completely serialized, i.e., all the calls from process 1 complete, then all from 2, ...<br>
<br>This is version 1.3.2, vanilla compile. I get the same results on my RHEL5 nehalem and an OS X laptop.<br>Here&#39;s an example of the output (note: there is a usleep in the code to mimick my computation loop, and ensure that this is not a simple I/O sequencing issue):<br>
<br>---- Ignore the &quot;next&quot; in the output below, it was a broadcast test.<br><br>mpirun -np 5 ./mpi_split_test<br>Master [id = 0 of 5] is running on bolstadm-lm1<br>[0] next = 10<br>Server [id = 3, 2, 1 of 5] is running on bolstadm-lm1<br>
Compositor [id = 1, 0 of 5] is running on bolstadm-lm1<br>[1] next = 10<br>Sending buffer 0 from 1<br>Server [id = 2, 1, 0 of 5] is running on bolstadm-lm1<br>[2] next = 10<br>Sending buffer 0 from 2<br>[3] next = 10<br>Server [id = 4, 3, 2 of 5] is running on bolstadm-lm1<br>
[4] next = 10<br>Sending buffer 0 from 3<br>Sending buffer 1 from 1<br>Sending buffer 1 from 2<br>Sending buffer 1 from 3<br>Sending buffer 2 from 1<br>Sending buffer 2 from 2<br>Sending buffer 2 from 3<br>Sending buffer 3 from 1<br>
Sending buffer 3 from 2<br>Sending buffer 4 from 1<br>Receiving buffer from 1, buffer = hello from 1 for the 0 time<br>Receiving buffer from 1, buffer = hello from 1 for the 1 time<br>Sending buffer 4 from 2<br>Sending buffer 4 from 3<br>
Sending buffer 5 from 1<br>Receiving buffer from 1, buffer = hello from 1 for the 2 time<br>Sending buffer 6 from 1<br>Receiving buffer from 1, buffer = hello from 1 for the 3 time<br><br>-----At this point, processes 2 &amp; 3 are stuck in an MPI_Wait<br>
...<br>Sending buffer 9 from 1<br>Receiving buffer from 1, buffer = hello from 1 for the 6 time<br>Receiving buffer from 1, buffer = hello from 1 for the 7 time<br>Receiving buffer from 1, buffer = hello from 1 for the 8 time<br>
Receiving buffer from 1, buffer = hello from 1 for the 9 time<br>Receiving buffer from 2, buffer = hello from 2 for the 0 time<br>Receiving buffer from 2, buffer = hello from 2 for the 1 time<br>Receiving buffer from 2, buffer = hello from 2 for the 2 time<br>
Sending buffer 5 from 2<br>Sending buffer 6 from 2<br>Receiving buffer from 2, buffer = hello from 2 for the 3 time<br><br>---- Now process 2 is now running, 1 is in a barrier, 3 is still in Wait<br>....<br>Sending buffer 9 from 2<br>
Receiving buffer from 2, buffer = hello from 2 for the 6 time<br>Receiving buffer from 2, buffer = hello from 2 for the 7 time<br>Receiving buffer from 2, buffer = hello from 2 for the 8 time<br>Receiving buffer from 2, buffer = hello from 2 for the 9 time<br>
Receiving buffer from 3, buffer = hello from 3 for the 0 time<br>Sending buffer 5 from 3<br>Receiving buffer from 3, buffer = hello from 3 for the 1 time<br>Receiving buffer from 3, buffer = hello from 3 for the 2 time<br>
<br>---- And now process 3 goes<br>...<br>Receiving buffer from 3, buffer = hello from 3 for the 8 time<br>Receiving buffer from 3, buffer = hello from 3 for the 9 time<br><br><br><br>Now running under TCP:<br><br>mpirun --mca btl tcp,self -np 5 ./mpi_split_test<br>
Compositor [id = 1, 0 of 5] is running on bolstadm-lm1<br>Master [id = 0 of 5] is running on bolstadm-lm1<br>[0] next = 10<br>Server [id = 2, 1, 0 of 5] is running on bolstadm-lm1<br>Server [id = 3, 2, 1 of 5] is running on bolstadm-lm1<br>
Server [id = 4, 3, 2 of 5] is running on bolstadm-lm1<br>[4] next = 10<br>Sending buffer 0 from 3<br>Sending buffer 0 from 1<br>[2] next = 10<br>[1] next = 10<br>Sending buffer 0 from 2<br>[3] next = 10<br>Receiving buffer from 1, buffer = hello from 1 for the 0 time<br>
Receiving buffer from 3, buffer = hello from 3 for the 0 time<br>Receiving buffer from 2, buffer = hello from 2 for the 0 time<br>Sending buffer 1 from 3<br>Sending buffer 1 from 1<br>Sending buffer 1 from 2<br>Receiving buffer from 1, buffer = hello from 1 for the 1 time<br>
Receiving buffer from 2, buffer = hello from 2 for the 1 time<br>Receiving buffer from 3, buffer = hello from 3 for the 1 time<br>Sending buffer 2 from 3<br>Sending buffer 2 from 2<br>Sending buffer 2 from 1<br>Receiving buffer from 1, buffer = hello from 1 for the 2 time<br>
Receiving buffer from 2, buffer = hello from 2 for the 2 time<br>Receiving buffer from 3, buffer = hello from 3 for the 2 time<br>...<br><br>So, has this been reported before? I&#39;ve seen some messages on the developer list about hanging with the sm btl.<br>
<br>I&#39;ll post the test code if requested (this email is already long)<br><br>Mark<br><br><br>


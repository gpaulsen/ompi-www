Hi, i have this program, that write the rank of a process  on a file.  Every processes write the rank on the same file. Whe i try to read that value, is always zero.<div><br></div><div><br><div><div>#include &lt;stdio.h&gt;  /*IO stuff lives here*/</div>
<div>#include &lt;stdlib.h&gt; /*exit lives here*/</div><div>#include &lt;mpi.h&gt;    /*MPI and MPI-IO live here*/</div><div><br></div><div><br></div><div>//GLobal variables</div><div>int rank;</div><div><br></div><div>void mpi(int error_code){</div>
<div><br></div><div>  if (error_code != MPI_SUCCESS) {</div><div><br></div><div>    char error_string[BUFSIZ];</div><div>    int length_of_error_string, error_class;</div><div><br></div><div>    MPI_Error_class(error_code, &amp;error_class);</div>
<div>    MPI_Error_string(error_class, error_string, &amp;length_of_error_string);</div><div>    fprintf(stderr, &quot;%3d: %s\n&quot;, rank, error_string);</div><div>    MPI_Error_string(error_code, error_string, &amp;length_of_error_string);</div>
<div>    fprintf(stderr, &quot;%3d: %s\n&quot;, rank, error_string);</div><div>  //  send_error = TRUE;</div><div>  }</div><div>}</div><div><br></div><div>int main(int argc, char *argv[]){</div><div><br></div><div>  int size;</div>
<div><br></div><div>  MPI_File fh;  </div><div><br></div><div>  MPI_Init(&amp;argc, &amp;argv);</div><div><br></div><div>  MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</div><div>  MPI_Comm_size(MPI_COMM_WORLD, &amp;size);</div>
<div><br></div><div>  MPI_Errhandler_set(MPI_COMM_WORLD, MPI_ERRORS_RETURN);</div><div><br></div><div>/*</div><div>  MPI_MODE_RDONLY --- read only,</div><div>  MPI_MODE_RDWR --- reading and writing,</div><div>  MPI_MODE_WRONLY --- write only,</div>
<div>  MPI_MODE_CREATE --- create the file if it does not exist,</div><div>  MPI_MODE_EXCL --- error if creating file that already exists,</div><div>  MPI_MODE_DELETE_ON_CLOSE --- delete file on close,</div><div>  MPI_MODE_UNIQUE_OPEN --- file will not be concurrently opened elsewhere,</div>
<div>  MPI_MODE_SEQUENTIAL --- file will only be accessed sequentially,</div><div>  MPI_MODE_APPEND --- set initial position of all file pointers to end of file.</div><div> */</div><div><br></div><div>  MPI_Barrier(MPI_COMM_WORLD);  </div>
<div>  </div><div>//OPEN FILE</div><div>// abertura do ficheiro  </div><div>  //printf(&quot;[%d] - A abrir ficheiro\n&quot;, rank);</div><div>  mpi(MPI_File_open(MPI_COMM_WORLD, &quot;<a href="http://buffer.io">buffer.io</a>&quot;, MPI_MODE_CREATE | MPI_MODE_WRONLY, MPI_INFO_NULL, &amp;fh));</div>
<div>  MPI_Barrier(MPI_COMM_WORLD);</div><div><br></div><div>  </div><div>//calcular quantidade de bytes a escrever no ficheiro </div><div>  //MPI_Offset totalNumberOfIntegers</div><div>        </div><div>//DEFINE OFFSET  </div>
<div>//definir o offset  </div><div>  MPI_Offset myOffset = (MPI_Offset)(rank * sizeof(int));</div><div>  mpi(MPI_File_seek(fh, myOffset, MPI_SEEK_SET));  </div><div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  </div><div>//CHECK OFFSET </div>
<div>// verificar a posição no ficheiro  </div><div>  MPI_Offset myCurrentOffset;</div><div>  </div><div>  MPI_File_get_position(fh, &amp;myCurrentOffset);</div><div>  printf (&quot;[%d] - My current offset is %lld\n&quot;, rank, myCurrentOffset);  </div>
<div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  </div><div>//WRITE RANK IN THE FILE</div><div>// escrita do ficheiro   </div><div>  MPI_Status mpiStatus; </div><div>  int write=9;</div><div>  </div><div>  mpi(MPI_File_write(fh, &amp;write, sizeof(int), MPI_BYTE, &amp;mpiStatus));</div>
<div>  printf(&quot;[%d] - Escreveu no ficheiro o valor &#39;%d&#39;\n&quot;, rank, rank );  </div><div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  </div><div>//CALCULATE FILE SIZE  </div><div>//calcular quantidade de bytes a ler do ficheiro </div>
<div>  int numberOfBytes; </div><div>  MPI_Offset totalNumberOfBytes, numberOfBytesToRead;</div><div>  </div><div>  MPI_File_get_size(fh, &amp;totalNumberOfBytes);</div><div>  numberOfBytesToRead = totalNumberOfBytes / size;</div>
<div>  numberOfBytes = (int) numberOfBytesToRead;</div><div>  printf(&quot;[%d] - A preparar para ler %d bytes\n&quot;, rank, numberOfBytes);</div><div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  </div><div>//RESET OFFSET  </div>
<div>//restaurar valor inicial do offset  </div><div>  myOffset = (MPI_Offset)(rank * sizeof(int));</div><div>  mpi(MPI_File_seek(fh, myOffset, MPI_SEEK_SET));</div><div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  </div><div>
//CHECK OFFSET </div><div>// verificar a posição no ficheiro    </div><div>  MPI_File_get_position(fh, &amp;myCurrentOffset);</div><div>  printf (&quot;[%d] - My current offset is %lld\n&quot;, rank, myCurrentOffset);  </div>
<div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  </div><div>//READ FILE  </div><div>//leitura do ficheiro  </div><div>  int readBuffer=0;</div><div>  // MPI_Status mpiStatus;</div><div>  MPI_File_read(fh, &amp;readBuffer, sizeof(int) , MPI_INT, MPI_STATUS_IGNORE);</div>
<div>  MPI_Barrier(MPI_COMM_WORLD);</div><div>  printf(&quot;[%d] - Leu do ficheiro o valor &#39;%d&#39;\n&quot;, rank, readBuffer );</div><div>  MPI_Barrier(MPI_COMM_WORLD);</div><div> </div><div>//CLOSE FILE  </div><div>
// fecho do ficheiro</div><div>  MPI_File_close(&amp;fh);</div><div>  MPI_File_delete(&quot;<a href="http://buffer.io">buffer.io</a>&quot;, MPI_INFO_NULL );</div><div><br></div><div>//end program</div><div>  MPI_Finalize();</div>
<div><br></div><div>  return(0);</div><div><br></div><div>}</div><br>-- <br>Cumprimentos<br><br>Luís Miranda<br>
</div></div>


Hello everyone,<br><br><br>I&#39;m trying to implement some functions in my code using parallel writing. Each processor has an array, say q, whose length is single_no(could be zero on some processors). I want to write q down to a common file, but the elements of q would be scattered to their locations in this file. The locations of the elements are described by a map. I wrote my testing code according to an example in a MPI-2 tutorial which can be found here: <a href="http://www.npaci.edu/ahm2002/ahm_ppt/Parallel_IO_MPI_2.ppt">www.npaci.edu/ahm2002/ahm_ppt/Parallel_IO_MPI_2.ppt</a>. This way of writing is called &quot;Accessing Irregularly Distributed Arrays&quot; in this tutorial and the example is given in page 42.<br>
<br>I tested my code with mvapich and got the result as expected. But when I tested it with openmpi, it didn&#39;t work. I tried the version 1.2.8 and 1.4 and both didn&#39;t work. I tried two clusters. Both of them are intel chips (woodcrest and nehalem), DDR infiniband with Linux system. I got some error message like <br>
<br>+++++++++++++++++++++++++++++++++++++++++++++++++++<br>[n0883:08251] *** Process received signal ***<br>[n0883:08249] *** Process received signal ***<br>[n0883:08249] Signal: Segmentation fault (11)<br>[n0883:08249] Signal code: Address not mapped (1)<br>
[n0883:08249] Failing at address: (nil)<br>[n0883:08251] Signal: Segmentation fault (11)<br>[n0883:08251] Signal code: Address not mapped (1)<br>[n0883:08251] Failing at address: (nil)<br>[n0883:08248] *** Process received signal ***<br>
[n0883:08250] *** Process received signal ***<br>[n0883:08248] Signal: Segmentation fault (11)<br>[n0883:08248] Signal code: Address not mapped (1)<br>[n0883:08248] Failing at address: (nil)<br>[n0883:08250] Signal: Segmentation fault (11)<br>
[n0883:08250] Signal code: Address not mapped (1)<br>[n0883:08250] Failing at address: (nil)<br>[n0883:08251] [ 0] /lib64/libpthread.so.0 [0x2b4f0a2f0d60]<br>+++++++++++++++++++++++++++++++++++++++++++++++++++<br><br><br>
<br>My testing code is here:<br><br>===========================================================================================================<br>program test_MPI_write_adv2<br><br><br>  !-- Template for any mpi program<br>
<br>  implicit none    <br><br>  !--Include the mpi header file<br>  include &#39;mpif.h&#39;              ! --&gt; Required statement<br><br>  !--Declare all variables and arrays.<br>  integer :: fh, ierr, myid, numprocs, itag, etype, filetype, info<br>
  integer :: status(MPI_STATUS_SIZE)<br>  integer :: irc, ip<br>  integer(kind=mpi_offset_kind) :: offset, disp<br>  integer :: i, j, k<br>  <br>  integer :: num<br>  <br>  character(len=64) :: filename<br>  <br>  real(8), pointer :: q(:), temp(:)<br>
  integer, pointer :: map(:)<br>  integer :: single_no, count<br>  <br>  <br>  !--Initialize MPI<br>  call MPI_INIT( ierr )         ! --&gt; Required statement<br>  <br>  !--Who am I? --- get my rank=myid<br>  call MPI_COMM_RANK( MPI_COMM_WORLD, myid, ierr )<br>
  <br>  !--How many processes in the global group?<br>  call MPI_COMM_SIZE( MPI_COMM_WORLD, numprocs, ierr )<br>  <br>  if ( myid == 0 ) then<br>     single_no = 4<br>  elseif ( myid == 1 ) then<br>     single_no = 2<br>  elseif ( myid == 2 ) then<br>
     single_no = 2<br>  elseif ( myid == 3 ) then<br>     single_no = 3<br>  else<br>     single_no = 0<br>  end if<br><br>  if (single_no .gt. 0) allocate(map(single_no))<br><br>  if ( myid == 0 ) then<br>     map = (/ 0, 2, 5, 6 /)<br>
  elseif ( myid == 1 ) then<br>     map = (/ 1, 4 /)<br>  elseif ( myid == 2 ) then<br>     map = (/ 3, 9 /)<br>  elseif ( myid == 3 ) then<br>     map = (/ 7, 8, 10 /)<br>  end if<br><br>  if (single_no .gt. 0) allocate(q(single_no))<br>
    <br>  if (single_no .gt. 0) then<br>     do i = 1,single_no<br>        q(i) = dble(myid+1)*100.0d0 + dble(map(i)+1) <br>     end do<br>  end if<br>  <br>  if (single_no .gt. 0) map = map + 1<br><br>  if ( myid == 0 ) then<br>
     count = 1<br>  else<br>     count = 0<br>  end if<br><br>  if (count .gt. 0) then<br>     allocate(temp(count))<br>     temp(1) = 2122010.0d0<br>  end if<br><br>  write(filename,&#39;(a)&#39;) &#39;test_write.bin&#39; <br>
  <br>  call MPI_FILE_OPEN(MPI_COMM_WORLD, filename, MPI_MODE_RDWR+MPI_MODE_CREATE, MPI_INFO_NULL, fh, ierr)<br><br>  call MPI_FILE_WRITE(FH, temp, COUNT, MPI_REAL8, STATUS, IERR)<br>  <br>  call MPI_TYPE_CREATE_INDEXED_BLOCK(single_no, 1, map, MPI_DOUBLE_PRECISION, filetype, ierr)<br>
  call MPI_TYPE_COMMIT(filetype, ierr)<br>  disp = 0<br>  call MPI_FILE_SET_VIEW(fh, disp, MPI_DOUBLE_PRECISION, filetype, &#39;native&#39;, MPI_INFO_NULL, ierr)<br>  call MPI_FILE_WRITE_ALL(fh, q, single_no, MPI_DOUBLE_PRECISION, status, ierr)<br>
  call MPI_FILE_CLOSE(fh, ierr)  <br><br><br>  if (single_no .gt. 0) deallocate(map)<br><br>  if (single_no .gt. 0) deallocate(q)<br>  <br>  if (count .gt. 0) deallocate(temp)<br>  <br>  !--Finilize MPI<br>  call MPI_FINALIZE(irc)        ! ---&gt; Required statement<br>
  <br>  stop<br>  <br>  <br>end program test_MPI_write_adv2<br>===========================================================================================================<br><br><br>The expected result is (should be in binary but the values are as follows) :<br>
<br>   2122010.00000000     <br>   101.000000000000     <br>   202.000000000000     <br>   103.000000000000     <br>   304.000000000000     <br>   205.000000000000     <br>   106.000000000000     <br>   107.000000000000     <br>
   408.000000000000     <br>   409.000000000000     <br>   310.000000000000     <br>   411.000000000000<br><br><br>Can anyone help me on this problem?<br><br><br>Thanks a lot,<br>Kan<br><br><br><br>


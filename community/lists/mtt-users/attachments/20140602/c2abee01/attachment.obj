#
# Copyright (c) 2007 Sun Microystems, Inc.  All rights reserved.
#

# Template MTT configuration file for Open MPI developers.  The intent
# for this template file is to establish at least some loose
# guidelines for what Open MPI core developers should be running
# before committing changes to the OMPI repository. This file is not
# intended to be an exhaustive sample of all possible fields and
# values that MTT offers. Each developer will undoubtedly have to
# edit this template for their own needs (e.g., pick compilers to use,
# etc.), but this file provides a baseline set of configurations that
# we intend for you to run.
#
# Sample usage:
#   cat developer.ini intel.ini   | client/mtt - alreadyinstalled_dir=/your/install
#   cat developer.ini trivial.ini | client/mtt - alreadyinstalled_dir=/your/install
#

[MTT]
# No overrides to defaults

# Fill this field in
hostfile = /home/common/hosts
force = 1
trial = 0
scratch = /home/common/mttscratch-rsh
submit_group_results = 1
logfile = /home/common/mtt-logfile-rsh.txt
description = Intel Bend development cluster

#======================================================================
# MPI get phase
#======================================================================

#----------------------------------------------------------------------

[MPI get: My Installation]
mpi_details = Open MPI
# Leave this parameter blank to
# have MTT search your path for an MPI
# alreadyinstalled_dir = /your/installation
module = AlreadyInstalled


#----------------------------------------------------------------------

[MPI install: My Installation]
mpi_get = My Installation
module = Analyze::OMPI

#======================================================================
# MPI run details
#======================================================================

[MPI Details: Open MPI]

exec = mpirun @hosts@ -np &test_np() --prefix &test_prefix() &test_executable() &test_argv()

hosts = <<EOT
    &if(
        &have_hostfile(),
        &stringify("--hostfile ", &hostfile()),
        &if(
            &have_hostlist(),
            &stringify("--host ", &hostlist()),
            ""
        )
    )
EOT

#options = &enumerate( \
#	  "", \
#	  "--novm")

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

[Test get: ibm]
module = SCM
scm_module = SVN
scm_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/ibm


#----------------------------------------------------------------------

[Test get: intel]
module = SCM
scm_module = SVN
scm_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/intel_tests


#----------------------------------------------------------------------

[Test get: onesided]
module = SCM
scm_module = SVN
scm_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/onesided
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[SKIP Test get: java]
module = SCM
scm_module = SVN
scm_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/java-test-suite
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: oshmem_test_suite]
module = SCM
scm_module = SVN
scm_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/openshmem-release-1.0d


#
#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
merge_stdout_stderr = 1

mpi_install = My Installation

module = Trivial

#----------------------------------------------------------------------

[Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

mpi_install = My Installation

module = Shell
shell_build_command = <<EOT
which libtool
./autogen.sh
./configure CC=mpicc CXX=mpic++ F77=mpif77
make -j 10
EOT

#----------------------------------------------------------------------

[Test build: intel]
test_get = intel
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

mpi_install = My Installation

module = Intel_OMPI_Tests
intel_ompi_tests_buildfile = all_tests_no_perf
#----------------------------------------------------------------------

[Test build: onesided]
test_get = onesided
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

mpi_install = My Installation

module = Shell
shell_build_command = <<EOT
./configure
make -j 10
EOT

#----------------------------------------------------------------------

[SKIP Test build: java]
test_get = java
save_stdout_on_success = 1
merge_stdout_stderr = 1

mpi_install = My Installation

module = Shell
shell_build_command = <<EOT
./configure
make -j 10
EOT

[Test build: oshmem_test_suite]
test_get = oshmem_test_suite
save_stdout_on_success = 1
merge_stdout_stderr = 1
module = Shell

shell_build_command = <<EOT

make examples CC=&test_prefix_pretty()/bin/shmemcc
make C_feature_tests CC=&test_prefix_pretty()/bin/shmemcc
make micro_bench CC=&test_prefix_pretty()/bin/shmemcc
make F_feature_tests SHMEM_F90=&test_prefix_pretty()/bin/shmemfort
EOT

#----------------------------------------------------------------------
#======================================================================
# Test Run phase
#======================================================================

# Some default Test run parameters to include in (most) Test run sections
[Test run]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
skipped = &and(&test_wifexited(), &eq(&test_wexitstatus(), 77))

save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
stderr_save_lines = 100
report_after_n_results = 100 
np = 16

#----------------------------------------------------------------------

[Test run: trivial]
include_section = Test run

test_build = trivial
timeout = &max(10, &test_np())
skipped = 0

specify_module = Simple
simple_first:tests = &find_executables(".")

#----------------------------------------------------------------------

[Test run: ibm]
include_section = Test run

test_build = ibm
timeout = &max(12, &multiply(10, &test_np()))

specify_module = Simple
simple_first:tests = &find_executables("collective", "communicator", \
                                       "datatype", "dynamic", "environment", \
                                       "group", "info", "io", "onesided", \
                                       "pt2pt", "random", "topology")

# Tests that are supposed to fail
simple_fail:tests = environment/abort environment/final
simple_fail:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_fail:exclusive = 1
simple_fail:timeout = &env_max_procs()

# Spawn tests; need to run very few
simple_spawns:tests  = dynamic/spawn dynamic/spawn_multiple
simple_spawns:np = 3
simple_spawns:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_spawns:exclusive = 1
simple_spawns:timeout = &multiply(5,&env_max_procs())

# Big loop o' spawns
#simple_loop_spawn:tests = dynamic/loop_spawn
#simple_loop_spawn:np = 1
#simple_loop_spawn:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
#simple_loop_spawn:exclusive = 1
#simple_loop_spawn:timeout = 1200

# Big loop o' comm splits and whatnot.  It runs for 10 minutes.
#simple_loop_comm_split:tests = communicator/comm_split_f
#simple_loop_comm_split:np = 1
#simple_loop_comm_split:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
#simple_loop_comm_split:exclusive = 1
#simple_loop_comm_split:timeout = 660
#
# THREAD_MULTIPLE test will fail with the openib btl because it
# deactivates itself in the presence of THREAD_MULTIPLE.  So just skip
# it.  loop_child is the target for loop_spawn, so we don't need to
# run it (although it'll safely pass if you run it by itself).
simple_skip:tests = environment/init_thread_multiple dynamic/loop_child dynamic/loop_spawn communicator/comm_split_f
simple_skip:exclusive = 1
simple_skip:do_not_run = 1

#----------------------------------------------------------------------

[Test run: intel]
include_section = Test run

test_build = intel
timeout = &max(30, &multiply(20, &test_np()))

specify_module = Simple
simple_successful:tests = &find_executables("src")

simple_failures:tests = &find_executables(&prepend("src/", &cat("supposed_to_fail")))
simple_failures:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_failures:exclusive = 1
simple_failures:timeout = &env_max_procs()

# These tests sleep for 90 seconds (!) before attempting to process
# any messages
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(180, &multiply(5, &test_np()))

# This test collectively sleeps for 26 seconds *per MCW rank*
simple_coll_slow:tests = src/MPI_collective_overlap_c
simple_coll_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_coll_slow:exclusive = 1
simple_coll_slow:timeout = &multiply(35, &test_np()))

#----------------------------------------------------------------------

[Test run: onesided]
include_section = Test run
test_build = onesided

specify_module = Simple
np = &if(&gt(&env_max_procs(), 0), &step(2, &max(2, &env_max_procs()), 2), 2)

simple_pass:tests = &cat("run_list")

#------------------------------------------------------------------------

# Java test suite

[SKIP Test run: java]
test_build = java
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = 0
timeout = 15
save_stdout_on_pass = 1
merge_stdout_stderr = 1

specify_module = Simple
simple_first:tests = java
simple_first:argv = &find_java_executables("basic", "ccl_ObjSer", \
                                "collectives", "comm", \
                                "datatype", "dtyp_ObjSer", \
                                "group", "pt2pt", \
                                "pt2pt_ObjSer", "topo")

# Tests that are supposed to fail
simple_fail:tests = java
simple_fail:argv = &java_executable("basic/Abort")
simple_fail:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_fail:exclusive = 1
simple_fail:timeout = &env_max_procs()

[oshmem_test_suite_common]
test_build = oshmem_test_suite
include_section = Test run
np = 2
timeout = 00:02:00
specify_module = Simple

[Test run: oshmem_test_suite_examples]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables("examples/")
simple_first:argv = &enumerate("10 10")
skipped = 0
np = 4
timeout = 00:02:00

[Test run: oshmem_test_suite_C_feature_tests]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables("feature_tests/C/")

[Test run: oshmem_test_suite_Fortran_accessibility]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*[.]x$', "feature_tests/Fortran/accessibility")

[Test run: oshmem_test_suite_Fortran_alloc]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*shpalloc_0[^3].*[.]x$', "feature_tests/Fortran/alloc")

[Test run: oshmem_test_suite_Fortran_atomic_add]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('add_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_cswap]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('cswap_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_fadd]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('test_shmem_fadd.*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_finc]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('finc_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_inc]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('inc_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_swap]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('swap_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_barrier]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*barrier.*_0[^3].*[.]x$', "feature_tests/Fortran/barrier")

[Test run: oshmem_test_suite_Fortran_collect]
simple_first:tests = &find_executables_regexp('.*collect_0[^4].*[.]x$', "feature_tests/Fortran/collect")
include_section = oshmem_test_suite_common

[Test run: oshmem_test_suite_Fortran_reductions]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*[.]x$', "feature_tests/Fortran/reductions")

[Test run: oshmem_test_suite_Fortran_transfer]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('test_shmem_[^pi][^ug].*[.]x$', "feature_tests/Fortran/transfer")

[Test run: oshmem_test_suite_Fortran_transfer_put]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('put_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_transfer_iget]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('iget_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_synchronization]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('(test_shmem_lock.x)|(test_shmem_synchronization.x)', "feature_tests/Fortran")

[Test run: oshmem_test_suite_Fortran_alloc_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*shpalloc_03.*[.]x$', "feature_tests/Fortran/alloc")

[Test run: oshmem_test_suite_Fortran_atomic_add_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('add_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_cswap_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('cswap_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_finc_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('finc_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_inc_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('inc_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_swap_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('swap_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_transfer_put_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('put_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_transfer_iget_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('iget_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_barrier_timeout]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*barrier.*_03.*[.]x$', "feature_tests/Fortran/barrier")

[Test run: oshmem_test_suite_Fortran_collect_timeout]
simple_first:tests = &find_executables_regexp('.*collect_04.*[,]x$', "feature_tests/Fortran/collect")
include_section = oshmem_test_suite_common

[Test run: oshmem_test_suite_performance_tests]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables_regexp('(.*barrier.*)|(.*broadcast.*)|(.*get.*)|(.*put.*)',"performance_tests/micro_benchmarks/")
skipped = 0
timeout = 00:10:00
specify_module = Simple

#======================================================================
# Reporter phase
#======================================================================

[Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI
mttdatabase_username = intel
mttdatabase_password = &stringify(&cat("/home/common/mttpwd.txt"))
mttdatabase_platform = bend-rsh
mttdatabase_hostname = &env_hosts()
mttdatabase_url = https://mtt.open-mpi.org/submit/
mttdatabase_debug_filename = mttdb_debug_file
mttdatabase_keep_debug_files = 1
mttdatabase_debug_server = 1

#----------------------------------------------------------------------

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

# User-defined report headers/footers
textfile_summary_header = <<EOT
hostname: &shell("hostname")
uname: &shell("uname -a")
who am i: &shell("who am i")
EOT

textfile_summary_footer =
textfile_detail_header  =
textfile_detail_footer  =

textfile_textwrap = 78

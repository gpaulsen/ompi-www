<div dir="ltr"><br><br><div class="gmail_quote">On Tue, Apr 14, 2009 at 5:04 PM, Jeff Squyres <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
On Apr 13, 2009, at 2:08 PM, Mike Dubman wrote:<br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Hello Ethan,<br>
</blockquote>
<br>
Sorry for joining the discussion late... I was on travel last week and that always makes me waaay behind on my INBOX.  :-(<div class="im"><br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
On Mon, Apr 13, 2009 at 5:44 PM, Ethan Mallove &lt;<a href="mailto:ethan.mallove@sun.com" target="_blank">ethan.mallove@sun.com</a>&gt; wrote:<br>
<br>
Will this translate to something like<br>
lib/MTT/Reporter/GoogleDatabase.pm?  If we are to move away from the<br>
current MTT Postgres database, we want to be able to submit results to<br>
both the current MTT database and the new Google database during the<br>
transition period. Having a GoogleDatabase.pm would make this easier.<br>
<br>
I think we should keep both storage options: current postgress and datastore. The mtt changes will be minor to support datastore.<br>
Due that fact that google appengine API (as well as datastore API) can be python or java only, we will create external scripts to manipulate datastore objects:<br>
</blockquote>
<br></div>
Ah, good point (python/java not perl).  But I think that lib/MTT/Reporter/GoogleDataStore.pm could still be a good thing -- we have invested a lot of time/effort into getting our particular mtt clients setup just the way we want them, setting up INI files, submitting to batch schedulers, etc.<br>

<br>
A GoogleDataStore.pm reporter could well fork/exec a python/java executable to do the actual communication/storing of the data, right...?  More below.<div class="im"></div></blockquote><div><br>completely agree, once we have external python/java/cobol scripts to manipulate GDS objects, we should wrap it by perl and call from MTT in same way like it works today for submitting to the postgress.<br>
<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="im"><br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
The mtt will dump test results in xml format. Then, we provide two python (or java?) scripts:<br>
<br>
mtt-results-submit-to-datastore.py - script will be called at the end of mtt run and will read xml files, create objects and save to datastore<br>
</blockquote>
<br></div>
Could be pretty easy to have a Reporter/GDS.pm (I keep making that filename shorter, don&#39;t I? :-) ) that simply invokes the mtt-result-<a href="http://submit-to-datastore.pt" target="_blank">submit-to-datastore.pt</a> script on the xml that it dumped for that particular test.<br>

<br>
Specifically: I do like having partial results submitted while my MTT tests are running.  Cisco&#39;s testing cycle is about 24 hours, but groups of tests are finishing all the time, so it&#39;s good to see those results without having to wait the full 24 hours before anything shows up.  I guess that&#39;s my only comment on the idea of having a script that traverses the MTT scratch to find / submit everything -- I&#39;d prefer if we kept the same Reporter idea and used an underlying .py script to submit results as they become ready.<br>

<br>
Is this do-able?</blockquote><div><br>sounds good, we should introduce some guid (like pid) for mtt session, where all mtt results generated by this session will be referring to this guid.  Later we use this guid to submit partial results as they become ready and connect it to the appropriate mtt session object (see models.py)<br>
<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="im"><br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
mtt-results-query.py - sample script to query datastore and generate some simple visual/tabular reports. It will serve as tutorial for howto access mtt data from scripts for reporting.<br>
<br>
Later, we add another script to replace php web frontend. It will be hosted on google appengine machines and will provide web viewer for mtt results. (same way like index.php does today)<br>
</blockquote>
<br></div>
Sounds good.<div class="im"><br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
&gt;      b. mtt_save_to_db.py - script which will go over mtt scratch dir, find<br>
&gt;      all xml files generated for every mtt phase, parse it and save to<br>
&gt;      datastore, preserving test results relations,i.e. all test results will<br>
&gt;      be grouped by mtt general info: mpi version, name, date, ....<br>
&gt;<br>
&gt;      c. same script can scan, parse and save from xml files generated by<br>
&gt;      wrapper scripts for non mtt based executions (fluent, ..)<br>
<br>
I&#39;m confused here.  Can&#39;t MTT be outfitted to report results of a<br>
Fluent run?<br>
<br>
<br>
I think we can enhance mtt to be not only mpi testing platform, but also to serve as mpi benchmarking platform. We can use datastore to keep mpi-based benchmarking results in the same manner like mtt does for testing results. (no changes to mtt required for that, it is just a side effect of using datastore to keep data of any type)<br>

</blockquote>
<br></div>
I think that Ethan was asking was: can&#39;t MTT run Fluent and then use the normal Reporter mechanism to report the results into whatever back-end data store we have?  (postgres or GDS)<br>
</blockquote><div><br><br>ahhh, okie, i see.<br><br>Correct me if Im wrong, the current mtt implementation allows following way of executing mpi test:<br>/path/to/mpirun &lt;mpirun options&gt; &lt;test&gt;<br><br>Many mpi based applications have embedded MPI libraries and non-standard way to start it, one should set env variable to point to desired mpi installation or pass it as cmd line argument, for example:<br>
<br>for fluent:<br><br>export OPENMPI_ROOT=/path/to/openmpi<br>fluent &lt;cmd line args&gt;<br><br><br>for pamcrash:<br>pamworld -np 2 -mpidir=/path/to/openmpi/dir ....<br><br>Im not sure if it is possible to express that execution semantic in mtt ini file. Please suggest.<br>
So far, it seems that such executions can be handled externally from mtt but using same object model.<br><br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
I can see the value of both sides -- a) using the MTT client as the gateway to *all* data storage, or b) making MTT but one (possibly of many) tools that can write into the GDS.  a) certainly is more attractive towards having a common data format back in GDS such that a single web tool is capable of reporting from the data and being able to make conherent sense out of the data (vs. 3rd party tools that put data back in GDS that may not be in exactly the same format / layout and therefore our web reporter may not be able to make sense out of the data and report on it).<br>

<br>
I think that having a Reporter/GDS.pm that system()&#39;s the back-end python script gives the best of both worlds -- the MTT client can [continue to] submit results in the normal way, but there&#39;s also a standalone script that can submit results from external tool runs (e.g., manually running Fluent, parsing the results, and submitting to our GDS).  And hopefully the back-end python script will enforce a specific structure to the data that is submitted so that all tools -- MTT and any 3rd party tools -- adhere to the same format and the reporter can therefore report on it coherently.<br>

</blockquote><div><br><br>agree. (a) is a preferred form. (b) can be used for tools that cannot be called from mtt.<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
For the attachment...<br>
<br>
I can &quot;sorta read&quot; python, but I&#39;m not familiar with its intricacies and its internal APIs.<br>
<br>
- models.py: looks good.  I don&#39;t know if *all* the fields we have are listed here; it looks fairly short to me.  Did you attempt to include all of the fields we submit through the various phases in Reporter are there, or did you intentionally leave some out?  (I honestly haven&#39;t checked; it just &quot;feels short&quot; to me compared to our SQL schema).</blockquote>
<div><br>I listed only some of the fields in every object representing specific test result source (called phase in mtt language). This is because every test result source object is derived from python provided db.Expando class. This gives us great flexibility, like adding dynamic attributes for every objects, for example:<br>
<br>obj = new MttBuildPhaseResult()<br>obj.my_favorite_dynamic_key = &quot;hello&quot;<br>obj.my_another_dynamic_key = 7<br><br>So, we can have all phase attributes in the phase object without defining it in the *sql schema way*. Also we can query object model by these dynamic keys.<br>
<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
<br>
--&gt; meta question: is it in the zen of GDS to not have too many index fields like you would in SQL?  I.e., if you want to do an operation on GDS that you </blockquote><div><br>as far as it seems now, gds creates indexes automatically and also provides API to define indexes manually. <br>
</div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">would typically use an SQL index field for, is the idea that you would do a map/reduce to select the data instead of an index field?<br>

</blockquote><div><br>yep. seems correct.<br><br><br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
- start_datastore.sh: hmm.  This script seems to imply that the datastore is *local*!  Don&#39;t we have to HTTP submit the results to Google?  More specifically: what is dev_appserver.py?  Is that, perchance, just a local proxy agent that will end up submitting our data to $datastore_path, which actually resides at Google?  Do we have to use a specific google username/URL to submit (and query) results?<br>

</blockquote><div><br><br>You need to download google`s sdk (dev_appserver.py is a part of it). In order to develop for gds you  run your code inside sdk locally, and when feel comfortable with it - you upload it to the google cluster. In order to run attached example, you need to download sdk, put it in the following dir hierarchy:<br>
<br>somedir/sdk<br>somedir/vbench-dev<br><br>and run start_datastore.sh, which will run local instance of GDS on your machine.Then in another shell you need to run vbech-dev.py, which simulates mtt client accessing GDS, storing some objects in according to proposed models and then running some sql-like quires to fetch and manipulate results.<br>
<br>see <a href="http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html">http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html</a><br><br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
- there&#39;s no comments in vbench-dev.py -- can you explain what&#39;s going on in there?  Can you explain how we would use these scripts?<br>
</blockquote><div><br>This is a mtt simulator, it implements google appengine API to receive HTTP requests and call appropriate callbacks. (there is a map of specific urls to callbacks).<br><br>The main callback (which intercepts http GET requests to specific URL) runs the test code which creates objects defined in models.py, groups many test results into MTTSession and they run some queries to access previously created objects.<br>
<br>The real mtt client will use URL pointing to MTT python code running at google`s cluster, and use near same code to create/query/manipulate objects defined in models.py.<br><br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
- it *looks* like these scripts are for storing data out in the GDS.  Have you looked at the querying side?  Do we know that storing data in the form you listed in models.py are easily retrievable in the ways that we want?  E.g., can you mock up queries that resemble the queries we currently have in our web-based query system today, just to show that storing the data in this way will actually allow us to do the kinds of queries that we want to do?<br>

</blockquote><div><br>I think vbench-dev.py shows some querying capabilities for stored objects, there are many ways to query objects by object CLASS and Attributes.<br>see many examples here:<br><br>see <a href="http://code.google.com/appengine/docs/python/gettingstarted/usingdatastore.html">http://code.google.com/appengine/docs/python/gettingstarted/usingdatastore.html</a> for more querying examples we can use.<br>
<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
In short: I think I&#39;m missing much of the back-story / rationale of how the scripts in your tarball work / are to be used.<br>
<br>
BTW -- if it&#39;s useful to have a teleconference about this kind of stuff, I can host a WebEx meeting.  WebEx has local dialins around the world, including Israel...<br><font color="#888888">
</font></blockquote><div><br><br>sure, what about next week?<br> <br><br>regards<br><br>Mike<br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<font color="#888888"><br>
-- <br>
Jeff Squyres<br>
Cisco Systems<br>
<br>
</font></blockquote></div><br></div>


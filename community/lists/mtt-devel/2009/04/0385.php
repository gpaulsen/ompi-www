<?
$subject_val = "Re: [MTT devel] GSOC application";
include("../../include/msg-header.inc");
?>
<!-- received="Tue Apr 14 20:51:36 2009" -->
<!-- isoreceived="20090415005136" -->
<!-- sent="Tue, 14 Apr 2009 20:51:29 -0400" -->
<!-- isosent="20090415005129" -->
<!-- name="Jeff Squyres" -->
<!-- email="jsquyres_at_[hidden]" -->
<!-- subject="Re: [MTT devel] GSOC application" -->
<!-- id="0C80CB0F-CDBD-4853-886C-B8968A170BFE_at_cisco.com" -->
<!-- charset="US-ASCII" -->
<!-- inreplyto="b20b52800904141127rffb0addid098c43730567796_at_mail.gmail.com" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> Re: [MTT devel] GSOC application<br>
<strong>From:</strong> Jeff Squyres (<em>jsquyres_at_[hidden]</em>)<br>
<strong>Date:</strong> 2009-04-14 20:51:29
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0386.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0384.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0383.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0387.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0387.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0392.php">Josh Hursey: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
On Apr 14, 2009, at 2:27 PM, Mike Dubman wrote:
<br>
<p><span class="quotelev1">&gt; Ah, good point (python/java not perl).  But I think that lib/MTT/ 
</span><br>
<span class="quotelev1">&gt; Reporter/GoogleDataStore.pm could still be a good thing -- we have  
</span><br>
<span class="quotelev1">&gt; invested a lot of time/effort into getting our particular mtt  
</span><br>
<span class="quotelev1">&gt; clients setup just the way we want them, setting up INI files,  
</span><br>
<span class="quotelev1">&gt; submitting to batch schedulers, etc.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; A GoogleDataStore.pm reporter could well fork/exec a python/java  
</span><br>
<span class="quotelev1">&gt; executable to do the actual communication/storing of the data,  
</span><br>
<span class="quotelev1">&gt; right...?  More below.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; completely agree, once we have external python/java/cobol scripts to  
</span><br>
<span class="quotelev1">&gt; manipulate GDS objects, we should wrap it by perl and call from MTT  
</span><br>
<span class="quotelev1">&gt; in same way like it works today for submitting to the postgress.
</span><br>
<p>So say we all!  :-)
<br>
<p>(did they show Battlestar Gallactica in Israel?  :-) )
<br>
<p><span class="quotelev1">&gt; sounds good, we should introduce some guid (like pid) for mtt  
</span><br>
<span class="quotelev1">&gt; session, where all mtt results generated by this session will be  
</span><br>
<span class="quotelev1">&gt; referring to this guid.  Later we use this guid to submit partial  
</span><br>
<span class="quotelev1">&gt; results as they become ready and connect it to the appropriate mtt  
</span><br>
<span class="quotelev1">&gt; session object (see models.py)
</span><br>
<p>I *believe* have have 2 values like this in the MTT client already:
<br>
<p>- an ID that represents a single MTT client run
<br>
- an ID that represents a single MTT mpi install-&gt;test build-&gt;test run  
<br>
tree
<br>
<p><span class="quotelev1">&gt; I think that Ethan was asking was: can't MTT run Fluent and then use  
</span><br>
<span class="quotelev1">&gt; the normal Reporter mechanism to report the results into whatever  
</span><br>
<span class="quotelev1">&gt; back-end data store we have?  (postgres or GDS)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; ahhh, okie, i see.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Correct me if Im wrong, the current mtt implementation allows  
</span><br>
<span class="quotelev1">&gt; following way of executing mpi test:
</span><br>
<span class="quotelev1">&gt; /path/to/mpirun &lt;mpirun options&gt; &lt;test&gt;
</span><br>
<p>Yes and no; it's controlled by the mpi details section, right?  You  
<br>
can put whatever you want in there.
<br>
<p><span class="quotelev1">&gt; Many mpi based applications have embedded MPI libraries and non- 
</span><br>
<span class="quotelev1">&gt; standard way to start it, one should set env variable to point to  
</span><br>
<span class="quotelev1">&gt; desired mpi installation or pass it as cmd line argument, for example:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; for fluent:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; export OPENMPI_ROOT=/path/to/openmpi
</span><br>
<span class="quotelev1">&gt; fluent &lt;cmd line args&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; for pamcrash:
</span><br>
<span class="quotelev1">&gt; pamworld -np 2 -mpidir=/path/to/openmpi/dir ....
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Im not sure if it is possible to express that execution semantic in  
</span><br>
<span class="quotelev1">&gt; mtt ini file. Please suggest.
</span><br>
<span class="quotelev1">&gt; So far, it seems that such executions can be handled externally from  
</span><br>
<span class="quotelev1">&gt; mtt but using same object model.
</span><br>
<p>Understood.  I think you *could* get MTT to run these with specialized  
<br>
mpi details sections.  But it may or may not be worth it.
<br>
<p><span class="quotelev1">&gt; For the attachment...
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I can &quot;sorta read&quot; python, but I'm not familiar with its intricacies  
</span><br>
<span class="quotelev1">&gt; and its internal APIs.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; - models.py: looks good.  I don't know if *all* the fields we have  
</span><br>
<span class="quotelev1">&gt; are listed here; it looks fairly short to me.  Did you attempt to  
</span><br>
<span class="quotelev1">&gt; include all of the fields we submit through the various phases in  
</span><br>
<span class="quotelev1">&gt; Reporter are there, or did you intentionally leave some out?  (I  
</span><br>
<span class="quotelev1">&gt; honestly haven't checked; it just &quot;feels short&quot; to me compared to  
</span><br>
<span class="quotelev1">&gt; our SQL schema).
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I listed only some of the fields in every object representing  
</span><br>
<span class="quotelev1">&gt; specific test result source (called phase in mtt language).
</span><br>
<p>Ok.  So that's only a sample -- just showing an example, not  
<br>
necessarily trying to be complete.  Per Ethan's comments, there are a  
<br>
bunch of other fields that we have and/or we might just be able to  
<br>
&quot;tie them together&quot; in GDS.  I.e., our data is hierarchical -- it  
<br>
worked well enough in SQL because you could just have one record about  
<br>
a test build refer to another record about the corresponding mpi  
<br>
install.  And so on.  Can we do something similar in GDS?
<br>
<p><span class="quotelev1">&gt; This is because every test result source object is derived from  
</span><br>
<span class="quotelev1">&gt; python provided db.Expando class. This gives us great flexibility,  
</span><br>
<span class="quotelev1">&gt; like adding dynamic attributes for every objects, for example:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; obj = new MttBuildPhaseResult()
</span><br>
<span class="quotelev1">&gt; obj.my_favorite_dynamic_key = &quot;hello&quot;
</span><br>
<span class="quotelev1">&gt; obj.my_another_dynamic_key = 7
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; So, we can have all phase attributes in the phase object without  
</span><br>
<span class="quotelev1">&gt; defining it in the *sql schema way*. Also we can query object model  
</span><br>
<span class="quotelev1">&gt; by these dynamic keys.
</span><br>
<p>Hmm.  Ok, so you're saying that we define a &quot;phase object&quot; (for each  
<br>
phase) with all the fields that we expect to have, but if we need to,  
<br>
we can create fields on the fly, and google will just &quot;do the right  
<br>
thing&quot; and associate *all* the data (the &quot;expected&quot; fields and the  
<br>
&quot;dynamic&quot; fields) together?
<br>
<p><span class="quotelev1">&gt; --&gt; meta question: is it in the zen of GDS to not have too many  
</span><br>
<span class="quotelev1">&gt; index fields like you would in SQL?  I.e., if you want to do an  
</span><br>
<span class="quotelev1">&gt; operation on GDS that you
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; as far as it seems now, gds creates indexes automatically and also  
</span><br>
<span class="quotelev1">&gt; provides API to define indexes manually.
</span><br>
<span class="quotelev1">&gt; would typically use an SQL index field for, is the idea that you  
</span><br>
<span class="quotelev1">&gt; would do a map/reduce to select the data instead of an index field?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; yep. seems correct.
</span><br>
<p>K.
<br>
<p><span class="quotelev1">&gt; - start_datastore.sh: hmm.  This script seems to imply that the  
</span><br>
<span class="quotelev1">&gt; datastore is *local*!  Don't we have to HTTP submit the results to  
</span><br>
<span class="quotelev1">&gt; Google?  More specifically: what is dev_appserver.py?  Is that,  
</span><br>
<span class="quotelev1">&gt; perchance, just a local proxy agent that will end up submitting our  
</span><br>
<span class="quotelev1">&gt; data to $datastore_path, which actually resides at Google?  Do we  
</span><br>
<span class="quotelev1">&gt; have to use a specific google username/URL to submit (and query)  
</span><br>
<span class="quotelev1">&gt; results?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; You need to download google`s sdk (dev_appserver.py is a part of  
</span><br>
<span class="quotelev1">&gt; it). In order to develop for gds you  run your code inside sdk  
</span><br>
<span class="quotelev1">&gt; locally, and when feel comfortable with it - you upload it to the  
</span><br>
<span class="quotelev1">&gt; google cluster. In order to run attached example, you need to  
</span><br>
<span class="quotelev1">&gt; download sdk, put it in the following dir hierarchy:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; somedir/sdk
</span><br>
<span class="quotelev1">&gt; somedir/vbench-dev
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; and run start_datastore.sh, which will run local instance of GDS on  
</span><br>
<span class="quotelev1">&gt; your machine.Then in another shell you need to run vbech-dev.py,  
</span><br>
<span class="quotelev1">&gt; which simulates mtt client accessing GDS, storing some objects in  
</span><br>
<span class="quotelev1">&gt; according to proposed models and then running some sql-like quires  
</span><br>
<span class="quotelev1">&gt; to fetch and manipulate results.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; see <a href="http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html">http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html</a>
</span><br>
<p>Ah, I see.  Makes sense.
<br>
<p><span class="quotelev1">&gt; - there's no comments in vbench-dev.py -- can you explain what's  
</span><br>
<span class="quotelev1">&gt; going on in there?  Can you explain how we would use these scripts?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; This is a mtt simulator, it implements google appengine API to  
</span><br>
<span class="quotelev1">&gt; receive HTTP requests and call appropriate callbacks. (there is a  
</span><br>
<span class="quotelev1">&gt; map of specific urls to callbacks).
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; The main callback (which intercepts http GET requests to specific  
</span><br>
<span class="quotelev1">&gt; URL) runs the test code which creates objects defined in models.py,  
</span><br>
<span class="quotelev1">&gt; groups many test results into MTTSession and they run some queries  
</span><br>
<span class="quotelev1">&gt; to access previously created objects.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; The real mtt client will use URL pointing to MTT python code running  
</span><br>
<span class="quotelev1">&gt; at google`s cluster, and use near same code to create/query/ 
</span><br>
<span class="quotelev1">&gt; manipulate objects defined in models.py.
</span><br>
<p>Ok.  But this code should really be intercepting PUT (or POST)  
<br>
requests, not GET, right?
<br>
<p>I ask because the MTT client currently POST's the data to send it via  
<br>
HTTP to the remote server.
<br>
<p><span class="quotelev1">&gt; - it *looks* like these scripts are for storing data out in the  
</span><br>
<span class="quotelev1">&gt; GDS.  Have you looked at the querying side?  Do we know that storing  
</span><br>
<span class="quotelev1">&gt; data in the form you listed in models.py are easily retrievable in  
</span><br>
<span class="quotelev1">&gt; the ways that we want?  E.g., can you mock up queries that resemble  
</span><br>
<span class="quotelev1">&gt; the queries we currently have in our web-based query system today,  
</span><br>
<span class="quotelev1">&gt; just to show that storing the data in this way will actually allow  
</span><br>
<span class="quotelev1">&gt; us to do the kinds of queries that we want to do?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I think vbench-dev.py shows some querying capabilities for stored  
</span><br>
<span class="quotelev1">&gt; objects, there are many ways to query objects by object CLASS and  
</span><br>
<span class="quotelev1">&gt; Attributes.
</span><br>
<span class="quotelev1">&gt; see many examples here:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; see <a href="http://code.google.com/appengine/docs/python/gettingstarted/usingdatastore.html">http://code.google.com/appengine/docs/python/gettingstarted/usingdatastore.html</a> 
</span><br>
<span class="quotelev1">&gt;  for more querying examples we can use.
</span><br>
<p>Ok.
<br>
<p>My only point is that we might want to think a little about the  
<br>
queries we want to do when designing the interfaces to stuff all the  
<br>
data into the GDS -- it may be helpful to have *some* structure to the  
<br>
data that goes into GDS if it helps the queries that we ultimately  
<br>
want to do.
<br>
<p>Do you want to try making queries for the data that you're shoving  
<br>
into GDS that simulate some of the same queries that we can perform  
<br>
today?  This will just help validate a) that we can move current  
<br>
functionality up to GDS, and b) we can easily make up some new queries  
<br>
that we *can't* easily do on postgres today -- it might be fun/useful  
<br>
to see if GDS can handle such queries.
<br>
<p>Maybe the first goal should be -- once you guys get a good  
<br>
understanding of using GDS -- will be to have an MTT Reporter that we  
<br>
can all start using to start stuffing data into GDS.  Once we have a  
<br>
bit of data out there, you can start trying to query the data and see  
<br>
what kinds of capabilities the query side has. Since we have basically  
<br>
limitless ability to generate data to submit into GDS :-), if we screw  
<br>
up the first few model definitions and end up wiping the data and  
<br>
starting over during this development process, it's no big deal --  
<br>
just wait one day and the GDS will be populated again with new data  
<br>
from our MTT runs.  :-)
<br>
<p>What do you think?
<br>
<p><span class="quotelev1">&gt; In short: I think I'm missing much of the back-story / rationale of  
</span><br>
<span class="quotelev1">&gt; how the scripts in your tarball work / are to be used.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; BTW -- if it's useful to have a teleconference about this kind of  
</span><br>
<span class="quotelev1">&gt; stuff, I can host a WebEx meeting.  WebEx has local dialins around  
</span><br>
<span class="quotelev1">&gt; the world, including Israel...
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; sure, what about next week?
</span><br>
<p>I have a Doodle account -- let's try that to do the scheduling:
<br>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://doodle.com/gzpgaun2ef4szt29">http://doodle.com/gzpgaun2ef4szt29</a>
<br>
<p>Ethan, Josh, and I are all in US Eastern timezone (I don't know if  
<br>
Josh will participate), so that might make scheduling *slightly*  
<br>
easier.  I started timeslots at 8am US Eastern and stopped as 2pm US  
<br>
Eastern -- that's already pretty late in Israel.  I also didn't list  
<br>
Friday, since that's the weekend in Israel.
<br>
<p><pre>
-- 
Jeff Squyres
Cisco Systems
</pre>
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0386.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0384.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0383.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0387.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0387.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0392.php">Josh Hursey: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

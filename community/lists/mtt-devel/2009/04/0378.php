<?
$subject_val = "Re: [MTT devel] GSOC application";
include("../../include/msg-header.inc");
?>
<!-- received="Mon Apr 13 09:15:28 2009" -->
<!-- isoreceived="20090413131528" -->
<!-- sent="Mon, 13 Apr 2009 16:15:23 +0300" -->
<!-- isosent="20090413131523" -->
<!-- name="Mike Dubman" -->
<!-- email="mike.ompi_at_[hidden]" -->
<!-- subject="Re: [MTT devel] GSOC application" -->
<!-- id="b20b52800904130615t35c760ecp5564cc7ecbdbc9bd_at_mail.gmail.com" -->
<!-- charset="ISO-8859-1" -->
<!-- inreplyto="b20b52800904060654m7b70fd8dvb18ef0e9fab8e136_at_mail.gmail.com" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> Re: [MTT devel] GSOC application<br>
<strong>From:</strong> Mike Dubman (<em>mike.ompi_at_[hidden]</em>)<br>
<strong>Date:</strong> 2009-04-13 09:15:23
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0377.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0377.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
Hello Guys,
<br>
<p>Please comment on the proposed object model and flows. We will have 1-2 ppl
<br>
working on this in a 2-3w. Till that moment I would like to finalize the
<br>
scope and flows.
<br>
<p>Thanks
<br>
<p>Mike.
<br>
<p><p>On Mon, Apr 6, 2009 at 4:54 PM, Mike Dubman &lt;mike.ompi_at_[hidden]&gt; wrote:
<br>
<p><span class="quotelev1">&gt; Hello Guys,
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I have played a bit with google datastore and here is a proposal for mtt DB
</span><br>
<span class="quotelev1">&gt; infra and some accompanying tools for submission and querying:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; 1. Scope and requirements
</span><br>
<span class="quotelev1">&gt; ====================
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; a. provide storage services for storing test results generated by mtt.
</span><br>
<span class="quotelev1">&gt; Storage services will be implemented over datastore.
</span><br>
<span class="quotelev1">&gt; b. provide storage services for storing benchmarking results generated by
</span><br>
<span class="quotelev1">&gt; various mpi based applications  (not mtt based, for example: fluent,
</span><br>
<span class="quotelev1">&gt; openfoam)
</span><br>
<span class="quotelev1">&gt; c. test or benchmarking results stored in the datastore can be grouped and
</span><br>
<span class="quotelev1">&gt; referred as a group (for example: mtt execution can generate many mtt
</span><br>
<span class="quotelev1">&gt; results consisting of different phases. This mtt execution will be referred
</span><br>
<span class="quotelev1">&gt; as a session)
</span><br>
<span class="quotelev1">&gt; d. Benchmarking and test results which are generated by mtt or any other
</span><br>
<span class="quotelev1">&gt; mpi based applications, can be stored in the datastore and grouped by some
</span><br>
<span class="quotelev1">&gt; logical criteria.
</span><br>
<span class="quotelev1">&gt; e. The mtt should not depend or call directly any datastore`s provided
</span><br>
<span class="quotelev1">&gt; APIs. The mtt client (or framework/scripts executing mpi based applications)
</span><br>
<span class="quotelev1">&gt; should generate test/benchmarking results in some internal format, which
</span><br>
<span class="quotelev1">&gt; will be processed later by external tools. These external tools will be
</span><br>
<span class="quotelev1">&gt; responsible for saving test results in the datastore. Same rules should be
</span><br>
<span class="quotelev1">&gt; applied for non mtt based executions of mpi-based applications (line fluent,
</span><br>
<span class="quotelev1">&gt; openfoam,...). The scripts which are wrapping such executions will dump
</span><br>
<span class="quotelev1">&gt; benchmarking results in some internal form for later processing by external
</span><br>
<span class="quotelev1">&gt; tools.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; f. The internal form for representation of test/benchmarking results can be
</span><br>
<span class="quotelev1">&gt; XML. The external tool will receive (as cmd line params) XML files, process
</span><br>
<span class="quotelev1">&gt; them and save to the datastore.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; d. The external tools will be familiar with datastore object model and will
</span><br>
<span class="quotelev1">&gt; provide bridge between test results (XML) and actual datastore.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; 2. Flow and use-cases
</span><br>
<span class="quotelev1">&gt; =================
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; a. The mtt client will dump all test related information into XML file. The
</span><br>
<span class="quotelev1">&gt; file will be created for every phase executed by mtt. (today there are many
</span><br>
<span class="quotelev1">&gt; summary txt and html files generated for every test phase, it is pretty easy
</span><br>
<span class="quotelev1">&gt; to add xml generation of the same information)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; b. mtt_save_to_db.py - script which will go over mtt scratch dir, find all
</span><br>
<span class="quotelev1">&gt; xml files generated for every mtt phase, parse it and save to datastore,
</span><br>
<span class="quotelev1">&gt; preserving test results relations,i.e. all test results will be grouped by
</span><br>
<span class="quotelev1">&gt; mtt general info: mpi version, name, date, ....
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; c. same script can scan, parse and save from xml files generated by wrapper
</span><br>
<span class="quotelev1">&gt; scripts for non mtt based executions (fluent, ..)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; d. mtt_query_db.py script will be provided with basic query capabilities
</span><br>
<span class="quotelev1">&gt; over proposed datastore object model. Most users will prefer writing custom
</span><br>
<span class="quotelev1">&gt; sql-like select queries for fetching results.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; 3. Important notes:
</span><br>
<span class="quotelev1">&gt; ==============
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; a. The single mtt client execution generates many result files, every
</span><br>
<span class="quotelev1">&gt; generated file represents test phase. This file contains test results and
</span><br>
<span class="quotelev1">&gt; can be characterized as a set of attributes with its values. Every test
</span><br>
<span class="quotelev1">&gt; phase has its own attributes which are differ for different phases. For
</span><br>
<span class="quotelev1">&gt; example: attributes for TestBuild phase has keys &quot;compiler_name,
</span><br>
<span class="quotelev1">&gt; compiler_version&quot;, the MPIInstall phase has attributes: prefix_dir, arch,
</span><br>
<span class="quotelev1">&gt; ....
</span><br>
<span class="quotelev1">&gt; Hence, most of the datastore objects representing phases of MTT  are
</span><br>
<span class="quotelev1">&gt; derived from &quot;db.Expando&quot; model, which allows having dynamic attributes for
</span><br>
<span class="quotelev1">&gt; its derived sub-classes.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; The attached is archive with a simple test for using datastore for mtt.
</span><br>
<span class="quotelev1">&gt; Please see models.py file with proposed object model and comment.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; You can run the attached example in the google datastore dev environment. (
</span><br>
<span class="quotelev1">&gt; <a href="http://code.google.com/appengine/downloads.html">http://code.google.com/appengine/downloads.html</a>)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Please comment.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Thanks
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Mike
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; On Tue, Mar 24, 2009 at 12:17 AM, Jeff Squyres &lt;jsquyres_at_[hidden]&gt; wrote:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev2">&gt;&gt; On Mar 23, 2009, at 9:05 AM, Ethan Mallove wrote:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;   -------------------+---------------------+----------
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  Resource           | Unit                | Unit cost
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  -------------------+---------------------+----------
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  Outgoing Bandwidth | gigabytes           | $0.12
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  Incoming Bandwidth | gigabytes           | $0.10
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  CPU Time           | CPU hours           | $0.10
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  Stored Data        | gigabytes per month | $0.15
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  Recipients Emailed | recipients          | $0.0001
</span><br>
<span class="quotelev3">&gt;&gt;&gt;  -------------------+---------------------+----------
</span><br>
<span class="quotelev3">&gt;&gt;&gt;
</span><br>
<span class="quotelev3">&gt;&gt;&gt; Would we itemize the MTT bill on a per user basis?  E.g., orgs that
</span><br>
<span class="quotelev3">&gt;&gt;&gt; use MTT more, would have to pay more?
</span><br>
<span class="quotelev3">&gt;&gt;&gt;
</span><br>
<span class="quotelev3">&gt;&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; Let's assume stored data == incoming bandwidth, because we never throw
</span><br>
<span class="quotelev2">&gt;&gt; anything away.  And let's go with the SWAG of 100GB.  We may or may not be
</span><br>
<span class="quotelev2">&gt;&gt; able to gzip the data uploading to the server.  So if anything, we *might*
</span><br>
<span class="quotelev2">&gt;&gt; be able to decrease the incoming data and have higher level of stored data.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; I anticipate our outgoing data to be significantly less, particularly if
</span><br>
<span class="quotelev2">&gt;&gt; we can gzip the outgoing data (which I think we can).  You're right, CPU
</span><br>
<span class="quotelev2">&gt;&gt; time is a mystery -- we won't know what it will be until we start running
</span><br>
<span class="quotelev2">&gt;&gt; some queries to see what happens.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; 100GB * $0.10 = $10
</span><br>
<span class="quotelev2">&gt;&gt; 100GB * $0.15 = $15
</span><br>
<span class="quotelev2">&gt;&gt; total = $25 for the first month
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; So let's SWAG at $25/mo for a year = $300.  This number will be wrong for
</span><br>
<span class="quotelev2">&gt;&gt; several reasons, but it at least gives us a ballpark.  For $300/year, I
</span><br>
<span class="quotelev2">&gt;&gt; think we (the OMPI project) can find a way to pay for this fairly easily.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; --
</span><br>
<span class="quotelev2">&gt;&gt; Jeff Squyres
</span><br>
<span class="quotelev2">&gt;&gt; Cisco Systems
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; _______________________________________________
</span><br>
<span class="quotelev2">&gt;&gt; mtt-devel mailing list
</span><br>
<span class="quotelev2">&gt;&gt; mtt-devel_at_[hidden]
</span><br>
<span class="quotelev2">&gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a>
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p><hr>
<ul>
<li>text/html attachment: <a href="http://www.open-mpi.org/community/lists/mtt-devel/att-0378/attachment">attachment</a>
</ul>
<!-- attachment="attachment" -->
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0377.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0377.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

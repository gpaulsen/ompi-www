<?
$subject_val = "Re: [MTT devel] GSOC application";
include("../../include/msg-header.inc");
?>
<!-- received="Mon Apr 13 10:44:39 2009" -->
<!-- isoreceived="20090413144439" -->
<!-- sent="Mon, 13 Apr 2009 10:44:33 -0400" -->
<!-- isosent="20090413144433" -->
<!-- name="Ethan Mallove" -->
<!-- email="ethan.mallove_at_[hidden]" -->
<!-- subject="Re: [MTT devel] GSOC application" -->
<!-- id="20090413144433.GD26926_at_sun.com" -->
<!-- charset="us-ascii" -->
<!-- inreplyto="b20b52800904130615t35c760ecp5564cc7ecbdbc9bd_at_mail.gmail.com" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> Re: [MTT devel] GSOC application<br>
<strong>From:</strong> Ethan Mallove (<em>ethan.mallove_at_[hidden]</em>)<br>
<strong>Date:</strong> 2009-04-13 10:44:33
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0380.php">Mike Dubman: "[MTT devel] Fwd:  GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0378.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0378.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0381.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0381.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
On Mon, Apr/13/2009 04:15:23PM, Mike Dubman wrote:
<br>
<span class="quotelev1">&gt;    Hello Guys,
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;    Please comment on the proposed object model and flows. We will have 1-2
</span><br>
<span class="quotelev1">&gt;    ppl working on this in a 2-3w. Till that moment I would like to finalize
</span><br>
<span class="quotelev1">&gt;    the scope and flows.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;    Thanks
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;    Mike.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;    On Mon, Apr 6, 2009 at 4:54 PM, Mike Dubman &lt;mike.ompi_at_[hidden]&gt; wrote:
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      Hello Guys,
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      I have played a bit with google datastore and here is a proposal for mtt
</span><br>
<span class="quotelev1">&gt;      DB infra and some accompanying tools for submission and querying:
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      1. Scope and requirements
</span><br>
<span class="quotelev1">&gt;      ====================
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      a. provide storage services for storing test results generated by mtt.
</span><br>
<span class="quotelev1">&gt;      Storage services will be implemented over datastore.
</span><br>
<span class="quotelev1">&gt;      b. provide storage services for storing benchmarking results generated
</span><br>
<span class="quotelev1">&gt;      by various mpi based applications* (not mtt based, for example: fluent,
</span><br>
<span class="quotelev1">&gt;      openfoam)
</span><br>
<span class="quotelev1">&gt;      c. test or benchmarking results stored in the datastore can be grouped
</span><br>
<span class="quotelev1">&gt;      and referred as a group (for example: mtt execution can generate many
</span><br>
<span class="quotelev1">&gt;      mtt results consisting of different phases. This mtt execution will be
</span><br>
<span class="quotelev1">&gt;      referred as a session)
</span><br>
<span class="quotelev1">&gt;      d. Benchmarking and test results which are generated by mtt or any other
</span><br>
<span class="quotelev1">&gt;      mpi based applications, can be stored in the datastore and grouped by
</span><br>
<span class="quotelev1">&gt;      some logical criteria.
</span><br>
<span class="quotelev1">&gt;      e. The mtt should not depend or call directly any datastore`s provided
</span><br>
<span class="quotelev1">&gt;      APIs. The mtt client (or framework/scripts executing mpi based
</span><br>
<span class="quotelev1">&gt;      applications) should generate test/benchmarking results in some internal
</span><br>
<span class="quotelev1">&gt;      format, which will be processed later by external tools. These external
</span><br>
<span class="quotelev1">&gt;      tools will be responsible for saving test results in the datastore. Same
</span><br>
<span class="quotelev1">&gt;      rules should be applied for non mtt based executions of mpi-based
</span><br>
<span class="quotelev1">&gt;      applications (line fluent, openfoam,...). The scripts which are wrapping
</span><br>
<span class="quotelev1">&gt;      such executions will dump benchmarking results in some internal form for
</span><br>
<span class="quotelev1">&gt;      later processing by external tools.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      f. The internal form for representation of test/benchmarking results can
</span><br>
<span class="quotelev1">&gt;      be XML. The external tool will receive (as cmd line params) XML files,
</span><br>
<span class="quotelev1">&gt;      process them and save to the datastore.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      d. The external tools will be familiar with datastore object model and
</span><br>
<span class="quotelev1">&gt;      will provide bridge between test results (XML) and actual datastore.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      2. Flow and use-cases
</span><br>
<span class="quotelev1">&gt;      =================
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      a. The mtt client will dump all test related information into XML file.
</span><br>
<span class="quotelev1">&gt;      The file will be created for every phase executed by mtt. (today there
</span><br>
<span class="quotelev1">&gt;      are many summary txt and html files generated for every test phase, it
</span><br>
<span class="quotelev1">&gt;      is pretty easy to add xml generation of the same information)
</span><br>
<p><p>Will this translate to something like
<br>
lib/MTT/Reporter/GoogleDatabase.pm?  If we are to move away from the
<br>
current MTT Postgres database, we want to be able to submit results to
<br>
both the current MTT database and the new Google database during the
<br>
transition period. Having a GoogleDatabase.pm would make this easier.
<br>
<p><span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      b. mtt_save_to_db.py - script which will go over mtt scratch dir, find
</span><br>
<span class="quotelev1">&gt;      all xml files generated for every mtt phase, parse it and save to
</span><br>
<span class="quotelev1">&gt;      datastore, preserving test results relations,i.e. all test results will
</span><br>
<span class="quotelev1">&gt;      be grouped by mtt general info: mpi version, name, date, ....
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      c. same script can scan, parse and save from xml files generated by
</span><br>
<span class="quotelev1">&gt;      wrapper scripts for non mtt based executions (fluent, ..)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p>I'm confused here.  Can't MTT be outfitted to report results of a
<br>
Fluent run?
<br>
<p><p><span class="quotelev1">&gt;      d. mtt_query_db.py script will be provided with basic query capabilities
</span><br>
<span class="quotelev1">&gt;      over proposed datastore object model. Most users will prefer writing
</span><br>
<span class="quotelev1">&gt;      custom sql-like select queries for fetching results.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      3. Important notes:
</span><br>
<span class="quotelev1">&gt;      ==============
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      a. The single mtt client execution generates many result files, every
</span><br>
<span class="quotelev1">&gt;      generated file represents test phase. This file contains test results
</span><br>
<span class="quotelev1">&gt;      and can be characterized as a set of attributes with its values. Every
</span><br>
<span class="quotelev1">&gt;      test phase has its own attributes which are differ for different phases.
</span><br>
<span class="quotelev1">&gt;      For example: attributes for TestBuild phase has keys &quot;compiler_name,
</span><br>
<span class="quotelev1">&gt;      compiler_version&quot;, the MPIInstall phase has attributes: prefix_dir,
</span><br>
<span class="quotelev1">&gt;      arch, ....
</span><br>
<span class="quotelev1">&gt;      Hence, most of the datastore objects representing phases of MTT* are
</span><br>
<span class="quotelev1">&gt;      derived from &quot;db.Expando&quot; model, which allows having dynamic attributes
</span><br>
<span class="quotelev1">&gt;      for its derived sub-classes.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      The attached is archive with a simple test for using datastore for mtt.
</span><br>
<span class="quotelev1">&gt;      Please see models.py file with proposed object model and comment.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<p>I don't see the models.py attachment.
<br>
<p>Thanks,
<br>
Ethan
<br>
<p><p><span class="quotelev1">&gt;      You can run the attached example in the google datastore dev
</span><br>
<span class="quotelev1">&gt;      environment. (<a href="http://code.google.com/appengine/downloads.html">http://code.google.com/appengine/downloads.html</a>)
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      Please comment.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      Thanks
</span><br>
<span class="quotelev1">&gt;      Mike
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;      On Tue, Mar 24, 2009 at 12:17 AM, Jeff Squyres &lt;jsquyres_at_[hidden]&gt;
</span><br>
<span class="quotelev1">&gt;      wrote:
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;        On Mar 23, 2009, at 9:05 AM, Ethan Mallove wrote:
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;          *-------------------+---------------------+----------
</span><br>
<span class="quotelev1">&gt;          *Resource * * * * * | Unit * * * * * * * *| Unit cost
</span><br>
<span class="quotelev1">&gt;          *-------------------+---------------------+----------
</span><br>
<span class="quotelev1">&gt;          *Outgoing Bandwidth | gigabytes * * * * * | $0.12
</span><br>
<span class="quotelev1">&gt;          *Incoming Bandwidth | gigabytes * * * * * | $0.10
</span><br>
<span class="quotelev1">&gt;          *CPU Time * * * * * | CPU hours * * * * * | $0.10
</span><br>
<span class="quotelev1">&gt;          *Stored Data * * * *| gigabytes per month | $0.15
</span><br>
<span class="quotelev1">&gt;          *Recipients Emailed | recipients * * * * *| $0.0001
</span><br>
<span class="quotelev1">&gt;          *-------------------+---------------------+----------
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;          Would we itemize the MTT bill on a per user basis? *E.g., orgs that
</span><br>
<span class="quotelev1">&gt;          use MTT more, would have to pay more?
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;        Let's assume stored data == incoming bandwidth, because we never throw
</span><br>
<span class="quotelev1">&gt;        anything away. *And let's go with the SWAG of 100GB. *We may or may
</span><br>
<span class="quotelev1">&gt;        not be able to gzip the data uploading to the server. *So if anything,
</span><br>
<span class="quotelev1">&gt;        we *might* be able to decrease the incoming data and have higher level
</span><br>
<span class="quotelev1">&gt;        of stored data.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;        I anticipate our outgoing data to be significantly less, particularly
</span><br>
<span class="quotelev1">&gt;        if we can gzip the outgoing data (which I think we can). *You're
</span><br>
<span class="quotelev1">&gt;        right, CPU time is a mystery -- we won't know what it will be until we
</span><br>
<span class="quotelev1">&gt;        start running some queries to see what happens.
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;        100GB * $0.10 = $10
</span><br>
<span class="quotelev1">&gt;        100GB * $0.15 = $15
</span><br>
<span class="quotelev1">&gt;        total = $25 for the first month
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;        So let's SWAG at $25/mo for a year = $300. *This number will be wrong
</span><br>
<span class="quotelev1">&gt;        for several reasons, but it at least gives us a ballpark. *For
</span><br>
<span class="quotelev1">&gt;        $300/year, I think we (the OMPI project) can find a way to pay for
</span><br>
<span class="quotelev1">&gt;        this fairly easily.
</span><br>
<span class="quotelev1">&gt;        --
</span><br>
<span class="quotelev1">&gt;        Jeff Squyres
</span><br>
<span class="quotelev1">&gt;        Cisco Systems
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;        _______________________________________________
</span><br>
<span class="quotelev1">&gt;        mtt-devel mailing list
</span><br>
<span class="quotelev1">&gt;        mtt-devel_at_[hidden]
</span><br>
<span class="quotelev1">&gt;        <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a>
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt; References
</span><br>
<span class="quotelev1">&gt; 
</span><br>
<span class="quotelev1">&gt;    Visible links
</span><br>
<span class="quotelev1">&gt;    . mailto:mike.ompi_at_[hidden]
</span><br>
<span class="quotelev1">&gt;    . <a href="http://code.google.com/appengine/downloads.html">http://code.google.com/appengine/downloads.html</a>
</span><br>
<span class="quotelev1">&gt;    . mailto:jsquyres_at_[hidden]
</span><br>
<span class="quotelev1">&gt;    . mailto:mtt-devel_at_[hidden]
</span><br>
<span class="quotelev1">&gt;    . <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a>
</span><br>
<p><span class="quotelev1">&gt; _______________________________________________
</span><br>
<span class="quotelev1">&gt; mtt-devel mailing list
</span><br>
<span class="quotelev1">&gt; mtt-devel_at_[hidden]
</span><br>
<span class="quotelev1">&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a>
</span><br>
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0380.php">Mike Dubman: "[MTT devel] Fwd:  GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0378.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0378.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0381.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0381.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

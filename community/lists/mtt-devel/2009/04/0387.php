<?
$subject_val = "Re: [MTT devel] GSOC application";
include("../../include/msg-header.inc");
?>
<!-- received="Wed Apr 15 09:14:48 2009" -->
<!-- isoreceived="20090415131448" -->
<!-- sent="Wed, 15 Apr 2009 16:14:42 +0300" -->
<!-- isosent="20090415131442" -->
<!-- name="Mike Dubman" -->
<!-- email="mike.ompi_at_[hidden]" -->
<!-- subject="Re: [MTT devel] GSOC application" -->
<!-- id="b20b52800904150614x60d02245pca2c29f3e09dfe43_at_mail.gmail.com" -->
<!-- charset="ISO-8859-1" -->
<!-- inreplyto="0C80CB0F-CDBD-4853-886C-B8968A170BFE_at_cisco.com" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> Re: [MTT devel] GSOC application<br>
<strong>From:</strong> Mike Dubman (<em>mike.ompi_at_[hidden]</em>)<br>
<strong>Date:</strong> 2009-04-15 09:14:42
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0388.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0386.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0385.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0388.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0388.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
On Wed, Apr 15, 2009 at 3:51 AM, Jeff Squyres &lt;jsquyres_at_[hidden]&gt; wrote:
<br>
<p><span class="quotelev1">&gt; On Apr 14, 2009, at 2:27 PM, Mike Dubman wrote:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Ah, good point (python/java not perl).  But I think that
</span><br>
<span class="quotelev2">&gt;&gt; lib/MTT/Reporter/GoogleDataStore.pm could still be a good thing -- we have
</span><br>
<span class="quotelev2">&gt;&gt; invested a lot of time/effort into getting our particular mtt clients setup
</span><br>
<span class="quotelev2">&gt;&gt; just the way we want them, setting up INI files, submitting to batch
</span><br>
<span class="quotelev2">&gt;&gt; schedulers, etc.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; A GoogleDataStore.pm reporter could well fork/exec a python/java
</span><br>
<span class="quotelev2">&gt;&gt; executable to do the actual communication/storing of the data, right...?
</span><br>
<span class="quotelev2">&gt;&gt;  More below.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; completely agree, once we have external python/java/cobol scripts to
</span><br>
<span class="quotelev2">&gt;&gt; manipulate GDS objects, we should wrap it by perl and call from MTT in same
</span><br>
<span class="quotelev2">&gt;&gt; way like it works today for submitting to the postgress.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; So say we all!  :-)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; (did they show Battlestar Gallactica in Israel?  :-) )
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; sounds good, we should introduce some guid (like pid) for mtt session,
</span><br>
<span class="quotelev2">&gt;&gt; where all mtt results generated by this session will be referring to this
</span><br>
<span class="quotelev2">&gt;&gt; guid.  Later we use this guid to submit partial results as they become ready
</span><br>
<span class="quotelev2">&gt;&gt; and connect it to the appropriate mtt session object (see models.py)
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I *believe* have have 2 values like this in the MTT client already:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; - an ID that represents a single MTT client run
</span><br>
<span class="quotelev1">&gt; - an ID that represents a single MTT mpi install-&gt;test build-&gt;test run tree
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I think that Ethan was asking was: can't MTT run Fluent and then use the
</span><br>
<span class="quotelev2">&gt;&gt; normal Reporter mechanism to report the results into whatever back-end data
</span><br>
<span class="quotelev2">&gt;&gt; store we have?  (postgres or GDS)
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; ahhh, okie, i see.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; Correct me if Im wrong, the current mtt implementation allows following
</span><br>
<span class="quotelev2">&gt;&gt; way of executing mpi test:
</span><br>
<span class="quotelev2">&gt;&gt; /path/to/mpirun &lt;mpirun options&gt; &lt;test&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Yes and no; it's controlled by the mpi details section, right?  You can put
</span><br>
<span class="quotelev1">&gt; whatever you want in there.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Many mpi based applications have embedded MPI libraries and non-standard
</span><br>
<span class="quotelev2">&gt;&gt; way to start it, one should set env variable to point to desired mpi
</span><br>
<span class="quotelev2">&gt;&gt; installation or pass it as cmd line argument, for example:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; for fluent:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; export OPENMPI_ROOT=/path/to/openmpi
</span><br>
<span class="quotelev2">&gt;&gt; fluent &lt;cmd line args&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; for pamcrash:
</span><br>
<span class="quotelev2">&gt;&gt; pamworld -np 2 -mpidir=/path/to/openmpi/dir ....
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; Im not sure if it is possible to express that execution semantic in mtt
</span><br>
<span class="quotelev2">&gt;&gt; ini file. Please suggest.
</span><br>
<span class="quotelev2">&gt;&gt; So far, it seems that such executions can be handled externally from mtt
</span><br>
<span class="quotelev2">&gt;&gt; but using same object model.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Understood.  I think you *could* get MTT to run these with specialized mpi
</span><br>
<span class="quotelev1">&gt; details sections.  But it may or may not be worth it.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; For the attachment...
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; I can &quot;sorta read&quot; python, but I'm not familiar with its intricacies and
</span><br>
<span class="quotelev2">&gt;&gt; its internal APIs.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; - models.py: looks good.  I don't know if *all* the fields we have are
</span><br>
<span class="quotelev2">&gt;&gt; listed here; it looks fairly short to me.  Did you attempt to include all of
</span><br>
<span class="quotelev2">&gt;&gt; the fields we submit through the various phases in Reporter are there, or
</span><br>
<span class="quotelev2">&gt;&gt; did you intentionally leave some out?  (I honestly haven't checked; it just
</span><br>
<span class="quotelev2">&gt;&gt; &quot;feels short&quot; to me compared to our SQL schema).
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; I listed only some of the fields in every object representing specific
</span><br>
<span class="quotelev2">&gt;&gt; test result source (called phase in mtt language).
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Ok.  So that's only a sample -- just showing an example, not necessarily
</span><br>
<span class="quotelev1">&gt; trying to be complete.  Per Ethan's comments, there are a bunch of other
</span><br>
<span class="quotelev1">&gt; fields that we have and/or we might just be able to &quot;tie them together&quot; in
</span><br>
<span class="quotelev1">&gt; GDS.  I.e., our data is hierarchical -- it worked well enough in SQL because
</span><br>
<span class="quotelev1">&gt; you could just have one record about a test build refer to another record
</span><br>
<span class="quotelev1">&gt; about the corresponding mpi install.  And so on.  Can we do something
</span><br>
<span class="quotelev1">&gt; similar in GDS?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p><p>yep, actually in GDS it should be much easier to have hierarchy, because it
<br>
is OO storage. We just need to map all object relations and put it in
<br>
models.py - gds will do the rest :)
<br>
<p><p><p><p><span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; This is because every test result source object is derived from python
</span><br>
<span class="quotelev2">&gt;&gt; provided db.Expando class. This gives us great flexibility, like adding
</span><br>
<span class="quotelev2">&gt;&gt; dynamic attributes for every objects, for example:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; obj = new MttBuildPhaseResult()
</span><br>
<span class="quotelev2">&gt;&gt; obj.my_favorite_dynamic_key = &quot;hello&quot;
</span><br>
<span class="quotelev2">&gt;&gt; obj.my_another_dynamic_key = 7
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; So, we can have all phase attributes in the phase object without defining
</span><br>
<span class="quotelev2">&gt;&gt; it in the *sql schema way*. Also we can query object model by these dynamic
</span><br>
<span class="quotelev2">&gt;&gt; keys.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Hmm.  Ok, so you're saying that we define a &quot;phase object&quot; (for each phase)
</span><br>
<span class="quotelev1">&gt; with all the fields that we expect to have, but if we need to, we can create
</span><br>
<span class="quotelev1">&gt; fields on the fly, and google will just &quot;do the right thing&quot; and associate
</span><br>
<span class="quotelev1">&gt; *all* the data (the &quot;expected&quot; fields and the &quot;dynamic&quot; fields) together?
</span><br>
<p><p>yep. correct. We can define only static attributes (which we know for sure
<br>
should present in every object of given type and leave phase specific
<br>
attributes to stay dynamic)
<br>
<p><p><span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; --&gt; meta question: is it in the zen of GDS to not have too many index
</span><br>
<span class="quotelev2">&gt;&gt; fields like you would in SQL?  I.e., if you want to do an operation on GDS
</span><br>
<span class="quotelev2">&gt;&gt; that you
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; as far as it seems now, gds creates indexes automatically and also
</span><br>
<span class="quotelev2">&gt;&gt; provides API to define indexes manually.
</span><br>
<span class="quotelev2">&gt;&gt; would typically use an SQL index field for, is the idea that you would do
</span><br>
<span class="quotelev2">&gt;&gt; a map/reduce to select the data instead of an index field?
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; yep. seems correct.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; K.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; - start_datastore.sh: hmm.  This script seems to imply that the datastore
</span><br>
<span class="quotelev2">&gt;&gt; is *local*!  Don't we have to HTTP submit the results to Google?  More
</span><br>
<span class="quotelev2">&gt;&gt; specifically: what is dev_appserver.py?  Is that, perchance, just a local
</span><br>
<span class="quotelev2">&gt;&gt; proxy agent that will end up submitting our data to $datastore_path, which
</span><br>
<span class="quotelev2">&gt;&gt; actually resides at Google?  Do we have to use a specific google
</span><br>
<span class="quotelev2">&gt;&gt; username/URL to submit (and query) results?
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; You need to download google`s sdk (dev_appserver.py is a part of it). In
</span><br>
<span class="quotelev2">&gt;&gt; order to develop for gds you  run your code inside sdk locally, and when
</span><br>
<span class="quotelev2">&gt;&gt; feel comfortable with it - you upload it to the google cluster. In order to
</span><br>
<span class="quotelev2">&gt;&gt; run attached example, you need to download sdk, put it in the following dir
</span><br>
<span class="quotelev2">&gt;&gt; hierarchy:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; somedir/sdk
</span><br>
<span class="quotelev2">&gt;&gt; somedir/vbench-dev
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; and run start_datastore.sh, which will run local instance of GDS on your
</span><br>
<span class="quotelev2">&gt;&gt; machine.Then in another shell you need to run vbech-dev.py, which simulates
</span><br>
<span class="quotelev2">&gt;&gt; mtt client accessing GDS, storing some objects in according to proposed
</span><br>
<span class="quotelev2">&gt;&gt; models and then running some sql-like quires to fetch and manipulate
</span><br>
<span class="quotelev2">&gt;&gt; results.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; see
</span><br>
<span class="quotelev2">&gt;&gt; <a href="http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html">http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html</a>
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Ah, I see.  Makes sense.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; - there's no comments in vbench-dev.py -- can you explain what's going on
</span><br>
<span class="quotelev2">&gt;&gt; in there?  Can you explain how we would use these scripts?
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; This is a mtt simulator, it implements google appengine API to receive
</span><br>
<span class="quotelev2">&gt;&gt; HTTP requests and call appropriate callbacks. (there is a map of specific
</span><br>
<span class="quotelev2">&gt;&gt; urls to callbacks).
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; The main callback (which intercepts http GET requests to specific URL)
</span><br>
<span class="quotelev2">&gt;&gt; runs the test code which creates objects defined in models.py, groups many
</span><br>
<span class="quotelev2">&gt;&gt; test results into MTTSession and they run some queries to access previously
</span><br>
<span class="quotelev2">&gt;&gt; created objects.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; The real mtt client will use URL pointing to MTT python code running at
</span><br>
<span class="quotelev2">&gt;&gt; google`s cluster, and use near same code to create/query/manipulate objects
</span><br>
<span class="quotelev2">&gt;&gt; defined in models.py.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p><p>The GDS API allows to specify onGET() and onPOST() callbacks which will be
<br>
called by appengine on user requests.
<br>
I used that API in the attached samle just as a shortest way to play with
<br>
GDS (create, save, query objects).
<br>
I think that GDS enabled mtt client will use smth like that:
<br>
<p>GOOGLE_PROVIDED_URL_FOR_MTT = <a href="http://mtt.google.com/db">http://mtt.google.com/db</a>
<br>
db = new DB(GOOGLE_PROVIDED_URL_FOR_MTT)
<br>
<p>mttSessions = db.query(&quot;select * from TestSessions&quot;)
<br>
foreach session from mttSessions {
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// do smth, find sesion phase objects or whatever
<br>
}
<br>
<p><p>So, we will not need explicit access by http GET/POST to the GDS. We will
<br>
use GDS remote api. The remote api will wrap all its calls by post/get
<br>
semantic.
<br>
<p>We will need GET/POST access only to implement mtt results viewer applet
<br>
which will be hosted @google.
<br>
<p><p><p><span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Ok.  But this code should really be intercepting PUT (or POST) requests,
</span><br>
<span class="quotelev1">&gt; not GET, right?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I ask because the MTT client currently POST's the data to send it via HTTP
</span><br>
<span class="quotelev1">&gt; to the remote server.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; - it *looks* like these scripts are for storing data out in the GDS.  Have
</span><br>
<span class="quotelev2">&gt;&gt; you looked at the querying side?  Do we know that storing data in the form
</span><br>
<span class="quotelev2">&gt;&gt; you listed in models.py are easily retrievable in the ways that we want?
</span><br>
<span class="quotelev2">&gt;&gt;  E.g., can you mock up queries that resemble the queries we currently have
</span><br>
<span class="quotelev2">&gt;&gt; in our web-based query system today, just to show that storing the data in
</span><br>
<span class="quotelev2">&gt;&gt; this way will actually allow us to do the kinds of queries that we want to
</span><br>
<span class="quotelev2">&gt;&gt; do?
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; I think vbench-dev.py shows some querying capabilities for stored objects,
</span><br>
<span class="quotelev2">&gt;&gt; there are many ways to query objects by object CLASS and Attributes.
</span><br>
<span class="quotelev2">&gt;&gt; see many examples here:
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; see
</span><br>
<span class="quotelev2">&gt;&gt; <a href="http://code.google.com/appengine/docs/python/gettingstarted/usingdatastore.html">http://code.google.com/appengine/docs/python/gettingstarted/usingdatastore.html</a> for
</span><br>
<span class="quotelev2">&gt;&gt; more querying examples we can use.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Ok.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; My only point is that we might want to think a little about the queries we
</span><br>
<span class="quotelev1">&gt; want to do when designing the interfaces to stuff all the data into the GDS
</span><br>
<span class="quotelev1">&gt; -- it may be helpful to have *some* structure to the data that goes into GDS
</span><br>
<span class="quotelev1">&gt; if it helps the queries that we ultimately want to do.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Do you want to try making queries for the data that you're shoving into GDS
</span><br>
<span class="quotelev1">&gt; that simulate some of the same queries that we can perform today?  This will
</span><br>
<span class="quotelev1">&gt; just help validate a) that we can move current functionality up to GDS, and
</span><br>
<span class="quotelev1">&gt; b) we can easily make up some new queries that we *can't* easily do on
</span><br>
<span class="quotelev1">&gt; postgres today -- it might be fun/useful to see if GDS can handle such
</span><br>
<span class="quotelev1">&gt; queries.
</span><br>
<p><p>agree, the 1st milestone is to have script to submit results to GDS by using
<br>
remote GDS API, also ptovide some basic query capabilities for text
<br>
reporting (by using same remote API).
<br>
<p><p><span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Maybe the first goal should be -- once you guys get a good understanding of
</span><br>
<span class="quotelev1">&gt; using GDS -- will be to have an MTT Reporter that we can all start using to
</span><br>
<span class="quotelev1">&gt; start stuffing data into GDS.  Once we have a bit of data out there, you can
</span><br>
<span class="quotelev1">&gt; start trying to query the data and see what kinds of capabilities the query
</span><br>
<span class="quotelev1">&gt; side has. Since we have basically limitless ability to generate data to
</span><br>
<span class="quotelev1">&gt; submit into GDS :-), if we screw up the first few model definitions and end
</span><br>
<span class="quotelev1">&gt; up wiping the data and starting over during this development process, it's
</span><br>
<span class="quotelev1">&gt; no big deal -- just wait one day and the GDS will be populated again with
</span><br>
<span class="quotelev1">&gt; new data from our MTT runs.  :-)
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; What do you think?
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p><p>actually, the attached example allows easy creation and quering of objects
<br>
in GDS. We will rewrite it to use GDS remote API and will play with it.
<br>
<p><p><p><span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; In short: I think I'm missing much of the back-story / rationale of how the
</span><br>
<span class="quotelev2">&gt;&gt; scripts in your tarball work / are to be used.
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; BTW -- if it's useful to have a teleconference about this kind of stuff, I
</span><br>
<span class="quotelev2">&gt;&gt; can host a WebEx meeting.  WebEx has local dialins around the world,
</span><br>
<span class="quotelev2">&gt;&gt; including Israel...
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; sure, what about next week?
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I have a Doodle account -- let's try that to do the scheduling:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;    <a href="http://doodle.com/gzpgaun2ef4szt29">http://doodle.com/gzpgaun2ef4szt29</a>
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Ethan, Josh, and I are all in US Eastern timezone (I don't know if Josh
</span><br>
<span class="quotelev1">&gt; will participate), so that might make scheduling *slightly* easier.  I
</span><br>
<span class="quotelev1">&gt; started timeslots at 8am US Eastern and stopped as 2pm US Eastern -- that's
</span><br>
<span class="quotelev1">&gt; already pretty late in Israel.  I also didn't list Friday, since that's the
</span><br>
<span class="quotelev1">&gt; weekend in Israel.
</span><br>
<p><p>can we do it on your morining? (our after noon) :)
<br>
<p><span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; --
</span><br>
<span class="quotelev1">&gt; Jeff Squyres
</span><br>
<span class="quotelev1">&gt; Cisco Systems
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p><hr>
<ul>
<li>text/html attachment: <a href="http://www.open-mpi.org/community/lists/mtt-devel/att-0387/attachment">attachment</a>
</ul>
<!-- attachment="attachment" -->
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0388.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0386.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0385.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="0388.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<li><strong>Reply:</strong> <a href="0388.php">Jeff Squyres: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

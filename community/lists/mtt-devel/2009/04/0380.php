<?
$subject_val = "[MTT devel] Fwd:  GSOC application";
include("../../include/msg-header.inc");
?>
<!-- received="Mon Apr 13 13:36:49 2009" -->
<!-- isoreceived="20090413173649" -->
<!-- sent="Mon, 13 Apr 2009 20:36:43 +0300" -->
<!-- isosent="20090413173643" -->
<!-- name="Mike Dubman" -->
<!-- email="mike.ompi_at_[hidden]" -->
<!-- subject="[MTT devel] Fwd:  GSOC application" -->
<!-- id="b20b52800904131036l38e990d5if1b46926d9aa6b_at_mail.gmail.com" -->
<!-- charset="ISO-8859-1" -->
<!-- inreplyto="b20b52800904060654m7b70fd8dvb18ef0e9fab8e136_at_mail.gmail.com" -->
<!-- expires="-1" -->
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<p class="headers">
<strong>Subject:</strong> [MTT devel] Fwd:  GSOC application<br>
<strong>From:</strong> Mike Dubman (<em>mike.ompi_at_[hidden]</em>)<br>
<strong>Date:</strong> 2009-04-13 13:36:43
</p>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0381.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0377.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="http://www.open-mpi.org/community/lists/mtt-devel/2009/03/0351.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
<p>
resending original post with attachment (mtt_datastore.tbz). it is sample
<br>
google appengine API application. It contains models.py with object model
<br>
proposal and script with some examples of object model use-cases and flows.
<br>
<p>---------- Forwarded message ----------
<br>
From: Mike Dubman &lt;mike.ompi_at_[hidden]&gt;
<br>
Date: Mon, Apr 6, 2009 at 4:54 PM
<br>
Subject: Re: [MTT devel] GSOC application
<br>
To: Development list for the MPI Testing Tool &lt;mtt-devel_at_[hidden]&gt;
<br>
<p><p>Hello Guys,
<br>
<p>I have played a bit with google datastore and here is a proposal for mtt DB
<br>
infra and some accompanying tools for submission and querying:
<br>
<p><p>1. Scope and requirements
<br>
====================
<br>
<p>a. provide storage services for storing test results generated by mtt.
<br>
Storage services will be implemented over datastore.
<br>
b. provide storage services for storing benchmarking results generated by
<br>
various mpi based applications  (not mtt based, for example: fluent,
<br>
openfoam)
<br>
c. test or benchmarking results stored in the datastore can be grouped and
<br>
referred as a group (for example: mtt execution can generate many mtt
<br>
results consisting of different phases. This mtt execution will be referred
<br>
as a session)
<br>
d. Benchmarking and test results which are generated by mtt or any other mpi
<br>
based applications, can be stored in the datastore and grouped by some
<br>
logical criteria.
<br>
e. The mtt should not depend or call directly any datastore`s provided APIs.
<br>
The mtt client (or framework/scripts executing mpi based applications)
<br>
should generate test/benchmarking results in some internal format, which
<br>
will be processed later by external tools. These external tools will be
<br>
responsible for saving test results in the datastore. Same rules should be
<br>
applied for non mtt based executions of mpi-based applications (line fluent,
<br>
openfoam,...). The scripts which are wrapping such executions will dump
<br>
benchmarking results in some internal form for later processing by external
<br>
tools.
<br>
<p>f. The internal form for representation of test/benchmarking results can be
<br>
XML. The external tool will receive (as cmd line params) XML files, process
<br>
them and save to the datastore.
<br>
<p>d. The external tools will be familiar with datastore object model and will
<br>
provide bridge between test results (XML) and actual datastore.
<br>
<p><p><p>2. Flow and use-cases
<br>
=================
<br>
<p>a. The mtt client will dump all test related information into XML file. The
<br>
file will be created for every phase executed by mtt. (today there are many
<br>
summary txt and html files generated for every test phase, it is pretty easy
<br>
to add xml generation of the same information)
<br>
<p>b. mtt_save_to_db.py - script which will go over mtt scratch dir, find all
<br>
xml files generated for every mtt phase, parse it and save to datastore,
<br>
preserving test results relations,i.e. all test results will be grouped by
<br>
mtt general info: mpi version, name, date, ....
<br>
<p>c. same script can scan, parse and save from xml files generated by wrapper
<br>
scripts for non mtt based executions (fluent, ..)
<br>
<p>d. mtt_query_db.py script will be provided with basic query capabilities
<br>
over proposed datastore object model. Most users will prefer writing custom
<br>
sql-like select queries for fetching results.
<br>
<p>3. Important notes:
<br>
==============
<br>
<p>a. The single mtt client execution generates many result files, every
<br>
generated file represents test phase. This file contains test results and
<br>
can be characterized as a set of attributes with its values. Every test
<br>
phase has its own attributes which are differ for different phases. For
<br>
example: attributes for TestBuild phase has keys &quot;compiler_name,
<br>
compiler_version&quot;, the MPIInstall phase has attributes: prefix_dir, arch,
<br>
....
<br>
Hence, most of the datastore objects representing phases of MTT  are derived
<br>
from &quot;db.Expando&quot; model, which allows having dynamic attributes for its
<br>
derived sub-classes.
<br>
<p><p>The attached is archive with a simple test for using datastore for mtt.
<br>
Please see models.py file with proposed object model and comment.
<br>
<p>You can run the attached example in the google datastore dev environment. (
<br>
<a href="http://code.google.com/appengine/downloads.html">http://code.google.com/appengine/downloads.html</a>)
<br>
<p>Please comment.
<br>
<p><p>Thanks
<br>
<p>Mike
<br>
<p><p><p>On Tue, Mar 24, 2009 at 12:17 AM, Jeff Squyres &lt;jsquyres_at_[hidden]&gt; wrote:
<br>
<p><span class="quotelev1">&gt; On Mar 23, 2009, at 9:05 AM, Ethan Mallove wrote:
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt;   -------------------+---------------------+----------
</span><br>
<span class="quotelev2">&gt;&gt;  Resource           | Unit                | Unit cost
</span><br>
<span class="quotelev2">&gt;&gt;  -------------------+---------------------+----------
</span><br>
<span class="quotelev2">&gt;&gt;  Outgoing Bandwidth | gigabytes           | $0.12
</span><br>
<span class="quotelev2">&gt;&gt;  Incoming Bandwidth | gigabytes           | $0.10
</span><br>
<span class="quotelev2">&gt;&gt;  CPU Time           | CPU hours           | $0.10
</span><br>
<span class="quotelev2">&gt;&gt;  Stored Data        | gigabytes per month | $0.15
</span><br>
<span class="quotelev2">&gt;&gt;  Recipients Emailed | recipients          | $0.0001
</span><br>
<span class="quotelev2">&gt;&gt;  -------------------+---------------------+----------
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt; Would we itemize the MTT bill on a per user basis?  E.g., orgs that
</span><br>
<span class="quotelev2">&gt;&gt; use MTT more, would have to pay more?
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev2">&gt;&gt;
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; Let's assume stored data == incoming bandwidth, because we never throw
</span><br>
<span class="quotelev1">&gt; anything away.  And let's go with the SWAG of 100GB.  We may or may not be
</span><br>
<span class="quotelev1">&gt; able to gzip the data uploading to the server.  So if anything, we *might*
</span><br>
<span class="quotelev1">&gt; be able to decrease the incoming data and have higher level of stored data.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; I anticipate our outgoing data to be significantly less, particularly if we
</span><br>
<span class="quotelev1">&gt; can gzip the outgoing data (which I think we can).  You're right, CPU time
</span><br>
<span class="quotelev1">&gt; is a mystery -- we won't know what it will be until we start running some
</span><br>
<span class="quotelev1">&gt; queries to see what happens.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; 100GB * $0.10 = $10
</span><br>
<span class="quotelev1">&gt; 100GB * $0.15 = $15
</span><br>
<span class="quotelev1">&gt; total = $25 for the first month
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; So let's SWAG at $25/mo for a year = $300.  This number will be wrong for
</span><br>
<span class="quotelev1">&gt; several reasons, but it at least gives us a ballpark.  For $300/year, I
</span><br>
<span class="quotelev1">&gt; think we (the OMPI project) can find a way to pay for this fairly easily.
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; --
</span><br>
<span class="quotelev1">&gt; Jeff Squyres
</span><br>
<span class="quotelev1">&gt; Cisco Systems
</span><br>
<span class="quotelev1">&gt;
</span><br>
<span class="quotelev1">&gt; _______________________________________________
</span><br>
<span class="quotelev1">&gt; mtt-devel mailing list
</span><br>
<span class="quotelev1">&gt; mtt-devel_at_[hidden]
</span><br>
<span class="quotelev1">&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a>
</span><br>
<span class="quotelev1">&gt;
</span><br>
<p>
<br><hr>
<ul>
<li>text/html attachment: <a href="http://www.open-mpi.org/community/lists/mtt-devel/att-0380/attachment">attachment</a>
</ul>
<!-- attachment="attachment" -->
<hr>
<ul>
<li>application/octet-stream attachment: <a href="http://www.open-mpi.org/community/lists/mtt-devel/att-0380/mtt_datastore.tbz">mtt_datastore.tbz</a>
</ul>
<!-- attachment="mtt_datastore.tbz" -->
<!-- body="end" -->
<hr>
<ul class="links">
<!-- next="start" -->
<li><strong>Next message:</strong> <a href="0381.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<li><strong>Previous message:</strong> <a href="0379.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<li><strong>In reply to:</strong> <a href="0377.php">Mike Dubman: "Re: [MTT devel] GSOC application"</a>
<!-- nextthread="start" -->
<li><strong>Next in thread:</strong> <a href="http://www.open-mpi.org/community/lists/mtt-devel/2009/03/0351.php">Ethan Mallove: "Re: [MTT devel] GSOC application"</a>
<!-- reply="end" -->
</ul>
<div class="center">
<table border="2" width="100%" class="links">
<tr>
<th><a href="date.php">Date view</a></th>
<th><a href="index.php">Thread view</a></th>
<th><a href="subject.php">Subject view</a></th>
<th><a href="author.php">Author view</a></th>
</tr>
</table>
</div>
<!-- trailer="footer" -->
<? include("../../include/msg-footer.inc") ?>

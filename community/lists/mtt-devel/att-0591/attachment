<div dir="ltr"><div>Hi,</div><div> </div><div>We are switching from datastore (feature we added a couple of years ago) to MongoDB NoSQL DB to keep mtt results.</div><div> </div><div>We are adding some &quot;regression&quot; capability based on  MTT and MongoDB reporter:</div>

<div> </div><div>- run mtt</div><div>- when mtt finishes, extract results for previous runs of the same test with same parameters</div><div>- compare performance metrics and generate regression report (excel)</div><div>- attach regression report to the mtt email report</div>

<div> </div><div>So, we are adding all lego-like utils to support this:</div><div> </div><div>- save results to OO storage (for comfort using from Perl)</div><div>- create Analyzers for various well-known tests</div><div>

- query results, group them and generate regression statistics, place report into excel (<a href="http://mongo-query.pl">mongo-query.pl</a>)</div><div>- Generate report which can be attached to mtt report (<a href="http://breport.pl">breport.pl</a>)</div>

<div> </div><div> </div><div>So, we have reporter and query tool for Mongo, which is simple and customizable.</div><div> </div><div>regards</div><div>M</div><div> </div><div> </div><div class="gmail_quote">On Wed, Aug 1, 2012 at 2:00 PM, Jeff Squyres <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br>

<blockquote style="margin:0px 0px 0px 0.8ex;padding-left:1ex;border-left-color:rgb(204,204,204);border-left-width:1px;border-left-style:solid" class="gmail_quote">Mike --<br>
<br>
MongoDB is a NoSQL thingy, right?<br>
<br>
Can you describe this plugin a bit?  Do you guys have some kind of reporter for MongoDB?<br>
<div class="HOEnZb"><div class="h5"><br>
<br>
On Aug 1, 2012, at 5:46 AM, &lt;<a href="mailto:svn-commit-mailer@open-mpi.org">svn-commit-mailer@open-mpi.org</a>&gt; wrote:<br>
<br>
&gt; Author: miked (Mike Dubman)<br>
&gt; Date: 2012-08-01 05:46:03 EDT (Wed, 01 Aug 2012)<br>
&gt; New Revision: 1481<br>
&gt; URL: <a href="https://svn.open-mpi.org/trac/mtt/changeset/1481" target="_blank">https://svn.open-mpi.org/trac/mtt/changeset/1481</a><br>
&gt;<br>
&gt; Log:<br>
&gt; add modified version mongobquery and MTTMongodb<br>
&gt;<br>
&gt; Added:<br>
&gt;   trunk/client/<a href="http://mongobquery.pl" target="_blank">mongobquery.pl</a>   (contents, props changed)<br>
&gt;   trunk/lib/MTT/Reporter/MTTMongodb.pm<br>
&gt;<br>
&gt; Added: trunk/client/<a href="http://mongobquery.pl" target="_blank">mongobquery.pl</a><br>
&gt; ==============================================================================<br>
&gt; --- /dev/null 00:00:00 1970   (empty, because file is newly added)<br>
&gt; +++ trunk/client/<a href="http://mongobquery.pl" target="_blank">mongobquery.pl</a>       2012-08-01 05:46:03 EDT (Wed, 01 Aug 2012)      (r1481)<br>
&gt; @@ -0,0 +1,1018 @@<br>
&gt; +#!/usr/bin/perl<br>
&gt; +#<br>
&gt; +# Copyright (c) 2009<br>
&gt; +# $COPYRIGHT$<br>
&gt; +#<br>
&gt; +# Additional copyrights may follow<br>
&gt; +#<br>
&gt; +# $HEADER$<br>
&gt; +#<br>
&gt; +# Now that @INC is setup, bring in the modules<br>
&gt; +<br>
&gt; +#use strict;<br>
&gt; +#use warnings;<br>
&gt; +use LWP::UserAgent;<br>
&gt; +use HTTP::Request::Common;<br>
&gt; +use Data::Dumper;<br>
&gt; +use File::Basename;<br>
&gt; +use File::Temp;<br>
&gt; +use Config::IniFiles;<br>
&gt; +use YAML::XS;<br>
&gt; +use MongoDB;<br>
&gt; +use MongoDB::OID;<br>
&gt; +use YAML;<br>
&gt; +use YAML::Syck;<br>
&gt; +use DateTime;<br>
&gt; +<br>
&gt; +###########################################################<br>
&gt; +# Set variables<br>
&gt; +###########################################################<br>
&gt; +my $module_name=$0;<br>
&gt; +my $module_path=$0;<br>
&gt; +<br>
&gt; +$module_name=~s/([^\/\\]+)$//;<br>
&gt; +$module_name=$1;<br>
&gt; +<br>
&gt; +$module_path=~s/([^\/\\]+)$//;<br>
&gt; +<br>
&gt; +<br>
&gt; +###########################################################<br>
&gt; +# Main block<br>
&gt; +###########################################################<br>
&gt; +use Getopt::Long qw(:config no_ignore_case);<br>
&gt; +<br>
&gt; +my $opt_help;<br>
&gt; +my $opt_server;<br>
&gt; +my $opt_username;<br>
&gt; +my $opt_password;<br>
&gt; +<br>
&gt; +my $opt_ping;<br>
&gt; +my $opt_upload;<br>
&gt; +my $opt_query;<br>
&gt; +my $opt_view;<br>
&gt; +my $opt_admin;<br>
&gt; +<br>
&gt; +my @opt_data;<br>
&gt; +my @opt_raw;<br>
&gt; +<br>
&gt; +my $opt_gqls;<br>
&gt; +my @opt_gqlf;<br>
&gt; +my @opt_section;<br>
&gt; +my $opt_dir;<br>
&gt; +my $opt_no_raw;<br>
&gt; +<br>
&gt; +my $opt_dstore;<br>
&gt; +my $opt_info;<br>
&gt; +my $opt_format;<br>
&gt; +my $opt_mailto;<br>
&gt; +my $opt_regression_from;<br>
&gt; +my $opt_regression_to;<br>
&gt; +my $opt_regression_step;<br>
&gt; +<br>
&gt; +my @opt_newuser;<br>
&gt; +<br>
&gt; +GetOptions (&quot;help|h&quot; =&gt; \$opt_help,<br>
&gt; +            &quot;server|a=s&quot; =&gt; \$opt_server,<br>
&gt; +            &quot;username|u=s&quot; =&gt; \$opt_username,<br>
&gt; +            &quot;password|p=s&quot; =&gt; \$opt_password,<br>
&gt; +            &quot;ping&quot; =&gt; \$opt_ping,<br>
&gt; +            &quot;upload&quot; =&gt; \$opt_upload,<br>
&gt; +            &quot;query&quot; =&gt; \$opt_query,<br>
&gt; +            &quot;view&quot; =&gt; \$opt_view,<br>
&gt; +            &quot;admin&quot; =&gt; \$opt_admin,<br>
&gt; +<br>
&gt; +            &quot;data|S=s&quot; =&gt; \@opt_data,<br>
&gt; +            &quot;raw|R=s&quot; =&gt; \@opt_raw,<br>
&gt; +<br>
&gt; +            &quot;gqls|L=s&quot; =&gt; \$opt_gqls,<br>
&gt; +            &quot;gqlf|F=s&quot; =&gt; \@opt_gqlf,<br>
&gt; +            &quot;section|T=s&quot; =&gt; \@opt_section,<br>
&gt; +            &quot;dir|O=s&quot; =&gt; \$opt_dir,<br>
&gt; +            &quot;no-raw&quot; =&gt; \$opt_no_raw,<br>
&gt; +<br>
&gt; +            &quot;dstore|D&quot; =&gt; \$opt_dstore,<br>
&gt; +            &quot;info|I=s&quot; =&gt; \$opt_info,<br>
&gt; +            &quot;format|V=s&quot; =&gt; \$opt_format,<br>
&gt; +            &quot;email|e=s&quot; =&gt; \$opt_mailto,<br>
&gt; +<br>
&gt; +            &quot;newuser=s{3,5}&quot; =&gt; \@opt_newuser,<br>
&gt; +<br>
&gt; +                     &quot;regression-from=s&quot; =&gt; \$opt_regression_from,<br>
&gt; +                     &quot;regression-to=s&quot; =&gt; \$opt_regression_to,<br>
&gt; +                     &quot;regression-step=s&quot; =&gt; \$opt_regression_step<br>
&gt; +            );<br>
&gt; +<br>
&gt; +<br>
&gt; +my $url = ();<br>
&gt; +my $username = ();<br>
&gt; +my $password = ();<br>
&gt; +<br>
&gt; +$url = $opt_server ? $opt_server : &quot;<a href="http://bgate.mellanox.com:27017" target="_blank">http://bgate.mellanox.com:27017</a>&quot;;<br>
&gt; +$url =~ s/http:\/\///;<br>
&gt; +$username = $opt_username ? $opt_username : &quot;admin&quot;;<br>
&gt; +$password = $opt_password ? $opt_password : &quot;&quot;;<br>
&gt; +<br>
&gt; +my %conf = (&#39;url&#39; =&gt; &quot;$url\/client&quot;,<br>
&gt; +            &#39;username&#39; =&gt; $username,<br>
&gt; +            &#39;password&#39; =&gt; $password<br>
&gt; +            );<br>
&gt; +<br>
&gt; +if ($opt_help)<br>
&gt; +{<br>
&gt; +    my $action = &#39;&#39;;<br>
&gt; +<br>
&gt; +    $action = &#39;ping&#39; if ($opt_ping);<br>
&gt; +    $action = &#39;upload&#39; if ($opt_upload);<br>
&gt; +    $action = &#39;query&#39; if ($opt_query);<br>
&gt; +    $action = &#39;view&#39; if ($opt_view);<br>
&gt; +    $action = &#39;admin&#39; if ($opt_admin);<br>
&gt; +<br>
&gt; +    help($action);<br>
&gt; +<br>
&gt; +    exit;<br>
&gt; +}<br>
&gt; +elsif ($opt_ping)<br>
&gt; +{<br>
&gt; +     #ping( \%conf );<br>
&gt; +     #print $url,&quot; url\n&quot;;<br>
&gt; +     my $conn = MongoDB::Connection-&gt;new(host =&gt; $url );<br>
&gt; +     if($conn != 0)<br>
&gt; +     {<br>
&gt; +             print&quot;\n\nping: success\n\n&quot;;<br>
&gt; +     }<br>
&gt; +}<br>
&gt; +elsif ($opt_upload)<br>
&gt; +{<br>
&gt; +    if ($#opt_data &lt; 0)<br>
&gt; +    {<br>
&gt; +        help(&#39;upload&#39;);<br>
&gt; +    }<br>
&gt; +     my @data = split(/,/,join(&#39;,&#39;,@opt_data)) if (@opt_data);<br>
&gt; +     my @raw = split(/,/,join(&#39;,&#39;,@opt_raw)) if (@opt_raw);<br>
&gt; +<br>
&gt; +    # Check if files existed<br>
&gt; +     verify_opt_file( @data );<br>
&gt; +     verify_opt_file( @raw );<br>
&gt; +<br>
&gt; +     $conf{data} = \@data;<br>
&gt; +     $conf{raw} = \@raw;<br>
&gt; +<br>
&gt; +     upload( \%conf );<br>
&gt; +}<br>
&gt; +elsif ($opt_query)<br>
&gt; +{<br>
&gt; +    my $gql = ();<br>
&gt; +    if ($opt_gqls)<br>
&gt; +    {<br>
&gt; +        $gql = $opt_gqls;<br>
&gt; +    }<br>
&gt; +    else<br>
&gt; +    {<br>
&gt; +        help(&#39;query&#39;);<br>
&gt; +    }<br>
&gt; +     #print $gql, &quot; before\n&quot;;<br>
&gt; +     $gql =~ s/\s+/ /g;<br>
&gt; +     $gql =~ s/ /#/g;<br>
&gt; +     $gql =~ s/And/AND/g;<br>
&gt; +     $gql =~ s/and/AND/g;<br>
&gt; +     $gql =~ s/Or/OR/g;<br>
&gt; +     $gql =~ s/or/OR/g;<br>
&gt; +     $gql =~ s/#In#/IN/g;<br>
&gt; +     $gql =~ s/#in#/IN/g;<br>
&gt; +     $gql =~ s/Not/NOT/g;<br>
&gt; +     $gql =~ s/not/NOT/g;<br>
&gt; +     $gql =~ s/#AND#/ AND /g;<br>
&gt; +     $gql =~ s/#OR#/ \| /g;<br>
&gt; +     #$gql =~ s/#IN#/IN/g;<br>
&gt; +     $gql =~ s/#NOT/NOT/g;<br>
&gt; +     $gql =~ s/#=#/=/g;<br>
&gt; +     $gql =~ s/#&gt;#/&gt;/g;<br>
&gt; +     $gql =~ s/#&gt;=#/&gt;=/g;<br>
&gt; +     $gql =~ s/#&lt;#/&lt;/g;<br>
&gt; +     $gql =~ s/#&lt;=#/&lt;=/g;<br>
&gt; +     #print $gql,&quot; after\n&quot;;<br>
&gt; +     #exit;<br>
&gt; +<br>
&gt; +     my @date_array;<br>
&gt; +     if($gql =~ m/=&gt;|=&lt;/)<br>
&gt; +     {<br>
&gt; +                     print &quot;\nError:\nInvalid format: \&quot;=&gt;\&quot; or \&quot;=&lt;\&quot;\nUse \&quot;&gt;=\&quot; or \&quot;&lt;=\&quot; instead\n&quot;;<br>
&gt; +                     exit;<br>
&gt; +     }<br>
&gt; +<br>
&gt; +     if($opt_regression_step)<br>
&gt; +     {<br>
&gt; +             if($opt_regression_step =~ m/^\d{4}-\d{2}-\d{2}$/)<br>
&gt; +             {<br>
&gt; +                     #print &quot;ok $opt_regression_step \n&quot;;<br>
&gt; +             }else<br>
&gt; +             {<br>
&gt; +                     die &quot;\nparametr \&quot;regression-step\&quot; has invalid format. YYYY-MM-DD\nexample --regression-step=\&#39;0000-01-03\&#39;&quot;;<br>
&gt; +             }<br>
&gt; +<br>
&gt; +             if($gql =~ m/TestRunPhase\.start_time/)<br>
&gt; +             {<br>
&gt; +                     $str_start_time = $&#39;;<br>
&gt; +                     if($str_start_time =~ m/\d{4}-\d{2}-\d{2}#\d{2}:\d{2}:\d{2}/)<br>
&gt; +                     {<br>
&gt; +                             $str_start_time = $&amp;;<br>
&gt; +                     }else<br>
&gt; +                     {<br>
&gt; +                             die &quot;synrax error&quot;;<br>
&gt; +                     }<br>
&gt; +             }else<br>
&gt; +             {<br>
&gt; +                     die &quot;syntax error&quot;;<br>
&gt; +             }<br>
&gt; +<br>
&gt; +             if($gql =~ m/TestRunPhase\.end_time/)<br>
&gt; +             {<br>
&gt; +                     $str_end_time = $&#39;;<br>
&gt; +                     if($str_end_time =~ m/\d{4}-\d{2}-\d{2}#\d{2}:\d{2}:\d{2}/)<br>
&gt; +                     {<br>
&gt; +                             $str_end_time = $&amp;;<br>
&gt; +                     }else<br>
&gt; +                     {<br>
&gt; +                             die &quot;syntax error&quot;;<br>
&gt; +                     }<br>
&gt; +             }else<br>
&gt; +             {<br>
&gt; +                     die &quot;syntax error&quot;;<br>
&gt; +             }<br>
&gt; +<br>
&gt; +             #print &quot;start_time $str_start_time end_time $str_end_time \n&quot;;<br>
&gt; +<br>
&gt; +             my $timezone = DateTime-&gt;now;<br>
&gt; +<br>
&gt; +             @numbers = split(/:|-|#/,$str_start_time);<br>
&gt; +             #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +             my %hash_start_time = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; $timezone-&gt;time_zone());<br>


&gt; +             my $DateTime_start_time = DateTime-&gt;new(%hash_start_time);<br>
&gt; +<br>
&gt; +             @numbers = split(/:|-|#/,$str_end_time);<br>
&gt; +             #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +             my %hash_end_time = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; $timezone-&gt;time_zone());<br>


&gt; +             my $DateTime_end_time = DateTime-&gt;new(%hash_end_time);<br>
&gt; +<br>
&gt; +<br>
&gt; +             print &quot;\n\nacceptable dates:\n&quot;;<br>
&gt; +             my $count = 1;<br>
&gt; +             my @arg_to_subtract = split(/-/,$opt_regression_step);<br>
&gt; +             #print &quot;\n\n@arg_to_subtract\n\n&quot;;<br>
&gt; +             while(DateTime-&gt;compare( $DateTime_start_time, $DateTime_end_time )!=1)<br>
&gt; +             {<br>
&gt; +<br>
&gt; +                     $DateTime_end_time-&gt;subtract(years=&gt; @arg_to_subtract[0],months=&gt;@arg_to_subtract[1],days =&gt;@arg_to_subtract[2]);<br>
&gt; +                     my $month = $DateTime_end_time-&gt;month();<br>
&gt; +                     my $day = $DateTime_end_time-&gt;day();<br>
&gt; +                     if(!($day =~ m/\d{2}/))<br>
&gt; +                     {<br>
&gt; +                             $day = &quot;0&quot;.$day;<br>
&gt; +                     }<br>
&gt; +                     if(!($month =~ m/\d{2}/))<br>
&gt; +                     {<br>
&gt; +                             $month = &quot;0&quot;.$month;<br>
&gt; +                     }<br>
&gt; +                     $str = $DateTime_end_time-&gt;year() . &quot;-&quot; . $month . &quot;-&quot; . $day;<br>
&gt; +                     push(@date_array,$str);<br>
&gt; +                     print &quot;$str  &quot;;<br>
&gt; +                     if($count % 7  == 0)<br>
&gt; +                     {<br>
&gt; +                             print&quot;\n&quot;;<br>
&gt; +                     }<br>
&gt; +                     $count++;<br>
&gt; +<br>
&gt; +             }<br>
&gt; +             #print&quot;\n\n @date_array\n\n&quot;;<br>
&gt; +     }<br>
&gt; +     #print &quot;hash start_time &quot;, $DateTime_start_time,  &quot; hash end_time &quot;, $DateTime_end_time, &quot;\n&quot;;<br>
&gt; +     #print &quot;time zone &quot;,$timezone,&quot;\n&quot;;<br>
&gt; +<br>
&gt; +     my $query_to_mongo = string2query($gql);<br>
&gt; +     $query_to_mongo .= &quot;;&quot;;<br>
&gt; +     print &quot;\n\n**********************************************************************query to mongo*************************************************************************&quot;;<br>
&gt; +     print &quot;\n&quot;,$query_to_mongo,&quot;\n&quot;;<br>
&gt; +     print &quot;*************************************************************************************************************************************************************\n&quot;;<br>
&gt; +     ######################################################################<br>
&gt; +     #mongo<br>
&gt; +     #######################################################################<br>
&gt; +     my $conn = MongoDB::Connection-&gt;new(host =&gt; $url);<br>
&gt; +     my $db = $conn-&gt;mtt;<br>
&gt; +     my $mtt_result = $db-&gt;TestRunPhase;<br>
&gt; +     my $all_result = $mtt_result-&gt;find(eval $query_to_mongo);<br>
&gt; +     my $i = 0;<br>
&gt; +     if($opt_regression_step)<br>
&gt; +     {<br>
&gt; +             while (my $doc = $all_result-&gt;next)<br>
&gt; +             {<br>
&gt; +                     if($doc-&gt;{&quot;modules&quot;}-&gt;{&quot;TestRunPhase&quot;}-&gt;{&quot;start_time&quot;} =~ m/\d{4}-\d{2}-\d{2}/)<br>
&gt; +                     {<br>
&gt; +                             if ($&amp; ~~ @date_array)<br>
&gt; +                             {<br>
&gt; +                                     open F, &#39;&gt;&#39;, &quot;$i.yaml&quot;;<br>
&gt; +                                     print F YAML::Syck::Dump( $doc );<br>
&gt; +                                     close F;<br>
&gt; +                                     $i++;<br>
&gt; +                             }<br>
&gt; +                     }<br>
&gt; +                     else<br>
&gt; +                     {<br>
&gt; +                             die &quot;something strange happened&quot;;<br>
&gt; +                     }<br>
&gt; +<br>
&gt; +             }<br>
&gt; +     }else<br>
&gt; +     {<br>
&gt; +             while (my $doc = $all_result-&gt;next)<br>
&gt; +             {<br>
&gt; +<br>
&gt; +                     open F, &#39;&gt;&#39;, &quot;$i.yaml&quot;;<br>
&gt; +                     print F YAML::Syck::Dump( $doc );<br>
&gt; +                     close F;<br>
&gt; +                     $i++;<br>
&gt; +             }<br>
&gt; +<br>
&gt; +     }<br>
&gt; +     print &quot;found $i documents\n&quot;;<br>
&gt; +     ######################################################################<br>
&gt; +     #mongo<br>
&gt; +     ######################################################################<br>
&gt; +<br>
&gt; +}<br>
&gt; +elsif ($opt_view)<br>
&gt; +{<br>
&gt; +     if ($opt_gqls)<br>
&gt; +     {<br>
&gt; +     #    $conf{gql} = $opt_gqls;<br>
&gt; +     }<br>
&gt; +     elsif (@opt_gqlf &amp;&amp; @opt_section &amp;&amp; (@opt_gqlf == @opt_section))<br>
&gt; +     {<br>
&gt; +     #    my $gql = ();<br>
&gt; +     #    my @a_select;<br>
&gt; +     #    my $v_from;<br>
&gt; +     #    my @a_where;<br>
&gt; +     #    my @a_order;<br>
&gt; +     #    my $v_limit;<br>
&gt; +     #    my $v_offset;<br>
&gt; +     #    my $i = 0;<br>
&gt; +     #<br>
&gt; +     #   my @files=split(/,/,join(&#39;,&#39;,@opt_gqlf)) if (@opt_gqlf);<br>
&gt; +     #   my @sections=split(/,/,join(&#39;,&#39;,@opt_section)) if (@opt_section);<br>
&gt; +     #<br>
&gt; +     #   # Check if files existed<br>
&gt; +     #   verify_opt_file( @files );<br>
&gt; +     #<br>
&gt; +     #   for($i=0; $i &lt; @files; $i++)<br>
&gt; +     #   {<br>
&gt; +     #       # Use ini-file in case it is set in command line<br>
&gt; +     #       my $cfg = new Config::IniFiles( -file =&gt; &quot;$files[$i]&quot;, -nocase =&gt; 1 );<br>
&gt; +     #       if (not defined $cfg or $@)<br>
&gt; +     #       {<br>
&gt; +     #           die &quot;$!&quot;;<br>
&gt; +     #       }<br>
&gt; +     #       $opt_format = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;format&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;format&#39;));<br>
&gt; +     #<br>
&gt; +     #       my @a_temp_select = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;select&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;select&#39;));<br>
&gt; +     #       my $v_temp_from = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;from&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;from&#39;));<br>
&gt; +     #       my @a_temp_where = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;where&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;where&#39;));<br>
&gt; +     #       my @a_temp_order = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;order&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;order&#39;));<br>
&gt; +     #       my $v_temp_limit = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;limit&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;limit&#39;));<br>
&gt; +     #        my $v_temp_offset = $cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;offset&#39;) if ($cfg-&gt;val(&quot;$sections[$i]&quot;, &#39;offset&#39;));<br>
&gt; +<br>
&gt; +     #       @a_select = @a_temp_select if ($#a_temp_select != (-1));<br>
&gt; +     #       $v_from = $v_temp_from if ($v_temp_from);<br>
&gt; +     #       my $j = 0;<br>
&gt; +     #       my $k = 0;<br>
&gt; +     #       for ($j = 0; $j &lt; scalar(@a_where); $j++)<br>
&gt; +     #       {<br>
&gt; +     #           for ($k = 0; $k &lt; scalar(@a_temp_where); $k++)<br>
&gt; +     #           {<br>
&gt; +     #               if ($a_temp_where[$k])<br>
&gt; +     #               {<br>
&gt; +     #                   $a_temp_where[$k] =~ m/^\s*(\w+)/i;<br>
&gt; +     #                   if (grep /^\s*$1/, $a_where[$j])<br>
&gt; +     #                   {<br>
&gt; +     #                       $a_where[$j] = $a_temp_where[$k];<br>
&gt; +     #                       delete($a_temp_where[$k]);<br>
&gt; +     #                       next;<br>
&gt; +     #                   }<br>
&gt; +     #               }<br>
&gt; +     #           }<br>
&gt; +     #       }<br>
&gt; +     #       foreach (@a_temp_where)<br>
&gt; +     #       {<br>
&gt; +     #           push(@a_where, $_) if ($_);<br>
&gt; +     #       }<br>
&gt; +     #<br>
&gt; +     #       @a_order = @a_temp_order if ($#a_temp_order != (-1));<br>
&gt; +     #       $v_limit = $v_temp_limit if ($v_temp_limit);<br>
&gt; +     #       $v_offset = $v_temp_offset if ($v_temp_offset);<br>
&gt; +     #   }<br>
&gt; +     #<br>
&gt; +     #   $gql = &#39;&#39;;<br>
&gt; +     #   $gql .= &#39; select &#39; . join(&#39;,&#39;,@a_select) if (@a_select);<br>
&gt; +     #   $gql .= &#39; from &#39; . $v_from if ($v_from);<br>
&gt; +     #   $gql .= &#39; where &#39; . join(&#39; and &#39;,@a_where) if (@a_where);<br>
&gt; +     #   $gql .= &#39; order by &#39; . join(&#39;,&#39;,@a_order) if (@a_order);<br>
&gt; +     #   $gql .= &#39; limit &#39; . $v_limit if ($v_limit);<br>
&gt; +     #   $gql .= &#39; offset &#39; . $v_offset if ($v_offset);<br>
&gt; +     #<br>
&gt; +     #   $conf{gql} = $gql;<br>
&gt; +     #<br>
&gt; +<br>
&gt; +     print &quot;this feature temporarily unavailable\n&quot;;<br>
&gt; +     exit;<br>
&gt; +     }<br>
&gt; +    elsif ($opt_dstore)<br>
&gt; +    {<br>
&gt; +        $conf{kind} = &#39;all&#39;;<br>
&gt; +    }<br>
&gt; +    elsif ($opt_info)<br>
&gt; +    {<br>
&gt; +        $conf{kind} = $opt_info;<br>
&gt; +    }<br>
&gt; +    else<br>
&gt; +    {<br>
&gt; +        help(&#39;view&#39;);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    if ($opt_format)<br>
&gt; +    {<br>
&gt; +        foreach my $format qw(raw txt html yaml)<br>
&gt; +        {<br>
&gt; +            $conf{format} = $format if ($opt_format eq $format) ;<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +    $conf{format} = &#39;raw&#39; if (!exists($conf{format})) ;<br>
&gt; +<br>
&gt; +    view( \%conf );<br>
&gt; +}<br>
&gt; +elsif ($opt_admin)<br>
&gt; +{<br>
&gt; +<br>
&gt; +     print &quot;this feature temporarily unavailable\n&quot;;<br>
&gt; +     exit;<br>
&gt; +     #if ($#opt_newuser &gt; 0)<br>
&gt; +     #{<br>
&gt; +     #    $conf{newuser} = \@opt_newuser;<br>
&gt; +     #}<br>
&gt; +     #admin( \%conf );<br>
&gt; +}<br>
&gt; +else<br>
&gt; +{<br>
&gt; +    help();<br>
&gt; +    exit;<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +# Send notification by e-mail<br>
&gt; +if ( $opt_mailto ) {<br>
&gt; +#    send_results_by_mail($opt_mailto, @files);<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +# Define functions<br>
&gt; +###############################################################################<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +#convert string to query<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +<br>
&gt; +sub string2query<br>
&gt; +{<br>
&gt; +     my $gql = $_[0];<br>
&gt; +     my $before;<br>
&gt; +     my $after;<br>
&gt; +     my $match_case;<br>
&gt; +     while($gql =~ m/\([^\(\)]+(=|&gt;=|&lt;=|&lt;|&gt;|IN\([^\(\)]+\))+[^\(\)]+\)/)<br>
&gt; +     {<br>
&gt; +             $before = $`;<br>
&gt; +             $after = $&#39;;<br>
&gt; +             $match_case = $&amp;;<br>
&gt; +             chop($match_case);<br>
&gt; +             $match_case = reverse($match_case);<br>
&gt; +             chop($match_case);<br>
&gt; +             $match_case = reverse($match_case);<br>
&gt; +             #print &quot;() before: &quot;,$before,&quot; after: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; +             #&lt;STDIN&gt;;<br>
&gt; +             $gql = $before . string2query($match_case) . $after;<br>
&gt; +             #print &quot;gql after: &quot;,$gql,&quot;\n&quot;;<br>
&gt; +     }<br>
&gt; +     if($gql =~ m/\|/ &amp;&amp; $gql =~ m/AND/)<br>
&gt; +     {<br>
&gt; +<br>
&gt; +             while($gql =~ m/[^\|]+(AND)+[^\|]+/)<br>
&gt; +             {<br>
&gt; +                     $before = $`;<br>
&gt; +                     $after = $&#39;;<br>
&gt; +                     $match_case = $&amp;;<br>
&gt; +                     #chop($match_case);<br>
&gt; +                     #$match_case = reverse($match_case);<br>
&gt; +                     #chop($match_case);<br>
&gt; +                     #$match_case = reverse($match_case);<br>
&gt; +<br>
&gt; +                     #print &quot;AND OR before: &quot;,$before,&quot; after: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; +                     #&lt;STDIN&gt;;<br>
&gt; +                     $gql = $before . string2query($match_case) . $after;<br>
&gt; +                     #print &quot;gql after: &quot;,$gql,&quot;\n&quot;;<br>
&gt; +             }<br>
&gt; +     }<br>
&gt; +<br>
&gt; +     #print &quot;lowest level: &quot;,$gql,&quot;\n&quot;;<br>
&gt; +     #&lt;STDIN&gt;;<br>
&gt; +     $gql = string2query_lowest($gql);<br>
&gt; +     #print &quot;gql after: &quot;,$gql,&quot;\n&quot;;<br>
&gt; +<br>
&gt; +     return $gql;<br>
&gt; +}<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +#convert string to query (lowest level)<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub string2query_lowest<br>
&gt; +{<br>
&gt; +     my $input_string = $_[0];<br>
&gt; +     my @subs = split(/\s/,$input_string);<br>
&gt; +     my $arg;<br>
&gt; +     my $query_to_mongo = &quot; {&quot;;<br>
&gt; +     my $before;<br>
&gt; +     my $after;<br>
&gt; +     my $match_case;<br>
&gt; +     #my $prefix = &quot;modules.TestRunPhase.&quot;;<br>
&gt; +     my $prefix = &quot;modules.&quot;;<br>
&gt; +     if($input_string =~ m/AND/ &amp;&amp; $input_string =~ m/\|/)<br>
&gt; +     {<br>
&gt; +             print &quot;error: bquery lowest level\n&quot;;<br>
&gt; +             print &quot;input string: &quot;,$input_string,&quot;\n&quot;;<br>
&gt; +             die;<br>
&gt; +     }elsif($input_string =~ m/\|/)<br>
&gt; +     {<br>
&gt; +             $query_to_mongo .= &quot;\&#39;\$or\&#39;=&gt;[&quot;;<br>
&gt; +     }else<br>
&gt; +     {<br>
&gt; +             $query_to_mongo .= &quot;\&#39;\$and\&#39;=&gt;[&quot;;<br>
&gt; +     }<br>
&gt; +     foreach $arg(@subs)<br>
&gt; +     {<br>
&gt; +             #print $arg,&quot; subs\n&quot;;<br>
&gt; +     }<br>
&gt; +     foreach $arg(@subs)<br>
&gt; +     {<br>
&gt; +             $arg =~ s/#/ /g;<br>
&gt; +<br>
&gt; +             if($arg =~m/&gt;=|&lt;=|NOTIN/)<br>
&gt; +             {<br>
&gt; +                     #print &quot;before match: &quot;, $before,&quot;, after match: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; +                     $before =&quot;{\&#39;$prefix&quot; . $` . &quot;\&#39;=&gt;&quot;;<br>
&gt; +                     $after = $&#39;;<br>
&gt; +                     $match_case = $&amp;;<br>
&gt; +                     if($match_case eq &quot;&gt;=&quot;)<br>
&gt; +                     {<br>
&gt; +                             #print &quot;bolshe ili ravno\n&quot;;<br>
&gt; +                             $query_to_mongo .=  $before . &quot;{\&#39;\$gte\&#39;=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; +<br>
&gt; +                     }elsif($match_case eq &quot;&lt;=&quot;)<br>
&gt; +                     {<br>
&gt; +                             #print &quot;menshe ili ravno\n&quot;;<br>
&gt; +                             $query_to_mongo .=  $before . &quot;{\&#39;\$lte\&#39;=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; +<br>
&gt; +                     }else<br>
&gt; +                     {<br>
&gt; +                             #print &quot;NIN\n&quot;;<br>
&gt; +                             $after =~ s/\(/\[/g;<br>
&gt; +                             $after =~ s/\)/\]/g;<br>
&gt; +                             $query_to_mongo .= $before . &quot;{\&#39;\$nin\&#39;=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; +                     }<br>
&gt; +             }<br>
&gt; +             elsif($arg =~ m/{.+=&gt;.+}/)<br>
&gt; +             {<br>
&gt; +                     $query_to_mongo .= $arg . &quot;,&quot;;<br>
&gt; +             }<br>
&gt; +             elsif($arg =~ m/&gt;|=|&lt;|IN/)<br>
&gt; +             {<br>
&gt; +                     #print &quot;before match1: &quot;, $before,&quot; after match: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; +<br>
&gt; +                     $before =&quot;{\&#39;$prefix&quot; . $` . &quot;\&#39;=&gt;&quot;;<br>
&gt; +                     $after = $&#39;;<br>
&gt; +                     $match_case = $&amp;;<br>
&gt; +<br>
&gt; +                     if($match_case eq &quot;&gt;&quot;)<br>
&gt; +                     {<br>
&gt; +                             #print &quot;bolshe\n&quot;;<br>
&gt; +                             $query_to_mongo .= $before . &quot;{\&#39;\$gt\&#39;=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; +<br>
&gt; +                     }elsif($match_case eq &quot;=&quot;)<br>
&gt; +                     {<br>
&gt; +                             #print &quot;ravno\n&quot;;<br>
&gt; +                             $query_to_mongo .= $before . $after .&quot;},&quot;;<br>
&gt; +                     }elsif($match_case eq &quot;&lt;&quot;)<br>
&gt; +                     {<br>
&gt; +                             #print &quot;menshe\n&quot;;<br>
&gt; +                             $query_to_mongo .=  $before . &quot;{\&#39;\$lt\&#39;=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; +                     }<br>
&gt; +                     else<br>
&gt; +                     {<br>
&gt; +                             #print &quot;IN\n&quot;;<br>
&gt; +                             $after =~ s/\(/\[/g;<br>
&gt; +                             $after =~ s/\)/\]/g;<br>
&gt; +                             $query_to_mongo .= $before . &quot;{\&#39;\$in\&#39;=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; +                     }<br>
&gt; +             }<br>
&gt; +     }<br>
&gt; +     chop($query_to_mongo);<br>
&gt; +     $query_to_mongo .= &quot;]} &quot;;<br>
&gt; +     return $query_to_mongo;<br>
&gt; +}<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Show help to tool<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub help<br>
&gt; +{<br>
&gt; +    my ($action)=@_;<br>
&gt; +<br>
&gt; +    print (&quot;Usage: $module_name [options...] &lt;action&gt; [arguments...]\n&quot;);<br>
&gt; +    print (&quot;\&#39;$module_name\&#39; communicate with datastore .\n\n&quot;);<br>
&gt; +<br>
&gt; +    print (&quot;\nOptions:\n&quot;);<br>
&gt; +    printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-h,&#39;, &#39;--help&#39;, &quot;Show the help message and exit.&quot;);<br>
&gt; +    printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-a,&#39;, &#39;--server&#39;, &quot;The server to connect to.&quot;);<br>
&gt; +    printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-u,&#39;, &#39;--username&#39;, &quot;User name.&quot;);<br>
&gt; +    printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-p,&#39;, &#39;--password&#39;, &quot;Password.&quot;);<br>
&gt; +<br>
&gt; +    print (&quot;\nActions:\n&quot;);<br>
&gt; +<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;ping&#39;)<br>
&gt; +    {<br>
&gt; +        print (&quot; --ping\t The &#39;ping&#39; command check connection with datastore.\n&quot;);<br>
&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;upload&#39;)<br>
&gt; +    {<br>
&gt; +        print (&quot; --upload\t The &#39;upload&#39; command translates input data into datastore entities and uploads them into your application&#39;s datastore.\n&quot;);<br>
&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;query&#39;)<br>
&gt; +    {<br>
&gt; +        print (&quot; --query\t The &#39;query&#39; command translates input string in special request to datastore and download data form query set.\n&quot;);<br>
&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;view&#39;)<br>
&gt; +    {<br>
&gt; +        print (&quot; --view\t The &#39;view&#39; command requests information from datastore.\n&quot;);<br>
&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;admin&#39;)<br>
&gt; +    {<br>
&gt; +        print (&quot; --admin\t The &#39;admin&#39; admin of datastore operations.\n&quot;);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    print (&quot;\nArguments:\n&quot;);<br>
&gt; +<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;upload&#39;)<br>
&gt; +    {<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-S,&#39;, &#39;--data&#39;, &quot;The name of the file containing the data to upload.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-R,&#39;, &#39;--raw&#39;, &quot;Raw file associated with data.&quot;);<br>
&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;query&#39;)<br>
&gt; +    {<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-L,&#39;, &#39;--gqls&#39;, &quot;String with GQL query.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-F,&#39;, &#39;--gqlf&#39;, &quot;The path to file inclusive query.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-T,&#39;, &#39;--section&#39;, &quot;Section of configuration file with query.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-O,&#39;, &#39;--dir&#39;, &quot;The path to the directory that will store retrieved data.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;&#39;, &#39;--no-raw&#39;, &quot;Don&#39;t download Raw file associated with data.&quot;);<br>
&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;view&#39;)<br>
&gt; +    {<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-D,&#39;, &#39;--dstore&#39;, &quot;Retrieve Google Data store detailed organization with names of models and properties.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-I,&#39;, &#39;--info&#39;, &quot;Show information about clusters, compilers, bench applications and mpi. One of following as &#39;suite&#39;,&#39;mpi&#39;,&#39;compiler&#39;,&#39;cluster&#39;&quot;);<br>


&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-L,&#39;, &#39;--gqls&#39;, &quot;String with GQL query.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-F,&#39;, &#39;--gqlf&#39;, &quot;The path to file inclusive query.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-T,&#39;, &#39;--section&#39;, &quot;Section of configuration file with query.&quot;);<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-V,&#39;, &#39;--format&#39;, &quot;Output format. One of following as &#39;txt&#39;,&#39;html&#39;,&#39;yaml&#39;,&#39;raw&#39;. Default is &#39;raw&#39;&quot;);<br>


&gt; +    }<br>
&gt; +    if (!defined($action) || $action eq &#39;&#39; || $action eq &#39;admin&#39;)<br>
&gt; +    {<br>
&gt; +        printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;&#39;, &#39;--newuser&#39;, &quot;User information as username, password, email (mandatory) and first_name, last_name (optinal). Keep order&quot;);<br>
&gt; +    }<br>
&gt; +    printf (&quot; %-5s %-10s\t%-s\n&quot;, &#39;-e,&#39;, &#39;--email&#39;, &quot;e-mail address&quot;);<br>
&gt; +<br>
&gt; +    exit;<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Check if files directed in command line exists<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub verify_opt_file<br>
&gt; +{<br>
&gt; +    my (@files)=@_;<br>
&gt; +    foreach my $file (@files)<br>
&gt; +    {<br>
&gt; +        if( ! -e $file)<br>
&gt; +        {<br>
&gt; +            die &quot;$file doesn&#39;t exist!&quot;;<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Ping procedure<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub ping<br>
&gt; +{<br>
&gt; +    my ($conf_ref)=@_;<br>
&gt; +<br>
&gt; +    my $ua = LWP::UserAgent-&gt;new();<br>
&gt; +    $ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; +    $ua-&gt;proxy(&#39;http&#39;, $ENV{&#39;http_proxy&#39;});<br>
&gt; +<br>
&gt; +    my $request = POST(<br>
&gt; +                    $conf_ref-&gt;{url},<br>
&gt; +                    Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                    Content =&gt; [<br>
&gt; +                            PING      =&gt; 1,<br>
&gt; +                            description =&gt; &#39;bquery ping&#39;<br>
&gt; +                             ]);<br>
&gt; +<br>
&gt; +    $request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; +<br>
&gt; +    my $response = $ua-&gt;request($request);<br>
&gt; +<br>
&gt; +    print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;is_success;<br>
&gt; +    print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;content_type eq &#39;text/html&#39;;<br>
&gt; +<br>
&gt; +    print $response-&gt;content;<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Upload procedure<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub upload<br>
&gt; +{<br>
&gt; +    my ($conf_ref)=@_;<br>
&gt; +    my $i = 0;<br>
&gt; +    use MongoDB;<br>
&gt; +     use MongoDB::OID;<br>
&gt; +     use YAML;<br>
&gt; +     use Data::Dumper;<br>
&gt; +     use YAML::XS;<br>
&gt; +     my $conn = MongoDB::Connection-&gt;new(host =&gt; &#39;bgate.mellanox.com:27017&#39;);<br>
&gt; +     my $db = $conn-&gt;mtt;<br>
&gt; +     my $TestRunPhase = $db-&gt;TestRunPhase;<br>
&gt; +    for ($i=0; $i&lt;@{$conf_ref-&gt;{data}}; $i++)<br>
&gt; +    {<br>
&gt; +        my $ua = LWP::UserAgent-&gt;new();<br>
&gt; +        $ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; +        $ua-&gt;proxy(&#39;http&#39;, $ENV{&#39;http_proxy&#39;});<br>
&gt; +<br>
&gt; +        my $request;<br>
&gt; +        my $data_file = &quot;$conf_ref-&gt;{data}-&gt;[$i]&quot; if defined($conf_ref-&gt;{data}-&gt;[$i]);<br>
&gt; +        my $raw_file = &quot;$conf_ref-&gt;{raw}-&gt;[$i]&quot; if defined($conf_ref-&gt;{raw}-&gt;[$i]);<br>
&gt; +        if ($raw_file)<br>
&gt; +        {<br>
&gt; +                     #$request = POST(<br>
&gt; +                     #               $conf_ref-&gt;{url},<br>
&gt; +                     #               Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                     #               Content =&gt; [<br>
&gt; +                     #                   SUBMIT      =&gt; 1,<br>
&gt; +                     #                           data        =&gt; [$data_file],<br>
&gt; +                     #                   raw         =&gt; [$raw_file],<br>
&gt; +                     #                           description =&gt; &#39;MTT Results Submission&#39;<br>
&gt; +                     #                        ]);<br>
&gt; +        }<br>
&gt; +        else<br>
&gt; +        {<br>
&gt; +                     print &quot;load $data_file\n&quot;;<br>
&gt; +                     open my $fh, &#39;&lt;&#39;, &quot;$data_file&quot;<br>
&gt; +                     or die &quot;can&#39;t open config file: $!&quot;;<br>
&gt; +                     my $f_hash = LoadFile($fh);<br>
&gt; +                     #print Dumper($f_hash), &quot;\n&quot;;<br>
&gt; +                     my $inserted_id = $TestRunPhase-&gt;insert($f_hash);<br>
&gt; +                     print &quot;inserted id $inserted_id \n&quot;;<br>
&gt; +                     #$request = POST(<br>
&gt; +                     #                $conf_ref-&gt;{url},<br>
&gt; +                     #               Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                     #               Content =&gt; [<br>
&gt; +                     #                   SUBMIT      =&gt; 1,<br>
&gt; +                     #                   data        =&gt; [$data_file],<br>
&gt; +                     #                   description =&gt; &#39;bquery submit&#39;<br>
&gt; +                     #                ]);<br>
&gt; +        }<br>
&gt; +<br>
&gt; +             #$request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; +<br>
&gt; +             #my $response = $ua-&gt;request($request);<br>
&gt; +<br>
&gt; +             #print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; +             #   unless $response-&gt;is_success;<br>
&gt; +             #print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; +             #    unless $response-&gt;content_type eq &#39;text/html&#39;;<br>
&gt; +<br>
&gt; +             #print $response-&gt;content;<br>
&gt; +    }<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Query procedure<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub query<br>
&gt; +{<br>
&gt; +    my ($conf_ref)=@_;<br>
&gt; +<br>
&gt; +    my $ua = LWP::UserAgent-&gt;new();<br>
&gt; +    $ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; +    $ua-&gt;proxy(&#39;http&#39;, $ENV{&#39;http_proxy&#39;});<br>
&gt; +<br>
&gt; +    my $request = POST(<br>
&gt; +                    $conf_ref-&gt;{url},<br>
&gt; +                    Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                    Content =&gt; [<br>
&gt; +                            QUERY       =&gt; 1,<br>
&gt; +                            gql         =&gt; $conf_ref-&gt;{gql},<br>
&gt; +                            raw         =&gt; $conf_ref-&gt;{raw},<br>
&gt; +                            description =&gt; &#39;bquery view&#39;<br>
&gt; +                             ]);<br>
&gt; +<br>
&gt; +    $request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; +<br>
&gt; +    my $response = $ua-&gt;request($request);<br>
&gt; +<br>
&gt; +    die &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;is_success;<br>
&gt; +    die &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;content_type eq &#39;text/yaml&#39;;<br>
&gt; +<br>
&gt; +     # Load respond into YAML hash<br>
&gt; +    use YAML::Syck ();<br>
&gt; +    $YAML::Syck::ImplicitTyping = 1;<br>
&gt; +     my $temp_str = $response-&gt;content;<br>
&gt; +    my $data = eval {YAML::Syck::Load($temp_str)};<br>
&gt; +#    use YAML::XS ();<br>
&gt; +#    my $temp_str = $response-&gt;content;<br>
&gt; +#    my $data = eval {YAML::XS::Load($temp_str)};<br>
&gt; +    if (not defined $data or $@)<br>
&gt; +    {<br>
&gt; +        die &quot;$!&quot;;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    MTT::Files::mkdir($conf_ref-&gt;{dir}) || die &quot;cannot mkdir $conf_ref-&gt;{dir}: $!&quot;;<br>
&gt; +<br>
&gt; +    my $default_form = {<br>
&gt; +        product =&gt; &#39;mtt-gds&#39;,<br>
&gt; +        version =&gt; &quot;0.1&quot;,<br>
&gt; +        app_id  =&gt; &#39;query&#39;<br>
&gt; +    };<br>
&gt; +<br>
&gt; +    foreach my $respond_form (@{$data-&gt;{data}})<br>
&gt; +    {<br>
&gt; +     my $filename = &quot;$conf_ref-&gt;{dir}\/$respond_form-&gt;{key}&quot;;<br>
&gt; +     my $raw_filename = $filename.&#39;.zip&#39;;<br>
&gt; +     $filename = $filename.&#39;.yaml&#39;;<br>
&gt; +<br>
&gt; +             my %form = (%$respond_form, %$default_form);<br>
&gt; +<br>
&gt; +         if (int($conf_ref-&gt;{raw}) == 1 &amp;&amp; exists($form{raw}))<br>
&gt; +         {<br>
&gt; +             open(fh_temp, &quot;&gt;$raw_filename&quot;) || die &quot;cannot create $raw_filename: $!&quot;;<br>
&gt; +             binmode fh_temp;<br>
&gt; +             print fh_temp $form{raw};<br>
&gt; +             close fh_temp;<br>
&gt; +<br>
&gt; +            delete $form{raw};<br>
&gt; +         }<br>
&gt; +<br>
&gt; +        delete $form{key};<br>
&gt; +<br>
&gt; +        # Generate YAML file contents<br>
&gt; +        YAML::XS::DumpFile($filename, \%form);<br>
&gt; +    }<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# View procedure<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub view<br>
&gt; +{<br>
&gt; +    my ($conf_ref)=@_;<br>
&gt; +<br>
&gt; +    my $ua = LWP::UserAgent-&gt;new();<br>
&gt; +    $ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; +    $ua-&gt;proxy(&#39;http&#39;, $ENV{&#39;http_proxy&#39;});<br>
&gt; +<br>
&gt; +    my $request;<br>
&gt; +    if (exists($conf_ref-&gt;{kind}))<br>
&gt; +    {<br>
&gt; +        $request = POST(<br>
&gt; +                    $conf_ref-&gt;{url},<br>
&gt; +                    Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                    Content =&gt; [<br>
&gt; +                            VIEW      =&gt; 1,<br>
&gt; +                            kind      =&gt; $conf_ref-&gt;{kind},<br>
&gt; +                            format    =&gt; $conf_ref-&gt;{format},<br>
&gt; +                            description =&gt; &#39;bquery view&#39;<br>
&gt; +                             ]);<br>
&gt; +    }<br>
&gt; +    elsif (exists($conf_ref-&gt;{gql}))<br>
&gt; +    {<br>
&gt; +        $request = POST(<br>
&gt; +                    $conf_ref-&gt;{url},<br>
&gt; +                    Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                    Content =&gt; [<br>
&gt; +                            VIEW      =&gt; 1,<br>
&gt; +                            gql      =&gt; $conf_ref-&gt;{gql},<br>
&gt; +                            format    =&gt; $conf_ref-&gt;{format},<br>
&gt; +                            description =&gt; &#39;bquery view&#39;<br>
&gt; +                             ]);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    $request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; +<br>
&gt; +    my $response = $ua-&gt;request($request);<br>
&gt; +<br>
&gt; +    print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;is_success;<br>
&gt; +    print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;content_type eq &#39;text/html&#39;;<br>
&gt; +<br>
&gt; +    print $response-&gt;content;<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Admin procedure<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub admin<br>
&gt; +{<br>
&gt; +    my ($conf_ref)=@_;<br>
&gt; +<br>
&gt; +    my $ua = LWP::UserAgent-&gt;new();<br>
&gt; +    $ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; +    $ua-&gt;proxy(&#39;http&#39;, $ENV{&#39;http_proxy&#39;});<br>
&gt; +<br>
&gt; +    my $request;<br>
&gt; +    if (exists($conf_ref-&gt;{newuser}) &amp;&amp; $#{$conf_ref-&gt;{newuser}} &gt;=2)<br>
&gt; +    {<br>
&gt; +        $request = POST(<br>
&gt; +                    $conf_ref-&gt;{url},<br>
&gt; +                    Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +                    Content =&gt; [<br>
&gt; +                            ADMIN       =&gt; 1,<br>
&gt; +                            _NEWUSER_   =&gt; 1,<br>
&gt; +                            username    =&gt; $conf_ref-&gt;{newuser}-&gt;[0],<br>
&gt; +                            password    =&gt; $conf_ref-&gt;{newuser}-&gt;[1],<br>
&gt; +                            email       =&gt; $conf_ref-&gt;{newuser}-&gt;[2],<br>
&gt; +                            first_name  =&gt; ($#{$conf_ref-&gt;{newuser}} &gt;=3 ? $conf_ref-&gt;{newuser}-&gt;[3] : &#39;&#39;),<br>
&gt; +                            last_name   =&gt; ($#{$conf_ref-&gt;{newuser}} &gt;=4 ? $conf_ref-&gt;{newuser}-&gt;[4] : &#39;&#39;),<br>
&gt; +                            description =&gt; &#39;bquery admin&#39;<br>
&gt; +                             ]);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    $request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; +<br>
&gt; +    my $response = $ua-&gt;request($request);<br>
&gt; +<br>
&gt; +    print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;is_success;<br>
&gt; +    print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; +        unless $response-&gt;content_type eq &#39;text/html&#39;;<br>
&gt; +<br>
&gt; +    print $response-&gt;content;<br>
&gt; +}<br>
&gt; +<br>
&gt; +<br>
&gt; +###############################################################################<br>
&gt; +#<br>
&gt; +# Send files by e-mail<br>
&gt; +#<br>
&gt; +###############################################################################<br>
&gt; +sub send_results_by_mail<br>
&gt; +{<br>
&gt; +    my ($mail_to, @files) = @_;<br>
&gt; +<br>
&gt; +    foreach my $mail_file (@files)<br>
&gt; +    {<br>
&gt; +        system(&quot;echo report is attached | /usr/bin/mutt -s &#39;breport&#39; -a $mail_file $mail_to&quot;);<br>
&gt; +    }<br>
&gt; +}<br>
&gt;<br>
&gt; Added: trunk/lib/MTT/Reporter/MTTMongodb.pm<br>
&gt; ==============================================================================<br>
&gt; --- /dev/null 00:00:00 1970   (empty, because file is newly added)<br>
&gt; +++ trunk/lib/MTT/Reporter/MTTMongodb.pm      2012-08-01 05:46:03 EDT (Wed, 01 Aug 2012)      (r1481)<br>
&gt; @@ -0,0 +1,1195 @@<br>
&gt; +#!/usr/bin/env perl<br>
&gt; +#<br>
&gt; +# Copyright (c) 2009 Voltaire<br>
&gt; +# Copyright (c) 2010 Cisco Systems, Inc.  All rights reserved.<br>
&gt; +# $COPYRIGHT$<br>
&gt; +#<br>
&gt; +# Additional copyrights may follow<br>
&gt; +#<br>
&gt; +# $HEADER$<br>
&gt; +#<br>
&gt; +<br>
&gt; +package MTT::Reporter::MTTMongodb;<br>
&gt; +<br>
&gt; +use strict;<br>
&gt; +use MTT::Messages;<br>
&gt; +use MTT::Values;<br>
&gt; +use MTT::Values::Functions;<br>
&gt; +use MTT::Version;<br>
&gt; +use MTT::Globals;<br>
&gt; +use MTT::DoCommand;<br>
&gt; +use LWP::UserAgent;<br>
&gt; +use HTTP::Request::Common qw(POST);<br>
&gt; +use Data::Dumper;<br>
&gt; +use File::Basename;<br>
&gt; +use File::Temp qw(tempfile tempdir);<br>
&gt; +use YAML::XS;<br>
&gt; +<br>
&gt; +use POSIX qw(strftime);<br>
&gt; +use File::stat;<br>
&gt; +<br>
&gt; +# http credentials<br>
&gt; +my $username;<br>
&gt; +my $password;<br>
&gt; +my $realm;<br>
&gt; +my $url;<br>
&gt; +my $port;<br>
&gt; +<br>
&gt; +# platform common name<br>
&gt; +my $platform;<br>
&gt; +<br>
&gt; +# LWP user agents (one per proxy)<br>
&gt; +my @lwps;<br>
&gt; +<br>
&gt; +# Hostname string to report<br>
&gt; +my $hostname;<br>
&gt; +<br>
&gt; +# User ID (can be overridden in the INI)<br>
&gt; +my $local_username;<br>
&gt; +<br>
&gt; +# directory and file to write to<br>
&gt; +my $dirname;<br>
&gt; +<br>
&gt; +my $testrun_files_count    = 0;<br>
&gt; +my $testbuild_files_count  = 0;<br>
&gt; +my $mpiinstall_files_count = 0;<br>
&gt; +<br>
&gt; +our $clusterInfo = undef;<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub Init {<br>
&gt; +    my ($ini, $section) = @_;<br>
&gt; +<br>
&gt; +    Debug(&quot;[MTTGDS reporter] Init\n&quot;);<br>
&gt; +<br>
&gt; +    # Have we been initialized already?  If so, error -- per #261,<br>
&gt; +    # this module can currently only handle submitting to one database<br>
&gt; +    # in a given run.<br>
&gt; +<br>
&gt; +    if (defined($username)) {<br>
&gt; +        Error(&quot;The MTTGDS plugin can only be used once in an INI file.\n&quot;);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # Extract data from the ini fields<br>
&gt; +<br>
&gt; +    $username = Value($ini, $section, &quot;mttdatabase_username&quot;);<br>
&gt; +    $password = Value($ini, $section, &quot;mttdatabase_password&quot;);<br>
&gt; +    $url = Value($ini, $section, &quot;mttdatabase_url&quot;);<br>
&gt; +     #$url = Value($ini, $section, &quot;mttdatabase_url&quot;).&#39;client&#39;;<br>
&gt; +    $realm = Value($ini, $section, &quot;mttdatabase_realm&quot;);<br>
&gt; +    $hostname = Value($ini, $section, &quot;mttdatabase_hostname&quot;);<br>
&gt; +    $local_username = Value($ini, &quot;mtt&quot;, &quot;local_username&quot;);<br>
&gt; +<br>
&gt; +    if (!$url) {<br>
&gt; +        Warning(&quot;Need URL in MTTGDS Reporter section [$section]\n&quot;);<br>
&gt; +        return undef;<br>
&gt; +    }<br>
&gt; +    my $count = 0;<br>
&gt; +    ++$count if ($username);<br>
&gt; +    ++$count if ($password);<br>
&gt; +    ++$count if ($realm);<br>
&gt; +    if ($count &gt; 0 &amp;&amp; $count != 3) {<br>
&gt; +        Warning(&quot;MTTGDS Reporter section [$section]: if password, username, or realm is specified, they all must be specified.\n&quot;);<br>
&gt; +        return undef;<br>
&gt; +    }<br>
&gt; +    $platform = Value($ini, $section, &quot;mttdatabase_platform&quot;);<br>
&gt; +<br>
&gt; +    # Extract the host and port from the URL.  Needed for the<br>
&gt; +    # credentials section.<br>
&gt; +<br>
&gt; +    my $dir;<br>
&gt; +    my $host = $url;<br>
&gt; +    if ($host =~ /(http:\/\/[-a-zA-Z0-9.]+):(\d+)\/?(.*)?$/) {<br>
&gt; +        $host = $1;<br>
&gt; +        $port = $2;<br>
&gt; +        $dir = $3;<br>
&gt; +    } elsif ($host =~ /(http:\/\/[-a-zA-Z0-9.]+)\/?(.*)?$/) {<br>
&gt; +        $host = $1;<br>
&gt; +        $dir = $2;<br>
&gt; +        $port = 80;<br>
&gt; +    } elsif ($host =~ /(https:\/\/[-a-zA-Z0-9.]+)\/?(.*)?$/) {<br>
&gt; +        $host = $1;<br>
&gt; +        $dir = $2;<br>
&gt; +        $port = 443;<br>
&gt; +    } elsif  ($host =~ /(https:\/\/[-a-zA-Z0-9.]+):(\d+)\/?(.*)?$/) {<br>
&gt; +        $host = $1;<br>
&gt; +        $port = $2;<br>
&gt; +        $dir = $3;<br>
&gt; +    } else {<br>
&gt; +        Warning(&quot;MTTGDS Reporter did not get a valid url: $url .\n&quot;);<br>
&gt; +        return undef;<br>
&gt; +    }<br>
&gt; +    $url = &quot;$host:$port&quot;;<br>
&gt; +    # Setup proxies<br>
&gt; +    my $scheme = (80 == $port) ? &quot;http&quot; : &quot;https&quot;;<br>
&gt; +<br>
&gt; +    # Create the Perl LWP stuff to setup for HTTP requests later.<br>
&gt; +    # Make one for each proxy (we&#39;ll always have at least one proxy<br>
&gt; +    # entry, even if it&#39;s empty).<br>
&gt; +    my $proxies = \@{$MTT::Globals::Values-&gt;{proxies}-&gt;{$scheme}};<br>
&gt; +    foreach my $p (@{$proxies}) {<br>
&gt; +        my %params = { env_proxy =&gt; 0 };<br>
&gt; +        my $ua = LWP::UserAgent-&gt;new(%params);<br>
&gt; +<br>
&gt; +        # @#$@!$# LWP proxying for https *does not work*.  So<br>
&gt; +        # don&#39;t set $ua-&gt;proxy() for it.  Instead, we&#39;ll set<br>
&gt; +        # $ENV{https_proxy} whenever we process requests that<br>
&gt; +        # require SSL proxying, because that is obeyed deep down<br>
&gt; +        # in the innards underneath LWP.<br>
&gt; +        $ua-&gt;proxy([$scheme], $p-&gt;{proxy})<br>
&gt; +            if ($p-&gt;{proxy} ne &quot;&quot; &amp;&amp; $scheme ne &quot;https&quot;);<br>
&gt; +        $ua-&gt;agent(&quot;MPI Test MTTGDS Reporter&quot;);<br>
&gt; +        push(@lwps, {<br>
&gt; +            scheme =&gt; $scheme,<br>
&gt; +            agent =&gt; $ua,<br>
&gt; +            proxy =&gt; $p-&gt;{proxy},<br>
&gt; +            source =&gt; $p-&gt;{source},<br>
&gt; +        });<br>
&gt; +    }<br>
&gt; +    if ($realm &amp;&amp; $username &amp;&amp; $password) {<br>
&gt; +        Verbose(&quot;   Set HTTP credentials for realm \&quot;$realm\&quot;\n&quot;);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # Do a test ping to ensure that we can reach this URL.<br>
&gt; +<br>
&gt; +    Debug(&quot;MTTGDS client pinging a server...\n&quot;);<br>
&gt; +    my $form = {<br>
&gt; +        PING =&gt; 1,<br>
&gt; +        Description =&gt; &#39;Pinging a server&#39;<br>
&gt; +    };<br>
&gt; +     #DINARDINARDINARDINAR<br>
&gt; +     #my $req = POST ($url, $form);<br>
&gt; +    #$req-&gt;authorization_basic($username, $password);<br>
&gt; +     #my $response = _do_request($req);<br>
&gt; +     #if (! $response-&gt;is_success()) {<br>
&gt; +     #    Warning(&quot;&gt;&gt; Failed test ping to MTTGDS URL: $url\n&quot;);<br>
&gt; +     #    Warning(&quot;&gt;&gt; Error was: &quot; . $response-&gt;status_line . &quot;\n&quot; .<br>
&gt; +     #            $response-&gt;content);<br>
&gt; +     #    Error(&quot;&gt;&gt; Do not want to continue with possible bad submission URL -- aborting\n&quot;);<br>
&gt; +     #}<br>
&gt; +     #DINARDINARDINARDINAR<br>
&gt; +     #Debug(&quot;MTTGDS reporter initialized ($realm, $username, XXXXXX, $url, $platform)\n&quot;);<br>
&gt; +     #Debug(&quot;MTTGDS reporter respond content ($response-&gt;content)\n&quot;);<br>
&gt; +<br>
&gt; +    # Extract data from the ini fields<br>
&gt; +<br>
&gt; +    $dirname = MTT::DoCommand::cwd();<br>
&gt; +<br>
&gt; +    Debug(&quot;Collect cluster information...\n&quot;);<br>
&gt; +    my $clusterinfo_module = MTT::Values::Value($ini, &quot;vbench&quot;, &quot;clusterinfo_module&quot;);<br>
&gt; +    $clusterinfo_module = &quot;UnknownCluster&quot; if (!defined($clusterinfo_module) || $clusterinfo_module eq &quot;&quot;);<br>
&gt; +    Debug(&quot;Use $clusterinfo_module module to collect information.\n&quot;);<br>
&gt; +<br>
&gt; +    $clusterInfo = MTT::Module::Run(&quot;MTT::Reporter::Utils::$clusterinfo_module&quot;, &quot;get_cluster_info&quot;, MTT::Values::Functions::env_hosts(2));<br>
&gt; +    if (!defined($clusterInfo)) {<br>
&gt; +        Error(&quot;Fatal: Can&#39;t collect cluster information\n&quot;);<br>
&gt; +    }<br>
&gt; +    Debug(&quot;Collect cluster information Finished\n&quot;);<br>
&gt; +<br>
&gt; +    Debug(&quot;File reporter initialized ($dirname)\n&quot;);<br>
&gt; +<br>
&gt; +    return 1;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +my $entries;<br>
&gt; +<br>
&gt; +sub Submit {<br>
&gt; +<br>
&gt; +<br>
&gt; +    my ( $info, $newentries ) = @_;<br>
&gt; +<br>
&gt; +    Debug(&quot;[MTTGDS reporter] Submit\n&quot;);<br>
&gt; +<br>
&gt; +    if (!defined($newentries)) {<br>
&gt; +        Warning(&quot;[MTTGDS reporter]: Submit parameter is undef. Skip.\n&quot;);<br>
&gt; +        return;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    if ( !defined($entries) ) {<br>
&gt; +        %$entries = ();<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    foreach my $phase (keys(%$newentries))<br>
&gt; +     {<br>
&gt; +        my $phase_obj = $newentries -&gt;{$phase};<br>
&gt; +<br>
&gt; +        foreach my $section ( keys(%$phase_obj) )<br>
&gt; +             {<br>
&gt; +           Debug(&quot;Phase: $phase Section: $section\n&quot;);<br>
&gt; +<br>
&gt; +           my $new_section_obj = $phase_obj-&gt;{$section};<br>
&gt; +<br>
&gt; +           my $section_obj = $entries-&gt;{$phase}-&gt;{$section};<br>
&gt; +<br>
&gt; +           foreach my $report (@$new_section_obj)<br>
&gt; +                {<br>
&gt; +               Debug(&quot;  add report\n&quot;);<br>
&gt; +               push(@$section_obj, $report);<br>
&gt; +           }<br>
&gt; +<br>
&gt; +           $entries-&gt;{$phase}-&gt;{$section} = $section_obj;<br>
&gt; +<br>
&gt; +       }<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    Verbose(&quot;&gt;&gt; Reporter MTTGDS: cached for later submit\n&quot;);<br>
&gt; +    Debug(&quot;[MTTGDS reporter] Exit from Submit\n&quot;);<br>
&gt; +}<br>
&gt; +<br>
&gt; +sub Finalize {<br>
&gt; +    Debug(&quot;[MTTGDS reporter] Finalize\n&quot;);<br>
&gt; +<br>
&gt; +    _do_submit();<br>
&gt; +    undef $entries;<br>
&gt; +<br>
&gt; +    undef $username;<br>
&gt; +    undef $password;<br>
&gt; +    undef $realm;<br>
&gt; +    undef $url;<br>
&gt; +    undef $platform;<br>
&gt; +    undef @lwps;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _do_submit {<br>
&gt; +     #DinarDinarDinarDinar<br>
&gt; +     use MongoDB;<br>
&gt; +     use MongoDB::OID;<br>
&gt; +     use YAML;<br>
&gt; +     use Data::Dumper;<br>
&gt; +     use YAML::XS;<br>
&gt; +     $url =~ s/http:\/\///;<br>
&gt; +     my $conn = MongoDB::Connection-&gt;new(host =&gt; $url);<br>
&gt; +     my $db = $conn-&gt;mtt;<br>
&gt; +     my $TestRunPhase = $db-&gt;TestRunPhase;<br>
&gt; +     my $MPIInstallPhase = $db-&gt;MPIInstallPhase;<br>
&gt; +     my $TestBuildPhase = $db-&gt;TestBuildPhase;<br>
&gt; +     my $doc;<br>
&gt; +     my @numbers;<br>
&gt; +     my $inserted_id;<br>
&gt; +     my $old_date;<br>
&gt; +     my %new_date;<br>
&gt; +     #DinarDinarDinarDinar<br>
&gt; +<br>
&gt; +    # Make a default form that will be used to seed all the forms that<br>
&gt; +    # will be sent<br>
&gt; +    my $default_form = {<br>
&gt; +        product =&gt; &#39;mtt-gds&#39;,<br>
&gt; +        version =&gt; &quot;0.1&quot;,<br>
&gt; +        app_id  =&gt; &#39;submit&#39;,<br>
&gt; +    };<br>
&gt; +<br>
&gt; +    my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +    my $submit_failed_results = MTT::Values::Value( $ini, &quot;VBench&quot;, &#39;submit_failed_results_to_gds&#39; );<br>
&gt; +<br>
&gt; +    # mtt ini flag to control what mtt results to submit to GDS<br>
&gt; +    if (!defined($submit_failed_results) || $submit_failed_results eq &#39;&#39;)<br>
&gt; +    {<br>
&gt; +        $submit_failed_results = 1;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    my $submit_results = MTT::Values::Value( $ini, &quot;VBench&quot;, &#39;submit_results_to_gds&#39; );<br>
&gt; +    # mtt ini flag to control what mtt results to submit to GDS<br>
&gt; +    if (!defined($submit_results) || $submit_results eq &#39;&#39; || $submit_results eq &#39;1&#39; || $submit_results eq &#39;True&#39;)<br>
&gt; +    {<br>
&gt; +        $submit_results = 1;<br>
&gt; +    } else {<br>
&gt; +        $submit_results = 0;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    #foreach my $phase (keys(%$entries)) {<br>
&gt; +    foreach my $phase ( &quot;MPI Install&quot;, &quot;Test Build&quot;, &quot;Test Run&quot; )<br>
&gt; +     {<br>
&gt; +        my $submitted = 0;<br>
&gt; +        my $phase_obj = $entries-&gt;{$phase};<br>
&gt; +<br>
&gt; +        foreach my $section ( keys(%$phase_obj) )<br>
&gt; +             {<br>
&gt; +            my $section_obj = $phase_obj-&gt;{$section};<br>
&gt; +<br>
&gt; +            foreach my $report_original (@$section_obj)<br>
&gt; +                     {<br>
&gt; +<br>
&gt; +                # Each section of a phase gets its own report to the<br>
&gt; +                # database.  Make a deep copy of the default form to start<br>
&gt; +                # with.<br>
&gt; +                my $form;<br>
&gt; +                %$form = %{$default_form};<br>
&gt; +                $form-&gt;{modules} = {};<br>
&gt; +<br>
&gt; +                # Ensure to do a deep copy of the report (vs. just<br>
&gt; +                # copying the reference) because we want to locally<br>
&gt; +                # change some values<br>
&gt; +                my $report;<br>
&gt; +                %$report = %{$report_original};<br>
&gt; +                %$report-&gt;{files_to_copy} = {} if (!exists($report-&gt;{files_to_copy}));<br>
&gt; +<br>
&gt; +                $MTT::Values::Functions::current_report = $report;<br>
&gt; +<br>
&gt; +                my $attachment = {};<br>
&gt; +<br>
&gt; +                if ( $phase eq &quot;Test Run&quot; )<br>
&gt; +                             {<br>
&gt; +<br>
&gt; +                    my $mpi_install = $entries-&gt;{&quot;MPI Install&quot;}-&gt;{$report-&gt;{mpi_install_section_name}};<br>
&gt; +                    my $mpi_report = @$mpi_install[0];<br>
&gt; +<br>
&gt; +                    _process_phase_mpi_install(&quot;MPI Install&quot;, $report-&gt;{mpi_install_section_name}, $mpi_report, $form-&gt;{modules});<br>
&gt; +<br>
&gt; +                    my $test_build = $entries-&gt;{&quot;Test Build&quot;}-&gt;{$report-&gt;{test_build_section_name}};<br>
&gt; +                    my $build_report = @$test_build[0];<br>
&gt; +                    _process_phase_test_build(&quot;Test Build&quot;, $report-&gt;{test_build_section_name}, $build_report, $form-&gt;{modules});<br>
&gt; +<br>
&gt; +                    _process_phase_test_run($phase, $section, $report, $form-&gt;{modules});<br>
&gt; +                    $attachment = $report-&gt;{files_to_copy};<br>
&gt; +                }<br>
&gt; +                elsif ( $phase eq &quot;Test Build&quot; )<br>
&gt; +                             {<br>
&gt; +                    my $mpi_install = $entries-&gt;{&quot;MPI Install&quot;}-&gt;{$report-&gt;{mpi_install_section_name}};<br>
&gt; +                    my $mpi_report = @$mpi_install[0];<br>
&gt; +                    _process_phase_mpi_install(&quot;MPI Install&quot;, $report-&gt;{mpi_install_section_name}, $mpi_report, $form-&gt;{modules});<br>
&gt; +<br>
&gt; +                    _process_phase_test_build($phase, $section, $report, $form-&gt;{modules});<br>
&gt; +                }<br>
&gt; +                elsif ( $phase eq &quot;MPI Install&quot; )<br>
&gt; +                             {<br>
&gt; +                    _process_phase_mpi_install($phase, $section, $report, $form-&gt;{modules});<br>
&gt; +                }<br>
&gt; +                else<br>
&gt; +                             {<br>
&gt; +                    Debug(&quot;Phase: $phase Section: $section SKIPPED\n&quot;);<br>
&gt; +                    next;<br>
&gt; +                }<br>
&gt; +<br>
&gt; +                $MTT::Values::Functions::current_report = undef;<br>
&gt; +<br>
&gt; +                Debug(&quot;Submitting to MongoDB...\n&quot;);<br>
&gt; +<br>
&gt; +                my ($req, $file) = _prepare_request($phase, $report, $form, $attachment);<br>
&gt; +<br>
&gt; +                # do not submit result with non PASS status in case &#39;submit_failed_results_to_gds&#39; key is set as &#39;0&#39;<br>
&gt; +                if ( ($submit_failed_results == 0) &amp;&amp; ($report-&gt;{test_result} != 1) )<br>
&gt; +                {<br>
&gt; +                    Debug(&quot;MTT ini-file has key \&#39;submit_failed_results_to_gds\&#39;=$submit_failed_results and phase: $phase test_result: $report-&gt;{test_result}\n&quot;);<br>
&gt; +                    next;<br>
&gt; +                }<br>
&gt; +<br>
&gt; +                if ( $submit_results == 0 )<br>
&gt; +                {<br>
&gt; +                    Debug(&quot;MTT ini-file has key \&#39;submit_results_to_gds\&#39;=$submit_results\n&quot;);<br>
&gt; +                    next;<br>
&gt; +                }<br>
&gt; +<br>
&gt; +                             #DinarDinarDinar<br>
&gt; +                if ( $phase eq &quot;Test Run&quot; )<br>
&gt; +                             {<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;TestRunPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;TestRun_start_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;TestBuild_start_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;MpiInstall_start_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;TestRunPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +<br>
&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;TestRun_end_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;TestBuild_end_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;MpiInstall_end_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     my $inserted_id = $TestRunPhase-&gt;insert($form);<br>
&gt; +<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$doc = ($TestRunPhase-&gt;find({&#39;_id&#39;=&gt;$inserted_id}))-&gt;next;<br>
&gt; +<br>
&gt; +                                     #TestRun<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;TestRunPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestRunPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.TestRunPhase.start_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;TestRunPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestRunPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.TestRunPhase.end_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                                     #MPIInstall<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestRunPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.MpiInstallPhase.start_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestRunPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.MpiInstallPhase.end_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #TestBuild<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestRunPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.TestBuildPhase.start_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestRunPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.TestBuildPhase.end_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +<br>
&gt; +<br>
&gt; +                             }<br>
&gt; +                             if ( $phase eq &quot;MPI Install&quot; )<br>
&gt; +                             {<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;MpiInstall_start_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;MpiInstall_end_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +                                     $inserted_id =  $MPIInstallPhase-&gt;insert($form);<br>
&gt; +<br>
&gt; +<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$doc = ($MPIInstallPhase-&gt;find({&#39;_id&#39;=&gt;$inserted_id}))-&gt;next;<br>
&gt; +<br>
&gt; +                                     #MPIInstall<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$MPIInstallPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.MpiInstallPhase.start_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;MpiInstallPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$MPIInstallPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.MpiInstallPhase.end_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                             }<br>
&gt; +                             if ( $phase eq &quot;Test Build&quot;)<br>
&gt; +                             {<br>
&gt; +<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$form-&gt;{&#39;TestBuild_start_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$old_date = $form-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +<br>
&gt; +                                     #$form-&gt;{&#39;TestBuild_end_time&#39;} = DateTime-&gt;new(%new_date);<br>
&gt; +<br>
&gt; +                                     my $inserted_id =  $TestBuildPhase-&gt;insert($form);<br>
&gt; +<br>
&gt; +<br>
&gt; +<br>
&gt; +                                     #$doc = ($TestBuildPhase-&gt;find({&#39;_id&#39;=&gt;$inserted_id}))-&gt;next;<br>
&gt; +<br>
&gt; +                                     #TestBuild<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;start_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestBuildPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.TestBuildPhase.start_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +<br>
&gt; +                                     #$old_date = $doc-&gt;{&#39;modules&#39;}-&gt;{&#39;TestBuildPhase&#39;}-&gt;{&#39;end_time&#39;};<br>
&gt; +                                     #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; +                                     #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;,  @numbers[2], &quot;-day &quot;,  @numbers[3],&quot;-hour &quot; ,  @numbers[4] ,&quot;-min &quot;,   @numbers[5],&quot;-sec\n&quot;;<br>


&gt; +                                     #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; &#39;America/Chicago&#39;);<br>


&gt; +                                     #$TestBuildPhase-&gt;update({&#39;_id&#39;=&gt;$inserted_id},{&#39;$set&#39;=&gt;{&#39;modules.TestBuildPhase.end_time&#39;=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; +                             }<br>
&gt; +                             #DinarDinarDinar<br>
&gt; +<br>
&gt; +                $submitted = 1;<br>
&gt; +            }<br>
&gt; +        }<br>
&gt; +        Verbose(&quot;&gt;&gt; Submitted $phase to MongoDB\n&quot;)<br>
&gt; +            if ($submitted);<br>
&gt; +    }<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _process_phase_mpi_install {<br>
&gt; +    my ( $phase, $section, $report, $form )=@_;<br>
&gt; +    $form-&gt;{MpiInstallPhase} = {};<br>
&gt; +    my $phase_form = $form-&gt;{MpiInstallPhase};<br>
&gt; +<br>
&gt; +    _fill_submit_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_compiler_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_cluster_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_mpi_info( $phase, $section, $report, $form );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{start_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; +                        localtime $report-&gt;{start_timestamp} );<br>
&gt; +<br>
&gt; +    my $duration = $report-&gt;{duration};<br>
&gt; +    $duration =~ m/^(\w+)\s(.+)/;<br>
&gt; +    $duration = $1;<br>
&gt; +    $phase_form-&gt;{duration} = $duration;<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{end_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; +                        localtime ($report-&gt;{start_timestamp} + $phase_form-&gt;{duration}) );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{description} = $report-&gt;{description};<br>
&gt; +    $phase_form-&gt;{stdout} = $report-&gt;{result_stdout};<br>
&gt; +    $phase_form-&gt;{stderr} = $report-&gt;{result_stderr};<br>
&gt; +    $phase_form-&gt;{status} = $report-&gt;{test_result};<br>
&gt; +    $phase_form-&gt;{configuration} = $report-&gt;{configure_arguments};<br>
&gt; +<br>
&gt; +    my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +    my $mpi_section = $report-&gt;{mpi_install_section_name};<br>
&gt; +<br>
&gt; +    my $mpiget_section = MTT::Values::Value( $ini, &quot;MPI install: &quot; . $mpi_section, &quot;mpi_get&quot; );<br>
&gt; +<br>
&gt; +    my $mpiget_module = MTT::Values::Value( $ini, &quot;MPI get: &quot; . $mpiget_section, &quot;module&quot; );<br>
&gt; +<br>
&gt; +    if ($mpiget_module eq &quot;AlreadyInstalled&quot;) {<br>
&gt; +        $phase_form-&gt;{mpi_path} = MTT::Values::Value( $ini, &quot;MPI get: &quot;. $mpiget_section, &quot;alreadyinstalled_dir&quot; );<br>
&gt; +        $phase_form-&gt;{mpi_path} = EvaluateString( $phase_form-&gt;{mpi_path}, $ini, &quot;MPI get: &quot;. $mpiget_section );<br>
&gt; +    } else {<br>
&gt; +        my $mpi_install = $MTT::MPI::installs-&gt;{$mpiget_section}-&gt;{$report-&gt;{mpi_version}}-&gt;{$mpi_section};<br>
&gt; +        $phase_form-&gt;{mpi_path} = $mpi_install-&gt;{installdir};<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    return 0;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _process_phase_test_build {<br>
&gt; +    my ( $phase, $section, $report, $form )=@_;<br>
&gt; +    $form-&gt;{TestBuildPhase} = {};<br>
&gt; +    my $phase_form = $form-&gt;{TestBuildPhase};<br>
&gt; +<br>
&gt; +    _fill_submit_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_compiler_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_cluster_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_mpi_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_suite_info( $phase, $section, $report, $form );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{start_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; +                        localtime $report-&gt;{start_timestamp} );<br>
&gt; +<br>
&gt; +    my $duration = $report-&gt;{duration};<br>
&gt; +    $duration =~ m/^(\w+)\s(.+)/;<br>
&gt; +    $duration = $1;<br>
&gt; +    $phase_form-&gt;{duration} = $duration;<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{end_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; +                        localtime ($report-&gt;{start_timestamp} + $phase_form-&gt;{duration}) );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{description} = $report-&gt;{description};<br>
&gt; +    $phase_form-&gt;{stdout} = $report-&gt;{result_stdout};<br>
&gt; +    $phase_form-&gt;{stderr} = $report-&gt;{result_stderr};<br>
&gt; +    $phase_form-&gt;{status} = $report-&gt;{test_result};<br>
&gt; +<br>
&gt; +    return 0;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _process_phase_test_run {<br>
&gt; +    my ( $phase, $section, $report, $form )=@_;<br>
&gt; +    $form-&gt;{TestRunPhase} = {};<br>
&gt; +<br>
&gt; +    _pre_process_phase( $phase, $section, $report, $form );<br>
&gt; +<br>
&gt; +    # copy benchmark&#39;s additional data about mpi (filled in benchmark&#39;s analyzer)<br>
&gt; +    %$form-&gt;{TestRunPhase} = ( %$report-&gt;{testphase} ) if (defined ($report-&gt;{testphase}));#!!!!!!!!!!!!<br>
&gt; +    my $phase_form = $form-&gt;{TestRunPhase};<br>
&gt; +<br>
&gt; +    _fill_submit_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_compiler_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_cluster_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_mpi_info( $phase, $section, $report, $form );<br>
&gt; +    _fill_suite_info( $phase, $section, $report, $form );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{start_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; +                localtime $report-&gt;{start_timestamp} );<br>
&gt; +<br>
&gt; +    my $duration = $report-&gt;{duration};<br>
&gt; +    $duration =~ m/^(\w+)\s(.+)/;<br>
&gt; +    $duration = $1;<br>
&gt; +    $phase_form-&gt;{duration} = $duration;<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{end_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; +                localtime ($report-&gt;{start_timestamp} + $phase_form-&gt;{duration}) );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{description} = $report-&gt;{description};<br>
&gt; +    $phase_form-&gt;{stdout} = $report-&gt;{result_stdout};<br>
&gt; +    $phase_form-&gt;{stderr} = $report-&gt;{result_stderr};<br>
&gt; +    $phase_form-&gt;{status} = $report-&gt;{test_result};<br>
&gt; +    $phase_form-&gt;{cmdline} = $report-&gt;{command};<br>
&gt; +    my @sections;<br>
&gt; +    push( @sections, &quot;test run: &quot; . $section );<br>
&gt; +    push( @sections, &quot;MTT&quot; );<br>
&gt; +    push( @sections, &quot;VBench&quot; );<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{test_name} = $report-&gt;{test_name} if (!defined($phase_form-&gt;{test_name}));<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{mpi_nproc}    = int($report-&gt;{np});<br>
&gt; +    $phase_form-&gt;{mpi_hlist} = MTT::Values::Functions::env_hosts(2);<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{net_note} = _get_value( &quot;vbench:net_note&quot;, @sections );<br>
&gt; +<br>
&gt; +    my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +    my @taglist = ();<br>
&gt; +    my @tagsections = (@sections);<br>
&gt; +    foreach my $tagsection (@tagsections) {<br>
&gt; +       my @val = MTT::Values::Value($ini,  $tagsection, &quot;vbench:tag&quot;);<br>
&gt; +       if ( $#val != (-1) ) {<br>
&gt; +            @val = split(/\n/, $val[0]) if ($#val == 0);<br>
&gt; +            foreach (@val)<br>
&gt; +            {<br>
&gt; +                my $tag = $_;<br>
&gt; +                push( @taglist, $tag ) if ($tag);<br>
&gt; +            }<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +    @{$phase_form-&gt;{tag}} = @taglist;<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{test_case} = $report-&gt;{parameters}<br>
&gt; +        if ( !defined( $phase_form-&gt;{test_case} ) );<br>
&gt; +<br>
&gt; +    # JMS Why do we have an mpi_mca field?  Shouldn&#39;t this kind of<br>
&gt; +    # stuff be in the MPI Details parameters and network fields?<br>
&gt; +    if (!defined($phase_form-&gt;{mpi_mca})) {<br>
&gt; +        # JMS Should generlize this to be &quot;extract from the current<br>
&gt; +        # ::MPI::module&quot;.  There are other instances of this direct<br>
&gt; +        # call in MTT::Test::Analyze::Performance::*.<br>
&gt; +        $phase_form-&gt;{mpi_mca} =<br>
&gt; +            MTT::Values::Functions::MPI::OMPI::find_mca_params($report-&gt;{command});<br>
&gt; +<br>
&gt; +        if (!defined($phase_form-&gt;{mpi_rlist})) {<br>
&gt; +            my $rankfile = undef;<br>
&gt; +            my $cmdline  = $report-&gt;{command};<br>
&gt; +            if ( $cmdline =~ m/-rf\s([\S]+)/ ) {<br>
&gt; +                $rankfile = $1;<br>
&gt; +            }<br>
&gt; +            if ( $cmdline =~ m/--rankfile\s([\S]+)/ ) {<br>
&gt; +                $rankfile = $1;<br>
&gt; +            }<br>
&gt; +          $phase_form-&gt;{mpi_rlist} = $rankfile;<br>
&gt; +        }<br>
&gt; +    } else {<br>
&gt; +         if (!defined($phase_form-&gt;{mpi_rlist})) {<br>
&gt; +             $phase_form-&gt;{mpi_rlist} = &quot;&quot;;<br>
&gt; +         }<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    if ( $phase_form-&gt;{mpi_rlist} ne &quot;&quot;) {<br>
&gt; +        push(@{$report-&gt;{files_to_copy}}, $phase_form-&gt;{mpi_rlist});<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # fill mpi_btl string list<br>
&gt; +    if ($phase_form-&gt;{mpi_mca} =~ m/-mca\sbtl\s(\S+)/) {<br>
&gt; +        @{$phase_form-&gt;{mpi_btl}} = split /,/, $1;<br>
&gt; +    } else {<br>
&gt; +        @{$phase_form-&gt;{mpi_btl}} = ();<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # filling dynamic fields with prefix &quot;data_&quot;<br>
&gt; +    $phase_form-&gt;{data_message_size} = $report-&gt;{message_size} if (exists( $report-&gt;{message_size} ));<br>
&gt; +    $phase_form-&gt;{data_latency_min} = $report-&gt;{latency_min} if (exists( $report-&gt;{latency_min} ));<br>
&gt; +    $phase_form-&gt;{data_latency_avg} = $report-&gt;{latency_avg} if (exists( $report-&gt;{latency_avg} ));<br>
&gt; +    $phase_form-&gt;{data_latency_max} = $report-&gt;{latency_max} if (exists( $report-&gt;{latency_max} ));<br>
&gt; +    $phase_form-&gt;{data_bandwidth_min} = $report-&gt;{bandwidth_min} if (exists( $report-&gt;{bandwidth_min} ));<br>
&gt; +    $phase_form-&gt;{data_bandwidth_avg} = $report-&gt;{bandwidth_avg} if (exists( $report-&gt;{bandwidth_avg} ));<br>
&gt; +    $phase_form-&gt;{data_bandwidth_min} = $report-&gt;{bandwidth_min} if (exists( $report-&gt;{bandwidth_min} ));<br>
&gt; +<br>
&gt; +    # filling dynamic fields with prefix &quot;custom_&quot;<br>
&gt; +<br>
&gt; +    # Special named export environment variables set in mpirun command line<br>
&gt; +    # should be stored as part of data in GDS datastore<br>
&gt; +    while ( $phase_form-&gt;{cmdline} =~ m/\s+-[x|e]\s+(custom_\w+)\=([^\s\&quot;\&#39;]+)/g){<br>
&gt; +        my $value = $2;<br>
&gt; +        eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; +        $phase_form-&gt;{$1} = $value;<br>
&gt; +    }<br>
&gt; +    while ( $phase_form-&gt;{cmdline} =~ m/\s+-[x|e]\s+(custom_\w+)\=\&quot;([^\&quot;]*)\&quot;/g ){<br>
&gt; +        my $value = $2;<br>
&gt; +        eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; +        $phase_form-&gt;{$1} = $value;<br>
&gt; +    }<br>
&gt; +    while ( $phase_form-&gt;{cmdline} =~ m/\s+-[x|e]\s+\&quot;(custom_\w+)\=([^\&quot;]*)\&quot;/g){<br>
&gt; +        my $value = $2;<br>
&gt; +        eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; +        $phase_form-&gt;{$1} = $value;<br>
&gt; +    }<br>
&gt; +    while ( $phase_form-&gt;{cmdline} =~ m/\s+-[x|e]\s+(custom_\w+)\=\&#39;([^\&#39;]*)\&#39;/g ){<br>
&gt; +        my $value = $2;<br>
&gt; +        eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; +        $phase_form-&gt;{$1} = $value;<br>
&gt; +    }<br>
&gt; +    while ( $phase_form-&gt;{cmdline} =~ m/\s+-[x|e]\s+\&#39;(custom_\w+)\=([^\&#39;]*)\&#39;/g){<br>
&gt; +        my $value = $2;<br>
&gt; +        eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; +        $phase_form-&gt;{$1} = $value;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # filling cached fields with prefix &quot;cached_&quot;<br>
&gt; +    _fill_cached_info( $form );<br>
&gt; +<br>
&gt; +    return 0;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _get_value {<br>
&gt; +    my $name     = shift @_;<br>
&gt; +    my @sections = @_;<br>
&gt; +<br>
&gt; +    my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +<br>
&gt; +    #    push (@sections, &quot;MTT&quot;);<br>
&gt; +    #    push (@sections, &quot;VBench&quot;);<br>
&gt; +<br>
&gt; +    my $value = MTT::Values::Value( $ini, &quot;VBench&quot;, $name );<br>
&gt; +<br>
&gt; +    #   my $value = VBench::Values::getValueFromSections($ini, $name, @sections);<br>
&gt; +<br>
&gt; +    return $value;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _pre_process_phase {<br>
&gt; +    my ( $phase, $section, $report, $form )=@_;<br>
&gt; +<br>
&gt; +    my $ini    = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +    my $module = $ini-&gt;val( &quot;Test run: &quot; . $section, &quot;analyze_module&quot; );<br>
&gt; +<br>
&gt; +    # If there&#39;s no analyze module, then just return<br>
&gt; +    return $form<br>
&gt; +        if (!$module);<br>
&gt; +<br>
&gt; +    $module = &quot;MTT::Test::Analyze::Performance::$module&quot;;<br>
&gt; +    my $method = &quot;PreReport&quot;;<br>
&gt; +    my @args   = ( $phase, $section, $report );<br>
&gt; +<br>
&gt; +    Debug(&quot;Call PreReport on $module module.\n&quot;);<br>
&gt; +<br>
&gt; +    my $str   = &quot;require $module&quot;;<br>
&gt; +    my $check = eval $str;<br>
&gt; +    if ($@) {<br>
&gt; +        Warning(&quot;Could not load module $module: $@\n&quot;);<br>
&gt; +    } else {<br>
&gt; +        my $ret = undef;<br>
&gt; +        $str = &quot;\$ret = exists(\$${module}::{$method})&quot;;<br>
&gt; +        eval $str;<br>
&gt; +        if (1 == $ret) {<br>
&gt; +            $ret = undef;<br>
&gt; +            $str   = &quot;\$ret = \&amp;${module}::$method(\@args)&quot;;<br>
&gt; +            $check = eval $str;<br>
&gt; +            if ($@) {<br>
&gt; +                Warning(&quot;Could not run module $module:$method: $@\n&quot;);<br>
&gt; +            }<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    return $form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _fill_cached_info {<br>
&gt; +    my ( $form ) = @_;<br>
&gt; +    my $phase_form = $form-&gt;{TestRunPhase};<br>
&gt; +    my @info_list = ( &quot;SubmitInfo&quot;, &quot;ClusterInfo&quot;, &quot;MpiInfo&quot;, &quot;CompilerInfo&quot;, &quot;SuiteInfo&quot; );<br>
&gt; +    my @exception_list = ( &quot;clusterinfo_net_conf&quot;, &quot;clusterinfo_net_pci&quot; );<br>
&gt; +<br>
&gt; +    foreach my $info (@info_list) {<br>
&gt; +        foreach my $key (keys(%{$form-&gt;{$info}})) {<br>
&gt; +            $phase_form-&gt;{lc(&quot;cached\_$info\_$key&quot;)} = $form-&gt;{$info}-&gt;{$key};<br>
&gt; +             foreach (@exception_list) {<br>
&gt; +                     if (lc(&quot;$_&quot;) eq lc(&quot;$info\_$key&quot;)) {<br>
&gt; +                             delete($phase_form-&gt;{lc(&quot;cached\_$info\_$key&quot;)});<br>
&gt; +                             last;<br>
&gt; +                     }<br>
&gt; +             }<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    $phase_form-&gt;{&quot;cached_mpiinstallphase_mpi_path&quot;} = $form-&gt;{MpiInstallPhase}-&gt;{mpi_path};<br>
&gt; +<br>
&gt; +    return $phase_form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _fill_cluster_info {<br>
&gt; +    my ( $phase, $section, $report, $form ) = @_;<br>
&gt; +    $form-&gt;{ClusterInfo} = {};<br>
&gt; +    my $info_form = $form-&gt;{ClusterInfo};<br>
&gt; +<br>
&gt; +    if ( !defined($report) ) {<br>
&gt; +        die &quot;Runtime Error&quot;;<br>
&gt; +    }<br>
&gt; +    else {<br>
&gt; +            my @sections;<br>
&gt; +            push( @sections, &quot;test run: &quot; . $section );<br>
&gt; +            push( @sections, &quot;MTT&quot;);<br>
&gt; +            push( @sections, &quot;VBench&quot;);<br>
&gt; +<br>
&gt; +            $info_form-&gt;{cluster_name} = $platform;<br>
&gt; +<br>
&gt; +            my $node_count =<br>
&gt; +                _get_value( &quot;vbench:cluster_node_count&quot;, @sections );<br>
&gt; +<br>
&gt; +            %$info_form = (%$info_form, %$clusterInfo);<br>
&gt; +<br>
&gt; +            delete $info_form-&gt;{total_mhz};<br>
&gt; +<br>
&gt; +            if (defined($node_count) &amp;&amp; $node_count ne &quot;&quot;) {<br>
&gt; +                $info_form-&gt;{node_count} = $node_count;<br>
&gt; +            }<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    return $info_form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _fill_mpi_info {<br>
&gt; +    my ( $phase, $section, $report, $form ) = @_;<br>
&gt; +    $form-&gt;{MpiInfo} = {};<br>
&gt; +    # copy benchmark&#39;s additional data about mpi (filled in benchmark&#39;s analyzer)<br>
&gt; +    %$form-&gt;{MpiInfo} = ( %$report-&gt;{mpi} ) if (exists ($report-&gt;{mpi}));#!!!!!!!!!!!!<br>
&gt; +    my $info_form = $form-&gt;{MpiInfo};<br>
&gt; +<br>
&gt; +    if ( !defined($report) ) {<br>
&gt; +        die &quot;Runtime Error&quot;;<br>
&gt; +    }<br>
&gt; +    else {<br>
&gt; +        my @sections;<br>
&gt; +        push( @sections, &quot;test run: &quot; . $section );<br>
&gt; +<br>
&gt; +        my @mpi_name_parts =<br>
&gt; +              split( /:/, $report-&gt;{mpi_install_section_name}, 1 );<br>
&gt; +        $info_form-&gt;{mpi_name} = @mpi_name_parts[0];<br>
&gt; +<br>
&gt; +        $info_form-&gt;{mpi_version} = $report-&gt;{mpi_version};<br>
&gt; +<br>
&gt; +        my $mpi_path;<br>
&gt; +        my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +        my $mpi_section = $report-&gt;{mpi_install_section_name};<br>
&gt; +<br>
&gt; +        my $mpiget_section = MTT::Values::Value( $ini, &quot;MPI install: &quot; . $mpi_section, &quot;mpi_get&quot; );<br>
&gt; +<br>
&gt; +        my $mpiget_module = MTT::Values::Value( $ini, &quot;MPI get: &quot; . $mpiget_section, &quot;module&quot; );<br>
&gt; +<br>
&gt; +        if ($mpiget_module eq &quot;AlreadyInstalled&quot;) {<br>
&gt; +            $mpi_path = MTT::Values::Value( $ini, &quot;MPI get: &quot;. $mpiget_section, &quot;alreadyinstalled_dir&quot; );<br>
&gt; +            $mpi_path = EvaluateString( $mpi_path, $ini, &quot;MPI get: &quot;. $mpiget_section );<br>
&gt; +        } else {<br>
&gt; +            my $mpi_install = $MTT::MPI::installs-&gt;{$mpiget_section}-&gt;{$report-&gt;{mpi_version}}-&gt;{$mpi_section};<br>
&gt; +            $mpi_path = $mpi_install-&gt;{installdir};<br>
&gt; +        }<br>
&gt; +<br>
&gt; +        my $error = 0;<br>
&gt; +        my $cmd = &quot;LD_LIBRARY_PATH=&quot; . $mpi_path . &quot;/lib &quot; . $mpi_path . &quot;/bin/mpirun --version&quot;;<br>
&gt; +        open(SHELL, &quot;$cmd 2&gt;&amp;1|&quot;) || ($error = 1);<br>
&gt; +        $info_form-&gt;{oma_version} = &quot;&quot;;<br>
&gt; +        if ($error == 0) {<br>
&gt; +            while (&lt;SHELL&gt;) {<br>
&gt; +                if ( $_ =~ m/OMA\s+([r\d\.-]+)\s/) {<br>
&gt; +                    $info_form-&gt;{oma_version} = $1;<br>
&gt; +                    last;<br>
&gt; +                }<br>
&gt; +            }<br>
&gt; +            close SHELL;<br>
&gt; +        } # $error = 0<br>
&gt; +        else {<br>
&gt; +            $error = 0;<br>
&gt; +        }<br>
&gt; +<br>
&gt; +        # Add host file to &quot;copy list&quot;<br>
&gt; +        if ( MTT::Values::Functions::have_hostfile() ) {<br>
&gt; +            my $hostFile = MTT::Values::Functions::hostfile();<br>
&gt; +            push(@{$report-&gt;{files_to_copy}}, $hostFile);<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +    return $info_form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _fill_suite_info {<br>
&gt; +    my ( $phase, $section, $report, $form ) = @_;<br>
&gt; +    $form-&gt;{SuiteInfo} = {};<br>
&gt; +    # copy benchmark&#39;s additional data about benchmark suite (filled in benchmark&#39;s analyzer)<br>
&gt; +    %$form-&gt;{SuiteInfo} = ( %$report-&gt;{suiteinfo} ) if (exists ($report-&gt;{suiteinfo}));#!!!!!!!!!!!!<br>
&gt; +    my $info_form = $form-&gt;{SuiteInfo};<br>
&gt; +<br>
&gt; +    if ( !defined($report) ) {<br>
&gt; +        die &quot;Runtime Error&quot;;<br>
&gt; +    }<br>
&gt; +    else {<br>
&gt; +        my @sections;<br>
&gt; +        push( @sections, &quot;test run: &quot; . $section );<br>
&gt; +<br>
&gt; +        my $suite_name = undef;<br>
&gt; +        my $suite_version = undef;<br>
&gt; +<br>
&gt; +        my $test_run = $section;<br>
&gt; +        if ( $test_run =~ m/^(\S+):(\S+)/ ) {<br>
&gt; +            $suite_name    = $1;<br>
&gt; +            $suite_version = $2;<br>
&gt; +        }<br>
&gt; +        else {<br>
&gt; +            if ( $test_run =~ m/^(\S+)\s(.+)$/ ) {<br>
&gt; +                $suite_name    = $1;<br>
&gt; +                $suite_version = &quot;undefined&quot;;<br>
&gt; +            }<br>
&gt; +            else {<br>
&gt; +                $suite_name    = $test_run;<br>
&gt; +                $suite_version = &quot;undefined&quot;;<br>
&gt; +            }<br>
&gt; +        }<br>
&gt; +        $info_form-&gt;{suite_name}    = $suite_name if (!defined($info_form-&gt;{suite_name}));<br>
&gt; +        $info_form-&gt;{suite_version} = $suite_version if (!defined($info_form-&gt;{suite_version}));<br>
&gt; +<br>
&gt; +    }<br>
&gt; +    return $info_form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _fill_submit_info {<br>
&gt; +    my ( $phase, $section, $report, $form ) = @_;<br>
&gt; +    $form-&gt;{SubmitInfo} = {};<br>
&gt; +    my $info_form = $form-&gt;{SubmitInfo};<br>
&gt; +<br>
&gt; +    if ( !defined($report) ) {<br>
&gt; +        die &quot;Runtime Error&quot;;<br>
&gt; +    }<br>
&gt; +    else {<br>
&gt; +         if (!$local_username) {<br>
&gt; +             $local_username = getpwuid($&lt;);<br>
&gt; +         }<br>
&gt; +<br>
&gt; +         if (!defined($hostname) || &quot;&quot; eq $hostname) {<br>
&gt; +             $hostname = `hostname`;<br>
&gt; +             chomp($hostname);<br>
&gt; +         }<br>
&gt; +<br>
&gt; +        $info_form-&gt;{hostname} = $hostname;<br>
&gt; +        $info_form-&gt;{local_username} = $local_username;<br>
&gt; +        $info_form-&gt;{http_username} = $username;<br>
&gt; +        $info_form-&gt;{mtt_version} = $MTT::Version::Combined;<br>
&gt; +    }<br>
&gt; +    return $info_form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _fill_compiler_info {<br>
&gt; +    my ( $phase, $section, $report, $form ) = @_;<br>
&gt; +    $form-&gt;{CompilerInfo} = {};<br>
&gt; +    my $info_form = $form-&gt;{CompilerInfo};<br>
&gt; +<br>
&gt; +    if ( !defined($report) ) {<br>
&gt; +        die &quot;Runtime Error&quot;;<br>
&gt; +    }<br>
&gt; +    else {<br>
&gt; +        $info_form-&gt;{compiler_name} = &quot;unknown&quot;;<br>
&gt; +        $info_form-&gt;{compiler_name} = $report-&gt;{compiler_name} if (defined($report-&gt;{compiler_name}));<br>
&gt; +        $info_form-&gt;{compiler_version} = &quot;unknown&quot;;<br>
&gt; +        $info_form-&gt;{compiler_version} = $report-&gt;{compiler_version} if (defined($report-&gt;{compiler_version}));<br>
&gt; +   }<br>
&gt; +    return $info_form;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +sub _do_request {<br>
&gt; +    my $req = shift;<br>
&gt; +<br>
&gt; +    # Ensure that the environment is clean so that nothing happens<br>
&gt; +    # that we&#39;re unaware of.<br>
&gt; +    my %ENV_SAVE = %ENV;<br>
&gt; +    delete $ENV{http_proxy};<br>
&gt; +    delete $ENV{https_proxy};<br>
&gt; +    delete $ENV{HTTP_PROXY};<br>
&gt; +    delete $ENV{HTTPS_PROXY};<br>
&gt; +<br>
&gt; +    # Go through each ua and try to get a good connection.  If we get<br>
&gt; +    # connection refused from any of them, try another.<br>
&gt; +    my $response;<br>
&gt; +    foreach my $ua (@lwps) {<br>
&gt; +        Debug(&quot;MTTGDS client trying proxy: $ua-&gt;{proxy} / $ua-&gt;{source}\n&quot;);<br>
&gt; +        $ENV{https_proxy} = $ua-&gt;{proxy}<br>
&gt; +            if (&quot;https&quot; eq $ua-&gt;{scheme});<br>
&gt; +<br>
&gt; +        # Do the HTTP request<br>
&gt; +        $response = $ua-&gt;{agent}-&gt;request($req);<br>
&gt; +<br>
&gt; +        # If it succeeded, or if it failed with something other than<br>
&gt; +        # code 500, return (code 500 = can&#39;t connect)<br>
&gt; +        if ($response-&gt;is_success() ||<br>
&gt; +            $response-&gt;code() != 500) {<br>
&gt; +            Debug(&quot;MTTGDS proxy successful / not 500\n&quot;);<br>
&gt; +            %ENV = %ENV_SAVE;<br>
&gt; +            return $response;<br>
&gt; +        }<br>
&gt; +        Debug(&quot;MTTGDS proxy unsuccessful -- trying next\n&quot;);<br>
&gt; +<br>
&gt; +        # Otherwise, loop around and try again<br>
&gt; +        Debug(&quot;Proxy $ua-&gt;{proxy} failed code: &quot; .<br>
&gt; +              $response-&gt;status_line . &quot;\n&quot; . $response-&gt;content . &quot;\n&quot;);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # Sorry -- nothing got through...<br>
&gt; +    Debug(&quot;MTTGDS proxy totally unsuccessful\n&quot;);<br>
&gt; +    %ENV = %ENV_SAVE;<br>
&gt; +    return $response;<br>
&gt; +}<br>
&gt; +<br>
&gt; +#--------------------------------------------------------------------------<br>
&gt; +<br>
&gt; +# Create test file results, and prepare the HTTP file upload<br>
&gt; +# request<br>
&gt; +<br>
&gt; +my $request_count = 0;<br>
&gt; +<br>
&gt; +sub _prepare_request {<br>
&gt; +    my ($phase, $report, $form, $attachment )=@_;<br>
&gt; +<br>
&gt; +    my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; +    my $repository_path = MTT::Values::Value( $ini, &quot;VBench&quot;, &#39;repository_tempdir&#39; );<br>
&gt; +    my $repository_name = MTT::Values::Value( $ini, &quot;VBench&quot;, &#39;repository_dirname_prefix&#39; );<br>
&gt; +    my ($fh, $filename);<br>
&gt; +    my $tmpdir;<br>
&gt; +<br>
&gt; +    # Find a temporary directory for files<br>
&gt; +    if (!defined($repository_path) || $repository_path eq &#39;&#39;)<br>
&gt; +    {<br>
&gt; +        $tmpdir = tempdir( CLEANUP =&gt; 1);<br>
&gt; +        ($fh, $filename) = tempfile( DIR =&gt; $tmpdir, SUFFIX =&gt; &#39;.yaml&#39; );<br>
&gt; +    }<br>
&gt; +    elsif  (!defined($repository_name) || $repository_name eq &#39;&#39;)<br>
&gt; +    {<br>
&gt; +     MTT::Files::mkdir($repository_path) if (! -d $repository_path);<br>
&gt; +     $tmpdir = tempdir( DIR =&gt; &quot;$repository_path&quot;, CLEANUP =&gt; 0);<br>
&gt; +        ($fh, $filename) = tempfile( DIR =&gt; $tmpdir, SUFFIX =&gt; &#39;.yaml&#39; );<br>
&gt; +    }<br>
&gt; +    else<br>
&gt; +    {<br>
&gt; +        $request_count++;<br>
&gt; +        MTT::Files::mkdir($repository_path) if (! -d $repository_path);<br>
&gt; +        $tmpdir = &quot;${repository_path}/${repository_name}_${request_count}&quot;;<br>
&gt; +        $filename = &quot;$tmpdir/${repository_name}_${request_count}.yaml&quot;;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    my $raw_filename = ();<br>
&gt; +<br>
&gt; +    MTT::Files::mkdir($tmpdir);<br>
&gt; +<br>
&gt; +    if ( keys %$attachment ) {<br>
&gt; +        foreach my $file (keys %$attachment) {<br>
&gt; +            Debug (&quot;    Attachment: $file\n&quot;);<br>
&gt; +            MTT::Values::Functions::shell(&quot;cp -r $file $tmpdir/$attachment-&gt;{$file}&quot;);<br>
&gt; +            }<br>
&gt; +        $raw_filename = &quot;$tmpdir/data_file.zip&quot;;<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # Generate YAML file contents<br>
&gt; +    YAML::XS::DumpFile(&quot;$filename&quot;, $form);<br>
&gt; +<br>
&gt; +    if ( $raw_filename ne &#39;&#39;)<br>
&gt; +    {<br>
&gt; +        MTT::Values::Functions::shell(<br>
&gt; +                   &quot;cd $tmpdir; zip -9 -r $raw_filename *&quot;);<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    # Chech Google Datastore put entity limitation<br>
&gt; +    $raw_filename = &#39;&#39; if  1048576 &lt;= ((-s &quot;$raw_filename&quot;) + (-s &quot;$filename&quot;));<br>
&gt; +<br>
&gt; +    my $req;<br>
&gt; +    # Create the &quot;upload&quot; POST request<br>
&gt; +    if (-e $raw_filename)<br>
&gt; +    {<br>
&gt; +         $req = POST $url,<br>
&gt; +             Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +             Content =&gt; [<br>
&gt; +                 SUBMIT      =&gt; 1,<br>
&gt; +                 data        =&gt; [&quot;$filename&quot;],<br>
&gt; +                 raw         =&gt; [&quot;$raw_filename&quot;],<br>
&gt; +                 description =&gt; &quot;Submit data and raw on the phase &lt;$phase&gt;&quot;<br>
&gt; +              ];<br>
&gt; +    }<br>
&gt; +    else<br>
&gt; +    {<br>
&gt; +        $req = POST $url,<br>
&gt; +            Content_Type =&gt; &#39;form-data&#39;,<br>
&gt; +            Content =&gt; [<br>
&gt; +                SUBMIT      =&gt; 1,<br>
&gt; +                data        =&gt; [&quot;$filename&quot;],<br>
&gt; +                description =&gt; &quot;Submit data only on the phase &lt;$phase&gt;&quot;<br>
&gt; +             ];<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    $req-&gt;authorization_basic($username, $password);<br>
&gt; +<br>
&gt; +    return (\$req, $filename);<br>
&gt; +}<br>
&gt; +<br>
&gt; +1;<br>
&gt; _______________________________________________<br>
&gt; mtt-svn mailing list<br>
&gt; <a href="mailto:mtt-svn@open-mpi.org">mtt-svn@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn</a><br>
<br>
<br>
</div></div><span class="HOEnZb"><font color="#888888">--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
<br>
_______________________________________________<br>
mtt-devel mailing list<br>
<a href="mailto:mtt-devel@open-mpi.org">mtt-devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a><br>
</font></span></blockquote></div><br></div>


<div dir="ltr"><br><br><div class="gmail_quote">On Fri, Sep 25, 2009 at 10:08 PM, Jeff Squyres <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div class="im">On Sep 24, 2009, at 12:46 PM, Mike Dubman wrote:<br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Im not familiar with :\n semantics, how does it force Bourne shell and what it actually does :)? (seems like leftovers from 1960....)<br>
</blockquote>
<br></div>
Yes, it might be left over from 1960.  :-)  But the nice thing is that you then don&#39;t have to identify /bin/sh or /usr/bin/sh.  It&#39;s convenient and it works everywhere.</blockquote><div><br>Found some info re &quot;:\n&quot; as a shebang line:<br>
...<br> &#39;:&#39; was actually the first comment character. <br>All shells I tried still recognize it as such, so it is not obsolete, but perhaps slightly deprecated.<br><br>The
first versions of csh used &#39;#&#39; as a comment and used the presence of
one comment character or the other to decide which shell to run
(assuming it was given a text file with the execute bit set). This was
before the advent of the kernel-based #! &quot;magic number&quot;<br>The early &quot;/bin/sh&quot; versions assumed they were the only shell on the system and had no need to choose an interpreter.<br>... <br></div></div>
<br></div>


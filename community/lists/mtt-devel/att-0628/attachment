<div dir="ltr">after patch, it killed child processes but kept mpirun ... itself.<div><br></div><div>before that patch - all processes were killed (and you are right, &quot;<span style="font-family:arial,sans-serif;font-size:13px">mpirun died right at the end of the timeout&quot; was reported) but at least it left the cluster in the clean state w/o leftovers.</span></div>
<div>now many &quot;orphan&quot; launchers  are alive from previous invocations.</div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Mon, Jun 23, 2014 at 2:18 PM, Jeff Squyres (jsquyres) <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">There was actually quite a bit of testing before this was committed.  This commit resolved a lot of hangs across multiple organizations.<br>

<br>
Can you be more specific as to what is happening?<br>
<br>
The prior code was killing child processes before mpirun itself, for example, which has led MTT to erroneously report that mpirun died right at the end of the timeout without being killed.  This has been ongoing for many months, at a minimum.<br>

<br>
<br>
<br>
<br>
On Jun 23, 2014, at 4:37 AM, Mike Dubman &lt;<a href="mailto:miked@dev.mellanox.co.il">miked@dev.mellanox.co.il</a>&gt; wrote:<br>
<br>
&gt; this commit does more harm then good.<br>
&gt; we experience following:<br>
&gt;<br>
&gt; - some child processes still running after timeout and mtt killed the job.<br>
&gt;<br>
&gt; before this commit - it worked fine.<br>
&gt; please revert and test more.<br>
&gt;<br>
&gt;<br>
&gt;<br>
&gt; On Sat, Jun 21, 2014 at 3:30 PM, MPI Team &lt;<a href="mailto:mpiteam@crest.iu.edu">mpiteam@crest.iu.edu</a>&gt; wrote:<br>
&gt; The branch, master has been updated<br>
&gt;        via  016088f2a0831b32ab5fd6f60f4cabe67e92e594 (commit)<br>
&gt;        via  7fb4c6a4c9d71be127ea53bd463178510577f71f (commit)<br>
&gt;        via  381ba177d835a54c3197d846f5a4edfc314efe27 (commit)<br>
&gt;        via  cfdd29de2012eeb7592706f00dd07a52dd48cf6b (commit)<br>
&gt;        via  940030ca20eb1eaf256e898b83866c1cb83aca5c (commit)<br>
&gt;       from  c99ed7c7b159a2cab58a251bd7c0dad8972ff901 (commit)<br>
&gt;<br>
&gt; Those revisions listed above that are new to this repository have<br>
&gt; not appeared on any other notification email; so we list those<br>
&gt; revisions in full, below.<br>
&gt;<br>
&gt; - Log -----------------------------------------------------------------<br>
&gt; <a href="https://github.com/open-mpi/mtt/commit/016088f2a0831b32ab5fd6f60f4cabe67e92e594" target="_blank">https://github.com/open-mpi/mtt/commit/016088f2a0831b32ab5fd6f60f4cabe67e92e594</a><br>
&gt;<br>
&gt; commit 016088f2a0831b32ab5fd6f60f4cabe67e92e594<br>
&gt; Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
&gt; Date:   Sat Jun 21 04:58:45 2014 -0700<br>
&gt;<br>
&gt;     DoCommand: several fixes to kill_proc logic<br>
&gt;<br>
&gt;     1. Fix the kill(0, $pid) test to see if the process was still alive.<br>
&gt;<br>
&gt;     2. Rename _kill_proc() to _kill_proc_tree() to indicate that it&#39;s<br>
&gt;     really killing not only the PID in question, but also all of its<br>
&gt;     descendants.<br>
&gt;<br>
&gt;     3. In _kill_proc_tree(), change the order to kill the main PID first,<br>
&gt;     and &#39;&#39;then&#39;&#39; kill all the descendants.<br>
&gt;<br>
&gt;     The main use case is when killing mpirun: if we kill mpirun&#39;s<br>
&gt;     descendants &#39;&#39;first&#39;&#39;, mpirun will detect its childrens&#39; deaths and<br>
&gt;     then cleanup and exit.  Later, when MTT finally gets around to killing<br>
&gt;     mpirun, MTT will detect that mpirun is already dead and therefore emit<br>
&gt;     a confusing &quot;mpirun died right at end of timeout&quot; message.  This is<br>
&gt;     misleading at best; it doesn&#39;t indicate what actually happened.<br>
&gt;<br>
&gt;     However, if we kill mpirun first, it will take care of killing all of<br>
&gt;     its descendants.  MTT will therefore emit the right messages about<br>
&gt;     killing mpirun.  MTT will then redundantly try to kill a bunch of<br>
&gt;     now-nonexistent descendant processes of mpirun, but that&#39;s ok/safe.<br>
&gt;     We actually &#39;&#39;want&#39;&#39; this try-to-kill-mpirun&#39;s-descendants behavior to<br>
&gt;     handle the case when mpirun is misbehaving / not cleaning up its<br>
&gt;     descendants.<br>
&gt;<br>
&gt;     4. DoCommand() is used for more than launching mpirun, so pass down<br>
&gt;     $argv0 so that we can print the actual command name that is being<br>
&gt;     killed in various Verbose/Debug messages, not the hard-coded &quot;mpirun&quot;<br>
&gt;     string (which, in practice, was probably almost always correct, but<br>
&gt;     still...).<br>
&gt; ---<br>
&gt;  lib/MTT/DoCommand.pm | 78 ++++++++++++++++++++++++++++++++++++----------------<br>
&gt;  1 file changed, 55 insertions(+), 23 deletions(-)<br>
&gt;<br>
&gt; diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
&gt; index 02cdb94..646ca31 100644<br>
&gt; --- a/lib/MTT/DoCommand.pm<br>
&gt; +++ b/lib/MTT/DoCommand.pm<br>
&gt; @@ -2,7 +2,7 @@<br>
&gt;  #<br>
&gt;  # Copyright (c) 2005-2006 The Trustees of Indiana University.<br>
&gt;  #                         All rights reserved.<br>
&gt; -# Copyright (c) 2006-2013 Cisco Systems, Inc.  All rights reserved.<br>
&gt; +# Copyright (c) 2006-2014 Cisco Systems, Inc.  All rights reserved.<br>
&gt;  # Copyright (c) 2007-2008 Sun Microsystems, Inc.  All rights reserved.<br>
&gt;  # Copyright (c) 2007-2012 High Performance Computing Center Stuttgart,<br>
&gt;  #                         University of Stuttgart.  All rights reserved.<br>
&gt; @@ -57,23 +57,27 @@ sub DoCommand {<br>
&gt;      ($time_arg, $no_execute) = @_;<br>
&gt;  }<br>
&gt;<br>
&gt; +# This function is called for killing both mpirun and each of its<br>
&gt; +# descendants.  We really only want to see verbose output for when we<br>
&gt; +# kill mpirun itself, so only show output when the caller provides us<br>
&gt; +# with a $argv0 value.<br>
&gt;  sub _kill_proc_one {<br>
&gt; -    my ($pid) = @_;<br>
&gt; +    my ($pid, $argv0) = @_;<br>
&gt;<br>
&gt;      # How long to wait after each kill()<br>
&gt;      my $wait_time = 5;<br>
&gt;<br>
&gt;      # See if the proc is alive first<br>
&gt; -    my $kid;<br>
&gt; -    kill(0, $pid);<br>
&gt; -    $kid = waitpid($pid, WNOHANG);<br>
&gt; -    return &quot;mpirun died right at end of timeout (MTT did not have to kill it)&quot;<br>
&gt; -        if (-1 == $kid);<br>
&gt; +    my $num_alive = kill(0, $pid);<br>
&gt; +    return &quot;$argv0 died right at end of timeout (MTT did not have to kill it)&quot;<br>
&gt; +        if (0 == $num_alive);<br>
&gt;<br>
&gt;      # Try an easy kill<br>
&gt;      kill(&quot;TERM&quot;, $pid);<br>
&gt; -    Verbose(&quot;*** Killing mpirun with SIGTERM\n&quot;);<br>
&gt; +    Verbose(&quot;*** Killing $argv0 with SIGTERM\n&quot;)<br>
&gt; +        if (defined($argv0));<br>
&gt;      # Give mpirun some time to cleanup before we try to reap it.<br>
&gt; +    my $kid;<br>
&gt;      my $i = $wait_time;<br>
&gt;      while ($i &gt; 0) {<br>
&gt;          sleep(1);<br>
&gt; @@ -85,45 +89,74 @@ sub _kill_proc_one {<br>
&gt;          # process no longer exists (i.e., we get -1 back from<br>
&gt;          # waitpid), or we successfully killed it (i.e., we got the PID<br>
&gt;          # back from waitpid).<br>
&gt; -        return &quot;MTT killed mpirun via SIGTERM&quot; if (0 != $kid);<br>
&gt; +        return &quot;MTT killed $argv0 via SIGTERM&quot; if (0 != $kid);<br>
&gt;<br>
&gt;          --$i;<br>
&gt;      }<br>
&gt; -    Verbose(&quot;** Kill TERM (after $wait_time seconds) didn&#39;t work!\n&quot;);<br>
&gt; +    Verbose(&quot;** Kill TERM (after $wait_time seconds) didn&#39;t work!\n&quot;)<br>
&gt; +        if (defined($argv0));<br>
&gt;<br>
&gt;      # That didn&#39;t work either.  Try SIGINT;<br>
&gt; -    Verbose(&quot;*** Killing mpirun with SIGINT\n&quot;);<br>
&gt; +    Verbose(&quot;*** Killing $argv0 with SIGINT\n&quot;)<br>
&gt; +        if (defined($argv0));<br>
&gt;      kill(&quot;INT&quot;, $pid);<br>
&gt;      my $i = $wait_time;<br>
&gt;      while ($i &gt; 0) {<br>
&gt;          sleep(1);<br>
&gt;          $kid = waitpid($pid, WNOHANG);<br>
&gt; -        return &quot;MTT killed mpirun via SIGINT&quot; if (0 != $kid);<br>
&gt; +        return &quot;MTT killed $argv0 via SIGINT&quot; if (0 != $kid);<br>
&gt;          --$i;<br>
&gt;      }<br>
&gt; -    Verbose(&quot;** Kill INT (after $wait_time seconds) didn&#39;t work!\n&quot;);<br>
&gt; +    Verbose(&quot;** Kill INT (after $wait_time seconds) didn&#39;t work!\n&quot;)<br>
&gt; +        if (defined($argv0));<br>
&gt;<br>
&gt;      # Ok, now we&#39;re mad.  Be violent.<br>
&gt; -    Verbose(&quot;*** Now I&#39;m mad.  Killing mpirun with SIGKILL\n&quot;);<br>
&gt; +    Verbose(&quot;*** Now I&#39;m mad.  Killing $argv0 with SIGKILL\n&quot;)<br>
&gt; +        if (defined($argv0));<br>
&gt;      my $count = 0;<br>
&gt;      while (1) {<br>
&gt;          kill(&quot;KILL&quot;, $pid);<br>
&gt;          ++$count;<br>
&gt;          $kid = waitpid($pid, WNOHANG);<br>
&gt; -        return &quot;MTT killed mpirun via $count SIGKILLs&quot; if (0 != $kid);<br>
&gt; -        Verbose(&quot;** Kill KILL didn&#39;t work!  Sleeping and trying again...\n&quot;);<br>
&gt; +        return &quot;MTT killed $argv0 via $count SIGKILLs&quot; if (0 != $kid);<br>
&gt; +        Verbose(&quot;** Kill KILL didn&#39;t work!  Sleeping and trying again...\n&quot;)<br>
&gt; +            if (defined($argv0));<br>
&gt;          sleep(1);<br>
&gt;      }<br>
&gt;  }<br>
&gt;<br>
&gt;<br>
&gt; -sub _kill_proc {<br>
&gt; -    my ($pid) = @_;<br>
&gt; -    # kill the group, take the names later<br>
&gt; -    foreach my $process (descendant_processes($pid)) {<br>
&gt; +sub _kill_proc_tree {<br>
&gt; +    my ($pid, $argv0) = @_;<br>
&gt; +<br>
&gt; +    # Find all descendent processes of the main PID<br>
&gt; +    my @children = descendant_processes($pid);<br>
&gt; +<br>
&gt; +    # Kill the main PID.  Note that _kill_proc_one() will give the<br>
&gt; +    # process time to react/cleanup, so there&#39;s no need for an<br>
&gt; +    # additional delay after it returns.<br>
&gt; +    my $ret = _kill_proc_one($pid, $argv0);<br>
&gt; +<br>
&gt; +    # Now kill all the processes that descended from the base PID.<br>
&gt; +    #<br>
&gt; +    # Note: when mpirun is working properly (which is one of the<br>
&gt; +    # biggest use cases for DoCommand), this is redundant -- all the<br>
&gt; +    # children will already be dead (because killing mpirun will<br>
&gt; +    # ensure that all descendant processes are also killed).<br>
&gt; +    #<br>
&gt; +    # That being said, a) DoCommand() is used to launch more than just<br>
&gt; +    # mpirun, b) mpirun breaks sometimes and doesn&#39;t clean up its<br>
&gt; +    # descendants, and c) it&#39;s safe to call _kill_proc_one() on a PID<br>
&gt; +    # that is already dead.<br>
&gt; +    foreach my $process (@children) {<br>
&gt; +        Debug(&quot;=== killing child proc: $process-&gt;{pid}, $process-&gt;{argv0}\n&quot;);<br>
&gt; +<br>
&gt; +        # Ignore the return.  For example, we don&#39;t care if the child<br>
&gt; +        # is already dead<br>
&gt;          _kill_proc_one($process-&gt;{pid});<br>
&gt;      }<br>
&gt; -    return _kill_proc_one($pid);<br>
&gt; +<br>
&gt; +    return $ret;<br>
&gt;  }<br>
&gt;<br>
&gt;  #--------------------------------------------------------------------------<br>
&gt; @@ -338,7 +371,6 @@ sub Cmd {<br>
&gt;<br>
&gt;      my $tokens = _quote_escape($cmd);<br>
&gt;<br>
&gt; -<br>
&gt;      my $pid;<br>
&gt;      if (! $no_execute) {<br>
&gt;<br>
&gt; @@ -568,7 +600,7 @@ sub Cmd {<br>
&gt;<br>
&gt;                      $done = 0;<br>
&gt;                  }<br>
&gt; -                $timeout_message = _kill_proc($pid);<br>
&gt; +                $timeout_message = _kill_proc_tree($pid, ${$tokens}[0]);<br>
&gt;<br>
&gt;                  # We don&#39;t care about the exit status if we timed out<br>
&gt;                  # -- fill it with a bogus value.<br>
&gt;<br>
&gt; <a href="https://github.com/open-mpi/mtt/commit/7fb4c6a4c9d71be127ea53bd463178510577f71f" target="_blank">https://github.com/open-mpi/mtt/commit/7fb4c6a4c9d71be127ea53bd463178510577f71f</a><br>
&gt;<br>
&gt; commit 7fb4c6a4c9d71be127ea53bd463178510577f71f<br>
&gt; Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
&gt; Date:   Sat Jun 21 04:42:19 2014 -0700<br>
&gt;<br>
&gt;     DoCommand: replace obscure perl code with easier-to-grok version<br>
&gt;<br>
&gt;     The descendant_processes() and flatten() codes were written in a<br>
&gt;     nicely efficient yet very difficult to understand manner.  This commit<br>
&gt;     replaces these two subs with admittedly less efficient but much easier<br>
&gt;     to understand code.<br>
&gt;<br>
&gt;     The new code also saves the first token of the command for each PID so<br>
&gt;     that it can be used in Debug/Verbose statements (e.g., identify the<br>
&gt;     command that is being killed, etc.).<br>
&gt; ---<br>
&gt;  lib/MTT/DoCommand.pm | 63 ++++++++++++++++++++++++++++++++++++++++------------<br>
&gt;  1 file changed, 49 insertions(+), 14 deletions(-)<br>
&gt;<br>
&gt; diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
&gt; index c3be8a8..02cdb94 100644<br>
&gt; --- a/lib/MTT/DoCommand.pm<br>
&gt; +++ b/lib/MTT/DoCommand.pm<br>
&gt; @@ -120,8 +120,8 @@ sub _kill_proc_one {<br>
&gt;  sub _kill_proc {<br>
&gt;      my ($pid) = @_;<br>
&gt;      # kill the group, take the names later<br>
&gt; -    foreach my $p (descendant_processes($pid)) {<br>
&gt; -        _kill_proc_one($p);<br>
&gt; +    foreach my $process (descendant_processes($pid)) {<br>
&gt; +        _kill_proc_one($process-&gt;{pid});<br>
&gt;      }<br>
&gt;      return _kill_proc_one($pid);<br>
&gt;  }<br>
&gt; @@ -527,7 +527,8 @@ sub Cmd {<br>
&gt;                  if (defined($timeout_backtrace_program) and !$got_backtrace) {<br>
&gt;                      $backtrace = &quot;&quot;;<br>
&gt;                      if ( $timeout_before_backtrace_program ) {<br>
&gt; -                        foreach my $p (descendant_processes($pid)) {<br>
&gt; +                        foreach my $process (descendant_processes($pid)) {<br>
&gt; +                            my $p = $process-&gt;{pid};<br>
&gt;                              my $c = $timeout_before_backtrace_program;<br>
&gt;                              $c =~ s/%PID%/$p/g;<br>
&gt;                              Debug(&quot;_pre_backtrace cmd: $c\n&quot;);<br>
&gt; @@ -538,7 +539,8 @@ sub Cmd {<br>
&gt;                      $backtrace .= _get_backtrace($timeout_backtrace_program, $pid, $pre_pernode);<br>
&gt;<br>
&gt;                      if ( $timeout_after_backtrace_program ) {<br>
&gt; -                        foreach my $p (descendant_processes($pid)) {<br>
&gt; +                        foreach my $process (descendant_processes($pid)) {<br>
&gt; +                            my $p = $process-&gt;{pid};<br>
&gt;                              my $c = $timeout_after_backtrace_program;<br>
&gt;                              $c =~ s/%PID%/$p/g;<br>
&gt;                              Debug(&quot;_post_backtrace cmd: $c\n&quot;);<br>
&gt; @@ -738,19 +740,50 @@ sub _do_email_timeout_notification {<br>
&gt;      close(TIMEOUT_SENTINEL_FILE);<br>
&gt;  }<br>
&gt;<br>
&gt; -sub flatten {<br>
&gt; -    map{ (ref($_) eq &quot;ARRAY&quot;) ? map{flatten($_)}@$_ : $_ } @_;<br>
&gt; +sub find_children {<br>
&gt; +    my ($pids, $start) = @_;<br>
&gt; +<br>
&gt; +    my @ret;<br>
&gt; +    # Scan the PID list and see if any other PIDs list $start as their<br>
&gt; +    # PPID.  If so, save that PID and then recursively look for *that*<br>
&gt; +    # PID&#39;s children.<br>
&gt; +    foreach my $pid (sort(keys(%{$pids}))) {<br>
&gt; +        if ($pids-&gt;{$pid}-&gt;{ppid} == $start) {<br>
&gt; +            push(@ret, {<br>
&gt; +                pid =&gt; $pid,<br>
&gt; +                argv0 =&gt; $pids-&gt;{$pid}-&gt;{argv0},<br>
&gt; +                 });<br>
&gt; +<br>
&gt; +            # Add this PID&#39;s descendants to the return array<br>
&gt; +            push(@ret, find_children($pids, $pid));<br>
&gt; +        }<br>
&gt; +    }<br>
&gt; +<br>
&gt; +    return @ret;<br>
&gt;  }<br>
&gt;<br>
&gt;  sub descendant_processes {<br>
&gt;      my ($base) = (@_, $$);<br>
&gt; -    my %parentage = (`ps -eo pid,ppid` =~ /\d+/g);<br>
&gt; -    my %reverse = map { ($_, [$_]) } %parentage;<br>
&gt; -    while (my ($pid,$ppid) = each %parentage){<br>
&gt; -        push @{$reverse{$ppid}}, $reverse{$pid};<br>
&gt; +    open(PS, &quot;ps -eo pid,ppid,cmd|&quot;) || die &quot;Can&#39;t open ps&quot;;<br>
&gt; +<br>
&gt; +    # Skip the title line<br>
&gt; +    &lt;PS&gt;;<br>
&gt; +<br>
&gt; +    # Read all the data lines<br>
&gt; +    my $pids;<br>
&gt; +    while (&lt;PS&gt;) {<br>
&gt; +        # Grab the PID, PPID, and first token of the command<br>
&gt; +        $_ =~ m/(\d+)\s+(\d+)\s+(\S+)/;<br>
&gt; +        $pids-&gt;{$1} = {<br>
&gt; +            pid =&gt; $1,<br>
&gt; +            ppid =&gt; $2,<br>
&gt; +            argv0 =&gt; $3,<br>
&gt; +        };<br>
&gt;      }<br>
&gt; -    shift @{$reverse{$base}};<br>
&gt; -    flatten($reverse{$base});<br>
&gt; +    close(PS);<br>
&gt; +<br>
&gt; +    # Find all the descendants of the $base PID<br>
&gt; +    return find_children($pids, $base);<br>
&gt;  }<br>
&gt;<br>
&gt;  sub _get_backtrace {<br>
&gt; @@ -774,7 +807,8 @@ sub _get_backtrace {<br>
&gt;<br>
&gt;              # Use ps -Af output to fetch the child pids,<br>
&gt;              # and grab a stack trace from each one<br>
&gt; -            foreach my $p (descendant_processes($pid)) {<br>
&gt; +            foreach my $process (descendant_processes($pid)) {<br>
&gt; +                my $p = $process-&gt;{pid};<br>
&gt;                  $gdb_cmd = &quot;gdb - $p --command=$gdb_command_filename --batch&quot;;<br>
&gt;                  $ret .= &quot;\n $gdb_cmd&quot;;<br>
&gt;                  $ret .= &quot;\n&quot; . `$gdb_cmd`;<br>
&gt; @@ -814,8 +848,9 @@ sub _get_backtrace {<br>
&gt;                  }<br>
&gt;              }<br>
&gt;              Debug(&quot;Stacktrace: base name $return_basename\n&quot;);<br>
&gt; -            #foreach my $p (descendant_processes($pid))<br>
&gt; +            #foreach my $process (descendant_processes($pid))<br>
&gt;              #{<br>
&gt; +            #    my $p = $process-&gt;{pid};<br>
&gt;              #    my $gstack_cmd = &quot;gstack $p&quot;;<br>
&gt;              #    $ret .= &quot;\n $gstack_cmd&quot;;<br>
&gt;              #    $ret .= &quot;\n&quot; . `$gstack_cmd`;<br>
&gt;<br>
&gt; <a href="https://github.com/open-mpi/mtt/commit/381ba177d835a54c3197d846f5a4edfc314efe27" target="_blank">https://github.com/open-mpi/mtt/commit/381ba177d835a54c3197d846f5a4edfc314efe27</a><br>
&gt;<br>
&gt; commit 381ba177d835a54c3197d846f5a4edfc314efe27<br>
&gt; Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
&gt; Date:   Sat Jun 21 03:48:55 2014 -0700<br>
&gt;<br>
&gt;     DoCommand: ensure to only kill the process once<br>
&gt;<br>
&gt;     When the DoCommand timeout fires, MTT will kill the entire process<br>
&gt;     tree of the launched command.  However, the stdout/stderr sockets may<br>
&gt;     still be draining, and therefore the main DoCommand loop may still<br>
&gt;     execute more iterations.  In cases like these, ensure that we don&#39;t<br>
&gt;     try to backtrace/kill the process tree again.<br>
&gt;<br>
&gt;     Also add a few more Debug statements for detailed output.<br>
&gt; ---<br>
&gt;  lib/MTT/DoCommand.pm | 23 ++++++++++++++++-------<br>
&gt;  1 file changed, 16 insertions(+), 7 deletions(-)<br>
&gt;<br>
&gt; diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
&gt; index 0e253f0..c3be8a8 100644<br>
&gt; --- a/lib/MTT/DoCommand.pm<br>
&gt; +++ b/lib/MTT/DoCommand.pm<br>
&gt; @@ -471,6 +471,7 @@ sub Cmd {<br>
&gt;              my $len = sysread(OUTread, $data, 99999);<br>
&gt;              if (0 == $len) {<br>
&gt;                  vec($rin, fileno(OUTread), 1) = 0;<br>
&gt; +                Debug(&quot;*** Child process stdout closed\n&quot;);<br>
&gt;                  --$done;<br>
&gt;              } else {<br>
&gt;                  _append($data, $print_timestamp ? localtime() : &quot;&quot;,<br>
&gt; @@ -485,6 +486,7 @@ sub Cmd {<br>
&gt;              my $len = sysread(ERRread, $data, 99999);<br>
&gt;              if (0 == $len) {<br>
&gt;                  vec($rin, fileno(ERRread), 1) = 0;<br>
&gt; +                Debug(&quot;*** Child process stderr closed\n&quot;);<br>
&gt;                  --$done;<br>
&gt;              } else {<br>
&gt;                  _append($data, $print_timestamp ? localtime() : &quot;&quot;,<br>
&gt; @@ -493,11 +495,19 @@ sub Cmd {<br>
&gt;              }<br>
&gt;          }<br>
&gt;<br>
&gt; -        # If we&#39;re running with a timeout, bail if we&#39;re past the end<br>
&gt; -        # time<br>
&gt; -        if (defined($end_time) &amp;&amp; time() &gt; $end_time) {<br>
&gt; +        # If we&#39;re running with a timeout, check to see if a) the<br>
&gt; +        # process is still running (i.e., stdout/stderr is still<br>
&gt; +        # open), and b) we&#39;re past the end time.<br>
&gt; +        if ($done &gt; 0 &amp;&amp; defined($end_time) &amp;&amp; time() &gt; $end_time) {<br>
&gt;              my $over = time() - $end_time;<br>
&gt; -            if ($over &gt; $last_over) {<br>
&gt; +<br>
&gt; +            # Note that we only want to backtrace/kill the process<br>
&gt; +            # *once*.  Consider: it is possible that we kill the<br>
&gt; +            # process tree, but then stdout/stderr are still draining,<br>
&gt; +            # and therefore we loop around here again *even though the<br>
&gt; +            # process tree is already dead*.  So put a little<br>
&gt; +            # do-this-only-once protection in here.<br>
&gt; +            if (!defined($timeout_message) &amp;&amp; $over &gt; $last_over) {<br>
&gt;                  Verbose(&quot;*** Past timeout of $timeout seconds by $over seconds\n&quot;);<br>
&gt;<br>
&gt;                  # Handle timeout file<br>
&gt; @@ -555,10 +565,8 @@ sub Cmd {<br>
&gt;                      );<br>
&gt;<br>
&gt;                      $done = 0;<br>
&gt; -                    $timeout_message = _kill_proc($pid);<br>
&gt; -                } else {<br>
&gt; -                    $timeout_message = _kill_proc($pid);<br>
&gt;                  }<br>
&gt; +                $timeout_message = _kill_proc($pid);<br>
&gt;<br>
&gt;                  # We don&#39;t care about the exit status if we timed out<br>
&gt;                  # -- fill it with a bogus value.<br>
&gt; @@ -576,6 +584,7 @@ sub Cmd {<br>
&gt;              }<br>
&gt;          }<br>
&gt;      }<br>
&gt; +    Debug(&quot;*** Child process now dead\n&quot;);<br>
&gt;      close OUTerr;<br>
&gt;      close OUTread<br>
&gt;          if (!$merge_output);<br>
&gt;<br>
&gt; <a href="https://github.com/open-mpi/mtt/commit/cfdd29de2012eeb7592706f00dd07a52dd48cf6b" target="_blank">https://github.com/open-mpi/mtt/commit/cfdd29de2012eeb7592706f00dd07a52dd48cf6b</a><br>
&gt;<br>
&gt; commit cfdd29de2012eeb7592706f00dd07a52dd48cf6b<br>
&gt; Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
&gt; Date:   Sat Jun 21 03:36:08 2014 -0700<br>
&gt;<br>
&gt;     DoCommand: remove unused variables<br>
&gt; ---<br>
&gt;  lib/MTT/DoCommand.pm | 2 --<br>
&gt;  1 file changed, 2 deletions(-)<br>
&gt;<br>
&gt; diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
&gt; index 0740b28..0e253f0 100644<br>
&gt; --- a/lib/MTT/DoCommand.pm<br>
&gt; +++ b/lib/MTT/DoCommand.pm<br>
&gt; @@ -445,7 +445,6 @@ sub Cmd {<br>
&gt;          $end_time = time() + $timeout;<br>
&gt;          Debug(&quot;Timeout: $timeout - $end_time (vs. now: &quot; . time() . &quot;)\n&quot;);<br>
&gt;      }<br>
&gt; -    my $killed_status = undef;<br>
&gt;      my $last_over = 0;<br>
&gt;      my $partial_out;<br>
&gt;      my $partial_err;<br>
&gt; @@ -900,7 +899,6 @@ sub Win_Cmd {<br>
&gt;          $end_time = time() + $timeout;<br>
&gt;          Debug(&quot;Timeout: $timeout - $end_time (vs. now: &quot; . time() . &quot;)\n&quot;);<br>
&gt;      }<br>
&gt; -    my $killed_status = undef;<br>
&gt;      my $last_over = 0;<br>
&gt;<br>
&gt;      while(&lt;OUTread&gt;) {<br>
&gt;<br>
&gt; <a href="https://github.com/open-mpi/mtt/commit/940030ca20eb1eaf256e898b83866c1cb83aca5c" target="_blank">https://github.com/open-mpi/mtt/commit/940030ca20eb1eaf256e898b83866c1cb83aca5c</a><br>
&gt;<br>
&gt; commit 940030ca20eb1eaf256e898b83866c1cb83aca5c<br>
&gt; Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
&gt; Date:   Fri Jun 20 17:13:08 2014 -0700<br>
&gt;<br>
&gt;     Diskfree.pm: fix df handle leak<br>
&gt;<br>
&gt;     This left a zombied &quot;df&quot; process in the process table.  The Perl<br>
&gt;     runtime eventually cleaned it up, but it was weird to see a zombied df<br>
&gt;     in ps listings.<br>
&gt;<br>
&gt;     There&#39;s no point in reporting this bug upstream; according to the<br>
&gt;     Changes file, v0.06 was published in 1998.  There&#39;s been no activity<br>
&gt;     on <a href="http://search.cpan.org/dist/Filesys-DiskFree/DiskFree.pm" target="_blank">http://search.cpan.org/dist/Filesys-DiskFree/DiskFree.pm</a> since<br>
&gt;     v0.06.<br>
&gt; ---<br>
&gt;  lib/Filesys/DiskFree.pm | 3 ++-<br>
&gt;  1 file changed, 2 insertions(+), 1 deletion(-)<br>
&gt;<br>
&gt; diff --git a/lib/Filesys/DiskFree.pm b/lib/Filesys/DiskFree.pm<br>
&gt; index 1fa655d..41a27d7 100644<br>
&gt; --- a/lib/Filesys/DiskFree.pm<br>
&gt; +++ b/lib/Filesys/DiskFree.pm<br>
&gt; @@ -124,8 +124,9 @@ sub df(){<br>
&gt;      $cmd=$self-&gt;command() or<br>
&gt;         croak &quot;No df command known for format &quot;.$self-&gt;{&#39;FORMAT&#39;};<br>
&gt;      open(HANDLE,&quot;$cmd|&quot;) or croak(&quot;Cannot fork \&quot;$cmd\&quot;: $!&quot;);<br>
&gt; -    return $self-&gt;load(\*HANDLE);<br>
&gt; +    my $ret = $self-&gt;load(\*HANDLE);<br>
&gt;      close(HANDLE) or croak(&quot;Cannot df $!&quot;);<br>
&gt; +    return $ret;<br>
&gt;  }<br>
&gt;<br>
&gt;  sub load()  {<br>
&gt;<br>
&gt; -----------------------------------------------------------------------<br>
&gt;<br>
&gt; Summary of changes:<br>
&gt;  lib/Filesys/DiskFree.pm |   3 +-<br>
&gt;  lib/MTT/DoCommand.pm    | 162 +++++++++++++++++++++++++++++++++++-------------<br>
&gt;  2 files changed, 120 insertions(+), 45 deletions(-)<br>
&gt;<br>
&gt;<br>
&gt; hooks/post-receive<br>
<span class="HOEnZb"><font color="#888888">&gt; --<br>
&gt; MTT<br>
&gt; _______________________________________________<br>
&gt; mtt-svn mailing list<br>
&gt; <a href="mailto:mtt-svn@open-mpi.org">mtt-svn@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; mtt-devel mailing list<br>
&gt; <a href="mailto:mtt-devel@open-mpi.org">mtt-devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a><br>
&gt; Searchable archives: <a href="http://www.open-mpi.org/community/lists/mtt-devel/2014/06/index.php" target="_blank">http://www.open-mpi.org/community/lists/mtt-devel/2014/06/index.php</a><br>
<br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
_______________________________________________<br>
mtt-devel mailing list<br>
<a href="mailto:mtt-devel@open-mpi.org">mtt-devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/mtt-devel/2014/06/0627.php" target="_blank">http://www.open-mpi.org/community/lists/mtt-devel/2014/06/0627.php</a><br>
</font></span></blockquote></div><br></div>


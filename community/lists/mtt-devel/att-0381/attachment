<div dir="ltr">Hello Ethan,<br><br><br><div class="gmail_quote">On Mon, Apr 13, 2009 at 5:44 PM, Ethan Mallove <span dir="ltr">&lt;<a href="mailto:ethan.mallove@sun.com">ethan.mallove@sun.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div><div></div><div class="h5"><br>
</div></div>Will this translate to something like<br>
lib/MTT/Reporter/GoogleDatabase.pm?  If we are to move away from the<br>
current MTT Postgres database, we want to be able to submit results to<br>
both the current MTT database and the new Google database during the<br>
transition period. Having a GoogleDatabase.pm would make this easier.<br>
<div class="im"></div></blockquote><div><br>I think we should keep both storage options: current postgress and datastore. The mtt changes will be minor to support datastore.<br>Due that fact that google appengine API (as well as datastore API) can be python or java only, we will create external scripts to manipulate datastore objects:<br>
<br>The mtt will dump test results in xml format. Then, we provide two python (or java?) scripts:<br><br>mtt-results-submit-to-datastore.py - script will be called at the end of mtt run and will read xml files, create objects and save to datastore<br>
mtt-results-query.py - sample script to query datastore and generate some simple visual/tabular reports. It will serve as tutorial for howto access mtt data from scripts for reporting. <br><br>Later, we add another script to replace php web frontend. It will be hosted on google appengine machines and will provide web viewer for mtt results. (same way like index.php does today)<br>
<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="im"><br>
&gt;<br>
&gt;      b. mtt_save_to_db.py - script which will go over mtt scratch dir, find<br>
&gt;      all xml files generated for every mtt phase, parse it and save to<br>
&gt;      datastore, preserving test results relations,i.e. all test results will<br>
&gt;      be grouped by mtt general info: mpi version, name, date, ....<br>
&gt;<br>
&gt;      c. same script can scan, parse and save from xml files generated by<br>
&gt;      wrapper scripts for non mtt based executions (fluent, ..)<br>
&gt;<br>
<br>
</div>I&#39;m confused here.  Can&#39;t MTT be outfitted to report results of a<br>
Fluent run?<br>
<div class="im"></div></blockquote><div><br><br>I think we can enhance mtt to be not only mpi testing platform, but also to serve as mpi benchmarking platform. We can use datastore to keep mpi-based benchmarking results in the same manner like mtt does for testing results. (no changes to mtt required for that, it is just a side effect of using datastore to keep data of any type)<br>
<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><div class="im"><br>
<br>
&gt;      d. mtt_query_db.py script will be provided with basic query capabilities<br>
&gt;      over proposed datastore object model. Most users will prefer writing<br>
&gt;      custom sql-like select queries for fetching results.<br>
&gt;<br>
&gt;      3. Important notes:<br>
&gt;      ==============<br>
&gt;<br>
&gt;      a. The single mtt client execution generates many result files, every<br>
&gt;      generated file represents test phase. This file contains test results<br>
&gt;      and can be characterized as a set of attributes with its values. Every<br>
&gt;      test phase has its own attributes which are differ for different phases.<br>
&gt;      For example: attributes for TestBuild phase has keys &quot;compiler_name,<br>
&gt;      compiler_version&quot;, the MPIInstall phase has attributes: prefix_dir,<br>
&gt;      arch, ....<br>
&gt;      Hence, most of the datastore objects representing phases of MTT* are<br>
&gt;      derived from &quot;db.Expando&quot; model, which allows having dynamic attributes<br>
&gt;      for its derived sub-classes.<br>
&gt;<br>
&gt;      The attached is archive with a simple test for using datastore for mtt.<br>
&gt;      Please see models.py file with proposed object model and comment.<br>
&gt;<br>
<br>
</div>I don&#39;t see the models.py attachment.<br>
</blockquote><div><br>I just sent original email with attachment, tell me if you want me to send it again. <br></div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<br>
</blockquote></div><br>regards<br><br>Mike<br></div>


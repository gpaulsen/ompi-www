<div dir="ltr">resending original post with attachment (mtt_datastore.tbz). it is sample google appengine API application. It contains models.py with object model proposal and script with some examples of object model use-cases and flows.<br>
<br><div class="gmail_quote">---------- Forwarded message ----------<br>From: <b class="gmail_sendername">Mike Dubman</b> <span dir="ltr">&lt;<a href="mailto:mike.ompi@gmail.com">mike.ompi@gmail.com</a>&gt;</span><br>Date: Mon, Apr 6, 2009 at 4:54 PM<br>
Subject: Re: [MTT devel] GSOC application<br>To: Development list for the MPI Testing Tool &lt;<a href="mailto:mtt-devel@open-mpi.org">mtt-devel@open-mpi.org</a>&gt;<br><br><br><div dir="ltr">Hello Guys,<br><br>I have played a bit with google datastore and here is a proposal for mtt DB infra and some accompanying tools for submission and querying:<br>
<br><br>1. Scope and requirements<br>====================<br>


<br>
a. provide storage services for storing test results generated by mtt. Storage services will be implemented over datastore.<br>b. provide storage services for storing benchmarking results generated by various mpi based applications  (not mtt based, for example: fluent, openfoam)<br>




c. test or benchmarking results stored in the datastore can be grouped and referred as a group (for example: mtt execution can generate many mtt results consisting of different phases. This mtt execution will be referred as a session)<br>




d. Benchmarking and test results which are generated by mtt or any other mpi based applications, can be stored in the datastore and grouped by some logical criteria.<br>e. The mtt should not depend or call directly any datastore`s provided APIs. The mtt client (or framework/scripts executing mpi based applications) should generate test/benchmarking results in some internal format, which will be processed later by external tools. These external tools will be responsible for saving test results in the datastore. Same rules should be applied for non mtt based executions of mpi-based applications (line fluent, openfoam,...). The scripts which are wrapping such executions will dump benchmarking results in some internal form for later processing by external tools.<br>




<br>f. The internal form for representation of test/benchmarking results can be XML. The external tool will receive (as cmd line params) XML files, process them and save to the datastore. <br><br>d. The external tools will be familiar with datastore object model and will provide bridge between test results (XML) and actual datastore.<br>



<br><br><br>2. Flow and use-cases<br>=================<br>
<br>a. The mtt client will dump all test related information into XML file. The file will be created for every phase executed by mtt. (today there are many summary txt and html files generated for every test phase, it is pretty easy to add xml generation of the same information)<br>




<br>b. mtt_save_to_db.py - script which will go over mtt scratch dir, find all xml files generated for every mtt phase, parse it and save to datastore, preserving test results relations,i.e. all test results will be grouped by mtt general info: mpi version, name, date, ....<br>




<br>c. same script can scan, parse and save from xml files generated by wrapper scripts for non mtt based executions (fluent, ..)<br><br>d. mtt_query_db.py script will be provided with basic query capabilities over proposed datastore object model. Most users will prefer writing custom sql-like select queries for fetching results.<br>




<br>3. Important notes:<br>==============<br><br>a. The single mtt client execution generates many result files, every generated file represents test phase. This file contains test results and can be characterized as a set of attributes with its values. Every test phase has its own attributes which are differ for different phases. For example: attributes for TestBuild phase has keys &quot;compiler_name, compiler_version&quot;, the MPIInstall phase has attributes: prefix_dir, arch, ....<br>



Hence, most of the datastore objects representing phases of MTT  are derived from &quot;db.Expando&quot; model, which allows having dynamic attributes for its derived sub-classes.<br><br><br>The attached is archive with a simple test for using datastore for mtt. Please see models.py file with proposed object model and comment.<br>

<br>You can run the attached example in the google datastore dev environment. (<a href="http://code.google.com/appengine/downloads.html" target="_blank">http://code.google.com/appengine/downloads.html</a>)<br><br>Please comment.<br>
<br><br>
Thanks<br><font color="#888888"><br>Mike</font><div><div></div><div class="h5"><br><br><br><div class="gmail_quote">
On Tue, Mar 24, 2009 at 12:17 AM, Jeff Squyres <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div>On Mar 23, 2009, at 9:05 AM, Ethan Mallove wrote:<br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
  -------------------+---------------------+----------<br>
  Resource           | Unit                | Unit cost<br>
  -------------------+---------------------+----------<br>
  Outgoing Bandwidth | gigabytes           | $0.12<br>
  Incoming Bandwidth | gigabytes           | $0.10<br>
  CPU Time           | CPU hours           | $0.10<br>
  Stored Data        | gigabytes per month | $0.15<br>
  Recipients Emailed | recipients          | $0.0001<br>
  -------------------+---------------------+----------<br>
<br>
Would we itemize the MTT bill on a per user basis?  E.g., orgs that<br>
use MTT more, would have to pay more?<br>
<br>
</blockquote>
<br>
<br></div>
Let&#39;s assume stored data == incoming bandwidth, because we never throw anything away.  And let&#39;s go with the SWAG of 100GB.  We may or may not be able to gzip the data uploading to the server.  So if anything, we *might* be able to decrease the incoming data and have higher level of stored data.<br>





<br>
I anticipate our outgoing data to be significantly less, particularly if we can gzip the outgoing data (which I think we can).  You&#39;re right, CPU time is a mystery -- we won&#39;t know what it will be until we start running some queries to see what happens.<br>





<br>
100GB * $0.10 = $10<br>
100GB * $0.15 = $15<br>
total = $25 for the first month<br>
<br>
So let&#39;s SWAG at $25/mo for a year = $300.  This number will be wrong for several reasons, but it at least gives us a ballpark.  For $300/year, I think we (the OMPI project) can find a way to pay for this fairly easily.<br>




<font color="#888888">
<br>
-- <br></font><div><div></div><div>
Jeff Squyres<br>
Cisco Systems<br>
<br>
_______________________________________________<br>
mtt-devel mailing list<br>
<a href="mailto:mtt-devel@open-mpi.org" target="_blank">mtt-devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a><br>
</div></div></blockquote></div><br></div></div></div>
</div><br></div>


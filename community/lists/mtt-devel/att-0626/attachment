<div dir="ltr">this commit does more harm then good.<div>we experience following:</div><div><br></div><div>- some child processes still running after timeout and mtt killed the job.</div><div><br></div><div>before this commit - it worked fine.</div>
<div>please revert and test more.</div><div> </div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Sat, Jun 21, 2014 at 3:30 PM, MPI Team <span dir="ltr">&lt;<a href="mailto:mpiteam@crest.iu.edu" target="_blank">mpiteam@crest.iu.edu</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">The branch, master has been updated<br>
       via  016088f2a0831b32ab5fd6f60f4cabe67e92e594 (commit)<br>
       via  7fb4c6a4c9d71be127ea53bd463178510577f71f (commit)<br>
       via  381ba177d835a54c3197d846f5a4edfc314efe27 (commit)<br>
       via  cfdd29de2012eeb7592706f00dd07a52dd48cf6b (commit)<br>
       via  940030ca20eb1eaf256e898b83866c1cb83aca5c (commit)<br>
      from  c99ed7c7b159a2cab58a251bd7c0dad8972ff901 (commit)<br>
<br>
Those revisions listed above that are new to this repository have<br>
not appeared on any other notification email; so we list those<br>
revisions in full, below.<br>
<br>
- Log -----------------------------------------------------------------<br>
<a href="https://github.com/open-mpi/mtt/commit/016088f2a0831b32ab5fd6f60f4cabe67e92e594" target="_blank">https://github.com/open-mpi/mtt/commit/016088f2a0831b32ab5fd6f60f4cabe67e92e594</a><br>
<br>
commit 016088f2a0831b32ab5fd6f60f4cabe67e92e594<br>
Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Date:   Sat Jun 21 04:58:45 2014 -0700<br>
<br>
    DoCommand: several fixes to kill_proc logic<br>
<br>
    1. Fix the kill(0, $pid) test to see if the process was still alive.<br>
<br>
    2. Rename _kill_proc() to _kill_proc_tree() to indicate that it&#39;s<br>
    really killing not only the PID in question, but also all of its<br>
    descendants.<br>
<br>
    3. In _kill_proc_tree(), change the order to kill the main PID first,<br>
    and &#39;&#39;then&#39;&#39; kill all the descendants.<br>
<br>
    The main use case is when killing mpirun: if we kill mpirun&#39;s<br>
    descendants &#39;&#39;first&#39;&#39;, mpirun will detect its childrens&#39; deaths and<br>
    then cleanup and exit.  Later, when MTT finally gets around to killing<br>
    mpirun, MTT will detect that mpirun is already dead and therefore emit<br>
    a confusing &quot;mpirun died right at end of timeout&quot; message.  This is<br>
    misleading at best; it doesn&#39;t indicate what actually happened.<br>
<br>
    However, if we kill mpirun first, it will take care of killing all of<br>
    its descendants.  MTT will therefore emit the right messages about<br>
    killing mpirun.  MTT will then redundantly try to kill a bunch of<br>
    now-nonexistent descendant processes of mpirun, but that&#39;s ok/safe.<br>
    We actually &#39;&#39;want&#39;&#39; this try-to-kill-mpirun&#39;s-descendants behavior to<br>
    handle the case when mpirun is misbehaving / not cleaning up its<br>
    descendants.<br>
<br>
    4. DoCommand() is used for more than launching mpirun, so pass down<br>
    $argv0 so that we can print the actual command name that is being<br>
    killed in various Verbose/Debug messages, not the hard-coded &quot;mpirun&quot;<br>
    string (which, in practice, was probably almost always correct, but<br>
    still...).<br>
---<br>
 lib/MTT/DoCommand.pm | 78 ++++++++++++++++++++++++++++++++++++----------------<br>
 1 file changed, 55 insertions(+), 23 deletions(-)<br>
<br>
diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
index 02cdb94..646ca31 100644<br>
--- a/lib/MTT/DoCommand.pm<br>
+++ b/lib/MTT/DoCommand.pm<br>
@@ -2,7 +2,7 @@<br>
 #<br>
 # Copyright (c) 2005-2006 The Trustees of Indiana University.<br>
 #                         All rights reserved.<br>
-# Copyright (c) 2006-2013 Cisco Systems, Inc.  All rights reserved.<br>
+# Copyright (c) 2006-2014 Cisco Systems, Inc.  All rights reserved.<br>
 # Copyright (c) 2007-2008 Sun Microsystems, Inc.  All rights reserved.<br>
 # Copyright (c) 2007-2012 High Performance Computing Center Stuttgart,<br>
 #                         University of Stuttgart.  All rights reserved.<br>
@@ -57,23 +57,27 @@ sub DoCommand {<br>
     ($time_arg, $no_execute) = @_;<br>
 }<br>
<br>
+# This function is called for killing both mpirun and each of its<br>
+# descendants.  We really only want to see verbose output for when we<br>
+# kill mpirun itself, so only show output when the caller provides us<br>
+# with a $argv0 value.<br>
 sub _kill_proc_one {<br>
-    my ($pid) = @_;<br>
+    my ($pid, $argv0) = @_;<br>
<br>
     # How long to wait after each kill()<br>
     my $wait_time = 5;<br>
<br>
     # See if the proc is alive first<br>
-    my $kid;<br>
-    kill(0, $pid);<br>
-    $kid = waitpid($pid, WNOHANG);<br>
-    return &quot;mpirun died right at end of timeout (MTT did not have to kill it)&quot;<br>
-        if (-1 == $kid);<br>
+    my $num_alive = kill(0, $pid);<br>
+    return &quot;$argv0 died right at end of timeout (MTT did not have to kill it)&quot;<br>
+        if (0 == $num_alive);<br>
<br>
     # Try an easy kill<br>
     kill(&quot;TERM&quot;, $pid);<br>
-    Verbose(&quot;*** Killing mpirun with SIGTERM\n&quot;);<br>
+    Verbose(&quot;*** Killing $argv0 with SIGTERM\n&quot;)<br>
+        if (defined($argv0));<br>
     # Give mpirun some time to cleanup before we try to reap it.<br>
+    my $kid;<br>
     my $i = $wait_time;<br>
     while ($i &gt; 0) {<br>
         sleep(1);<br>
@@ -85,45 +89,74 @@ sub _kill_proc_one {<br>
         # process no longer exists (i.e., we get -1 back from<br>
         # waitpid), or we successfully killed it (i.e., we got the PID<br>
         # back from waitpid).<br>
-        return &quot;MTT killed mpirun via SIGTERM&quot; if (0 != $kid);<br>
+        return &quot;MTT killed $argv0 via SIGTERM&quot; if (0 != $kid);<br>
<br>
         --$i;<br>
     }<br>
-    Verbose(&quot;** Kill TERM (after $wait_time seconds) didn&#39;t work!\n&quot;);<br>
+    Verbose(&quot;** Kill TERM (after $wait_time seconds) didn&#39;t work!\n&quot;)<br>
+        if (defined($argv0));<br>
<br>
     # That didn&#39;t work either.  Try SIGINT;<br>
-    Verbose(&quot;*** Killing mpirun with SIGINT\n&quot;);<br>
+    Verbose(&quot;*** Killing $argv0 with SIGINT\n&quot;)<br>
+        if (defined($argv0));<br>
     kill(&quot;INT&quot;, $pid);<br>
     my $i = $wait_time;<br>
     while ($i &gt; 0) {<br>
         sleep(1);<br>
         $kid = waitpid($pid, WNOHANG);<br>
-        return &quot;MTT killed mpirun via SIGINT&quot; if (0 != $kid);<br>
+        return &quot;MTT killed $argv0 via SIGINT&quot; if (0 != $kid);<br>
         --$i;<br>
     }<br>
-    Verbose(&quot;** Kill INT (after $wait_time seconds) didn&#39;t work!\n&quot;);<br>
+    Verbose(&quot;** Kill INT (after $wait_time seconds) didn&#39;t work!\n&quot;)<br>
+        if (defined($argv0));<br>
<br>
     # Ok, now we&#39;re mad.  Be violent.<br>
-    Verbose(&quot;*** Now I&#39;m mad.  Killing mpirun with SIGKILL\n&quot;);<br>
+    Verbose(&quot;*** Now I&#39;m mad.  Killing $argv0 with SIGKILL\n&quot;)<br>
+        if (defined($argv0));<br>
     my $count = 0;<br>
     while (1) {<br>
         kill(&quot;KILL&quot;, $pid);<br>
         ++$count;<br>
         $kid = waitpid($pid, WNOHANG);<br>
-        return &quot;MTT killed mpirun via $count SIGKILLs&quot; if (0 != $kid);<br>
-        Verbose(&quot;** Kill KILL didn&#39;t work!  Sleeping and trying again...\n&quot;);<br>
+        return &quot;MTT killed $argv0 via $count SIGKILLs&quot; if (0 != $kid);<br>
+        Verbose(&quot;** Kill KILL didn&#39;t work!  Sleeping and trying again...\n&quot;)<br>
+            if (defined($argv0));<br>
         sleep(1);<br>
     }<br>
 }<br>
<br>
<br>
-sub _kill_proc {<br>
-    my ($pid) = @_;<br>
-    # kill the group, take the names later<br>
-    foreach my $process (descendant_processes($pid)) {<br>
+sub _kill_proc_tree {<br>
+    my ($pid, $argv0) = @_;<br>
+<br>
+    # Find all descendent processes of the main PID<br>
+    my @children = descendant_processes($pid);<br>
+<br>
+    # Kill the main PID.  Note that _kill_proc_one() will give the<br>
+    # process time to react/cleanup, so there&#39;s no need for an<br>
+    # additional delay after it returns.<br>
+    my $ret = _kill_proc_one($pid, $argv0);<br>
+<br>
+    # Now kill all the processes that descended from the base PID.<br>
+    #<br>
+    # Note: when mpirun is working properly (which is one of the<br>
+    # biggest use cases for DoCommand), this is redundant -- all the<br>
+    # children will already be dead (because killing mpirun will<br>
+    # ensure that all descendant processes are also killed).<br>
+    #<br>
+    # That being said, a) DoCommand() is used to launch more than just<br>
+    # mpirun, b) mpirun breaks sometimes and doesn&#39;t clean up its<br>
+    # descendants, and c) it&#39;s safe to call _kill_proc_one() on a PID<br>
+    # that is already dead.<br>
+    foreach my $process (@children) {<br>
+        Debug(&quot;=== killing child proc: $process-&gt;{pid}, $process-&gt;{argv0}\n&quot;);<br>
+<br>
+        # Ignore the return.  For example, we don&#39;t care if the child<br>
+        # is already dead<br>
         _kill_proc_one($process-&gt;{pid});<br>
     }<br>
-    return _kill_proc_one($pid);<br>
+<br>
+    return $ret;<br>
 }<br>
<br>
 #--------------------------------------------------------------------------<br>
@@ -338,7 +371,6 @@ sub Cmd {<br>
<br>
     my $tokens = _quote_escape($cmd);<br>
<br>
-<br>
     my $pid;<br>
     if (! $no_execute) {<br>
<br>
@@ -568,7 +600,7 @@ sub Cmd {<br>
<br>
                     $done = 0;<br>
                 }<br>
-                $timeout_message = _kill_proc($pid);<br>
+                $timeout_message = _kill_proc_tree($pid, ${$tokens}[0]);<br>
<br>
                 # We don&#39;t care about the exit status if we timed out<br>
                 # -- fill it with a bogus value.<br>
<br>
<a href="https://github.com/open-mpi/mtt/commit/7fb4c6a4c9d71be127ea53bd463178510577f71f" target="_blank">https://github.com/open-mpi/mtt/commit/7fb4c6a4c9d71be127ea53bd463178510577f71f</a><br>
<br>
commit 7fb4c6a4c9d71be127ea53bd463178510577f71f<br>
Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Date:   Sat Jun 21 04:42:19 2014 -0700<br>
<br>
    DoCommand: replace obscure perl code with easier-to-grok version<br>
<br>
    The descendant_processes() and flatten() codes were written in a<br>
    nicely efficient yet very difficult to understand manner.  This commit<br>
    replaces these two subs with admittedly less efficient but much easier<br>
    to understand code.<br>
<br>
    The new code also saves the first token of the command for each PID so<br>
    that it can be used in Debug/Verbose statements (e.g., identify the<br>
    command that is being killed, etc.).<br>
---<br>
 lib/MTT/DoCommand.pm | 63 ++++++++++++++++++++++++++++++++++++++++------------<br>
 1 file changed, 49 insertions(+), 14 deletions(-)<br>
<br>
diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
index c3be8a8..02cdb94 100644<br>
--- a/lib/MTT/DoCommand.pm<br>
+++ b/lib/MTT/DoCommand.pm<br>
@@ -120,8 +120,8 @@ sub _kill_proc_one {<br>
 sub _kill_proc {<br>
     my ($pid) = @_;<br>
     # kill the group, take the names later<br>
-    foreach my $p (descendant_processes($pid)) {<br>
-        _kill_proc_one($p);<br>
+    foreach my $process (descendant_processes($pid)) {<br>
+        _kill_proc_one($process-&gt;{pid});<br>
     }<br>
     return _kill_proc_one($pid);<br>
 }<br>
@@ -527,7 +527,8 @@ sub Cmd {<br>
                 if (defined($timeout_backtrace_program) and !$got_backtrace) {<br>
                     $backtrace = &quot;&quot;;<br>
                     if ( $timeout_before_backtrace_program ) {<br>
-                        foreach my $p (descendant_processes($pid)) {<br>
+                        foreach my $process (descendant_processes($pid)) {<br>
+                            my $p = $process-&gt;{pid};<br>
                             my $c = $timeout_before_backtrace_program;<br>
                             $c =~ s/%PID%/$p/g;<br>
                             Debug(&quot;_pre_backtrace cmd: $c\n&quot;);<br>
@@ -538,7 +539,8 @@ sub Cmd {<br>
                     $backtrace .= _get_backtrace($timeout_backtrace_program, $pid, $pre_pernode);<br>
<br>
                     if ( $timeout_after_backtrace_program ) {<br>
-                        foreach my $p (descendant_processes($pid)) {<br>
+                        foreach my $process (descendant_processes($pid)) {<br>
+                            my $p = $process-&gt;{pid};<br>
                             my $c = $timeout_after_backtrace_program;<br>
                             $c =~ s/%PID%/$p/g;<br>
                             Debug(&quot;_post_backtrace cmd: $c\n&quot;);<br>
@@ -738,19 +740,50 @@ sub _do_email_timeout_notification {<br>
     close(TIMEOUT_SENTINEL_FILE);<br>
 }<br>
<br>
-sub flatten {<br>
-    map{ (ref($_) eq &quot;ARRAY&quot;) ? map{flatten($_)}@$_ : $_ } @_;<br>
+sub find_children {<br>
+    my ($pids, $start) = @_;<br>
+<br>
+    my @ret;<br>
+    # Scan the PID list and see if any other PIDs list $start as their<br>
+    # PPID.  If so, save that PID and then recursively look for *that*<br>
+    # PID&#39;s children.<br>
+    foreach my $pid (sort(keys(%{$pids}))) {<br>
+        if ($pids-&gt;{$pid}-&gt;{ppid} == $start) {<br>
+            push(@ret, {<br>
+                pid =&gt; $pid,<br>
+                argv0 =&gt; $pids-&gt;{$pid}-&gt;{argv0},<br>
+                 });<br>
+<br>
+            # Add this PID&#39;s descendants to the return array<br>
+            push(@ret, find_children($pids, $pid));<br>
+        }<br>
+    }<br>
+<br>
+    return @ret;<br>
 }<br>
<br>
 sub descendant_processes {<br>
     my ($base) = (@_, $$);<br>
-    my %parentage = (`ps -eo pid,ppid` =~ /\d+/g);<br>
-    my %reverse = map { ($_, [$_]) } %parentage;<br>
-    while (my ($pid,$ppid) = each %parentage){<br>
-        push @{$reverse{$ppid}}, $reverse{$pid};<br>
+    open(PS, &quot;ps -eo pid,ppid,cmd|&quot;) || die &quot;Can&#39;t open ps&quot;;<br>
+<br>
+    # Skip the title line<br>
+    &lt;PS&gt;;<br>
+<br>
+    # Read all the data lines<br>
+    my $pids;<br>
+    while (&lt;PS&gt;) {<br>
+        # Grab the PID, PPID, and first token of the command<br>
+        $_ =~ m/(\d+)\s+(\d+)\s+(\S+)/;<br>
+        $pids-&gt;{$1} = {<br>
+            pid =&gt; $1,<br>
+            ppid =&gt; $2,<br>
+            argv0 =&gt; $3,<br>
+        };<br>
     }<br>
-    shift @{$reverse{$base}};<br>
-    flatten($reverse{$base});<br>
+    close(PS);<br>
+<br>
+    # Find all the descendants of the $base PID<br>
+    return find_children($pids, $base);<br>
 }<br>
<br>
 sub _get_backtrace {<br>
@@ -774,7 +807,8 @@ sub _get_backtrace {<br>
<br>
             # Use ps -Af output to fetch the child pids,<br>
             # and grab a stack trace from each one<br>
-            foreach my $p (descendant_processes($pid)) {<br>
+            foreach my $process (descendant_processes($pid)) {<br>
+                my $p = $process-&gt;{pid};<br>
                 $gdb_cmd = &quot;gdb - $p --command=$gdb_command_filename --batch&quot;;<br>
                 $ret .= &quot;\n $gdb_cmd&quot;;<br>
                 $ret .= &quot;\n&quot; . `$gdb_cmd`;<br>
@@ -814,8 +848,9 @@ sub _get_backtrace {<br>
                 }<br>
             }<br>
             Debug(&quot;Stacktrace: base name $return_basename\n&quot;);<br>
-            #foreach my $p (descendant_processes($pid))<br>
+            #foreach my $process (descendant_processes($pid))<br>
             #{<br>
+            #    my $p = $process-&gt;{pid};<br>
             #    my $gstack_cmd = &quot;gstack $p&quot;;<br>
             #    $ret .= &quot;\n $gstack_cmd&quot;;<br>
             #    $ret .= &quot;\n&quot; . `$gstack_cmd`;<br>
<br>
<a href="https://github.com/open-mpi/mtt/commit/381ba177d835a54c3197d846f5a4edfc314efe27" target="_blank">https://github.com/open-mpi/mtt/commit/381ba177d835a54c3197d846f5a4edfc314efe27</a><br>
<br>
commit 381ba177d835a54c3197d846f5a4edfc314efe27<br>
Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Date:   Sat Jun 21 03:48:55 2014 -0700<br>
<br>
    DoCommand: ensure to only kill the process once<br>
<br>
    When the DoCommand timeout fires, MTT will kill the entire process<br>
    tree of the launched command.  However, the stdout/stderr sockets may<br>
    still be draining, and therefore the main DoCommand loop may still<br>
    execute more iterations.  In cases like these, ensure that we don&#39;t<br>
    try to backtrace/kill the process tree again.<br>
<br>
    Also add a few more Debug statements for detailed output.<br>
---<br>
 lib/MTT/DoCommand.pm | 23 ++++++++++++++++-------<br>
 1 file changed, 16 insertions(+), 7 deletions(-)<br>
<br>
diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
index 0e253f0..c3be8a8 100644<br>
--- a/lib/MTT/DoCommand.pm<br>
+++ b/lib/MTT/DoCommand.pm<br>
@@ -471,6 +471,7 @@ sub Cmd {<br>
             my $len = sysread(OUTread, $data, 99999);<br>
             if (0 == $len) {<br>
                 vec($rin, fileno(OUTread), 1) = 0;<br>
+                Debug(&quot;*** Child process stdout closed\n&quot;);<br>
                 --$done;<br>
             } else {<br>
                 _append($data, $print_timestamp ? localtime() : &quot;&quot;,<br>
@@ -485,6 +486,7 @@ sub Cmd {<br>
             my $len = sysread(ERRread, $data, 99999);<br>
             if (0 == $len) {<br>
                 vec($rin, fileno(ERRread), 1) = 0;<br>
+                Debug(&quot;*** Child process stderr closed\n&quot;);<br>
                 --$done;<br>
             } else {<br>
                 _append($data, $print_timestamp ? localtime() : &quot;&quot;,<br>
@@ -493,11 +495,19 @@ sub Cmd {<br>
             }<br>
         }<br>
<br>
-        # If we&#39;re running with a timeout, bail if we&#39;re past the end<br>
-        # time<br>
-        if (defined($end_time) &amp;&amp; time() &gt; $end_time) {<br>
+        # If we&#39;re running with a timeout, check to see if a) the<br>
+        # process is still running (i.e., stdout/stderr is still<br>
+        # open), and b) we&#39;re past the end time.<br>
+        if ($done &gt; 0 &amp;&amp; defined($end_time) &amp;&amp; time() &gt; $end_time) {<br>
             my $over = time() - $end_time;<br>
-            if ($over &gt; $last_over) {<br>
+<br>
+            # Note that we only want to backtrace/kill the process<br>
+            # *once*.  Consider: it is possible that we kill the<br>
+            # process tree, but then stdout/stderr are still draining,<br>
+            # and therefore we loop around here again *even though the<br>
+            # process tree is already dead*.  So put a little<br>
+            # do-this-only-once protection in here.<br>
+            if (!defined($timeout_message) &amp;&amp; $over &gt; $last_over) {<br>
                 Verbose(&quot;*** Past timeout of $timeout seconds by $over seconds\n&quot;);<br>
<br>
                 # Handle timeout file<br>
@@ -555,10 +565,8 @@ sub Cmd {<br>
                     );<br>
<br>
                     $done = 0;<br>
-                    $timeout_message = _kill_proc($pid);<br>
-                } else {<br>
-                    $timeout_message = _kill_proc($pid);<br>
                 }<br>
+                $timeout_message = _kill_proc($pid);<br>
<br>
                 # We don&#39;t care about the exit status if we timed out<br>
                 # -- fill it with a bogus value.<br>
@@ -576,6 +584,7 @@ sub Cmd {<br>
             }<br>
         }<br>
     }<br>
+    Debug(&quot;*** Child process now dead\n&quot;);<br>
     close OUTerr;<br>
     close OUTread<br>
         if (!$merge_output);<br>
<br>
<a href="https://github.com/open-mpi/mtt/commit/cfdd29de2012eeb7592706f00dd07a52dd48cf6b" target="_blank">https://github.com/open-mpi/mtt/commit/cfdd29de2012eeb7592706f00dd07a52dd48cf6b</a><br>
<br>
commit cfdd29de2012eeb7592706f00dd07a52dd48cf6b<br>
Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Date:   Sat Jun 21 03:36:08 2014 -0700<br>
<br>
    DoCommand: remove unused variables<br>
---<br>
 lib/MTT/DoCommand.pm | 2 --<br>
 1 file changed, 2 deletions(-)<br>
<br>
diff --git a/lib/MTT/DoCommand.pm b/lib/MTT/DoCommand.pm<br>
index 0740b28..0e253f0 100644<br>
--- a/lib/MTT/DoCommand.pm<br>
+++ b/lib/MTT/DoCommand.pm<br>
@@ -445,7 +445,6 @@ sub Cmd {<br>
         $end_time = time() + $timeout;<br>
         Debug(&quot;Timeout: $timeout - $end_time (vs. now: &quot; . time() . &quot;)\n&quot;);<br>
     }<br>
-    my $killed_status = undef;<br>
     my $last_over = 0;<br>
     my $partial_out;<br>
     my $partial_err;<br>
@@ -900,7 +899,6 @@ sub Win_Cmd {<br>
         $end_time = time() + $timeout;<br>
         Debug(&quot;Timeout: $timeout - $end_time (vs. now: &quot; . time() . &quot;)\n&quot;);<br>
     }<br>
-    my $killed_status = undef;<br>
     my $last_over = 0;<br>
<br>
     while(&lt;OUTread&gt;) {<br>
<br>
<a href="https://github.com/open-mpi/mtt/commit/940030ca20eb1eaf256e898b83866c1cb83aca5c" target="_blank">https://github.com/open-mpi/mtt/commit/940030ca20eb1eaf256e898b83866c1cb83aca5c</a><br>
<br>
commit 940030ca20eb1eaf256e898b83866c1cb83aca5c<br>
Author: Jeff Squyres &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt;<br>
Date:   Fri Jun 20 17:13:08 2014 -0700<br>
<br>
    Diskfree.pm: fix df handle leak<br>
<br>
    This left a zombied &quot;df&quot; process in the process table.  The Perl<br>
    runtime eventually cleaned it up, but it was weird to see a zombied df<br>
    in ps listings.<br>
<br>
    There&#39;s no point in reporting this bug upstream; according to the<br>
    Changes file, v0.06 was published in 1998.  There&#39;s been no activity<br>
    on <a href="http://search.cpan.org/dist/Filesys-DiskFree/DiskFree.pm" target="_blank">http://search.cpan.org/dist/Filesys-DiskFree/DiskFree.pm</a> since<br>
    v0.06.<br>
---<br>
 lib/Filesys/DiskFree.pm | 3 ++-<br>
 1 file changed, 2 insertions(+), 1 deletion(-)<br>
<br>
diff --git a/lib/Filesys/DiskFree.pm b/lib/Filesys/DiskFree.pm<br>
index 1fa655d..41a27d7 100644<br>
--- a/lib/Filesys/DiskFree.pm<br>
+++ b/lib/Filesys/DiskFree.pm<br>
@@ -124,8 +124,9 @@ sub df(){<br>
     $cmd=$self-&gt;command() or<br>
        croak &quot;No df command known for format &quot;.$self-&gt;{&#39;FORMAT&#39;};<br>
     open(HANDLE,&quot;$cmd|&quot;) or croak(&quot;Cannot fork \&quot;$cmd\&quot;: $!&quot;);<br>
-    return $self-&gt;load(\*HANDLE);<br>
+    my $ret = $self-&gt;load(\*HANDLE);<br>
     close(HANDLE) or croak(&quot;Cannot df $!&quot;);<br>
+    return $ret;<br>
 }<br>
<br>
 sub load()  {<br>
<br>
-----------------------------------------------------------------------<br>
<br>
Summary of changes:<br>
 lib/Filesys/DiskFree.pm |   3 +-<br>
 lib/MTT/DoCommand.pm    | 162 +++++++++++++++++++++++++++++++++++-------------<br>
 2 files changed, 120 insertions(+), 45 deletions(-)<br>
<br>
<br>
hooks/post-receive<br>
<span class="HOEnZb"><font color="#888888">--<br>
MTT<br>
_______________________________________________<br>
mtt-svn mailing list<br>
<a href="mailto:mtt-svn@open-mpi.org">mtt-svn@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn</a><br>
</font></span></blockquote></div><br></div>


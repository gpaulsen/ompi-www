<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
</head>
<body bgcolor="#FFFFFF">
<div>Sounds sweet!</div>
<div><br>
</div>
<div>Will you guys be contributing This stuff, perchance?<br>
<br>
Sent from my phone.<span class="Apple-style-span" style="-webkit-tap-highlight-color: rgba(26, 26, 26, 0.292969); -webkit-composition-fill-color: rgba(175, 192, 227, 0.230469); -webkit-composition-frame-color: rgba(77, 128, 180, 0.230469); ">&nbsp;No type good.&nbsp;</span></div>
<div><br>
On Aug 4, 2012, at 11:56 AM, &quot;Mike Dubman&quot; &lt;<a href="mailto:mike.ompi@gmail.com">mike.ompi@gmail.com</a>&gt; wrote:<br>
<br>
</div>
<div></div>
<blockquote type="cite">
<div>
<div dir="ltr">
<div>Hi,</div>
<div>&nbsp;</div>
<div>We are switching from datastore (feature we added a couple of years&nbsp;ago)&nbsp;to MongoDB NoSQL DB to keep mtt results.</div>
<div>&nbsp;</div>
<div>We are adding some &quot;regression&quot; capability based on&nbsp; MTT and MongoDB reporter:</div>
<div>&nbsp;</div>
<div>- run mtt</div>
<div>- when mtt finishes, extract results for previous runs of the same test with same parameters</div>
<div>- compare performance metrics and generate regression report (excel)</div>
<div>- attach regression report to the mtt email report</div>
<div>&nbsp;</div>
<div>So, we are adding all lego-like utils to support this:</div>
<div>&nbsp;</div>
<div>- save results to OO storage (for comfort using from Perl)</div>
<div>- create Analyzers for various well-known&nbsp;tests</div>
<div>- query results, group them and generate regression statistics, place report into excel (<a href="http://mongo-query.pl">mongo-query.pl</a>)</div>
<div>- Generate report which can be attached to mtt report&nbsp;(<a href="http://breport.pl">breport.pl</a>)</div>
<div>&nbsp;</div>
<div>&nbsp;</div>
<div>So, we have reporter and query tool for Mongo, which is simple and customizable.</div>
<div>&nbsp;</div>
<div>regards</div>
<div>M</div>
<div>&nbsp;</div>
<div>&nbsp;</div>
<div class="gmail_quote">On Wed, Aug 1, 2012 at 2:00 PM, Jeff Squyres <span dir="ltr">
&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br>
<blockquote style="margin:0px 0px 0px 0.8ex;padding-left:1ex;border-left-color:rgb(204,204,204);border-left-width:1px;border-left-style:solid" class="gmail_quote">
Mike --<br>
<br>
MongoDB is a NoSQL thingy, right?<br>
<br>
Can you describe this plugin a bit? &nbsp;Do you guys have some kind of reporter for MongoDB?<br>
<div class="HOEnZb">
<div class="h5"><br>
<br>
On Aug 1, 2012, at 5:46 AM, &lt;<a href="mailto:svn-commit-mailer@open-mpi.org">svn-commit-mailer@open-mpi.org</a>&gt; wrote:<br>
<br>
&gt; Author: miked (Mike Dubman)<br>
&gt; Date: 2012-08-01 05:46:03 EDT (Wed, 01 Aug 2012)<br>
&gt; New Revision: 1481<br>
&gt; URL: <a href="https://svn.open-mpi.org/trac/mtt/changeset/1481" target="_blank">
https://svn.open-mpi.org/trac/mtt/changeset/1481</a><br>
&gt;<br>
&gt; Log:<br>
&gt; add modified version mongobquery and MTTMongodb<br>
&gt;<br>
&gt; Added:<br>
&gt; &nbsp; trunk/client/<a href="http://mongobquery.pl" target="_blank">mongobquery.pl</a> &nbsp; (contents, props changed)<br>
&gt; &nbsp; trunk/lib/MTT/Reporter/MTTMongodb.pm<br>
&gt;<br>
&gt; Added: trunk/client/<a href="http://mongobquery.pl" target="_blank">mongobquery.pl</a><br>
&gt; ==============================================================================<br>
&gt; --- /dev/null 00:00:00 1970 &nbsp; (empty, because file is newly added)<br>
&gt; &#43;&#43;&#43; trunk/client/<a href="http://mongobquery.pl" target="_blank">mongobquery.pl</a> &nbsp; &nbsp; &nbsp; 2012-08-01 05:46:03 EDT (Wed, 01 Aug 2012) &nbsp; &nbsp; &nbsp;(r1481)<br>
&gt; @@ -0,0 &#43;1,1018 @@<br>
&gt; &#43;#!/usr/bin/perl<br>
&gt; &#43;#<br>
&gt; &#43;# Copyright (c) 2009<br>
&gt; &#43;# $COPYRIGHT$<br>
&gt; &#43;#<br>
&gt; &#43;# Additional copyrights may follow<br>
&gt; &#43;#<br>
&gt; &#43;# $HEADER$<br>
&gt; &#43;#<br>
&gt; &#43;# Now that @INC is setup, bring in the modules<br>
&gt; &#43;<br>
&gt; &#43;#use strict;<br>
&gt; &#43;#use warnings;<br>
&gt; &#43;use LWP::UserAgent;<br>
&gt; &#43;use HTTP::Request::Common;<br>
&gt; &#43;use Data::Dumper;<br>
&gt; &#43;use File::Basename;<br>
&gt; &#43;use File::Temp;<br>
&gt; &#43;use Config::IniFiles;<br>
&gt; &#43;use YAML::XS;<br>
&gt; &#43;use MongoDB;<br>
&gt; &#43;use MongoDB::OID;<br>
&gt; &#43;use YAML;<br>
&gt; &#43;use YAML::Syck;<br>
&gt; &#43;use DateTime;<br>
&gt; &#43;<br>
&gt; &#43;###########################################################<br>
&gt; &#43;# Set variables<br>
&gt; &#43;###########################################################<br>
&gt; &#43;my $module_name=$0;<br>
&gt; &#43;my $module_path=$0;<br>
&gt; &#43;<br>
&gt; &#43;$module_name=~s/([^\/\\]&#43;)$//;<br>
&gt; &#43;$module_name=$1;<br>
&gt; &#43;<br>
&gt; &#43;$module_path=~s/([^\/\\]&#43;)$//;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###########################################################<br>
&gt; &#43;# Main block<br>
&gt; &#43;###########################################################<br>
&gt; &#43;use Getopt::Long qw(:config no_ignore_case);<br>
&gt; &#43;<br>
&gt; &#43;my $opt_help;<br>
&gt; &#43;my $opt_server;<br>
&gt; &#43;my $opt_username;<br>
&gt; &#43;my $opt_password;<br>
&gt; &#43;<br>
&gt; &#43;my $opt_ping;<br>
&gt; &#43;my $opt_upload;<br>
&gt; &#43;my $opt_query;<br>
&gt; &#43;my $opt_view;<br>
&gt; &#43;my $opt_admin;<br>
&gt; &#43;<br>
&gt; &#43;my @opt_data;<br>
&gt; &#43;my @opt_raw;<br>
&gt; &#43;<br>
&gt; &#43;my $opt_gqls;<br>
&gt; &#43;my @opt_gqlf;<br>
&gt; &#43;my @opt_section;<br>
&gt; &#43;my $opt_dir;<br>
&gt; &#43;my $opt_no_raw;<br>
&gt; &#43;<br>
&gt; &#43;my $opt_dstore;<br>
&gt; &#43;my $opt_info;<br>
&gt; &#43;my $opt_format;<br>
&gt; &#43;my $opt_mailto;<br>
&gt; &#43;my $opt_regression_from;<br>
&gt; &#43;my $opt_regression_to;<br>
&gt; &#43;my $opt_regression_step;<br>
&gt; &#43;<br>
&gt; &#43;my @opt_newuser;<br>
&gt; &#43;<br>
&gt; &#43;GetOptions (&quot;help|h&quot; =&gt; \$opt_help,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;server|a=s&quot; =&gt; \$opt_server,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;username|u=s&quot; =&gt; \$opt_username,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;password|p=s&quot; =&gt; \$opt_password,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;ping&quot; =&gt; \$opt_ping,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;upload&quot; =&gt; \$opt_upload,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;query&quot; =&gt; \$opt_query,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;view&quot; =&gt; \$opt_view,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;admin&quot; =&gt; \$opt_admin,<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;data|S=s&quot; =&gt; \@opt_data,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;raw|R=s&quot; =&gt; \@opt_raw,<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;gqls|L=s&quot; =&gt; \$opt_gqls,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;gqlf|F=s&quot; =&gt; \@opt_gqlf,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;section|T=s&quot; =&gt; \@opt_section,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;dir|O=s&quot; =&gt; \$opt_dir,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;no-raw&quot; =&gt; \$opt_no_raw,<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;dstore|D&quot; =&gt; \$opt_dstore,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;info|I=s&quot; =&gt; \$opt_info,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;format|V=s&quot; =&gt; \$opt_format,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;email|e=s&quot; =&gt; \$opt_mailto,<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;newuser=s{3,5}&quot; =&gt; \@opt_newuser,<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;regression-from=s&quot; =&gt; \$opt_regression_from,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;regression-to=s&quot; =&gt; \$opt_regression_to,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;regression-step=s&quot; =&gt; \$opt_regression_step<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;my $url = ();<br>
&gt; &#43;my $username = ();<br>
&gt; &#43;my $password = ();<br>
&gt; &#43;<br>
&gt; &#43;$url = $opt_server ? $opt_server : &quot;<a href="http://bgate.mellanox.com:27017" target="_blank">http://bgate.mellanox.com:27017</a>&quot;;<br>
&gt; &#43;$url =~ s/http:\/\///;<br>
&gt; &#43;$username = $opt_username ? $opt_username : &quot;admin&quot;;<br>
&gt; &#43;$password = $opt_password ? $opt_password : &quot;&quot;;<br>
&gt; &#43;<br>
&gt; &#43;my %conf = ('url' =&gt; &quot;$url\/client&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'username' =&gt; $username,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'password' =&gt; $password<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;);<br>
&gt; &#43;<br>
&gt; &#43;if ($opt_help)<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my $action = '';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$action = 'ping' if ($opt_ping);<br>
&gt; &#43; &nbsp; &nbsp;$action = 'upload' if ($opt_upload);<br>
&gt; &#43; &nbsp; &nbsp;$action = 'query' if ($opt_query);<br>
&gt; &#43; &nbsp; &nbsp;$action = 'view' if ($opt_view);<br>
&gt; &#43; &nbsp; &nbsp;$action = 'admin' if ($opt_admin);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;help($action);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;exit;<br>
&gt; &#43;}<br>
&gt; &#43;elsif ($opt_ping)<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp; #ping( \%conf );<br>
&gt; &#43; &nbsp; &nbsp; #print $url,&quot; url\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; my $conn = MongoDB::Connection-&gt;new(host =&gt; $url );<br>
&gt; &#43; &nbsp; &nbsp; if($conn != 0)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print&quot;\n\nping: success\n\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43;}<br>
&gt; &#43;elsif ($opt_upload)<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;if ($#opt_data &lt; 0)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;help('upload');<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; my @data = split(/,/,join(',',@opt_data)) if (@opt_data);<br>
&gt; &#43; &nbsp; &nbsp; my @raw = split(/,/,join(',',@opt_raw)) if (@opt_raw);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Check if files existed<br>
&gt; &#43; &nbsp; &nbsp; verify_opt_file( @data );<br>
&gt; &#43; &nbsp; &nbsp; verify_opt_file( @raw );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; $conf{data} = \@data;<br>
&gt; &#43; &nbsp; &nbsp; $conf{raw} = \@raw;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; upload( \%conf );<br>
&gt; &#43;}<br>
&gt; &#43;elsif ($opt_query)<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my $gql = ();<br>
&gt; &#43; &nbsp; &nbsp;if ($opt_gqls)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$gql = $opt_gqls;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;help('query');<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; #print $gql, &quot; before\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/\s&#43;/ /g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/ /#/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/And/AND/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/and/AND/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/Or/OR/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/or/OR/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#In#/IN/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#in#/IN/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/Not/NOT/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/not/NOT/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#AND#/ AND /g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#OR#/ \| /g;<br>
&gt; &#43; &nbsp; &nbsp; #$gql =~ s/#IN#/IN/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#NOT/NOT/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#=#/=/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#&gt;#/&gt;/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#&gt;=#/&gt;=/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#&lt;#/&lt;/g;<br>
&gt; &#43; &nbsp; &nbsp; $gql =~ s/#&lt;=#/&lt;=/g;<br>
&gt; &#43; &nbsp; &nbsp; #print $gql,&quot; after\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; #exit;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; my @date_array;<br>
&gt; &#43; &nbsp; &nbsp; if($gql =~ m/=&gt;|=&lt;/)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;\nError:\nInvalid format: \&quot;=&gt;\&quot; or \&quot;=&lt;\&quot;\nUse \&quot;&gt;=\&quot; or \&quot;&lt;=\&quot; instead\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exit;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; if($opt_regression_step)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($opt_regression_step =~ m/^\d{4}-\d{2}-\d{2}$/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;ok $opt_regression_step \n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;\nparametr \&quot;regression-step\&quot; has invalid format. YYYY-MM-DD\nexample --regression-step=\'0000-01-03\'&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($gql =~ m/TestRunPhase\.start_time/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $str_start_time = $';<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($str_start_time =~ m/\d{4}-\d{2}-\d{2}#\d{2}:\d{2}:\d{2}/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $str_start_time = $&amp;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;synrax error&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;syntax error&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($gql =~ m/TestRunPhase\.end_time/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $str_end_time = $';<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($str_end_time =~ m/\d{4}-\d{2}-\d{2}#\d{2}:\d{2}:\d{2}/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $str_end_time = $&amp;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;syntax error&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;syntax error&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;start_time $str_start_time end_time $str_end_time \n&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $timezone = DateTime-&gt;now;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @numbers = split(/:|-|#/,$str_start_time);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my %hash_start_time = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; $timezone-&gt;time_zone());<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $DateTime_start_time = DateTime-&gt;new(%hash_start_time);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; @numbers = split(/:|-|#/,$str_end_time);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my %hash_end_time = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; $timezone-&gt;time_zone());<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $DateTime_end_time = DateTime-&gt;new(%hash_end_time);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;\n\nacceptable dates:\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $count = 1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my @arg_to_subtract = split(/-/,$opt_regression_step);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;\n\n@arg_to_subtract\n\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while(DateTime-&gt;compare( $DateTime_start_time, $DateTime_end_time )!=1)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $DateTime_end_time-&gt;subtract(years=&gt; @arg_to_subtract[0],months=&gt;@arg_to_subtract[1],days =&gt;@arg_to_subtract[2]);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $month = $DateTime_end_time-&gt;month();<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $day = $DateTime_end_time-&gt;day();<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(!($day =~ m/\d{2}/))<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $day = &quot;0&quot;.$day;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(!($month =~ m/\d{2}/))<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $month = &quot;0&quot;.$month;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $str = $DateTime_end_time-&gt;year() . &quot;-&quot; . $month . &quot;-&quot; . $day;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push(@date_array,$str);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;$str &nbsp;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($count % 7 &nbsp;== 0)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $count&#43;&#43;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print&quot;\n\n @date_array\n\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; #print &quot;hash start_time &quot;, $DateTime_start_time, &nbsp;&quot; hash end_time &quot;, $DateTime_end_time, &quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; #print &quot;time zone &quot;,$timezone,&quot;\n&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; my $query_to_mongo = string2query($gql);<br>
&gt; &#43; &nbsp; &nbsp; $query_to_mongo .= &quot;;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; print &quot;\n\n**********************************************************************query to mongo*************************************************************************&quot;;<br>
&gt; &#43; &nbsp; &nbsp; print &quot;\n&quot;,$query_to_mongo,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; print &quot;*************************************************************************************************************************************************************\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; ######################################################################<br>
&gt; &#43; &nbsp; &nbsp; #mongo<br>
&gt; &#43; &nbsp; &nbsp; #######################################################################<br>
&gt; &#43; &nbsp; &nbsp; my $conn = MongoDB::Connection-&gt;new(host =&gt; $url);<br>
&gt; &#43; &nbsp; &nbsp; my $db = $conn-&gt;mtt;<br>
&gt; &#43; &nbsp; &nbsp; my $mtt_result = $db-&gt;TestRunPhase;<br>
&gt; &#43; &nbsp; &nbsp; my $all_result = $mtt_result-&gt;find(eval $query_to_mongo);<br>
&gt; &#43; &nbsp; &nbsp; my $i = 0;<br>
&gt; &#43; &nbsp; &nbsp; if($opt_regression_step)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (my $doc = $all_result-&gt;next)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($doc-&gt;{&quot;modules&quot;}-&gt;{&quot;TestRunPhase&quot;}-&gt;{&quot;start_time&quot;} =~ m/\d{4}-\d{2}-\d{2}/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ($&amp; ~~ @date_array)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; open F, '&gt;', &quot;$i.yaml&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print F YAML::Syck::Dump( $doc );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; close F;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $i&#43;&#43;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;something strange happened&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while (my $doc = $all_result-&gt;next)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; open F, '&gt;', &quot;$i.yaml&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print F YAML::Syck::Dump( $doc );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; close F;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $i&#43;&#43;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; print &quot;found $i documents\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; ######################################################################<br>
&gt; &#43; &nbsp; &nbsp; #mongo<br>
&gt; &#43; &nbsp; &nbsp; ######################################################################<br>
&gt; &#43;<br>
&gt; &#43;}<br>
&gt; &#43;elsif ($opt_view)<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp; if ($opt_gqls)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;$conf{gql} = $opt_gqls;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; elsif (@opt_gqlf &amp;&amp; @opt_section &amp;&amp; (@opt_gqlf == @opt_section))<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my $gql = ();<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my @a_select;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my $v_from;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my @a_where;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my @a_order;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my $v_limit;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my $v_offset;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;my $i = 0;<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; my @files=split(/,/,join(',',@opt_gqlf)) if (@opt_gqlf);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; my @sections=split(/,/,join(',',@opt_section)) if (@opt_section);<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; # Check if files existed<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; verify_opt_file( @files );<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; for($i=0; $i &lt; @files; $i&#43;&#43;)<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; # Use ini-file in case it is set in command line<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my $cfg = new Config::IniFiles( -file =&gt; &quot;$files[$i]&quot;, -nocase =&gt; 1 );<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; if (not defined $cfg or $@)<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die &quot;$!&quot;;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; $opt_format = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'format') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'format'));<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my @a_temp_select = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'select') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'select'));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my $v_temp_from = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'from') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'from'));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my @a_temp_where = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'where') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'where'));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my @a_temp_order = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'order') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'order'));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my $v_temp_limit = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'limit') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'limit'));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp;my $v_temp_offset = $cfg-&gt;val(&quot;$sections[$i]&quot;, 'offset') if ($cfg-&gt;val(&quot;$sections[$i]&quot;, 'offset'));<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; @a_select = @a_temp_select if ($#a_temp_select != (-1));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; $v_from = $v_temp_from if ($v_temp_from);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my $j = 0;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; my $k = 0;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; for ($j = 0; $j &lt; scalar(@a_where); $j&#43;&#43;)<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for ($k = 0; $k &lt; scalar(@a_temp_where); $k&#43;&#43;)<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ($a_temp_where[$k])<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $a_temp_where[$k] =~ m/^\s*(\w&#43;)/i;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (grep /^\s*$1/, $a_where[$j])<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $a_where[$j] = $a_temp_where[$k];<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; delete($a_temp_where[$k]);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next;<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; foreach (@a_temp_where)<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push(@a_where, $_) if ($_);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; @a_order = @a_temp_order if ($#a_temp_order != (-1));<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; $v_limit = $v_temp_limit if ($v_temp_limit);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; $v_offset = $v_temp_offset if ($v_temp_offset);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql = '';<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql .= ' select ' . join(',',@a_select) if (@a_select);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql .= ' from ' . $v_from if ($v_from);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql .= ' where ' . join(' and ',@a_where) if (@a_where);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql .= ' order by ' . join(',',@a_order) if (@a_order);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql .= ' limit ' . $v_limit if ($v_limit);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $gql .= ' offset ' . $v_offset if ($v_offset);<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; $conf{gql} = $gql;<br>
&gt; &#43; &nbsp; &nbsp; #<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; print &quot;this feature temporarily unavailable\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; exit;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp;elsif ($opt_dstore)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$conf{kind} = 'all';<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;elsif ($opt_info)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$conf{kind} = $opt_info;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;help('view');<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ($opt_format)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;foreach my $format qw(raw txt html yaml)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf{format} = $format if ($opt_format eq $format) ;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;$conf{format} = 'raw' if (!exists($conf{format})) ;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;view( \%conf );<br>
&gt; &#43;}<br>
&gt; &#43;elsif ($opt_admin)<br>
&gt; &#43;{<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; print &quot;this feature temporarily unavailable\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; exit;<br>
&gt; &#43; &nbsp; &nbsp; #if ($#opt_newuser &gt; 0)<br>
&gt; &#43; &nbsp; &nbsp; #{<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;$conf{newuser} = \@opt_newuser;<br>
&gt; &#43; &nbsp; &nbsp; #}<br>
&gt; &#43; &nbsp; &nbsp; #admin( \%conf );<br>
&gt; &#43;}<br>
&gt; &#43;else<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;help();<br>
&gt; &#43; &nbsp; &nbsp;exit;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;# Send notification by e-mail<br>
&gt; &#43;if ( $opt_mailto ) {<br>
&gt; &#43;# &nbsp; &nbsp;send_results_by_mail($opt_mailto, @files);<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;# Define functions<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;#convert string to query<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;<br>
&gt; &#43;sub string2query<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp; my $gql = $_[0];<br>
&gt; &#43; &nbsp; &nbsp; my $before;<br>
&gt; &#43; &nbsp; &nbsp; my $after;<br>
&gt; &#43; &nbsp; &nbsp; my $match_case;<br>
&gt; &#43; &nbsp; &nbsp; while($gql =~ m/\([^\(\)]&#43;(=|&gt;=|&lt;=|&lt;|&gt;|IN\([^\(\)]&#43;\))&#43;[^\(\)]&#43;\)/)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $before = $`;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after = $';<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $match_case = $&amp;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chop($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $match_case = reverse($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chop($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $match_case = reverse($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;() before: &quot;,$before,&quot; after: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #&lt;STDIN&gt;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $gql = $before . string2query($match_case) . $after;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;gql after: &quot;,$gql,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; if($gql =~ m/\|/ &amp;&amp; $gql =~ m/AND/)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; while($gql =~ m/[^\|]&#43;(AND)&#43;[^\|]&#43;/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $before = $`;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after = $';<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $match_case = $&amp;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #chop($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$match_case = reverse($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #chop($match_case);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$match_case = reverse($match_case);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;AND OR before: &quot;,$before,&quot; after: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #&lt;STDIN&gt;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $gql = $before . string2query($match_case) . $after;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;gql after: &quot;,$gql,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; #print &quot;lowest level: &quot;,$gql,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; #&lt;STDIN&gt;;<br>
&gt; &#43; &nbsp; &nbsp; $gql = string2query_lowest($gql);<br>
&gt; &#43; &nbsp; &nbsp; #print &quot;gql after: &quot;,$gql,&quot;\n&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; return $gql;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;#convert string to query (lowest level)<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub string2query_lowest<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp; my $input_string = $_[0];<br>
&gt; &#43; &nbsp; &nbsp; my @subs = split(/\s/,$input_string);<br>
&gt; &#43; &nbsp; &nbsp; my $arg;<br>
&gt; &#43; &nbsp; &nbsp; my $query_to_mongo = &quot; {&quot;;<br>
&gt; &#43; &nbsp; &nbsp; my $before;<br>
&gt; &#43; &nbsp; &nbsp; my $after;<br>
&gt; &#43; &nbsp; &nbsp; my $match_case;<br>
&gt; &#43; &nbsp; &nbsp; #my $prefix = &quot;modules.TestRunPhase.&quot;;<br>
&gt; &#43; &nbsp; &nbsp; my $prefix = &quot;modules.&quot;;<br>
&gt; &#43; &nbsp; &nbsp; if($input_string =~ m/AND/ &amp;&amp; $input_string =~ m/\|/)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;error: bquery lowest level\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;input string: &quot;,$input_string,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; die;<br>
&gt; &#43; &nbsp; &nbsp; }elsif($input_string =~ m/\|/)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= &quot;\'\$or\'=&gt;[&quot;;<br>
&gt; &#43; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= &quot;\'\$and\'=&gt;[&quot;;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; foreach $arg(@subs)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print $arg,&quot; subs\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; foreach $arg(@subs)<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $arg =~ s/#/ /g;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($arg =~m/&gt;=|&lt;=|NOTIN/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;before match: &quot;, $before,&quot;, after match: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $before =&quot;{\'$prefix&quot; . $` . &quot;\'=&gt;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after = $';<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $match_case = $&amp;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($match_case eq &quot;&gt;=&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;bolshe ili ravno\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= &nbsp;$before . &quot;{\'\$gte\'=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }elsif($match_case eq &quot;&lt;=&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;menshe ili ravno\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= &nbsp;$before . &quot;{\'\$lte\'=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;NIN\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after =~ s/\(/\[/g;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after =~ s/\)/\]/g;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= $before . &quot;{\'\$nin\'=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elsif($arg =~ m/{.&#43;=&gt;.&#43;}/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= $arg . &quot;,&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elsif($arg =~ m/&gt;|=|&lt;|IN/)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;before match1: &quot;, $before,&quot; after match: &quot;,$after,&quot; match case: &quot;,$match_case,&quot;\n&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $before =&quot;{\'$prefix&quot; . $` . &quot;\'=&gt;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after = $';<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $match_case = $&amp;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if($match_case eq &quot;&gt;&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;bolshe\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= $before . &quot;{\'\$gt\'=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }elsif($match_case eq &quot;=&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;ravno\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= $before . $after .&quot;},&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }elsif($match_case eq &quot;&lt;&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;menshe\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= &nbsp;$before . &quot;{\'\$lt\'=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;IN\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after =~ s/\(/\[/g;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $after =~ s/\)/\]/g;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $query_to_mongo .= $before . &quot;{\'\$in\'=&gt;&quot; . $after . &quot;}},&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; chop($query_to_mongo);<br>
&gt; &#43; &nbsp; &nbsp; $query_to_mongo .= &quot;]} &quot;;<br>
&gt; &#43; &nbsp; &nbsp; return $query_to_mongo;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Show help to tool<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub help<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($action)=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print (&quot;Usage: $module_name [options...] &lt;action&gt; [arguments...]\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;print (&quot;\'$module_name\' communicate with datastore .\n\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print (&quot;\nOptions:\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-h,', '--help', &quot;Show the help message and exit.&quot;);<br>
&gt; &#43; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-a,', '--server', &quot;The server to connect to.&quot;);<br>
&gt; &#43; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-u,', '--username', &quot;User name.&quot;);<br>
&gt; &#43; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-p,', '--password', &quot;Password.&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print (&quot;\nActions:\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'ping')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;print (&quot; --ping\t The 'ping' command check connection with datastore.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'upload')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;print (&quot; --upload\t The 'upload' command translates input data into datastore entities and uploads them into your application's datastore.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'query')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;print (&quot; --query\t The 'query' command translates input string in special request to datastore and download data form query set.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'view')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;print (&quot; --view\t The 'view' command requests information from datastore.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'admin')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;print (&quot; --admin\t The 'admin' admin of datastore operations.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print (&quot;\nArguments:\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'upload')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-S,', '--data', &quot;The name of the file containing the data to upload.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-R,', '--raw', &quot;Raw file associated with data.&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'query')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-L,', '--gqls', &quot;String with GQL query.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-F,', '--gqlf', &quot;The path to file inclusive query.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-T,', '--section', &quot;Section of configuration file with query.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-O,', '--dir', &quot;The path to the directory that will store retrieved data.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '', '--no-raw', &quot;Don't download Raw file associated with data.&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'view')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-D,', '--dstore', &quot;Retrieve Google Data store detailed organization with names of models and properties.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-I,', '--info', &quot;Show information about clusters, compilers, bench applications and mpi. One of following as 'suite','mpi','compiler','cluster'&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-L,', '--gqls', &quot;String with GQL query.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-F,', '--gqlf', &quot;The path to file inclusive query.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-T,', '--section', &quot;Section of configuration file with query.&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-V,', '--format', &quot;Output format. One of following as 'txt','html','yaml','raw'. Default is 'raw'&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($action) || $action eq '' || $action eq 'admin')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '', '--newuser', &quot;User information as username, password, email (mandatory) and first_name, last_name (optinal). Keep order&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;printf (&quot; %-5s %-10s\t%-s\n&quot;, '-e,', '--email', &quot;e-mail address&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;exit;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Check if files directed in command line exists<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub verify_opt_file<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my (@files)=@_;<br>
&gt; &#43; &nbsp; &nbsp;foreach my $file (@files)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if( ! -e $file)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;$file doesn't exist!&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Ping procedure<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub ping<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($conf_ref)=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ua = LWP::UserAgent-&gt;new();<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;proxy('http', $ENV{'http_proxy'});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PING &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;description =&gt; 'bquery ping'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $response = $ua-&gt;request($request);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;is_success;<br>
&gt; &#43; &nbsp; &nbsp;print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;content_type eq 'text/html';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print $response-&gt;content;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Upload procedure<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub upload<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($conf_ref)=@_;<br>
&gt; &#43; &nbsp; &nbsp;my $i = 0;<br>
&gt; &#43; &nbsp; &nbsp;use MongoDB;<br>
&gt; &#43; &nbsp; &nbsp; use MongoDB::OID;<br>
&gt; &#43; &nbsp; &nbsp; use YAML;<br>
&gt; &#43; &nbsp; &nbsp; use Data::Dumper;<br>
&gt; &#43; &nbsp; &nbsp; use YAML::XS;<br>
&gt; &#43; &nbsp; &nbsp; my $conn = MongoDB::Connection-&gt;new(host =&gt; 'bgate.mellanox.com:27017');<br>
&gt; &#43; &nbsp; &nbsp; my $db = $conn-&gt;mtt;<br>
&gt; &#43; &nbsp; &nbsp; my $TestRunPhase = $db-&gt;TestRunPhase;<br>
&gt; &#43; &nbsp; &nbsp;for ($i=0; $i&lt;@{$conf_ref-&gt;{data}}; $i&#43;&#43;)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $ua = LWP::UserAgent-&gt;new();<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$ua-&gt;proxy('http', $ENV{'http_proxy'});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $request;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $data_file = &quot;$conf_ref-&gt;{data}-&gt;[$i]&quot; if defined($conf_ref-&gt;{data}-&gt;[$i]);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $raw_file = &quot;$conf_ref-&gt;{raw}-&gt;[$i]&quot; if defined($conf_ref-&gt;{raw}-&gt;[$i]);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ($raw_file)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBMIT &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data &nbsp; &nbsp; &nbsp; &nbsp;=&gt; [$data_file],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raw &nbsp; &nbsp; &nbsp; &nbsp; =&gt; [$raw_file],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description =&gt; 'MTT Results Submission'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;load $data_file\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; open my $fh, '&lt;', &quot;$data_file&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or die &quot;can't open config file: $!&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $f_hash = LoadFile($fh);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print Dumper($f_hash), &quot;\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $inserted_id = $TestRunPhase-&gt;insert($f_hash);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print &quot;inserted id $inserted_id \n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBMIT &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data &nbsp; &nbsp; &nbsp; &nbsp;=&gt; [$data_file],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description =&gt; 'bquery submit'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #my $response = $ua-&gt;request($request);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; unless $response-&gt;is_success;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # &nbsp; &nbsp;unless $response-&gt;content_type eq 'text/html';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print $response-&gt;content;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Query procedure<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub query<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($conf_ref)=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ua = LWP::UserAgent-&gt;new();<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;proxy('http', $ENV{'http_proxy'});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;QUERY &nbsp; &nbsp; &nbsp; =&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gql &nbsp; &nbsp; &nbsp; &nbsp; =&gt; $conf_ref-&gt;{gql},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;raw &nbsp; &nbsp; &nbsp; &nbsp; =&gt; $conf_ref-&gt;{raw},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;description =&gt; 'bquery view'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $response = $ua-&gt;request($request);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;die &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;is_success;<br>
&gt; &#43; &nbsp; &nbsp;die &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;content_type eq 'text/yaml';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; # Load respond into YAML hash<br>
&gt; &#43; &nbsp; &nbsp;use YAML::Syck ();<br>
&gt; &#43; &nbsp; &nbsp;$YAML::Syck::ImplicitTyping = 1;<br>
&gt; &#43; &nbsp; &nbsp; my $temp_str = $response-&gt;content;<br>
&gt; &#43; &nbsp; &nbsp;my $data = eval {YAML::Syck::Load($temp_str)};<br>
&gt; &#43;# &nbsp; &nbsp;use YAML::XS ();<br>
&gt; &#43;# &nbsp; &nbsp;my $temp_str = $response-&gt;content;<br>
&gt; &#43;# &nbsp; &nbsp;my $data = eval {YAML::XS::Load($temp_str)};<br>
&gt; &#43; &nbsp; &nbsp;if (not defined $data or $@)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;$!&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;MTT::Files::mkdir($conf_ref-&gt;{dir}) || die &quot;cannot mkdir $conf_ref-&gt;{dir}: $!&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $default_form = {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;product =&gt; 'mtt-gds',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;version =&gt; &quot;0.1&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;app_id &nbsp;=&gt; 'query'<br>
&gt; &#43; &nbsp; &nbsp;};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;foreach my $respond_form (@{$data-&gt;{data}})<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; my $filename = &quot;$conf_ref-&gt;{dir}\/$respond_form-&gt;{key}&quot;;<br>
&gt; &#43; &nbsp; &nbsp; my $raw_filename = $filename.'.zip';<br>
&gt; &#43; &nbsp; &nbsp; $filename = $filename.'.yaml';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my %form = (%$respond_form, %$default_form);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; if (int($conf_ref-&gt;{raw}) == 1 &amp;&amp; exists($form{raw}))<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; open(fh_temp, &quot;&gt;$raw_filename&quot;) || die &quot;cannot create $raw_filename: $!&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; binmode fh_temp;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print fh_temp $form{raw};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; close fh_temp;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;delete $form{raw};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;delete $form{key};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# Generate YAML file contents<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;YAML::XS::DumpFile($filename, \%form);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# View procedure<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub view<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($conf_ref)=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ua = LWP::UserAgent-&gt;new();<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;proxy('http', $ENV{'http_proxy'});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $request;<br>
&gt; &#43; &nbsp; &nbsp;if (exists($conf_ref-&gt;{kind}))<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VIEW &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;kind &nbsp; &nbsp; &nbsp;=&gt; $conf_ref-&gt;{kind},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;format &nbsp; &nbsp;=&gt; $conf_ref-&gt;{format},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;description =&gt; 'bquery view'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;elsif (exists($conf_ref-&gt;{gql}))<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;VIEW &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;gql &nbsp; &nbsp; &nbsp;=&gt; $conf_ref-&gt;{gql},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;format &nbsp; &nbsp;=&gt; $conf_ref-&gt;{format},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;description =&gt; 'bquery view'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $response = $ua-&gt;request($request);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;is_success;<br>
&gt; &#43; &nbsp; &nbsp;print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;content_type eq 'text/html';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print $response-&gt;content;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Admin procedure<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub admin<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($conf_ref)=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ua = LWP::UserAgent-&gt;new();<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;agent(&quot;mtt-submit&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$ua-&gt;proxy('http', $ENV{'http_proxy'});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $request;<br>
&gt; &#43; &nbsp; &nbsp;if (exists($conf_ref-&gt;{newuser}) &amp;&amp; $#{$conf_ref-&gt;{newuser}} &gt;=2)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$request = POST(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$conf_ref-&gt;{url},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ADMIN &nbsp; &nbsp; &nbsp; =&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_NEWUSER_ &nbsp; =&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;username &nbsp; &nbsp;=&gt; $conf_ref-&gt;{newuser}-&gt;[0],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;password &nbsp; &nbsp;=&gt; $conf_ref-&gt;{newuser}-&gt;[1],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;email &nbsp; &nbsp; &nbsp; =&gt; $conf_ref-&gt;{newuser}-&gt;[2],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;first_name &nbsp;=&gt; ($#{$conf_ref-&gt;{newuser}} &gt;=3 ? $conf_ref-&gt;{newuser}-&gt;[3] : ''),<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;last_name &nbsp; =&gt; ($#{$conf_ref-&gt;{newuser}} &gt;=4 ? $conf_ref-&gt;{newuser}-&gt;[4] : ''),<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;description =&gt; 'bquery admin'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$request-&gt;authorization_basic($conf_ref-&gt;{username}, $conf_ref-&gt;{password});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $response = $ua-&gt;request($request);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print &quot;Error at $conf_ref-&gt;{url}\n &quot;, $response-&gt;status_line, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;is_success;<br>
&gt; &#43; &nbsp; &nbsp;print &quot;content type at $conf_ref-&gt;{url} -- &quot;, $response-&gt;content_type, &quot;\n&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;unless $response-&gt;content_type eq 'text/html';<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;print $response-&gt;content;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;#<br>
&gt; &#43;# Send files by e-mail<br>
&gt; &#43;#<br>
&gt; &#43;###############################################################################<br>
&gt; &#43;sub send_results_by_mail<br>
&gt; &#43;{<br>
&gt; &#43; &nbsp; &nbsp;my ($mail_to, @files) = @_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;foreach my $mail_file (@files)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;system(&quot;echo report is attached | /usr/bin/mutt -s 'breport' -a $mail_file $mail_to&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;}<br>
&gt;<br>
&gt; Added: trunk/lib/MTT/Reporter/MTTMongodb.pm<br>
&gt; ==============================================================================<br>
&gt; --- /dev/null 00:00:00 1970 &nbsp; (empty, because file is newly added)<br>
&gt; &#43;&#43;&#43; trunk/lib/MTT/Reporter/MTTMongodb.pm &nbsp; &nbsp; &nbsp;2012-08-01 05:46:03 EDT (Wed, 01 Aug 2012) &nbsp; &nbsp; &nbsp;(r1481)<br>
&gt; @@ -0,0 &#43;1,1195 @@<br>
&gt; &#43;#!/usr/bin/env perl<br>
&gt; &#43;#<br>
&gt; &#43;# Copyright (c) 2009 Voltaire<br>
&gt; &#43;# Copyright (c) 2010 Cisco Systems, Inc. &nbsp;All rights reserved.<br>
&gt; &#43;# $COPYRIGHT$<br>
&gt; &#43;#<br>
&gt; &#43;# Additional copyrights may follow<br>
&gt; &#43;#<br>
&gt; &#43;# $HEADER$<br>
&gt; &#43;#<br>
&gt; &#43;<br>
&gt; &#43;package MTT::Reporter::MTTMongodb;<br>
&gt; &#43;<br>
&gt; &#43;use strict;<br>
&gt; &#43;use MTT::Messages;<br>
&gt; &#43;use MTT::Values;<br>
&gt; &#43;use MTT::Values::Functions;<br>
&gt; &#43;use MTT::Version;<br>
&gt; &#43;use MTT::Globals;<br>
&gt; &#43;use MTT::DoCommand;<br>
&gt; &#43;use LWP::UserAgent;<br>
&gt; &#43;use HTTP::Request::Common qw(POST);<br>
&gt; &#43;use Data::Dumper;<br>
&gt; &#43;use File::Basename;<br>
&gt; &#43;use File::Temp qw(tempfile tempdir);<br>
&gt; &#43;use YAML::XS;<br>
&gt; &#43;<br>
&gt; &#43;use POSIX qw(strftime);<br>
&gt; &#43;use File::stat;<br>
&gt; &#43;<br>
&gt; &#43;# http credentials<br>
&gt; &#43;my $username;<br>
&gt; &#43;my $password;<br>
&gt; &#43;my $realm;<br>
&gt; &#43;my $url;<br>
&gt; &#43;my $port;<br>
&gt; &#43;<br>
&gt; &#43;# platform common name<br>
&gt; &#43;my $platform;<br>
&gt; &#43;<br>
&gt; &#43;# LWP user agents (one per proxy)<br>
&gt; &#43;my @lwps;<br>
&gt; &#43;<br>
&gt; &#43;# Hostname string to report<br>
&gt; &#43;my $hostname;<br>
&gt; &#43;<br>
&gt; &#43;# User ID (can be overridden in the INI)<br>
&gt; &#43;my $local_username;<br>
&gt; &#43;<br>
&gt; &#43;# directory and file to write to<br>
&gt; &#43;my $dirname;<br>
&gt; &#43;<br>
&gt; &#43;my $testrun_files_count &nbsp; &nbsp;= 0;<br>
&gt; &#43;my $testbuild_files_count &nbsp;= 0;<br>
&gt; &#43;my $mpiinstall_files_count = 0;<br>
&gt; &#43;<br>
&gt; &#43;our $clusterInfo = undef;<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub Init {<br>
&gt; &#43; &nbsp; &nbsp;my ($ini, $section) = @_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;[MTTGDS reporter] Init\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Have we been initialized already? &nbsp;If so, error -- per #261,<br>
&gt; &#43; &nbsp; &nbsp;# this module can currently only handle submitting to one database<br>
&gt; &#43; &nbsp; &nbsp;# in a given run.<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if (defined($username)) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Error(&quot;The MTTGDS plugin can only be used once in an INI file.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Extract data from the ini fields<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$username = Value($ini, $section, &quot;mttdatabase_username&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$password = Value($ini, $section, &quot;mttdatabase_password&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$url = Value($ini, $section, &quot;mttdatabase_url&quot;);<br>
&gt; &#43; &nbsp; &nbsp; #$url = Value($ini, $section, &quot;mttdatabase_url&quot;).'client';<br>
&gt; &#43; &nbsp; &nbsp;$realm = Value($ini, $section, &quot;mttdatabase_realm&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$hostname = Value($ini, $section, &quot;mttdatabase_hostname&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$local_username = Value($ini, &quot;mtt&quot;, &quot;local_username&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if (!$url) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Warning(&quot;Need URL in MTTGDS Reporter section [$section]\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;return undef;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;my $count = 0;<br>
&gt; &#43; &nbsp; &nbsp;&#43;&#43;$count if ($username);<br>
&gt; &#43; &nbsp; &nbsp;&#43;&#43;$count if ($password);<br>
&gt; &#43; &nbsp; &nbsp;&#43;&#43;$count if ($realm);<br>
&gt; &#43; &nbsp; &nbsp;if ($count &gt; 0 &amp;&amp; $count != 3) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Warning(&quot;MTTGDS Reporter section [$section]: if password, username, or realm is specified, they all must be specified.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;return undef;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;$platform = Value($ini, $section, &quot;mttdatabase_platform&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Extract the host and port from the URL. &nbsp;Needed for the<br>
&gt; &#43; &nbsp; &nbsp;# credentials section.<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $dir;<br>
&gt; &#43; &nbsp; &nbsp;my $host = $url;<br>
&gt; &#43; &nbsp; &nbsp;if ($host =~ /(http:\/\/[-a-zA-Z0-9.]&#43;):(\d&#43;)\/?(.*)?$/) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$host = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$port = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$dir = $3;<br>
&gt; &#43; &nbsp; &nbsp;} elsif ($host =~ /(http:\/\/[-a-zA-Z0-9.]&#43;)\/?(.*)?$/) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$host = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$dir = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$port = 80;<br>
&gt; &#43; &nbsp; &nbsp;} elsif ($host =~ /(https:\/\/[-a-zA-Z0-9.]&#43;)\/?(.*)?$/) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$host = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$dir = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$port = 443;<br>
&gt; &#43; &nbsp; &nbsp;} elsif &nbsp;($host =~ /(https:\/\/[-a-zA-Z0-9.]&#43;):(\d&#43;)\/?(.*)?$/) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$host = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$port = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$dir = $3;<br>
&gt; &#43; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Warning(&quot;MTTGDS Reporter did not get a valid url: $url .\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;return undef;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;$url = &quot;$host:$port&quot;;<br>
&gt; &#43; &nbsp; &nbsp;# Setup proxies<br>
&gt; &#43; &nbsp; &nbsp;my $scheme = (80 == $port) ? &quot;http&quot; : &quot;https&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Create the Perl LWP stuff to setup for HTTP requests later.<br>
&gt; &#43; &nbsp; &nbsp;# Make one for each proxy (we'll always have at least one proxy<br>
&gt; &#43; &nbsp; &nbsp;# entry, even if it's empty).<br>
&gt; &#43; &nbsp; &nbsp;my $proxies = \@{$MTT::Globals::Values-&gt;{proxies}-&gt;{$scheme}};<br>
&gt; &#43; &nbsp; &nbsp;foreach my $p (@{$proxies}) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my %params = { env_proxy =&gt; 0 };<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $ua = LWP::UserAgent-&gt;new(%params);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# @#$@!$# LWP proxying for https *does not work*. &nbsp;So<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# don't set $ua-&gt;proxy() for it. &nbsp;Instead, we'll set<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# $ENV{https_proxy} whenever we process requests that<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# require SSL proxying, because that is obeyed deep down<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# in the innards underneath LWP.<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$ua-&gt;proxy([$scheme], $p-&gt;{proxy})<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ($p-&gt;{proxy} ne &quot;&quot; &amp;&amp; $scheme ne &quot;https&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$ua-&gt;agent(&quot;MPI Test MTTGDS Reporter&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;push(@lwps, {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;scheme =&gt; $scheme,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;agent =&gt; $ua,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;proxy =&gt; $p-&gt;{proxy},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;source =&gt; $p-&gt;{source},<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;});<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;if ($realm &amp;&amp; $username &amp;&amp; $password) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Verbose(&quot; &nbsp; Set HTTP credentials for realm \&quot;$realm\&quot;\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Do a test ping to ensure that we can reach this URL.<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;MTTGDS client pinging a server...\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;my $form = {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;PING =&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Description =&gt; 'Pinging a server'<br>
&gt; &#43; &nbsp; &nbsp;};<br>
&gt; &#43; &nbsp; &nbsp; #DINARDINARDINARDINAR<br>
&gt; &#43; &nbsp; &nbsp; #my $req = POST ($url, $form);<br>
&gt; &#43; &nbsp; &nbsp;#$req-&gt;authorization_basic($username, $password);<br>
&gt; &#43; &nbsp; &nbsp; #my $response = _do_request($req);<br>
&gt; &#43; &nbsp; &nbsp; #if (! $response-&gt;is_success()) {<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;Warning(&quot;&gt;&gt; Failed test ping to MTTGDS URL: $url\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;Warning(&quot;&gt;&gt; Error was: &quot; . $response-&gt;status_line . &quot;\n&quot; .<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$response-&gt;content);<br>
&gt; &#43; &nbsp; &nbsp; # &nbsp; &nbsp;Error(&quot;&gt;&gt; Do not want to continue with possible bad submission URL -- aborting\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; #}<br>
&gt; &#43; &nbsp; &nbsp; #DINARDINARDINARDINAR<br>
&gt; &#43; &nbsp; &nbsp; #Debug(&quot;MTTGDS reporter initialized ($realm, $username, XXXXXX, $url, $platform)\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; #Debug(&quot;MTTGDS reporter respond content ($response-&gt;content)\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Extract data from the ini fields<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$dirname = MTT::DoCommand::cwd();<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;Collect cluster information...\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;my $clusterinfo_module = MTT::Values::Value($ini, &quot;vbench&quot;, &quot;clusterinfo_module&quot;);<br>
&gt; &#43; &nbsp; &nbsp;$clusterinfo_module = &quot;UnknownCluster&quot; if (!defined($clusterinfo_module) || $clusterinfo_module eq &quot;&quot;);<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;Use $clusterinfo_module module to collect information.\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$clusterInfo = MTT::Module::Run(&quot;MTT::Reporter::Utils::$clusterinfo_module&quot;, &quot;get_cluster_info&quot;, MTT::Values::Functions::env_hosts(2));<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($clusterInfo)) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Error(&quot;Fatal: Can't collect cluster information\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;Collect cluster information Finished\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;File reporter initialized ($dirname)\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return 1;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;my $entries;<br>
&gt; &#43;<br>
&gt; &#43;sub Submit {<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my ( $info, $newentries ) = @_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;[MTTGDS reporter] Submit\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($newentries)) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Warning(&quot;[MTTGDS reporter]: Submit parameter is undef. Skip.\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;return;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( !defined($entries) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;%$entries = ();<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;foreach my $phase (keys(%$newentries))<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $phase_obj = $newentries -&gt;{$phase};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;foreach my $section ( keys(%$phase_obj) )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Debug(&quot;Phase: $phase Section: $section\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $new_section_obj = $phase_obj-&gt;{$section};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $section_obj = $entries-&gt;{$phase}-&gt;{$section};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach my $report (@$new_section_obj)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Debug(&quot; &nbsp;add report\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push(@$section_obj, $report);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $entries-&gt;{$phase}-&gt;{$section} = $section_obj;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Verbose(&quot;&gt;&gt; Reporter MTTGDS: cached for later submit\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;[MTTGDS reporter] Exit from Submit\n&quot;);<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;sub Finalize {<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;[MTTGDS reporter] Finalize\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;_do_submit();<br>
&gt; &#43; &nbsp; &nbsp;undef $entries;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;undef $username;<br>
&gt; &#43; &nbsp; &nbsp;undef $password;<br>
&gt; &#43; &nbsp; &nbsp;undef $realm;<br>
&gt; &#43; &nbsp; &nbsp;undef $url;<br>
&gt; &#43; &nbsp; &nbsp;undef $platform;<br>
&gt; &#43; &nbsp; &nbsp;undef @lwps;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _do_submit {<br>
&gt; &#43; &nbsp; &nbsp; #DinarDinarDinarDinar<br>
&gt; &#43; &nbsp; &nbsp; use MongoDB;<br>
&gt; &#43; &nbsp; &nbsp; use MongoDB::OID;<br>
&gt; &#43; &nbsp; &nbsp; use YAML;<br>
&gt; &#43; &nbsp; &nbsp; use Data::Dumper;<br>
&gt; &#43; &nbsp; &nbsp; use YAML::XS;<br>
&gt; &#43; &nbsp; &nbsp; $url =~ s/http:\/\///;<br>
&gt; &#43; &nbsp; &nbsp; my $conn = MongoDB::Connection-&gt;new(host =&gt; $url);<br>
&gt; &#43; &nbsp; &nbsp; my $db = $conn-&gt;mtt;<br>
&gt; &#43; &nbsp; &nbsp; my $TestRunPhase = $db-&gt;TestRunPhase;<br>
&gt; &#43; &nbsp; &nbsp; my $MPIInstallPhase = $db-&gt;MPIInstallPhase;<br>
&gt; &#43; &nbsp; &nbsp; my $TestBuildPhase = $db-&gt;TestBuildPhase;<br>
&gt; &#43; &nbsp; &nbsp; my $doc;<br>
&gt; &#43; &nbsp; &nbsp; my @numbers;<br>
&gt; &#43; &nbsp; &nbsp; my $inserted_id;<br>
&gt; &#43; &nbsp; &nbsp; my $old_date;<br>
&gt; &#43; &nbsp; &nbsp; my %new_date;<br>
&gt; &#43; &nbsp; &nbsp; #DinarDinarDinarDinar<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Make a default form that will be used to seed all the forms that<br>
&gt; &#43; &nbsp; &nbsp;# will be sent<br>
&gt; &#43; &nbsp; &nbsp;my $default_form = {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;product =&gt; 'mtt-gds',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;version =&gt; &quot;0.1&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;app_id &nbsp;=&gt; 'submit',<br>
&gt; &#43; &nbsp; &nbsp;};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43; &nbsp; &nbsp;my $submit_failed_results = MTT::Values::Value( $ini, &quot;VBench&quot;, 'submit_failed_results_to_gds' );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# mtt ini flag to control what mtt results to submit to GDS<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($submit_failed_results) || $submit_failed_results eq '')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$submit_failed_results = 1;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $submit_results = MTT::Values::Value( $ini, &quot;VBench&quot;, 'submit_results_to_gds' );<br>
&gt; &#43; &nbsp; &nbsp;# mtt ini flag to control what mtt results to submit to GDS<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($submit_results) || $submit_results eq '' || $submit_results eq '1' || $submit_results eq 'True')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$submit_results = 1;<br>
&gt; &#43; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$submit_results = 0;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;#foreach my $phase (keys(%$entries)) {<br>
&gt; &#43; &nbsp; &nbsp;foreach my $phase ( &quot;MPI Install&quot;, &quot;Test Build&quot;, &quot;Test Run&quot; )<br>
&gt; &#43; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $submitted = 0;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $phase_obj = $entries-&gt;{$phase};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;foreach my $section ( keys(%$phase_obj) )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $section_obj = $phase_obj-&gt;{$section};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;foreach my $report_original (@$section_obj)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Each section of a phase gets its own report to the<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# database. &nbsp;Make a deep copy of the default form to start<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# with.<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $form;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%$form = %{$default_form};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$form-&gt;{modules} = {};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# Ensure to do a deep copy of the report (vs. just<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# copying the reference) because we want to locally<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# change some values<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $report;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%$report = %{$report_original};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%$report-&gt;{files_to_copy} = {} if (!exists($report-&gt;{files_to_copy}));<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$MTT::Values::Functions::current_report = $report;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $attachment = {};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $phase eq &quot;Test Run&quot; )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_install = $entries-&gt;{&quot;MPI Install&quot;}-&gt;{$report-&gt;{mpi_install_section_name}};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_report = @$mpi_install[0];<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_process_phase_mpi_install(&quot;MPI Install&quot;, $report-&gt;{mpi_install_section_name}, $mpi_report, $form-&gt;{modules});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $test_build = $entries-&gt;{&quot;Test Build&quot;}-&gt;{$report-&gt;{test_build_section_name}};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $build_report = @$test_build[0];<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_process_phase_test_build(&quot;Test Build&quot;, $report-&gt;{test_build_section_name}, $build_report, $form-&gt;{modules});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_process_phase_test_run($phase, $section, $report, $form-&gt;{modules});<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$attachment = $report-&gt;{files_to_copy};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;elsif ( $phase eq &quot;Test Build&quot; )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_install = $entries-&gt;{&quot;MPI Install&quot;}-&gt;{$report-&gt;{mpi_install_section_name}};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_report = @$mpi_install[0];<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_process_phase_mpi_install(&quot;MPI Install&quot;, $report-&gt;{mpi_install_section_name}, $mpi_report, $form-&gt;{modules});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_process_phase_test_build($phase, $section, $report, $form-&gt;{modules});<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;elsif ( $phase eq &quot;MPI Install&quot; )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_process_phase_mpi_install($phase, $section, $report, $form-&gt;{modules});<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;Phase: $phase Section: $section SKIPPED\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;next;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$MTT::Values::Functions::current_report = undef;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;Submitting to MongoDB...\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my ($req, $file) = _prepare_request($phase, $report, $form, $attachment);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# do not submit result with non PASS status in case 'submit_failed_results_to_gds' key is set as '0'<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( ($submit_failed_results == 0) &amp;&amp; ($report-&gt;{test_result} != 1) )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;MTT ini-file has key \'submit_failed_results_to_gds\'=$submit_failed_results and phase: $phase test_result: $report-&gt;{test_result}\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;next;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $submit_results == 0 )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;MTT ini-file has key \'submit_results_to_gds\'=$submit_results\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;next;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #DinarDinarDinar<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $phase eq &quot;Test Run&quot; )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'TestRunPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'TestRun_start_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'TestBuild_start_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'MpiInstall_start_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'TestRunPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'TestRun_end_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'TestBuild_end_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'MpiInstall_end_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $inserted_id = $TestRunPhase-&gt;insert($form);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$doc = ($TestRunPhase-&gt;find({'_id'=&gt;$inserted_id}))-&gt;next;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #TestRun<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'TestRunPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestRunPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.TestRunPhase.start_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'TestRunPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestRunPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.TestRunPhase.end_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #MPIInstall<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestRunPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.MpiInstallPhase.start_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestRunPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.MpiInstallPhase.end_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #TestBuild<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestRunPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.TestBuildPhase.start_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestRunPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.TestBuildPhase.end_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ( $phase eq &quot;MPI Install&quot; )<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'MpiInstall_start_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'MpiInstall_end_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $inserted_id = &nbsp;$MPIInstallPhase-&gt;insert($form);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$doc = ($MPIInstallPhase-&gt;find({'_id'=&gt;$inserted_id}))-&gt;next;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #MPIInstall<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$MPIInstallPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.MpiInstallPhase.start_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'MpiInstallPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$MPIInstallPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.MpiInstallPhase.end_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ( $phase eq &quot;Test Build&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'TestBuild_start_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $form-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$form-&gt;{'TestBuild_end_time'} = DateTime-&gt;new(%new_date);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; my $inserted_id = &nbsp;$TestBuildPhase-&gt;insert($form);<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$doc = ($TestBuildPhase-&gt;find({'_id'=&gt;$inserted_id}))-&gt;next;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #TestBuild<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'start_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestBuildPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.TestBuildPhase.start_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$old_date = $doc-&gt;{'modules'}-&gt;{'TestBuildPhase'}-&gt;{'end_time'};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #@numbers = split(/:|-|\s/,$old_date);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #print @numbers[0],&quot;-year &quot; , @numbers[1], &quot;-month &quot;, &nbsp;@numbers[2], &quot;-day &quot;, &nbsp;@numbers[3],&quot;-hour &quot; , &nbsp;@numbers[4] ,&quot;-min &quot;, &nbsp; @numbers[5],&quot;-sec\n&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #%new_date = (year =&gt; @numbers[0],month =&gt; @numbers[1],day =&gt; @numbers[2],hour =&gt; @numbers[3],minute =&gt; @numbers[4],second =&gt; @numbers[5],nanosecond =&gt; 0,time_zone=&gt; 'America/Chicago');<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #$TestBuildPhase-&gt;update({'_id'=&gt;$inserted_id},{'$set'=&gt;{'modules.TestBuildPhase.end_time'=&gt;DateTime-&gt;new(%new_date)}});<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #DinarDinarDinar<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$submitted = 1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Verbose(&quot;&gt;&gt; Submitted $phase to MongoDB\n&quot;)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ($submitted);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _process_phase_mpi_install {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form )=@_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{MpiInstallPhase} = {};<br>
&gt; &#43; &nbsp; &nbsp;my $phase_form = $form-&gt;{MpiInstallPhase};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;_fill_submit_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_compiler_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_cluster_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_mpi_info( $phase, $section, $report, $form );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{start_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;localtime $report-&gt;{start_timestamp} );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $duration = $report-&gt;{duration};<br>
&gt; &#43; &nbsp; &nbsp;$duration =~ m/^(\w&#43;)\s(.&#43;)/;<br>
&gt; &#43; &nbsp; &nbsp;$duration = $1;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{duration} = $duration;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{end_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;localtime ($report-&gt;{start_timestamp} &#43; $phase_form-&gt;{duration}) );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{description} = $report-&gt;{description};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{stdout} = $report-&gt;{result_stdout};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{stderr} = $report-&gt;{result_stderr};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{status} = $report-&gt;{test_result};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{configuration} = $report-&gt;{configure_arguments};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43; &nbsp; &nbsp;my $mpi_section = $report-&gt;{mpi_install_section_name};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $mpiget_section = MTT::Values::Value( $ini, &quot;MPI install: &quot; . $mpi_section, &quot;mpi_get&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $mpiget_module = MTT::Values::Value( $ini, &quot;MPI get: &quot; . $mpiget_section, &quot;module&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ($mpiget_module eq &quot;AlreadyInstalled&quot;) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{mpi_path} = MTT::Values::Value( $ini, &quot;MPI get: &quot;. $mpiget_section, &quot;alreadyinstalled_dir&quot; );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{mpi_path} = EvaluateString( $phase_form-&gt;{mpi_path}, $ini, &quot;MPI get: &quot;. $mpiget_section );<br>
&gt; &#43; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_install = $MTT::MPI::installs-&gt;{$mpiget_section}-&gt;{$report-&gt;{mpi_version}}-&gt;{$mpi_section};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{mpi_path} = $mpi_install-&gt;{installdir};<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return 0;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _process_phase_test_build {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form )=@_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{TestBuildPhase} = {};<br>
&gt; &#43; &nbsp; &nbsp;my $phase_form = $form-&gt;{TestBuildPhase};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;_fill_submit_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_compiler_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_cluster_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_mpi_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_suite_info( $phase, $section, $report, $form );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{start_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;localtime $report-&gt;{start_timestamp} );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $duration = $report-&gt;{duration};<br>
&gt; &#43; &nbsp; &nbsp;$duration =~ m/^(\w&#43;)\s(.&#43;)/;<br>
&gt; &#43; &nbsp; &nbsp;$duration = $1;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{duration} = $duration;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{end_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;localtime ($report-&gt;{start_timestamp} &#43; $phase_form-&gt;{duration}) );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{description} = $report-&gt;{description};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{stdout} = $report-&gt;{result_stdout};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{stderr} = $report-&gt;{result_stderr};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{status} = $report-&gt;{test_result};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return 0;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _process_phase_test_run {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form )=@_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{TestRunPhase} = {};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;_pre_process_phase( $phase, $section, $report, $form );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# copy benchmark's additional data about mpi (filled in benchmark's analyzer)<br>
&gt; &#43; &nbsp; &nbsp;%$form-&gt;{TestRunPhase} = ( %$report-&gt;{testphase} ) if (defined ($report-&gt;{testphase}));#!!!!!!!!!!!!<br>
&gt; &#43; &nbsp; &nbsp;my $phase_form = $form-&gt;{TestRunPhase};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;_fill_submit_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_compiler_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_cluster_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_mpi_info( $phase, $section, $report, $form );<br>
&gt; &#43; &nbsp; &nbsp;_fill_suite_info( $phase, $section, $report, $form );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{start_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;localtime $report-&gt;{start_timestamp} );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $duration = $report-&gt;{duration};<br>
&gt; &#43; &nbsp; &nbsp;$duration =~ m/^(\w&#43;)\s(.&#43;)/;<br>
&gt; &#43; &nbsp; &nbsp;$duration = $1;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{duration} = $duration;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{end_time} = strftime( &quot;%Y-%m-%d %H:%M:%S&quot;,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;localtime ($report-&gt;{start_timestamp} &#43; $phase_form-&gt;{duration}) );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{description} = $report-&gt;{description};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{stdout} = $report-&gt;{result_stdout};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{stderr} = $report-&gt;{result_stderr};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{status} = $report-&gt;{test_result};<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{cmdline} = $report-&gt;{command};<br>
&gt; &#43; &nbsp; &nbsp;my @sections;<br>
&gt; &#43; &nbsp; &nbsp;push( @sections, &quot;test run: &quot; . $section );<br>
&gt; &#43; &nbsp; &nbsp;push( @sections, &quot;MTT&quot; );<br>
&gt; &#43; &nbsp; &nbsp;push( @sections, &quot;VBench&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{test_name} = $report-&gt;{test_name} if (!defined($phase_form-&gt;{test_name}));<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{mpi_nproc} &nbsp; &nbsp;= int($report-&gt;{np});<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{mpi_hlist} = MTT::Values::Functions::env_hosts(2);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{net_note} = _get_value( &quot;vbench:net_note&quot;, @sections );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43; &nbsp; &nbsp;my @taglist = ();<br>
&gt; &#43; &nbsp; &nbsp;my @tagsections = (@sections);<br>
&gt; &#43; &nbsp; &nbsp;foreach my $tagsection (@tagsections) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; my @val = MTT::Values::Value($ini, &nbsp;$tagsection, &quot;vbench:tag&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; if ( $#val != (-1) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@val = split(/\n/, $val[0]) if ($#val == 0);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;foreach (@val)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $tag = $_;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;push( @taglist, $tag ) if ($tag);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;@{$phase_form-&gt;{tag}} = @taglist;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{test_case} = $report-&gt;{parameters}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ( !defined( $phase_form-&gt;{test_case} ) );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# JMS Why do we have an mpi_mca field? &nbsp;Shouldn't this kind of<br>
&gt; &#43; &nbsp; &nbsp;# stuff be in the MPI Details parameters and network fields?<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($phase_form-&gt;{mpi_mca})) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# JMS Should generlize this to be &quot;extract from the current<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# ::MPI::module&quot;. &nbsp;There are other instances of this direct<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# call in MTT::Test::Analyze::Performance::*.<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{mpi_mca} =<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MTT::Values::Functions::MPI::OMPI::find_mca_params($report-&gt;{command});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if (!defined($phase_form-&gt;{mpi_rlist})) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $rankfile = undef;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $cmdline &nbsp;= $report-&gt;{command};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $cmdline =~ m/-rf\s([\S]&#43;)/ ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$rankfile = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $cmdline =~ m/--rankfile\s([\S]&#43;)/ ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$rankfile = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{mpi_rlist} = $rankfile;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; if (!defined($phase_form-&gt;{mpi_rlist})) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $phase_form-&gt;{mpi_rlist} = &quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( $phase_form-&gt;{mpi_rlist} ne &quot;&quot;) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;push(@{$report-&gt;{files_to_copy}}, $phase_form-&gt;{mpi_rlist});<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# fill mpi_btl string list<br>
&gt; &#43; &nbsp; &nbsp;if ($phase_form-&gt;{mpi_mca} =~ m/-mca\sbtl\s(\S&#43;)/) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;@{$phase_form-&gt;{mpi_btl}} = split /,/, $1;<br>
&gt; &#43; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;@{$phase_form-&gt;{mpi_btl}} = ();<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# filling dynamic fields with prefix &quot;data_&quot;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_message_size} = $report-&gt;{message_size} if (exists( $report-&gt;{message_size} ));<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_latency_min} = $report-&gt;{latency_min} if (exists( $report-&gt;{latency_min} ));<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_latency_avg} = $report-&gt;{latency_avg} if (exists( $report-&gt;{latency_avg} ));<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_latency_max} = $report-&gt;{latency_max} if (exists( $report-&gt;{latency_max} ));<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_bandwidth_min} = $report-&gt;{bandwidth_min} if (exists( $report-&gt;{bandwidth_min} ));<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_bandwidth_avg} = $report-&gt;{bandwidth_avg} if (exists( $report-&gt;{bandwidth_avg} ));<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{data_bandwidth_min} = $report-&gt;{bandwidth_min} if (exists( $report-&gt;{bandwidth_min} ));<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# filling dynamic fields with prefix &quot;custom_&quot;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Special named export environment variables set in mpirun command line<br>
&gt; &#43; &nbsp; &nbsp;# should be stored as part of data in GDS datastore<br>
&gt; &#43; &nbsp; &nbsp;while ( $phase_form-&gt;{cmdline} =~ m/\s&#43;-[x|e]\s&#43;(custom_\w&#43;)\=([^\s\&quot;\']&#43;)/g){<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $value = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{$1} = $value;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;while ( $phase_form-&gt;{cmdline} =~ m/\s&#43;-[x|e]\s&#43;(custom_\w&#43;)\=\&quot;([^\&quot;]*)\&quot;/g ){<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $value = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{$1} = $value;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;while ( $phase_form-&gt;{cmdline} =~ m/\s&#43;-[x|e]\s&#43;\&quot;(custom_\w&#43;)\=([^\&quot;]*)\&quot;/g){<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $value = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{$1} = $value;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;while ( $phase_form-&gt;{cmdline} =~ m/\s&#43;-[x|e]\s&#43;(custom_\w&#43;)\=\'([^\']*)\'/g ){<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $value = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{$1} = $value;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;while ( $phase_form-&gt;{cmdline} =~ m/\s&#43;-[x|e]\s&#43;\'(custom_\w&#43;)\=([^\']*)\'/g){<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $value = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;eval &quot;\$value = \&quot;$value\&quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{$1} = $value;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# filling cached fields with prefix &quot;cached_&quot;<br>
&gt; &#43; &nbsp; &nbsp;_fill_cached_info( $form );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return 0;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _get_value {<br>
&gt; &#43; &nbsp; &nbsp;my $name &nbsp; &nbsp; = shift @_;<br>
&gt; &#43; &nbsp; &nbsp;my @sections = @_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# &nbsp; &nbsp;push (@sections, &quot;MTT&quot;);<br>
&gt; &#43; &nbsp; &nbsp;# &nbsp; &nbsp;push (@sections, &quot;VBench&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $value = MTT::Values::Value( $ini, &quot;VBench&quot;, $name );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# &nbsp; my $value = VBench::Values::getValueFromSections($ini, $name, @sections);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return $value;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _pre_process_phase {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form )=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ini &nbsp; &nbsp;= $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43; &nbsp; &nbsp;my $module = $ini-&gt;val( &quot;Test run: &quot; . $section, &quot;analyze_module&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# If there's no analyze module, then just return<br>
&gt; &#43; &nbsp; &nbsp;return $form<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if (!$module);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$module = &quot;MTT::Test::Analyze::Performance::$module&quot;;<br>
&gt; &#43; &nbsp; &nbsp;my $method = &quot;PreReport&quot;;<br>
&gt; &#43; &nbsp; &nbsp;my @args &nbsp; = ( $phase, $section, $report );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;Call PreReport on $module module.\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $str &nbsp; = &quot;require $module&quot;;<br>
&gt; &#43; &nbsp; &nbsp;my $check = eval $str;<br>
&gt; &#43; &nbsp; &nbsp;if ($@) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Warning(&quot;Could not load module $module: $@\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $ret = undef;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$str = &quot;\$ret = exists(\$${module}::{$method})&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;eval $str;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if (1 == $ret) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$ret = undef;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$str &nbsp; = &quot;\$ret = \&amp;${module}::$method(\@args)&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$check = eval $str;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ($@) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Warning(&quot;Could not run module $module:$method: $@\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return $form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _fill_cached_info {<br>
&gt; &#43; &nbsp; &nbsp;my ( $form ) = @_;<br>
&gt; &#43; &nbsp; &nbsp;my $phase_form = $form-&gt;{TestRunPhase};<br>
&gt; &#43; &nbsp; &nbsp;my @info_list = ( &quot;SubmitInfo&quot;, &quot;ClusterInfo&quot;, &quot;MpiInfo&quot;, &quot;CompilerInfo&quot;, &quot;SuiteInfo&quot; );<br>
&gt; &#43; &nbsp; &nbsp;my @exception_list = ( &quot;clusterinfo_net_conf&quot;, &quot;clusterinfo_net_pci&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;foreach my $info (@info_list) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;foreach my $key (keys(%{$form-&gt;{$info}})) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$phase_form-&gt;{lc(&quot;cached\_$info\_$key&quot;)} = $form-&gt;{$info}-&gt;{$key};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (@exception_list) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (lc(&quot;$_&quot;) eq lc(&quot;$info\_$key&quot;)) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; delete($phase_form-&gt;{lc(&quot;cached\_$info\_$key&quot;)});<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; last;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$phase_form-&gt;{&quot;cached_mpiinstallphase_mpi_path&quot;} = $form-&gt;{MpiInstallPhase}-&gt;{mpi_path};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return $phase_form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _fill_cluster_info {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form ) = @_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{ClusterInfo} = {};<br>
&gt; &#43; &nbsp; &nbsp;my $info_form = $form-&gt;{ClusterInfo};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( !defined($report) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;Runtime Error&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my @sections;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;push( @sections, &quot;test run: &quot; . $section );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;push( @sections, &quot;MTT&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;push( @sections, &quot;VBench&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{cluster_name} = $platform;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $node_count =<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_get_value( &quot;vbench:cluster_node_count&quot;, @sections );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%$info_form = (%$info_form, %$clusterInfo);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;delete $info_form-&gt;{total_mhz};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (defined($node_count) &amp;&amp; $node_count ne &quot;&quot;) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{node_count} = $node_count;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return $info_form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _fill_mpi_info {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form ) = @_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{MpiInfo} = {};<br>
&gt; &#43; &nbsp; &nbsp;# copy benchmark's additional data about mpi (filled in benchmark's analyzer)<br>
&gt; &#43; &nbsp; &nbsp;%$form-&gt;{MpiInfo} = ( %$report-&gt;{mpi} ) if (exists ($report-&gt;{mpi}));#!!!!!!!!!!!!<br>
&gt; &#43; &nbsp; &nbsp;my $info_form = $form-&gt;{MpiInfo};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( !defined($report) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;Runtime Error&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my @sections;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;push( @sections, &quot;test run: &quot; . $section );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my @mpi_name_parts =<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;split( /:/, $report-&gt;{mpi_install_section_name}, 1 );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{mpi_name} = @mpi_name_parts[0];<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{mpi_version} = $report-&gt;{mpi_version};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_path;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_section = $report-&gt;{mpi_install_section_name};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $mpiget_section = MTT::Values::Value( $ini, &quot;MPI install: &quot; . $mpi_section, &quot;mpi_get&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $mpiget_module = MTT::Values::Value( $ini, &quot;MPI get: &quot; . $mpiget_section, &quot;module&quot; );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ($mpiget_module eq &quot;AlreadyInstalled&quot;) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$mpi_path = MTT::Values::Value( $ini, &quot;MPI get: &quot;. $mpiget_section, &quot;alreadyinstalled_dir&quot; );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$mpi_path = EvaluateString( $mpi_path, $ini, &quot;MPI get: &quot;. $mpiget_section );<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;} else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $mpi_install = $MTT::MPI::installs-&gt;{$mpiget_section}-&gt;{$report-&gt;{mpi_version}}-&gt;{$mpi_section};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$mpi_path = $mpi_install-&gt;{installdir};<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $error = 0;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $cmd = &quot;LD_LIBRARY_PATH=&quot; . $mpi_path . &quot;/lib &quot; . $mpi_path . &quot;/bin/mpirun --version&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;open(SHELL, &quot;$cmd 2&gt;&amp;1|&quot;) || ($error = 1);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{oma_version} = &quot;&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ($error == 0) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while (&lt;SHELL&gt;) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $_ =~ m/OMA\s&#43;([r\d\.-]&#43;)\s/) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{oma_version} = $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;last;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;close SHELL;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;} # $error = 0<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$error = 0;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# Add host file to &quot;copy list&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ( MTT::Values::Functions::have_hostfile() ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;my $hostFile = MTT::Values::Functions::hostfile();<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;push(@{$report-&gt;{files_to_copy}}, $hostFile);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;return $info_form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _fill_suite_info {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form ) = @_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{SuiteInfo} = {};<br>
&gt; &#43; &nbsp; &nbsp;# copy benchmark's additional data about benchmark suite (filled in benchmark's analyzer)<br>
&gt; &#43; &nbsp; &nbsp;%$form-&gt;{SuiteInfo} = ( %$report-&gt;{suiteinfo} ) if (exists ($report-&gt;{suiteinfo}));#!!!!!!!!!!!!<br>
&gt; &#43; &nbsp; &nbsp;my $info_form = $form-&gt;{SuiteInfo};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( !defined($report) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;Runtime Error&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my @sections;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;push( @sections, &quot;test run: &quot; . $section );<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $suite_name = undef;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $suite_version = undef;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;my $test_run = $section;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ( $test_run =~ m/^(\S&#43;):(\S&#43;)/ ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$suite_name &nbsp; &nbsp;= $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$suite_version = $2;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if ( $test_run =~ m/^(\S&#43;)\s(.&#43;)$/ ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$suite_name &nbsp; &nbsp;= $1;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$suite_version = &quot;undefined&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$suite_name &nbsp; &nbsp;= $test_run;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$suite_version = &quot;undefined&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{suite_name} &nbsp; &nbsp;= $suite_name if (!defined($info_form-&gt;{suite_name}));<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{suite_version} = $suite_version if (!defined($info_form-&gt;{suite_version}));<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;return $info_form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _fill_submit_info {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form ) = @_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{SubmitInfo} = {};<br>
&gt; &#43; &nbsp; &nbsp;my $info_form = $form-&gt;{SubmitInfo};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( !defined($report) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;Runtime Error&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; if (!$local_username) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $local_username = getpwuid($&lt;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; if (!defined($hostname) || &quot;&quot; eq $hostname) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $hostname = `hostname`;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chomp($hostname);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; }<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{hostname} = $hostname;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{local_username} = $local_username;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{http_username} = $username;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{mtt_version} = $MTT::Version::Combined;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;return $info_form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _fill_compiler_info {<br>
&gt; &#43; &nbsp; &nbsp;my ( $phase, $section, $report, $form ) = @_;<br>
&gt; &#43; &nbsp; &nbsp;$form-&gt;{CompilerInfo} = {};<br>
&gt; &#43; &nbsp; &nbsp;my $info_form = $form-&gt;{CompilerInfo};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( !defined($report) ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;die &quot;Runtime Error&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{compiler_name} = &quot;unknown&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{compiler_name} = $report-&gt;{compiler_name} if (defined($report-&gt;{compiler_name}));<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{compiler_version} = &quot;unknown&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$info_form-&gt;{compiler_version} = $report-&gt;{compiler_version} if (defined($report-&gt;{compiler_version}));<br>
&gt; &#43; &nbsp; }<br>
&gt; &#43; &nbsp; &nbsp;return $info_form;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;sub _do_request {<br>
&gt; &#43; &nbsp; &nbsp;my $req = shift;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Ensure that the environment is clean so that nothing happens<br>
&gt; &#43; &nbsp; &nbsp;# that we're unaware of.<br>
&gt; &#43; &nbsp; &nbsp;my %ENV_SAVE = %ENV;<br>
&gt; &#43; &nbsp; &nbsp;delete $ENV{http_proxy};<br>
&gt; &#43; &nbsp; &nbsp;delete $ENV{https_proxy};<br>
&gt; &#43; &nbsp; &nbsp;delete $ENV{HTTP_PROXY};<br>
&gt; &#43; &nbsp; &nbsp;delete $ENV{HTTPS_PROXY};<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Go through each ua and try to get a good connection. &nbsp;If we get<br>
&gt; &#43; &nbsp; &nbsp;# connection refused from any of them, try another.<br>
&gt; &#43; &nbsp; &nbsp;my $response;<br>
&gt; &#43; &nbsp; &nbsp;foreach my $ua (@lwps) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;MTTGDS client trying proxy: $ua-&gt;{proxy} / $ua-&gt;{source}\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$ENV{https_proxy} = $ua-&gt;{proxy}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (&quot;https&quot; eq $ua-&gt;{scheme});<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# Do the HTTP request<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$response = $ua-&gt;{agent}-&gt;request($req);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# If it succeeded, or if it failed with something other than<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# code 500, return (code 500 = can't connect)<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;if ($response-&gt;is_success() ||<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$response-&gt;code() != 500) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;MTTGDS proxy successful / not 500\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;%ENV = %ENV_SAVE;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return $response;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;MTTGDS proxy unsuccessful -- trying next\n&quot;);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;# Otherwise, loop around and try again<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;Debug(&quot;Proxy $ua-&gt;{proxy} failed code: &quot; .<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$response-&gt;status_line . &quot;\n&quot; . $response-&gt;content . &quot;\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Sorry -- nothing got through...<br>
&gt; &#43; &nbsp; &nbsp;Debug(&quot;MTTGDS proxy totally unsuccessful\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp;%ENV = %ENV_SAVE;<br>
&gt; &#43; &nbsp; &nbsp;return $response;<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;#--------------------------------------------------------------------------<br>
&gt; &#43;<br>
&gt; &#43;# Create test file results, and prepare the HTTP file upload<br>
&gt; &#43;# request<br>
&gt; &#43;<br>
&gt; &#43;my $request_count = 0;<br>
&gt; &#43;<br>
&gt; &#43;sub _prepare_request {<br>
&gt; &#43; &nbsp; &nbsp;my ($phase, $report, $form, $attachment )=@_;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $ini = $MTT::Globals::Internals-&gt;{ini};<br>
&gt; &#43; &nbsp; &nbsp;my $repository_path = MTT::Values::Value( $ini, &quot;VBench&quot;, 'repository_tempdir' );<br>
&gt; &#43; &nbsp; &nbsp;my $repository_name = MTT::Values::Value( $ini, &quot;VBench&quot;, 'repository_dirname_prefix' );<br>
&gt; &#43; &nbsp; &nbsp;my ($fh, $filename);<br>
&gt; &#43; &nbsp; &nbsp;my $tmpdir;<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Find a temporary directory for files<br>
&gt; &#43; &nbsp; &nbsp;if (!defined($repository_path) || $repository_path eq '')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$tmpdir = tempdir( CLEANUP =&gt; 1);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;($fh, $filename) = tempfile( DIR =&gt; $tmpdir, SUFFIX =&gt; '.yaml' );<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;elsif &nbsp;(!defined($repository_name) || $repository_name eq '')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; MTT::Files::mkdir($repository_path) if (! -d $repository_path);<br>
&gt; &#43; &nbsp; &nbsp; $tmpdir = tempdir( DIR =&gt; &quot;$repository_path&quot;, CLEANUP =&gt; 0);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;($fh, $filename) = tempfile( DIR =&gt; $tmpdir, SUFFIX =&gt; '.yaml' );<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$request_count&#43;&#43;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;MTT::Files::mkdir($repository_path) if (! -d $repository_path);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$tmpdir = &quot;${repository_path}/${repository_name}_${request_count}&quot;;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$filename = &quot;$tmpdir/${repository_name}_${request_count}.yaml&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $raw_filename = ();<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;MTT::Files::mkdir($tmpdir);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( keys %$attachment ) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;foreach my $file (keys %$attachment) {<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Debug (&quot; &nbsp; &nbsp;Attachment: $file\n&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MTT::Values::Functions::shell(&quot;cp -r $file $tmpdir/$attachment-&gt;{$file}&quot;);<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$raw_filename = &quot;$tmpdir/data_file.zip&quot;;<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Generate YAML file contents<br>
&gt; &#43; &nbsp; &nbsp;YAML::XS::DumpFile(&quot;$filename&quot;, $form);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;if ( $raw_filename ne '')<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;MTT::Values::Functions::shell(<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;cd $tmpdir; zip -9 -r $raw_filename *&quot;);<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;# Chech Google Datastore put entity limitation<br>
&gt; &#43; &nbsp; &nbsp;$raw_filename = '' if &nbsp;1048576 &lt;= ((-s &quot;$raw_filename&quot;) &#43; (-s &quot;$filename&quot;));<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;my $req;<br>
&gt; &#43; &nbsp; &nbsp;# Create the &quot;upload&quot; POST request<br>
&gt; &#43; &nbsp; &nbsp;if (-e $raw_filename)<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; $req = POST $url,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SUBMIT &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data &nbsp; &nbsp; &nbsp; &nbsp;=&gt; [&quot;$filename&quot;],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raw &nbsp; &nbsp; &nbsp; &nbsp; =&gt; [&quot;$raw_filename&quot;],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description =&gt; &quot;Submit data and raw on the phase &lt;$phase&gt;&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;];<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43; &nbsp; &nbsp;else<br>
&gt; &#43; &nbsp; &nbsp;{<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp;$req = POST $url,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content_Type =&gt; 'form-data',<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Content =&gt; [<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SUBMIT &nbsp; &nbsp; &nbsp;=&gt; 1,<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;data &nbsp; &nbsp; &nbsp; &nbsp;=&gt; [&quot;$filename&quot;],<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;description =&gt; &quot;Submit data only on the phase &lt;$phase&gt;&quot;<br>
&gt; &#43; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ];<br>
&gt; &#43; &nbsp; &nbsp;}<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;$req-&gt;authorization_basic($username, $password);<br>
&gt; &#43;<br>
&gt; &#43; &nbsp; &nbsp;return (\$req, $filename);<br>
&gt; &#43;}<br>
&gt; &#43;<br>
&gt; &#43;1;<br>
&gt; _______________________________________________<br>
&gt; mtt-svn mailing list<br>
&gt; <a href="mailto:mtt-svn@open-mpi.org">mtt-svn@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn" target="_blank">
http://www.open-mpi.org/mailman/listinfo.cgi/mtt-svn</a><br>
<br>
<br>
</div>
</div>
<span class="HOEnZb"><font color="#888888">--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">
http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
<br>
_______________________________________________<br>
mtt-devel mailing list<br>
<a href="mailto:mtt-devel@open-mpi.org">mtt-devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a><br>
</font></span></blockquote>
</div>
<br>
</div>
</div>
</blockquote>
<blockquote type="cite">
<div><span>_______________________________________________</span><br>
<span>mtt-devel mailing list</span><br>
<span><a href="mailto:mtt-devel@open-mpi.org">mtt-devel@open-mpi.org</a></span><br>
<span><a href="http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel">http://www.open-mpi.org/mailman/listinfo.cgi/mtt-devel</a></span></div>
</blockquote>
</body>
</html>


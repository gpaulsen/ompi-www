<div dir="ltr">MAX_COUNT is topology-&gt;level_nbobjects[from_depth] -1<br></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Wed, Aug 28, 2013 at 4:20 PM, Jiri Hladky <span dir="ltr">&lt;<a href="mailto:hladky.jiri@gmail.com" target="_blank">hladky.jiri@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><br><div class="gmail_extra"><div class="gmail_quote"><div class="im">On Tue, Aug 27, 2013 at 7:57 PM, Brice Goglin <span dir="ltr">&lt;<a href="mailto:Brice.Goglin@inria.fr" target="_blank">Brice.Goglin@inria.fr</a>&gt;</span> wrote:<blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">

You just explained why I don&#39;t like weights. Some people will want to<br>
ignore L2, some won&#39;t. Specifying all this on the command-line would be<br>
horrible, and implementing it will be horrible too.<br></blockquote><div><br></div></div><div>:-) Agreed.</div><div class="im"><div> </div><blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">


<div><br>
&gt; I think that --reverse option is much easier for the implementation<br>
&gt; and for the clear requirement and understanding how the output should<br>
&gt; look like.<br>
<br>
</div>Implementing reverse bitmap_singlify() isn&#39;t so easy.<br>
<br>
Also &quot;--reverse&quot; would have a semantics that no users ever requested,<br>
it&#39;s only a workaround for your actual need (&quot;ignore core0 if<br>
possible&quot;). What if somebody laer comes with a machine where he wants to<br>
preferably ignore core 7 and maybe ignore core 11 too, because some<br>
special daemons are running there? We&#39;d need to add<br>
--dont-reverse-but-ignore-some-cores-if-possible. Or what if somebody<br>
wants to ignore the first core but still get other cores in the normal<br>
order?<br></blockquote><div><br></div></div><div>I got your point. On the other hand I think that hwloc-distrib is at the moment not flexible enough to handle such case. I believe that the current strategy - start from the first object - is not the best one. From my experience, core 0 is always most used by the system so it seems that better strategy would to allocate the cores from the last one. So for example, when I say that I would like to avoid PU#0 then it means I would like in fact avoid Socket#0 as well as long as possible. The same applies to NUMANode#0.</div>

<div><br></div><div>I was looking at the source code of the hwloc-distrib and I believe that only this part of the code would be affected:</div><div><br></div><div><div>      for (i = 0; i &lt; chunks; i++)</div><div>        roots[i] = hwloc_get_obj_by_depth(topology, from_depth, i); <span style="background-color:rgb(255,0,0)"> =&gt; change this to roots[i] = hwloc_get_obj_by_depth(topology, from_depth, MAX_COUNT - i);</span></div>

<div><br></div><div>      hwloc_distributev(topology, roots, chunks, cpuset, n, to_depth); <span style="background-color:rgb(255,0,0)">=&gt; rewrite this to iterate in the reverse direction</span></div></div><div><br></div>

<div>MAX_COUNT seems to be known and accessible as topology-&gt;nb_levels.<br></div><div><br></div><div>Am I missing something? In case of infinite bitmap hwloc-distrib will error out. This should solve the problems with hwloc_bitmap_singlify.</div>
<div class="im">
<div><br></div><div><br></div><blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">
I tend to think we should let the application handle these specific<br>
cases (finding what can be ignored while still having enough objects,<br>
and then calling distribute accordingly).<br></blockquote><div><br></div></div><div>Actually I believe that this change is more easily implemented directly in the C code rather then using some work-around in Bash. And I believe that the use case is not such exotic. As outlined above, sarting from core#0 is not always the best strategy....</div>

<div><br></div><div>Please let me know what do you think.</div><div><br></div><div>Jirka</div></div></div></div>
</blockquote></div><br></div>


<div dir="ltr">Hi Lukas,<div><br></div><div>good points! I use these routines for ages and they definitively deserve the suggested updates. </div><div><br></div><div>Thanks!</div><div>Jirka</div><div> </div></div><div class="gmail_extra"><br><div class="gmail_quote">On Tue, Jan 12, 2016 at 8:02 PM, Odzioba, Lukasz <span dir="ltr">&lt;<a href="mailto:lukasz.odzioba@intel.com" target="_blank">lukasz.odzioba@intel.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">







<div lang="PL" link="blue" vlink="purple">
<div>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d">Hi
<span>Jirka</span>,<u></u><u></u></span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d">It should be safe to do free(NULL) so last function can
 be shortened to only 2 lines.<u></u><u></u></span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d">IIRC *<span>alloc</span>
<span>fuctions</span> should not set <span>errno</span> on error to anything else than ENOMEM so you could get rid of
<span>errno</span> references in your wrappers.<u></u><u></u></span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d">Removing else before return p; statement should take care
 of the warning, so you don’t need return NULL then.<u></u><u></u></span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d"><u></u> <u></u></span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d">Thanks,<u></u><u></u></span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif;color:#1f497d">Lukas<u></u><u></u></span></p>
<p class="MsoNormal"><a name="184133478__MailEndCompose"><span lang="EN-US"><u></u> <u></u></span></a></p>
<span></span>
<p class="MsoNormal"><a name="184133478______replyseparator"></a><b><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif">From:</span></b><span lang="EN-US" style="font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif">
 hwloc-devel [mailto:<a href="mailto:hwloc-devel-bounces@open-mpi.org" target="_blank">hwloc-devel-bounces@open-mpi.org</a>] <b>On Behalf Of </b><span>Jirka</span>
<span>Hladky</span><br>
<b>Sent:</b> Tuesday, January 12, 2016 3:01 PM<br>
<b>To:</b> Hardware locality development list</span></p><div><div class="h5"><br>
<b>Subject:</b> Re: [hwloc-devel] Static analysis<u></u><u></u></div></div><p></p><div><div class="h5">
<p class="MsoNormal"><u></u> <u></u></p>
<div>
<p class="MsoNormal">Hi Brice,<u></u><u></u></p>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">I use following custom routines to check for malloc related errors. <u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">Just my 2 cents.<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">Jirka<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<div>
<p class="MsoNormal">void *util_Malloc (size_t size)<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">{<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   void *p;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   errno = 0;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   p = malloc (size);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   if (p == NULL) {<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      fprintf (stdout, &quot;\nmalloc failed: %s\n\n&quot;, strerror (errno));<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      exit (EXIT_FAILURE);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return NULL;     /* to eliminate a warning from the compiler */<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   } else<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return p;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">}<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">void *util_Calloc (size_t count, size_t esize)<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">{<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   void *p;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   errno = 0;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   p = calloc (count, esize);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   if (p == NULL) {<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      fprintf (stdout, &quot;\ncalloc failed: %s\n\n&quot;, strerror (errno));<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      exit (EXIT_FAILURE);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return NULL;     /* to eliminate a warning from the compiler */<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   } else<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return p;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">}<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">void *util_Realloc (void *ptr, size_t size)<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">{<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   void *p;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   errno = 0;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   p = realloc (ptr, size);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   if ((p == NULL) &amp;&amp; (size != 0)) {<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      fprintf (stdout, &quot;\nrealloc failed: %s\n\n&quot;, strerror (errno));<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      exit (EXIT_FAILURE);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return ptr;      /* to eliminate a warning from the compiler */<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   } else<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return p;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">}<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal">void *util_Free (void *p)<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">{<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   if (p == NULL)<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">      return NULL;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   free (p);<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">   return NULL;<u></u><u></u></p>
</div>
<div>
<p class="MsoNormal">}<u></u><u></u></p>
</div>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
</div>
<div>
<p class="MsoNormal"><u></u> <u></u></p>
<div>
<p class="MsoNormal">On Tue, Jan 12, 2016 at 2:26 PM, Odzioba, Lukasz &lt;<a href="mailto:lukasz.odzioba@intel.com" target="_blank">lukasz.odzioba@intel.com</a>&gt; wrote:<u></u><u></u></p>
<blockquote style="border:none;border-left:solid #cccccc 1.0pt;padding:0cm 0cm 0cm 6.0pt;margin-left:4.8pt;margin-right:0cm">
<p class="MsoNormal">Hi,<br>
I use klocwork, which doesn&#39;t mean it is better it just reports different subset of potential errors.<br>
<br>
Ignoring malloc errors is your design decision, I don&#39;t mind it.<br>
>From debugging perspective it makes it easier to track it down since you have null ptr dereference somewhere near malloc .<br>
Malloc might start failing as well as just fail once in process live (i.e. some other process requested free memory for a short period of time), if an app is able to survive it&#39;s nice if not then well we have to live with that.<br>
<br>
Thanks,<br>
Lukas<u></u><u></u></p>
<div>
<div>
<p class="MsoNormal"><br>
<br>
-----Original Message-----<br>
From: hwloc-devel [mailto:<a href="mailto:hwloc-devel-bounces@open-mpi.org" target="_blank">hwloc-devel-bounces@open-mpi.org</a>] On Behalf Of Brice Goglin<br>
Sent: Tuesday, January 12, 2016 12:57 PM<br>
To: <a href="mailto:hwloc-devel@open-mpi.org" target="_blank">hwloc-devel@open-mpi.org</a><br>
Subject: Re: [hwloc-devel] Static analysis<br>
<br>
Hello<br>
<br>
We&#39;re running coverity every night and I try to address most of what it<br>
reports (except the netloc/ directory git master which still needs a lot<br>
of work). What tool do you use?<br>
<br>
It&#39;s true we don&#39;t check malloc() return values in many cases (hopefully<br>
only the small allocations), mostly because we&#39;re lazy (and also because<br>
many other things would go wrong when malloc starts failing :/)<br>
<br>
Brice<br>
<br>
<br>
<br>
Le 12/01/2016 12:23, Odzioba, Lukasz a écrit :<br>
&gt; Hi,<br>
&gt; Static analysis tool we use has found quite a lot of potential issues in hwloc.<br>
&gt; Most of them are type of &quot;NULL ptr dereference&quot; i.e. when pointer is not checked for null after allocation, but there are some more interesting cases as well.<br>
&gt; My team distributes hwloc as a part of software package and we could just ignore those, but I wanted to let you know in case you are interested in fixing some or all of them.<br>
&gt;<br>
&gt; Please let me know If you would like to get a full list, so I&#39;ll prepare it.<br>
&gt;<br>
&gt; Thanks,<br>
&gt; Lukas<br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; hwloc-devel mailing list<br>
&gt; <a href="mailto:hwloc-devel@open-mpi.org" target="_blank">hwloc-devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel" target="_blank">
http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4698.php" target="_blank">
http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4698.php</a><br>
<br>
_______________________________________________<br>
hwloc-devel mailing list<br>
<a href="mailto:hwloc-devel@open-mpi.org" target="_blank">hwloc-devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel" target="_blank">
http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4699.php" target="_blank">
http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4699.php</a><br>
_______________________________________________<br>
hwloc-devel mailing list<br>
<a href="mailto:hwloc-devel@open-mpi.org" target="_blank">hwloc-devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel" target="_blank">
http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel</a><u></u><u></u></p>
</div>
</div>
<p class="MsoNormal">Link to this post: <a href="http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4700.php" target="_blank">
http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4700.php</a><u></u><u></u></p>
</blockquote>
</div>
<p class="MsoNormal"><u></u> <u></u></p>
</div>
</div></div></div>
</div>

<br>_______________________________________________<br>
hwloc-devel mailing list<br>
<a href="mailto:hwloc-devel@open-mpi.org">hwloc-devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel" rel="noreferrer" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4702.php" rel="noreferrer" target="_blank">http://www.open-mpi.org/community/lists/hwloc-devel/2016/01/4702.php</a><br></blockquote></div><br></div>


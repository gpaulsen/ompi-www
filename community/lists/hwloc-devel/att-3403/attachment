<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    Looks related to these warnings:<br>
    <br>
    Warning: &lt;object&gt; element has non-unique value in 'name' key
    attribute: Intel Corporation I350 Gigabit Network Connection at
    ./topo.pl line 16<br>
    Warning: &lt;object&gt; element has non-unique value in 'name' key
    attribute: Intel Corporation I350 Gigabit Network Connection at
    ./topo.pl line 16<br>
    Warning: &lt;object&gt; element has non-unique value in 'name' key
    attribute: Intel Corporation I350 Gigabit Network Connection at
    ./topo.pl line 16<br>
    Warning: &lt;object&gt; element has non-unique value in 'name' key
    attribute: Cisco Systems Inc VIC PCIe Downstream Port at ./topo.pl
    line 16<br>
    <br>
    <br>
    If I replace name=... with foo=... in the XML, those go away and all
    your eth interfaces come back. So it looks like there may be
    something special with the "name" attribute of XML objects. What's
    strange is that it seems to only happen when two children have the
    same "name" XML attribute. We have quite a lot of same "name"
    attributes, but not always in sibling XML objects.<br>
    <br>
    I am trying to find out whether we misrespect the XML specs, but I
    couldn't so far. Maybe it's a XML::Simple problem? libxml2 and
    xmllint never complained like this.<br>
    <br>
    Brice<br>
    <br>
    <br>
    <br>
    <br>
    Le 19/11/2012 19:01, Jeff Squyres a &eacute;crit&nbsp;:
    <blockquote
      cite="mid:DE1DAC88-6B68-42C6-AC2C-6DE4F2303AA3@cisco.com"
      type="cite">
      <pre wrap="">Odd.  On the SVN trunk, I'm running this code:

-----
open (LSTOPO, "lstopo -.xml|") || die "Can't open lstopo";                        
my $lstopo;                                                                       
while (&lt;LSTOPO&gt;) {                                                                
    $lstopo .= $_;                                                                
    print "Read: $_";                                                             
}                                                                                 
close(LSTOPO);                                                                    
                                                                                  
my $xml;                                                                          
$xml = XMLin($lstopo);                                                            
print Dumper($xml);
-----

In looking at the output, I see that lstopo's XML output includes all PCI devices, but when I look at the Dumper output of the parsed XML, some PCI devices are not listed.  In particular: both eth4 and eth5 are included in the "lstopo -.xml" output, but eth4 is not included in the Dumper output.

The same thing happens if I "lstopo foo.xml" and then "XMLin("foo.xml")".  So it's not a problem with perl reading from lstopo's stdout.

I've attached foo.xml -- any ideas why this is happening?

</pre>
      <br>
      <fieldset class="mimeAttachmentHeader"></fieldset>
      <br>
      <pre wrap="">_______________________________________________
hwloc-devel mailing list
<a class="moz-txt-link-abbreviated" href="mailto:hwloc-devel@open-mpi.org">hwloc-devel@open-mpi.org</a>
<a class="moz-txt-link-freetext" href="http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel">http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-devel</a></pre>
    </blockquote>
    <br>
  </body>
</html>


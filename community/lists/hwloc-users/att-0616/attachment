<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000000">
    On 21/04/2012 23:08, Vlad wrote:
    <blockquote
      cite="mid:18CA9B93-9B52-494C-8331-87147816C21A@demoninsight.com"
      type="cite">Greetings,
      <div><br>
      </div>
      <div><span class="Apple-tab-span" style="white-space: pre; "> </span>I
        use hwloc-1.4.1 stable on Red Hat 5 and am seeing a possible
        concurrency issue not covered by the "Thread Safety" guidelines:</div>
      <div><br>
      </div>
      <div>- I start a small number (4) of threads,&nbsp;&nbsp;each of which does
        some work and periodically executes
        hwloc_get_last_cpu_location() with HWLOC_CPUBIND_PROCESS</div>
      <div>- occasionally, one or two of those threads will see the call
        fail with ENOSYS (even though the same call has already executed
        successfully a number of times)</div>
      <div><br>
      </div>
      <div>These errors are transient and seem to occur only when some
        of the threads in the group are terminating. I've skimmed
        through the implementation in topology-linux.c and it seems
        plausible to me that the errors could be caused by failure to
        read /proc state "atomically" in the presence of concurrent
        thread starts/exits.</div>
      <div><br>
      </div>
      <div>Of course, the latter is hard (impossible ?) to do because
        the state always changes and a snapshot can only be obtained
        with a single read() (which in turn would require knowing how
        many thread entries to expect in advance). However, returning
        ENOSYS in such cases does not seems intended but rather a flaw
        in retry logic. Similar issues may be present with other API
        methods that rely on&nbsp;<span class="Apple-style-span"
          style="border-collapse: collapse; font-family: monospace;
          font-size: 11px; ">hwloc_linux_foreach_proc_tid()&nbsp;</span>or<span
          class="Apple-style-span" style="border-collapse: collapse;
          font-family: monospace; font-size: 11px; ">&nbsp;</span><span
          class="Apple-style-span" style="border-collapse: collapse;
          font-family: monospace; font-size: 11px; ">hwloc_linux_get_proc_tids().</span></div>
    </blockquote>
    <br>
    Can you try the attached patch? It doesn't abort the loop
    immediately on per-tid errors anymore. This may work better when
    threads disappear. I don't remember if the retry logic was written
    while thinking about adding threads only or about adding and
    removing threads.<br>
    <br>
    If the patch doesn't help, can you send your code to help debug
    things?<br>
    <br>
    <blockquote
      cite="mid:18CA9B93-9B52-494C-8331-87147816C21A@demoninsight.com"
      type="cite">
      <div>An alternative explanation could be that the retry logic is
        correct but the implementation relies on readdir(), which is
        documented to not be thread-safe:&nbsp;<a moz-do-not-send="true"
href="http://www.gnu.org/software/libc/manual/html_node/Reading_002fClosing-Directory.html">http://www.gnu.org/software/libc/manual/html_node/Reading_002fClosing-Directory.html</a></div>
      <br>
    </blockquote>
    <br>
    I don't this can happen. Your threads should not be accessing the
    same DIR stream here.<br>
    <br>
    Thanks<br>
    Brice<br>
    <br>
  </body>
</html>


Hi,<div><br></div><div>reading a hwloc-v1.2-a4 manual, on page 15, i look an example with 4-socket 2-core machine with hyperthreading.</div><div><br></div><div>Core id&#39;s are not exclusive as said before. PU&#39;s id are exclusive but not physically sequential (I suppose)</div>
<div><br></div><div>PU P#0 is in socket P#0 on Core P#0. PU P#1 is in another socket! (core P#0). So, are not physically near. I aspect that with Hyperthreading, and 2 hardware threads each core, PU P#0 and PU P#1 are on the same core. If is it not true, using in a OMP PARALLEL region with 2 software threads:</div>
<div><br></div><div>$ pragma omp paralle num_threads(2)</div><div><br></div><div>tid= omp_get_thread_num();</div><div><br></div><div><div>hwloc_obj_t core = hwloc_get_obj_by_type(topology, HWLOC_OBJ_PU, tid);</div><div>hwloc_cpuset_t set = hwloc_bitmap_dup(core-&gt;cpuset);</div>
<div>hwloc_bitmap_singlify(set);</div><div><br></div><div>hwloc_set_cpubind(topology, set,  HWLOC_CPUBIND_THREAD);</div></div><div><br></div><div><br></div><div><br></div><div>i would bind thread 0 on PU P#0 and thread 1 on PU P#1, supposing are physically near. But i thinks it not works..</div>
<div><br></div><div><br></div><div><br></div><div><br></div><div><br><br><div class="gmail_quote">2011/7/29 Samuel Thibault <span dir="ltr">&lt;<a href="mailto:samuel.thibault@inria.fr">samuel.thibault@inria.fr</a>&gt;</span><br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">Gabriele Fatigati, le Fri 29 Jul 2011 13:34:29 +0200, a écrit :<br>
<div class="im">&gt; I forgot to tell you these code block is inside a parallel OpenMP region. This<br>
&gt; is the complete code:<br>
&gt;<br>
&gt; #pragma omp parallel num_threads(6)<br>
&gt; {<br>
&gt; int tid = omp_get_thread_num();<br>
&gt;<br>
</div><div class="im">&gt; hwloc_obj_t core = hwloc_get_obj_by_type(topology, HWLOC_OBJ_CORE, tid);<br>
&gt;<br>
</div><div class="im">&gt; and other code block is:<br>
&gt;<br>
&gt; #pragma omp parallel num_threads(6)<br>
&gt; {<br>
&gt; int tid = omp_get_thread_num();<br>
&gt;<br>
</div><div class="im">&gt; hwloc_obj_t core = hwloc_get_obj_by_type(topology, HWLOC_OBJ_PU, tid);<br>
<br>
</div>Ok, so it depends whether you want to put your OpenMP threads on<br>
separate cores (then the first code which distributes among cores), or<br>
if you&#39;re ok with letting them share a core (then the first code which<br>
distributes among threads).<br>
<br>
Maybe try and run lstopo --top to see the result.<br>
<div><div></div><div class="h5"><br>
Samuel<br>
_______________________________________________<br>
hwloc-users mailing list<br>
<a href="mailto:hwloc-users@open-mpi.org">hwloc-users@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-users" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/hwloc-users</a><br>
</div></div></blockquote></div><br><br clear="all"><br>-- <br>Ing. Gabriele Fatigati<br><br>Parallel programmer<br><br>CINECA Systems &amp; Tecnologies Department<br><br>Supercomputing Group<br><br>Via Magnanelli 6/3, Casalecchio di Reno (BO) Italy<br>
<br><a href="http://www.cineca.it">www.cineca.it</a>                    Tel:   +39 051 6171722<br><br>g.fatigati [AT] <a href="http://cineca.it">cineca.it</a>           <br>
</div><div><br></div><div><br></div>


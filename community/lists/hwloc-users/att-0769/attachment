<html><body><div style="color:#000; background-color:#fff; font-family:times new roman, new york, times, serif;font-size:12pt"><div>Below I posted a simple windows thread creation C++ routine which sets the processor affinity to two cores.<br></div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;">What I want is the equivalent code using hwloc. Sorry for being somewhat new to this but I'm not sure what&nbsp;</div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;">api calls are equivalent to the windows calls and I did search hwloc.h for "affinity" thinking the function call</div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;">would be easy to find. More specifically I'm
 wondered whats the equivalent of " CreateThread
", " SetThreadAffinityMask
",&nbsp;</div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;">" GetSystemInfo
", and " WaitForMultipleObjects
" in hwloc.</div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;"><br></div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;">Thanks for any useful suggestions.</div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;"><br></div><div style="color: rgb(0, 0, 0); font-size: 16px; font-family: &quot;Times New Roman&quot;; background-color: transparent; font-style: normal;">#define WIN32_LEAN_AND_MEAN<br>#include &lt;windows.h&gt;<br>#include &lt;stdio.h&gt;<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br><br>HANDLE *m_threads = NULL;<br>static DWORD_PTR WINAPI threadMain(void* p);<br><br>DWORD_PTR GetNumCPUs()//this function is not actually used by this example<br>{<br> 
 SYSTEM_INFO m_si = {0, };<br>  GetSystemInfo(&amp;m_si);<br>  return (DWORD_PTR)m_si.dwNumberOfProcessors;<br>}<br>int main(int argc, char **args)<br>{<br>&nbsp; DWORD_PTR c = 2;<br><br>  m_threads = new HANDLE[c];<br><br>  for(DWORD_PTR i = 0; i &lt; c; i++)<br>  {<br>	DWORD_PTR m_id = 0;<br>	DWORD_PTR m_mask = 1 &lt;&lt; i;<br><br>	m_threads[i] = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)threadMain, (LPVOID)i, NULL, &amp;m_id);<br>	SetThreadAffinityMask(m_threads[i], m_mask);<br><br>	//wprintf(L"Creating Thread %d (0x%08x) Assigning to CPU 0x%08x\r\n", i, (LONG_PTR)m_threads[i], m_mask);<br>  }<br>    WaitForMultipleObjects(c, m_threads, TRUE, INFINITE);<br>  return 0;<br>}<br>static DWORD_PTR WINAPI threadMain(void* p)<br>{<br>    double result = 0.0;<br><br>    for (int i = 0; i &lt; 1000000000; i++)<br>    {<br>        result = result + sin(i) * tan(i);<br>    }<br><br>  return 0;<br>}</div></div></body></html>

<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns="http://www.w3.org/TR/REC-html40">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta name="Generator" content="Microsoft Word 14 (filtered medium)">
<style><!--
/* Font Definitions */
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
p
	{mso-style-priority:99;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
pre
	{mso-style-priority:99;
	mso-style-link:"HTML Preformatted Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-priority:99;
	mso-style-link:"HTML Preformatted";
	font-family:"Courier New";}
span.EmailStyle20
	{mso-style-type:personal;
	font-family:"Calibri","sans-serif";
	color:windowtext;}
span.apple-converted-space
	{mso-style-name:apple-converted-space;}
span.pln
	{mso-style-name:pln;}
span.pun
	{mso-style-name:pun;}
span.lit
	{mso-style-name:lit;}
span.EmailStyle25
	{mso-style-type:personal-reply;
	font-family:"Calibri","sans-serif";
	color:#1F497D;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-size:10.0pt;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--></style><!--[if gte mso 9]><xml>
<o:shapedefaults v:ext="edit" spidmax="1026" />
</xml><![endif]--><!--[if gte mso 9]><xml>
<o:shapelayout v:ext="edit">
<o:idmap v:ext="edit" data="1" />
</o:shapelayout></xml><![endif]-->
</head>
<body lang="EN-US" link="blue" vlink="purple">
<div class="WordSection1">
<p class="MsoNormal" style="line-height:13.5pt;background:white;vertical-align:baseline">
<span style="font-size:10.5pt;font-family:&quot;Arial&quot;,&quot;sans-serif&quot;;color:black">I have a problem with my MPI code, it hangs when the code is run on&nbsp;<b><span style="border:none windowtext 1.0pt;padding:0in">multiple nodes</span></b>. It&nbsp;<b><span style="border:none windowtext 1.0pt;padding:0in">successfully</span></b>completes
 when run on a&nbsp;<b><span style="border:none windowtext 1.0pt;padding:0in">single node</span></b>. I am not sure how to debug this. Can someone help me debug this issue?<o:p></o:p></span></p>
<p class="MsoNormal" style="margin-bottom:12.0pt;line-height:13.5pt;background:white;vertical-align:baseline">
<span style="font-size:10.5pt;font-family:&quot;Arial&quot;,&quot;sans-serif&quot;;color:black">Program Usage:<o:p></o:p></span></p>
<p class="MsoNormal" style="line-height:13.5pt;background:#EEEEEE;vertical-align:baseline">
<span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in">mpicc -o string string.cpp<br>
mpirun -np </span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">4</span><span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in"> -npernode
</span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">2</span><span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in"> -hostfile hosts ./string
</span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">12</span><span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in">
</span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">0.1</span><span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in">
</span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">0.9</span><span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in">
</span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">10</span><span style="font-size:10.5pt;font-family:Consolas;color:black;border:none windowtext 1.0pt;padding:0in">
</span><span style="font-size:10.5pt;font-family:Consolas;color:maroon;border:none windowtext 1.0pt;padding:0in">2</span><span style="font-size:10.5pt;font-family:Consolas;color:black"><o:p></o:p></span></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal"><u>MPI_Reduce Hangs in 2<sup>nd</sup> iteration: (Output cout statements from my program)<o:p></o:p></u></p>
<p class="MsoNormal"><u><o:p><span style="text-decoration:none">&nbsp;</span></o:p></u></p>
<p class="MsoNormal">1st Iteration (Timestep 1)<o:p></o:p></p>
<p class="MsoNormal">-----------------------------------------------------<o:p></o:p></p>
<p class="MsoNormal">0 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal">0 Done Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">1 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal">1 Done Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">2 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal">2 Done Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">3 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal">3 Done Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">0 Sending to right&nbsp; task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1<o:p></o:p></p>
<p class="MsoNormal">0 Receiving from right task&nbsp;&nbsp; = 1<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">1 Receiving from left task&nbsp;&nbsp; = 0<o:p></o:p></p>
<p class="MsoNormal">1 Sending to left task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">1 Sending to right&nbsp; task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2<o:p></o:p></p>
<p class="MsoNormal">1 Receiving from right task&nbsp;&nbsp; = 2<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">2 Receiving from left task&nbsp;&nbsp; = 1<o:p></o:p></p>
<p class="MsoNormal">2 Sending to left task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">2 Sending to right&nbsp; task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3<o:p></o:p></p>
<p class="MsoNormal">2 Receiving from right task&nbsp;&nbsp; = 3<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">3 Receiving from left task&nbsp;&nbsp; = 2<o:p></o:p></p>
<p class="MsoNormal">3 Sending to left task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">2nd Iteration (Timestep 2)<o:p></o:p></p>
<p class="MsoNormal">-----------------------------------------------------<o:p></o:p></p>
<p class="MsoNormal">0 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">1 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal">1 Done Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">2 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">3 Waiting for MPI_Reduce()<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">My Code:<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">#include &lt;iostream&gt;<o:p></o:p></p>
<p class="MsoNormal">#include &lt;vector&gt;<o:p></o:p></p>
<p class="MsoNormal">#include &lt;stdio.h&gt;<o:p></o:p></p>
<p class="MsoNormal">#include &lt;stdlib.h&gt;<o:p></o:p></p>
<p class="MsoNormal">#include &quot;mpi.h&quot;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">#define MASTER 0<o:p></o:p></p>
<p class="MsoNormal">int RtoL = 10;<o:p></o:p></p>
<p class="MsoNormal">int LtoR = 20;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">int main ( int argc, char **argv ) <o:p></o:p></p>
<p class="MsoNormal">{<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; int nprocs, taskid;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; FILE *f = NULL;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; int left, right, i_start, i_end;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; float sum = 0;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; MPI_Status status;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; float *y, *yold;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; float *v, *vold;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; //&nbsp; const int NUM_MASSES = 1000;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; //&nbsp; const float Ktension = 0.1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; //&nbsp; const float Kdamping = 0.9;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; //&nbsp; const float duration = 10.0;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">#if 0<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; if ( argc != 5 ) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; &quot;usage: &quot; &lt;&lt; argv[0] &lt;&lt; &quot; NUM_MASSES durationInSecs Ktension Kdamping\n&quot;;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 2;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">#endif<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; int NUM_MASSES&nbsp; = atoi ( argv[1] );<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; float duration = atof ( argv[2] );<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; float Ktension = atof ( argv[3] );<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; float Kdamping = atof ( argv[4] );<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; const int PICKUP_POS = NUM_MASSES / 7;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; const int OVERSAMPLING = 16;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; MPI_Init(&amp;argc,&amp;argv);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; MPI_Comm_size(MPI_COMM_WORLD,&amp;nprocs);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; MPI_Comm_rank(MPI_COMM_WORLD,&amp;taskid);<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; if (taskid&nbsp; == 0) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f = fopen ( &quot;rstring.raw&quot;, &quot;wb&quot; );<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!f) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; &quot;can't open output file\n&quot;;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; y = new float[NUM_MASSES];<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; yold = new float[NUM_MASSES];<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; v = new float[NUM_MASSES];<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; NUM_MASSES; i&#43;&#43; ) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v[i]&nbsp; = 0.0f;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yold[i] = y[i] = 0.0f;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i == NUM_MASSES/2 )<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yold[i] = 1.0; <o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;}<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; if (taskid == 0) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = -1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = 1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; } else if (taskid == nprocs - 1) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = taskid - 1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = -1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; } else {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = taskid - 1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = taskid &#43; 1;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; i_start = taskid * (NUM_MASSES/nprocs);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; i_end = i_start &#43; (NUM_MASSES/nprocs);<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; int numIters = duration * 44100 * OVERSAMPLING;;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; if (argc == 6) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numIters = atoi(argv[5]);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; for ( int t = 0; t &lt; numIters; t&#43;&#43; ) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float sum = 0;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float gsum = 0;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ( int i = i_start; i &lt; i_end; i&#43;&#43; ) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( i == 0 || i == NUM_MASSES-1 ) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float accel = Ktension * (yold[i&#43;1] &#43; yold[i-1] - 2*yold[i]);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v[i] &#43;= accel;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v[i] *= Kdamping;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y[i] = yold[i] &#43; v[i];<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum &#43;= y[i];<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; taskid &lt;&lt; &quot; Waiting for MPI_Reduce()&quot; &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Reduce(&amp;sum, &amp;gsum, 1, MPI_FLOAT, MPI_SUM, MASTER, MPI_COMM_WORLD);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; taskid &lt;&lt; &quot; Done Waiting for MPI_Reduce()&quot; &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (taskid != 0) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Recv(&amp;y[i_start-1], 1, MPI_FLOAT, left, LtoR, MPI_COMM_WORLD, &amp;status);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; taskid &lt;&lt; &quot; Receiving from left task&nbsp;&nbsp; = &quot; &lt;&lt; left &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Send(&amp;y[i_start],&nbsp;&nbsp; 1, MPI_FLOAT, left, RtoL, MPI_COMM_WORLD);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; taskid &lt;&lt; &quot; Sending to left task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &quot; &lt;&lt; left &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (taskid != nprocs - 1) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Send(&amp;y[i_end-1],1, MPI_FLOAT, right, LtoR, MPI_COMM_WORLD);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; taskid &lt;&lt;&quot; Sending to right&nbsp; task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &quot; &lt;&lt; right &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MPI_Recv(&amp;y[i_end],&nbsp; 1, MPI_FLOAT, right, RtoL, MPI_COMM_WORLD, &amp;status);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; std::cout &lt;&lt; taskid &lt;&lt;&quot; Receiving from right task&nbsp;&nbsp; = &quot; &lt;&lt; right &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //printf(&quot;After Reduce task = %d yold = %f %f %f %f\n&quot;, taskid,yold[0], yold[1], yold[2], yold[3]);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //printf(&quot;After Reduce task = %d y = %f %f %f %f\n&quot;, taskid, y[0], y[1], y[2], y[3]);<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //printf(&quot;After Reduce task = %d v = %f %f %f %f\n&quot;, taskid, v[0], v[1], v[2], v[3]);<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float *tmp = y;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = yold;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yold = tmp;<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;if (taskid == 0) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //std::cout&lt;&lt; &quot;sum = &quot; &lt;&lt; gsum &lt;&lt; std::endl;<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( t % OVERSAMPLING == 0 ) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fwrite ( &amp;gsum, sizeof(float), 1, f );<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; }<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; if (taskid&nbsp; == 0) {<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fclose ( f );<o:p></o:p></p>
<p class="MsoNormal">&nbsp; &nbsp;&nbsp;}<o:p></o:p></p>
<p class="MsoNormal">&nbsp;&nbsp;&nbsp; MPI_Finalize();<o:p></o:p></p>
<p class="MsoNormal">}<o:p></o:p></p>
<p class="MsoNormal"><o:p>&nbsp;</o:p></p>
</div>
</body>
</html>


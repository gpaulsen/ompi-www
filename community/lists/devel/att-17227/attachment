<div dir="ltr">Hmmm... I saw that Mike closed the PR with reverting Nathan&#39;s commit and merged another one which contains just a small fix (<a href="https://github.com/open-mpi/ompi/pull/532">https://github.com/open-mpi/ompi/pull/532</a>). I asked Nathan to look at it and if he has no objections, it resolves the problem.<br><div class="gmail_extra"><br></div><div class="gmail_extra">Best regards,<br></div><div class="gmail_extra">Elena<br></div><div class="gmail_extra"><br><div class="gmail_quote">On Wed, Apr 15, 2015 at 6:36 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"><div style="word-wrap:break-word">Soooo….are you going to restore the rest of it? Or are we asking Nathan to refile it without that one piece?<div><br></div><div><br><div><blockquote type="cite"><div><div class="h5"><div>On Apr 15, 2015, at 7:26 AM, Elena Elkina &lt;<a href="mailto:elena.elkina@itseez.com" target="_blank">elena.elkina@itseez.com</a>&gt; wrote:</div><br></div></div><div><div><div class="h5"><div dir="ltr"><div><div>Hi Ralph. <br><br>We don&#39;t need to revert the whole commit, just to fix this small part. I proposed a fast fix for that in the PR but probably we need to fix it more intellectually.<br><br></div>Best regards,<br></div>Elena<br></div><div class="gmail_extra"><br><div class="gmail_quote">On Wed, Apr 15, 2015 at 6:08 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">I’m really puzzled - I saw where you fixed the one part of this commit that caused a problem for you. But what happened to the rest of it? Was it really necessary to revert the entire thing, or was it only that piece that caused a problem?<br>
<br>
<br>
&gt; On Apr 15, 2015, at 5:41 AM, <a href="mailto:gitdub@crest.iu.edu" target="_blank">gitdub@crest.iu.edu</a> wrote:<br>
&gt;<br>
&gt; This is an automated email from the git hooks/post-receive script. It was<br>
&gt; generated because a ref change was pushed to the repository containing<br>
&gt; the project &quot;open-mpi/ompi&quot;.<br>
&gt;<br>
&gt; The branch, revert-520-valgrind_cleanness has been created<br>
&gt;        at  7a8a4a0c945f1918094caf57bca62cf1f263bfba (commit)<br>
&gt;<br>
&gt; - Log -----------------------------------------------------------------<br>
&gt; <a href="https://github.com/open-mpi/ompi/commit/7a8a4a0c945f1918094caf57bca62cf1f263bfba" target="_blank">https://github.com/open-mpi/ompi/commit/7a8a4a0c945f1918094caf57bca62cf1f263bfba</a><br>
&gt;<br>
&gt; commit 7a8a4a0c945f1918094caf57bca62cf1f263bfba<br>
&gt; Author: Mike Dubman &lt;<a href="mailto:miked@mellanox.com" target="_blank">miked@mellanox.com</a>&gt;<br>
&gt; Date:   Wed Apr 15 15:41:27 2015 +0300<br>
&gt;<br>
&gt;    Revert &quot;fix memory leaks and valgrind errors&quot;<br>
&gt;<br>
&gt; diff --git a/ompi/mpi/tool/finalize.c b/ompi/mpi/tool/finalize.c<br>
&gt; index 38a0ce3..7efec79 100644<br>
&gt; --- a/ompi/mpi/tool/finalize.c<br>
&gt; +++ b/ompi/mpi/tool/finalize.c<br>
&gt; @@ -37,15 +37,6 @@ int MPI_T_finalize (void)<br>
&gt;<br>
&gt;     if (0 == --mpit_init_count) {<br>
&gt;         (void) ompi_info_close_components ();<br>
&gt; -<br>
&gt; -        if ((!ompi_mpi_initialized || ompi_mpi_finalized) &amp;&amp;<br>
&gt; -            (NULL != ompi_mpi_main_thread)) {<br>
&gt; -            /* we are not between MPI_Init and MPI_Finalize so we<br>
&gt; -             * have to free the ompi_mpi_main_thread */<br>
&gt; -            OBJ_RELEASE(ompi_mpi_main_thread);<br>
&gt; -            ompi_mpi_main_thread = NULL;<br>
&gt; -        }<br>
&gt; -<br>
&gt;         (void) opal_finalize_util ();<br>
&gt;     }<br>
&gt;<br>
&gt; diff --git a/ompi/runtime/ompi_mpi_init.c b/ompi/runtime/ompi_mpi_init.c<br>
&gt; index 81fef2a..dbc800b 100644<br>
&gt; --- a/ompi/runtime/ompi_mpi_init.c<br>
&gt; +++ b/ompi/runtime/ompi_mpi_init.c<br>
&gt; @@ -1,4 +1,3 @@<br>
&gt; -/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */<br>
&gt; /*<br>
&gt;  * Copyright (c) 2004-2010 The Trustees of Indiana University and Indiana<br>
&gt;  *                         University Research and Technology<br>
&gt; @@ -11,7 +10,7 @@<br>
&gt;  * Copyright (c) 2004-2005 The Regents of the University of California.<br>
&gt;  *                         All rights reserved.<br>
&gt;  * Copyright (c) 2006-2014 Cisco Systems, Inc.  All rights reserved.<br>
&gt; - * Copyright (c) 2006-2015 Los Alamos National Security, LLC.  All rights<br>
&gt; + * Copyright (c) 2006-2013 Los Alamos National Security, LLC.  All rights<br>
&gt;  *                         reserved.<br>
&gt;  * Copyright (c) 2006-2009 University of Houston. All rights reserved.<br>
&gt;  * Copyright (c) 2008-2009 Sun Microsystems, Inc.  All rights reserved.<br>
&gt; @@ -343,10 +342,7 @@ void ompi_mpi_thread_level(int requested, int *provided)<br>
&gt;             ompi_mpi_thread_provided = *provided = requested;<br>
&gt;         }<br>
&gt;     }<br>
&gt; -<br>
&gt; -    if (!ompi_mpi_main_thread) {<br>
&gt; -        ompi_mpi_main_thread = opal_thread_get_self();<br>
&gt; -    }<br>
&gt; +    ompi_mpi_main_thread = opal_thread_get_self();<br>
&gt;<br>
&gt;     ompi_mpi_thread_multiple = (ompi_mpi_thread_provided ==<br>
&gt;                                 MPI_THREAD_MULTIPLE);<br>
&gt; diff --git a/opal/mca/base/mca_base_var.c b/opal/mca/base/mca_base_var.c<br>
&gt; index fe6a87e..67511f3 100644<br>
&gt; --- a/opal/mca/base/mca_base_var.c<br>
&gt; +++ b/opal/mca/base/mca_base_var.c<br>
&gt; @@ -67,8 +67,7 @@ static char *mca_base_var_file_prefix = NULL;<br>
&gt; static char *mca_base_envar_file_prefix = NULL;<br>
&gt; static char *mca_base_param_file_path = NULL;<br>
&gt; static char *mca_base_env_list = NULL;<br>
&gt; -#define MCA_BASE_ENV_LIST_SEP_DEFAULT &quot;;&quot;<br>
&gt; -static char *mca_base_env_list_sep = MCA_BASE_ENV_LIST_SEP_DEFAULT;<br>
&gt; +static char *mca_base_env_list_sep = &quot;;&quot;;<br>
&gt; static char *mca_base_env_list_internal = NULL;<br>
&gt; static bool mca_base_var_suppress_override_warning = false;<br>
&gt; static opal_list_t mca_base_var_file_values;<br>
&gt; @@ -274,8 +273,6 @@ int mca_base_var_init(void)<br>
&gt;                                      &quot;Set SHELL env variables&quot;,<br>
&gt;                                      MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0, OPAL_INFO_LVL_3,<br>
&gt;                                      MCA_BASE_VAR_SCOPE_READONLY, &amp;mca_base_env_list);<br>
&gt; -<br>
&gt; -        mca_base_env_list_sep = MCA_BASE_ENV_LIST_SEP_DEFAULT;<br>
&gt;         (void)mca_base_var_register (&quot;opal&quot;, &quot;mca&quot;, &quot;base&quot;, &quot;env_list_delimiter&quot;,<br>
&gt;                                      &quot;Set SHELL env variables delimiter. Default: semicolon &#39;;&#39;&quot;,<br>
&gt;                                      MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0, OPAL_INFO_LVL_3,<br>
&gt; @@ -433,7 +430,6 @@ static int mca_base_var_cache_files(bool rel_path_search)<br>
&gt;     if (OPAL_SUCCESS != ret) {<br>
&gt;         return ret;<br>
&gt;     }<br>
&gt; -<br>
&gt;     mca_base_envar_files = strdup(mca_base_var_files);<br>
&gt;<br>
&gt;     (void) mca_base_var_register_synonym (ret, &quot;opal&quot;, &quot;mca&quot;, NULL, &quot;param_files&quot;,<br>
&gt; @@ -1135,15 +1131,11 @@ int mca_base_var_finalize(void)<br>
&gt;         if (NULL != mca_base_var_file_list) {<br>
&gt;             opal_argv_free(mca_base_var_file_list);<br>
&gt;         }<br>
&gt; -        mca_base_var_file_list = NULL;<br>
&gt;<br>
&gt;         (void) mca_base_var_group_finalize ();<br>
&gt;         (void) mca_base_pvar_finalize ();<br>
&gt;<br>
&gt;         OBJ_DESTRUCT(&amp;mca_base_var_index_hash);<br>
&gt; -<br>
&gt; -        free (mca_base_envar_files);<br>
&gt; -        mca_base_envar_files = NULL;<br>
&gt;     }<br>
&gt;<br>
&gt;     /* All done */<br>
&gt; @@ -1249,31 +1241,15 @@ static int fixup_files(char **file_list, char * path, bool rel_path_search, char<br>
&gt;<br>
&gt; static int read_files(char *file_list, opal_list_t *file_values, char sep)<br>
&gt; {<br>
&gt; -    char **tmp = opal_argv_split(file_list, sep);<br>
&gt; -    int i, count, ret;<br>
&gt; -<br>
&gt; -    if (!tmp) {<br>
&gt; -        return OPAL_ERR_OUT_OF_RESOURCE;<br>
&gt; -    }<br>
&gt; -<br>
&gt; -    if (mca_base_var_file_list) {<br>
&gt; -        count = opal_argv_count (mca_base_var_file_list);<br>
&gt; -        ret = opal_argv_insert (&amp;mca_base_var_file_list, count, tmp);<br>
&gt; -        if (OPAL_SUCCESS != ret) {<br>
&gt; -            return ret;<br>
&gt; -        }<br>
&gt; -<br>
&gt; -        opal_argv_free (tmp);<br>
&gt; -    } else {<br>
&gt; -        mca_base_var_file_list = tmp;<br>
&gt; -    }<br>
&gt; -<br>
&gt; -    count = opal_argv_count(mca_base_var_file_list);<br>
&gt; +    int i, count;<br>
&gt;<br>
&gt;     /* Iterate through all the files passed in -- read them in reverse<br>
&gt;        order so that we preserve unix/shell path-like semantics (i.e.,<br>
&gt;        the entries farthest to the left get precedence) */<br>
&gt;<br>
&gt; +    mca_base_var_file_list = opal_argv_split(file_list, sep);<br>
&gt; +    count = opal_argv_count(mca_base_var_file_list);<br>
&gt; +<br>
&gt;     for (i = count - 1; i &gt;= 0; --i) {<br>
&gt;         mca_base_parse_paramfile(mca_base_var_file_list[i], file_values);<br>
&gt;     }<br>
&gt; diff --git a/opal/mca/btl/vader/btl_vader_component.c b/opal/mca/btl/vader/btl_vader_component.c<br>
&gt; index 9363d47..e25035a 100644<br>
&gt; --- a/opal/mca/btl/vader/btl_vader_component.c<br>
&gt; +++ b/opal/mca/btl/vader/btl_vader_component.c<br>
&gt; @@ -209,7 +209,6 @@ static int mca_btl_vader_component_register (void)<br>
&gt;                                            &quot;single_copy_mechanism&quot;, &quot;Single copy mechanism to use (defaults to best available)&quot;,<br>
&gt;                                            MCA_BASE_VAR_TYPE_INT, new_enum, 0, MCA_BASE_VAR_FLAG_SETTABLE,<br>
&gt;                                            OPAL_INFO_LVL_3, MCA_BASE_VAR_SCOPE_GROUP, &amp;mca_btl_vader_component.single_copy_mechanism);<br>
&gt; -    OBJ_RELEASE(new_enum);<br>
&gt;<br>
&gt; #if OPAL_BTL_VADER_HAVE_KNEM<br>
&gt;     /* Currently disabling DMA mode by default; it&#39;s not clear that this is useful in all applications and architectures. */<br>
&gt; diff --git a/opal/mca/installdirs/base/installdirs_base_components.c b/opal/mca/installdirs/base/installdirs_base_components.c<br>
&gt; index 4ae3a0f..33a92db 100644<br>
&gt; --- a/opal/mca/installdirs/base/installdirs_base_components.c<br>
&gt; +++ b/opal/mca/installdirs/base/installdirs_base_components.c<br>
&gt; @@ -164,7 +164,6 @@ opal_installdirs_base_close(void)<br>
&gt;     free(opal_install_dirs.opaldatadir);<br>
&gt;     free(opal_install_dirs.opallibdir);<br>
&gt;     free(opal_install_dirs.opalincludedir);<br>
&gt; -    memset (&amp;opal_install_dirs, 0, sizeof (opal_install_dirs));<br>
&gt;<br>
&gt;     return mca_base_framework_components_close (&amp;opal_installdirs_base_framework, NULL);<br>
&gt; }<br>
&gt; diff --git a/opal/runtime/opal_finalize.c b/opal/runtime/opal_finalize.c<br>
&gt; index 5a12398..b6d67bd 100644<br>
&gt; --- a/opal/runtime/opal_finalize.c<br>
&gt; +++ b/opal/runtime/opal_finalize.c<br>
&gt; @@ -104,9 +104,6 @@ opal_finalize_util(void)<br>
&gt;     /* finalize the class/object system */<br>
&gt;     opal_class_finalize();<br>
&gt;<br>
&gt; -    free (opal_process_info.nodename);<br>
&gt; -    opal_process_info.nodename = NULL;<br>
&gt; -<br>
&gt;     return OPAL_SUCCESS;<br>
&gt; }<br>
&gt;<br>
&gt; diff --git a/opal/runtime/opal_init.c b/opal/runtime/opal_init.c<br>
&gt; index 7ae32a4..89d6600 100644<br>
&gt; --- a/opal/runtime/opal_init.c<br>
&gt; +++ b/opal/runtime/opal_init.c<br>
&gt; @@ -303,6 +303,11 @@ opal_init_util(int* pargc, char*** pargv)<br>
&gt;         goto return_error;<br>
&gt;     }<br>
&gt;<br>
&gt; +    if (OPAL_SUCCESS != (ret = opal_net_init())) {<br>
&gt; +        error = &quot;opal_net_init&quot;;<br>
&gt; +        goto return_error;<br>
&gt; +    }<br>
&gt; +<br>
&gt;     /* Setup the parameter system */<br>
&gt;     if (OPAL_SUCCESS != (ret = mca_base_var_init())) {<br>
&gt;         error = &quot;mca_base_var_init&quot;;<br>
&gt; @@ -315,11 +320,6 @@ opal_init_util(int* pargc, char*** pargv)<br>
&gt;         goto return_error;<br>
&gt;     }<br>
&gt;<br>
&gt; -    if (OPAL_SUCCESS != (ret = opal_net_init())) {<br>
&gt; -        error = &quot;opal_net_init&quot;;<br>
&gt; -        goto return_error;<br>
&gt; -    }<br>
&gt; -<br>
&gt;     /* pretty-print stack handlers */<br>
&gt;     if (OPAL_SUCCESS != (ret = opal_util_register_stackhandlers())) {<br>
&gt;         error = &quot;opal_util_register_stackhandlers&quot;;<br>
&gt; diff --git a/opal/runtime/opal_params.c b/opal/runtime/opal_params.c<br>
&gt; index ff28a0c..3b4d4a7 100644<br>
&gt; --- a/opal/runtime/opal_params.c<br>
&gt; +++ b/opal/runtime/opal_params.c<br>
&gt; @@ -231,7 +231,6 @@ int opal_register_params(void)<br>
&gt;     }<br>
&gt;<br>
&gt; #if OPAL_ENABLE_TIMING<br>
&gt; -    opal_timing_sync_file = NULL;<br>
&gt;     (void) mca_base_var_register (&quot;opal&quot;, &quot;opal&quot;, NULL, &quot;timing_sync_file&quot;,<br>
&gt;                                   &quot;Clock synchronisation information generated by mpisync tool. You don&#39;t need to touch this if you use mpirun_prof tool.&quot;,<br>
&gt;                                   MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0,<br>
&gt; @@ -241,14 +240,12 @@ int opal_register_params(void)<br>
&gt;         opal_output(0, &quot;Cannot read file %s containing clock synchronisation information\n&quot;, opal_timing_sync_file);<br>
&gt;     }<br>
&gt;<br>
&gt; -    opal_timing_output = NULL;<br>
&gt;     (void) mca_base_var_register (&quot;opal&quot;, &quot;opal&quot;, NULL, &quot;timing_output&quot;,<br>
&gt;                                   &quot;The name of output file for timing information. If this parameter is not set then output will be directed into OPAL debug channel.&quot;,<br>
&gt;                                   MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0,<br>
&gt;                                   OPAL_INFO_LVL_9, MCA_BASE_VAR_SCOPE_ALL,<br>
&gt;                                   &amp;opal_timing_output);<br>
&gt;<br>
&gt; -    opal_timing_overhead = true;<br>
&gt;     (void) mca_base_var_register (&quot;opal&quot;, &quot;opal&quot;, NULL, &quot;timing_overhead&quot;,<br>
&gt;                                   &quot;Timing framework introduce additional overhead (malloc&#39;s mostly).&quot;<br>
&gt;                                   &quot; The time spend in such costly routines is measured and may be accounted&quot;<br>
&gt; @@ -283,6 +280,9 @@ int opal_register_params(void)<br>
&gt;<br>
&gt; int opal_deregister_params(void)<br>
&gt; {<br>
&gt; +    opal_signal_string = NULL;<br>
&gt; +    opal_net_private_ipv4 = NULL;<br>
&gt; +    opal_set_max_sys_limits = NULL;<br>
&gt;     opal_register_done = false;<br>
&gt;<br>
&gt;     return OPAL_SUCCESS;<br>
&gt; diff --git a/orte/runtime/orte_init.c b/orte/runtime/orte_init.c<br>
&gt; index 678a66c..cc47927 100644<br>
&gt; --- a/orte/runtime/orte_init.c<br>
&gt; +++ b/orte/runtime/orte_init.c<br>
&gt; @@ -182,8 +182,7 @@ int orte_init(int* pargc, char*** pargv, orte_proc_type_t flags)<br>
&gt;     if (NULL != opal_process_info.nodename) {<br>
&gt;         free(opal_process_info.nodename);<br>
&gt;     }<br>
&gt; -    /* opal_finalize_util will call free on this pointer so set from strdup */<br>
&gt; -    opal_process_info.nodename = strdup (orte_process_info.nodename);<br>
&gt; +    opal_process_info.nodename = orte_process_info.nodename;<br>
&gt;<br>
&gt;     /* setup the dstore framework */<br>
&gt;     if (ORTE_SUCCESS != (ret = mca_base_framework_open(&amp;opal_dstore_base_framework, 0))) {<br>
&gt;<br>
&gt;<br>
&gt; -----------------------------------------------------------------------<br>
&gt;<br>
&gt;<br>
&gt; hooks/post-receive<br>
&gt; --<br>
&gt; open-mpi/ompi<br>
&gt; _______________________________________________<br>
&gt; ompi-commits mailing list<br>
&gt; <a href="mailto:ompi-commits@open-mpi.org" target="_blank">ompi-commits@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/ompi-commits" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/ompi-commits</a><br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/04/17224.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/04/17224.php</a></blockquote></div><br></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></div></div>Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/04/17225.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/04/17225.php</a></div></blockquote></div><br></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/04/17226.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/04/17226.php</a><br></blockquote></div><br></div></div>


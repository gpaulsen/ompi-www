<html><head><meta http-equiv="Content-Type" content="text/html charset=us-ascii"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; ">Absolutely it will hang as the collective object passed into any grpcomm operation (modex or barrier) is only allowed to be used once - any attempt to reuse it will fail.<div><br></div><div><br><div><div>On Dec 20, 2012, at 6:57 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com">victor.kocheganov@itseez.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite">
  

    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  
  <div text="#000000" bgcolor="#FFFFFF">
    <div class="moz-text-html" lang="x-unicode"> Hi.<br>
      <br>
      I have an issue with understanding&nbsp; <i>ompi_mpi_init() </i>logic.
      Could you please tell me if you have any guesses about following
      behavior.<br>
      <br>
      I wonder if I understand ringh, there is a block in <i>ompi_mpi_init()

      </i>function for exchanging procs information between processes
      (denote this block 'modex'):<br>
      <blockquote>&nbsp;&nbsp;&nbsp; coll = OBJ_NEW(orte_grpcomm_collective_t);<br>
        &nbsp;&nbsp;&nbsp; coll-&gt;id = orte_process_info.peer_modex;<br>
        &nbsp;&nbsp;&nbsp; if (ORTE_SUCCESS != (ret = orte_grpcomm.modex(coll))) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = "orte_grpcomm_modex failed";<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; /* wait for modex to complete - this may be moved anywhere
        in mpi_init<br>
        &nbsp;&nbsp;&nbsp;&nbsp; * so long as it occurs prior to calling a function that
        needs<br>
        &nbsp;&nbsp;&nbsp;&nbsp; * the modex info!<br>
        &nbsp;&nbsp;&nbsp;&nbsp; */<br>
        &nbsp;&nbsp;&nbsp; while (coll-&gt;active) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opal_progress();&nbsp; /* block in progress pending events */<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; OBJ_RELEASE(coll);<br>
      </blockquote>
      and several instructions after this there is a block for processes
      synchronization (denote this block 'barrier'):<br>
      <blockquote>&nbsp;&nbsp;&nbsp; coll = OBJ_NEW(orte_grpcomm_collective_t);<br>
        &nbsp;&nbsp;&nbsp; coll-&gt;id = orte_process_info.peer_init_barrier;<br>
        &nbsp;&nbsp;&nbsp; if (ORTE_SUCCESS != (ret = orte_grpcomm.barrier(coll))) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = "orte_grpcomm_barrier failed";<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; /* wait for barrier to complete */<br>
        &nbsp;&nbsp;&nbsp; while (coll-&gt;active) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opal_progress();&nbsp; /* block in progress pending events */<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; OBJ_RELEASE(coll);<br>
      </blockquote>
      So,<i> </i>initially<i> </i><i>ompi_mpi_init()</i> has following
      structure:<br>
      <blockquote>...<br>
        'modex' block;<br>
        ...<br>
        'barrier' block;<br>
        ...<br>
      </blockquote>
      I made several experiments with this code and the following one is
      of interest: if I add sequence of two additional blocks, 'barrier'
      and 'modex', right after 'modex' block, then<i> </i><i>ompi_mpi_init()

      </i>hangs in <i>opal_progress()</i> of the last 'modex' block.<br>
      <blockquote>...<br>
        'modex' block;<br>
        'barrier' block;<br>
        'modex' block; &lt;- hangs<br>
        ...<br>
        'barrier' block;<br>
        ...<br>
      </blockquote>
      Thanks,<br>
      Victor Kocheganov.<br>
    </div>
  </div>

_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/devel</blockquote></div><br></div></body></html>

<html><head><meta http-equiv="Content-Type" content="text/html charset=us-ascii"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"><br><div><div>On Jul 18, 2014, at 8:25 AM, Gilles Gouaillardet &lt;<a href="mailto:gilles.gouaillardet@gmail.com">gilles.gouaillardet@gmail.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><div dir="ltr">+1 for the overall idea !<div class="gmail_extra"><br><div class="gmail_quote">On Fri, Jul 18, 2014 at 10:17 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">
<div style="word-wrap:break-word"><div class=""><blockquote type="cite">* add an OBJ_CLASS_DEREGISTER and require that all instantiations be matched by deregister at close of the framework/component that instanced it. Of course, that requires that we protect the class system against someone releasing/deconstructing an object after the class was deregistered since we don't know who might be using that class outside of where it was created.<br>
<br></blockquote></div></div></blockquote><div>my understanding is that in theory, we already have an issue and fortunatly, we do not hit it :</div><div>let's consider a framework/component that instanciate a class (OBJ_CLASS_INSTANCE) *with a destructor*, allocate an object of this class (OBJ_NEW) and expects "someone else" will free it (OBJ_RELEASE)</div>
<div>if this framework/component ends up in a dynamic library that is dlclose'd when the framework/component is no more used, then OBJ_RELEASE will try to call the destructor which is no more accessible (since the lib was dlclose'd)</div></div></div></div></blockquote><div><br></div>FWIW: Intel has hit that exact scenario in our testing and got a glorious segv out of it. We now have an assert for NULL in the base object macro's to warn us to fix it (which I can provide for review if we want to include it in our repo).</div><div><br><blockquote type="cite"><div dir="ltr"><div class="gmail_extra"><div class="gmail_quote">
<div><br></div><div>i could not experience such a scenario yet, and of course, this does not mean there is no problem. i experienced a "kind of" similar situation described in&nbsp;<a href="http://www.open-mpi.org/community/lists/devel/2014/06/14937.php">http://www.open-mpi.org/community/lists/devel/2014/06/14937.php</a></div>
<div><br></div><div>back to OBJ_CLASS_DEREGISTER, what about an OBJ_CLASS_REGISTER in order to make this symmetric and easier to debug ?</div><div><br></div><div>currently, OBJ_CLASS_REGISTER is "implied" the first time an object of a given class is allocated. from opal_obj_new :</div>
<div>if (0 == cls-&gt;cls_initialized) opal_class_initialize(cls);</div><div><br></div><div>that could be replaced by an error if 0 == cls-&gt;cls_initialized</div><div>and OBJ_CLASS_REGISTER would simply call opal_class_initialize</div></div></div></div></blockquote><div><br></div>It would make sense, though I guess I always thought that was part of what happened in OBJ_CLASS_INSTANCE - guess I was wrong. My thinking was that DEREGISTER would be the counter to INSTANCE, and I do want to keep this from getting even more clunky - so maybe renaming INSTANCE to be REGISTER and completing the initialization inside it would be the way to go. Or renaming DEREGISTER to something more obviously the counter to INSTANCE?</div><div><br></div><div><br></div><div><blockquote type="cite"><div dir="ltr"><div class="gmail_extra"><div class="gmail_quote">
<div><br></div><div>of course, this change could be implemented only when compiled</div><div>with OPAL_ENABLE_DEBUG</div><div><br></div><div>Cheers,</div><div><br></div><div>Gilles</div></div></div></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>Subscription: http://www.open-mpi.org/mailman/listinfo.cgi/devel<br>Link to this post: http://www.open-mpi.org/community/lists/devel/2014/07/15196.php</blockquote></div><br></body></html>

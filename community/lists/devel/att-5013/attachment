<HTML>
<HEAD>
<TITLE>Re: [OMPI devel] BTL move - the notion</TITLE>
</HEAD>
<BODY>
<FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>&gt; <BR>
&gt; On 12/5/08 6:49 AM, &quot;Terry D. Dontje&quot; &lt;<a href="Terry.Dontje@Sun.COM">Terry.Dontje@Sun.COM</a>&gt; wrote:<BR>
&gt; <BR>
&gt; Richard Graham wrote:<BR>
&gt; &gt; Let me start the e-mail conversation, and see how far we get.<BR>
&gt; &gt;<BR>
&gt; &gt; Goal: The goal several of us have is to be able to use the btl&#8218;&Auml;&ocirc;s<BR>
&gt; &gt; outside of the MPI layer in Open MPI. The layer itself is generic, w/o<BR>
&gt; &gt; specific knowledge of Upper Level Protocols, so is well suited for<BR>
&gt; &gt; this sort of use.<BR>
&gt; &gt;<BR>
&gt; &gt; Technical Approach: What we have suggested is to start the process<BR>
&gt; &gt; with the Open MPI code base, and make it independent of the mpi-layer<BR>
&gt; &gt; (which it is now), and the run-time layer.<BR>
&gt; &gt;<BR>
&gt; &gt; Before we get into any specific technical details,<BR>
&gt; &gt; the first question I have is are people totally opposed to the notion<BR>
&gt; &gt; of making the btl&#8218;&Auml;&ocirc;s independent of MPI and the run-time ?<BR>
&gt; &gt; This does not mean that it can&#8218;&Auml;&ocirc;t be used by it, but that there are<BR>
&gt; &gt; well defined abstraction layers, i.e., are people against the goal in<BR>
&gt; &gt; the first place ?<BR>
&gt; &gt;<BR>
&gt; I am not against the idea of separating the BTLs out from OMPI. However,<BR>
&gt; it would help to know what we are really trying to accomplish this and<BR>
&gt; why using MPI is a non-starter. Is the issue to heavyweight of a<BR>
&gt; protocol or is it the infrastructure. I guess one question I have is if<BR>
&gt; we separate BTLs from OMPI do we lose valuable information needed to<BR>
&gt; establish and maintain the connections and could we run into some<BR>
&gt; chicken/egg problems. I assume the last issue is only of concern if we<BR>
&gt; remove the orte/opal dependencies.<BR>
<BR>
Not quite sure about the MPI question. &nbsp;The btl's are ULP neutral communications<BR>
primitives (by design), and we want to re-use these outside MPI. &nbsp;Run-time<BR>
(actually for FT in MPI), and other ULP's.<BR>
So OPAL dependencies will be maintained as these are what give us the portability<BR>
layer. &nbsp;What needs to be a bit more generic is how these are used by ULP's, and<BR>
specifically issues revolving around indexing. &nbsp;I am guessing that these are<BR>
issues that will come up when addressing how to use other run-times in the context<BR>
of OMPI.<BR>
<BR>
&gt; What are alternative suggestions to the technical approach ?<BR>
&gt; The technical approach is really the implementation logistics, right?<BR>
&gt; That is how do we apply these changes to the trunk such that they get in<BR>
&gt; asap as to not require significant ongoing maintenance by the<BR>
&gt; implementors and not disturb the community members that are doing other<BR>
&gt; work.<BR>
<BR>
Yes. &nbsp;First, I am advocating a phased approach, to minimize disruption to the<BR>
trunk. &nbsp;The first phase is renaming structures, and moving them in the code tree.<BR>
The second is moving the btl and supporting code (mpools, rcache, allocator, ?,<BR>
and have already gotten feedback that should consider moving the bml, which is<BR>
very reasonable) to a new location in the code tree. &nbsp;These, I expect, should<BR>
touch a lot of code, but it either compiles or it does not. &nbsp;No data structure<BR>
changes or any other such changes will be made at this stage.<BR>
<BR>
The final phase is removing any dependencies on other layers. &nbsp;At this stage<BR>
all I can think of is the notifier, but I am not doing the work, so there<BR>
could be other changes. &nbsp;Here we need to talk as a community on how to best<BR>
do this. &nbsp;It is clear that we need the notifier in this layer, and maybe we use<BR>
an approach that Ralph has suggested and use #defines.<BR>
At this stage I do foresee the need to make a change to the btl's, for general<BR>
use - we need to add attributes that tell us if a given btl can bootstrap itself,<BR>
and if forked processes can also use this btl in the children.<BR>
<BR>
The larger changes I was concerned about I think have more to do with enabling<BR>
other run-time support within the ompi code base, and these will be addressed<BR>
in a separate track, as Jeff has suggested. &nbsp;This is where I expect larger changes<BR>
within ompi, but this has more to do with ompi than will others being able<BR>
to use the btl's.<BR>
<BR>
&gt; <BR>
&gt; Branch and patch - protects the community members the most until it<BR>
&gt; comes to the flag day of pushing the patch. But as you mention below<BR>
&gt; this has a heavy cost on the implementors and eventually a potentially<BR>
&gt; large blackout period.<BR>
&gt; <BR>
&gt; Incremental approach - If we believe this project will be large I<BR>
&gt; success we try and map out all the different pieces and try and figure<BR>
&gt; out ways we can compartmentalize each piece such that they can be<BR>
&gt; putback separately from each other. This is similar to the branch and<BR>
&gt; patch approach except we try and do several patchs that each can be<BR>
&gt; reasonably tested and putback separate from the others. The hope is that<BR>
&gt; each patch is not that large and thus easier for the implementors to<BR>
&gt; maintain and merge. But this will require a more thought out plan as to<BR>
&gt; how things are done which might be detrimental to any agile development.<BR>
&gt; <BR>
&gt; Scorched earth - Map a calendar time frame that we say from X to Y the<BR>
&gt; trunk will be under major renovation to move out the BTLs from OMPI.<BR>
&gt; This help the BTL movement developers but could put any other<BR>
&gt; development at risk. It also commits us completely to doing the BTL<BR>
&gt; separation so if things start falling a part it will definitely delay<BR>
&gt; the next release.<BR>
&gt; <BR>
&gt; I personally prefer the Incremental Approach but we will need to have a<BR>
&gt; very well thought out plan to get this to work. This approach could<BR>
&gt; devolve into the other two approaches without careful planning, which I<BR>
&gt; don't believe anyone would really like to to see.<BR>
<BR>
Same here. &nbsp;The goal is to keep the trunk fully functioning at all time,<BR>
also from a performance perspective.<BR>
<BR>
Rich<BR>
<BR>
&gt; <BR>
&gt; HTH,<BR>
&gt; <BR>
&gt; --td<BR>
&gt; &gt; One suggestion has been to branch and patch. To me this is a long-term<BR>
&gt; &gt; maintenance nightmare.<BR>
&gt; &gt;<BR>
&gt; What are peoples thoughts here ?<BR>
&gt; &gt;<BR>
&gt; &gt; Rich<BR>
&gt; &gt;<BR>
&gt; &gt; ------------------------------------------------------------------------<BR>
&gt; &gt;<BR>
&gt; &gt; _______________________________________________<BR>
&gt; &gt; devel mailing list<BR>
&gt; &gt; <a href="devel@open-mpi.org">devel@open-mpi.org</a><BR>
&gt; &gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><BR>
&gt; &gt; &nbsp;<BR>
&gt; <BR>
&gt; _______________________________________________<BR>
&gt; devel mailing list<BR>
&gt; <a href="devel@open-mpi.org">devel@open-mpi.org</a><BR>
&gt; <BR>
<BR>
</SPAN></FONT>
</BODY>
</HTML>



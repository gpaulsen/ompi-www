<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=us-ascii">
<META NAME="Generator" CONTENT="MS Exchange Server version 6.0.6619.12">
<TITLE>Re: [OMPI devel] Fwd: lsf support / farm use models </TITLE>
</HEAD>
<BODY>
<!-- Converted from text/rtf format -->
<BR>

<P><FONT SIZE=2 FACE="Courier New">&gt; there appear to be some overlaps between the ls_* and lsb_* functions, </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; but they seem basically compatible as far as i can tell. almost all </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; the functions have a command line version as well, for example: </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; lsb_submit()/bsub </FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Like openmpi and orte, there are two layers in LSF.&nbsp; The ls_* API's</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; talk to what is/was historically called &quot;LSF Base&quot; and the lsb_* API's</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; talk to what is/was historically called &quot;LSF Batch&quot;.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; The ls_* API's are essentially &quot;do it now&quot; type functionality for</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; writing distributed applications that do not require batch functionality.</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; The ls_* functions do not honour any batch allocation or policy in</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; any shapre </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp;</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; lsb_getalloc()/none and lsb_launch()/blaunch are new with LSF 7.0, but </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; appear to just be a different (simpler) interface to existing </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; functionality in the LSB_* env vars and the ls_rexec()/lsgrun commands </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; -- although, as you say, perhaps platform will hook or enhance them </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; later. but, the key issue is that lsb_launch() just starts tasks -- it </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; does not perform or interact with the queue or job control (much?). </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; so, you can't use these functions to get an allocation in the first </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; place, and you have to be careful not to use them as a way around the </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; queuing system. </FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; ls_* api's do not honour a batch allocation, while lsb_launch does.</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; lsb_launch will only allow you to start tasks on nodes allocated to</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; your jobs, and is subject to all the queue/job controls.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; ls_rexec/lsgrun are not used to start batch jobs</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; In pre-7.0, the method for starting openmpi is essentially:</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; $bsub -n N -a openmpi mpirun.lsf a.out</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Note that you only have the openmpi method and mpirun.lsf if you have</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; installed the hpc extensions.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&gt; [ as a side note, the function ls_rexecv()/lsgrun is the one i have </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; heard admins do not like because it can break queuing/accounting, and </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; might try to disable somehow. i don't really buy that, because it's </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; not you can disable it and have the system still work, since (as </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; above) || job launching depends on it. i guess if you really don't </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; care about || launching maybe you could. but, if used properly after a </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; proper allocation i don't think there should (or even can) be a </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; problem. ] </FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Job launching does not depend on it; and admins can explicitly</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; turn off support for ls_rexec/lsgrun while allowing lsb_launch to </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; continue to function -- thus ensuring that tasks of any form can only</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; be started on nodes allocated to the job.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&gt; so, lsb_submit()/bsub is a combination allocate/launch -- you specify </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; the allocation size you want, and when it's all ready, it runs the </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; 'job' (really the job launcher) only on one (randomly chosen) 'head' </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; node from the allocation, with the env vars set so the launcher can </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; use ls_rexec/lsgrun functions to start the rest of the job. there are </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; of course various script wrappers you can use (mpijob, pvmjob, etc) </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; instead of your 'real job'. then, i think lsf *should* try to track </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; what processes get started via the wrapper / head process so it knows </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; they are part of the same job. i dunno if it really does that -- but, </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; my guess is that at the least it assumes the allocation is in use </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; until the original process ends. in any case, the wrapper / head </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; process examines the environment vars and uses ls_rexec()/lsgrun or </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; the like to actually run N copies of the 'real job' executable. in </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; 7.0, it can conveniently use lsb_getalloc() and lsb_launch(), but that </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; doesn't really change any semantics as far as i know. one could </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; imaging that calling lsb_launch() instead of ls_rexec() might be </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; preferable from a process tracking point of view, but i don't see why </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; Platform couldn't hook ls_rexec() just as well as lsb_launch(). </FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; ls_rexec does not honour batch semantics.&nbsp; Prior to LSF7 there is</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; an additional parallel application manager that is started when the</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; -a openmpi option is specified.&nbsp; It handles I/O marshalling, signaling</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; and task accounting for the complete parallel job across all nodes.</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; In LSF7, this functionaly has been embedded directly into the RES daemon</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; and is invoked when lsb_launch is used.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; yes you could use ls_rexec but it does not handle the I/O and process</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; marshalling - you need to handle that yourself if you use ls_rexec.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; The first node is node random, it is the &quot;best&quot; match within the allocation</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; based on the resource requirements for the job</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Since you are refering to the mpijob/pvmjob scripts I would guess</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; you do not have the HPC extensions installed, as these are fairly</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; simplistic wrappers that don't make use of the parallel application</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; manager.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&gt; there is also an lsb_runjob() that is similar to lsb_launch(), but for </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; an already submitted job. so, if one were to lsb_sumbit() with an </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; option set to never launch it automatically, and then one were to run </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; lsb_runjob(), you can avoid the queue and/or force the use of certain </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; hosts? i guess this is also not a good function to use, but at least </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; the queuing system would be aware of any bad behavior (queue skipping </FONT>

<BR><FONT SIZE=2 FACE="Courier New">&gt; via ls_placereq() to get extra hosts, for instance) in this case ... </FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Not really - lsb_runjob() is essentially an admin function to force</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; a job to run irrespective of the current policies/priorities/allocations.</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; Unless you have administrator privs it will fail.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; As for growing or shrinking the allocation for a job, that is on the</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; the roadmap for the near future.&nbsp; However, as Jeff has previously</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; mentioned, on a busy system you could end up waiting for a long time</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; to get additional nodes.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Essentially it boils down to make an asynchronous request for additional</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; resources and registering a callback for when something can be allocated.</FONT>
</P>

<P><FONT SIZE=2 FACE="Courier New">&nbsp; Regards,</FONT>

<BR><FONT SIZE=2 FACE="Courier New">&nbsp; Bill</FONT>
</P>
<BR>

<P><FONT SIZE=2 FACE="Courier New">-------------</FONT>

<BR><FONT SIZE=2 FACE="Courier New">Bill McMillan</FONT>

<BR><FONT SIZE=2 FACE="Courier New">Principal Technical Product Manager</FONT>

<BR><FONT SIZE=2 FACE="Courier New">Platform Computing</FONT>
</P>
<BR>

</BODY>
</HTML>

<div dir="ltr">Hi Rafael,<div><br></div><div>I give you an A+ for effort.   We always appreciate patches.</div><div><br></div><div>Howard</div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">2015-04-22 12:43 GMT-06:00 Nathan Hjelm <span dir="ltr">&lt;<a href="mailto:hjelmn@lanl.gov" target="_blank">hjelmn@lanl.gov</a>&gt;</span>:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
Umm, why are you cleaning up this way. The allocated resources *should*<br>
be freed by the udcm_module_finalize call. If there is a bug in that<br>
path it should be fixed there NOT by adding a bunch of gotos (ick).<br>
<br>
I will take a look now and apply the appropriate fix.<br>
<br>
-Nathan<br>
<br>
On Wed, Apr 22, 2015 at 04:55:57PM +0200, Raphaël Fouassier wrote:<br>
&gt; We are experiencing a bug in OpenMPI in 1.8.4 which happens also on<br>
&gt; master: if locked memory limits are too low, a segfault happens<br>
&gt; in openib/udcm because some memory is not correctly deallocated.<br>
&gt;<br>
&gt; To reproduce it, modify /etc/security/limits.conf with:<br>
&gt; * soft memlock 64<br>
&gt; * hard memlock 64<br>
&gt; and launch with mpirun (not in a slurm allocation).<br>
&gt;<br>
&gt;<br>
&gt; I propose 2 patches for 1.8.4 and master (because of the btl move to<br>
&gt; opal) which:<br>
&gt; - free all allocated ressources<br>
&gt; - print the limits error<br>
&gt;<br>
<br>
&gt; diff --git a/ompi/mca/btl/openib/connect/btl_openib_connect_udcm.c b/ompi/mca/btl/openib/connect/btl_openib_connect_udcm.c<br>
&gt; index 19753a9..b222274 100644<br>
&gt; --- a/ompi/mca/btl/openib/connect/btl_openib_connect_udcm.c<br>
&gt; +++ b/ompi/mca/btl/openib/connect/btl_openib_connect_udcm.c<br>
&gt; @@ -5,6 +5,7 @@<br>
&gt;   * Copyright (c) 2009      IBM Corporation.  All rights reserved.<br>
&gt;   * Copyright (c) 2011-2014 Los Alamos National Security, LLC.  All rights<br>
&gt;   *                         reserved.<br>
&gt; + * Copyright (c) 2015      Bull SAS. All rights reserved.<br>
&gt;   *<br>
&gt;   * $COPYRIGHT$<br>
&gt;   *<br>
&gt; @@ -460,6 +461,8 @@ static int udcm_component_query(mca_btl_openib_module_t *btl,<br>
&gt;<br>
&gt;          rc = udcm_module_init (m, btl);<br>
&gt;          if (OMPI_SUCCESS != rc) {<br>
&gt; +            free(m);<br>
&gt; +            m = NULL;<br>
&gt;              break;<br>
&gt;          }<br>
&gt;<br>
&gt; @@ -536,9 +539,19 @@ static int udcm_endpoint_finalize(struct mca_btl_base_endpoint_t *lcl_ep)<br>
&gt;      return OMPI_SUCCESS;<br>
&gt;  }<br>
&gt;<br>
&gt; +static void *udcm_unmonitor(int fd, int flags, void *context)<br>
&gt; +{<br>
&gt; +    volatile int *barrier = (volatile int *)context;<br>
&gt; +<br>
&gt; +    *barrier = 1;<br>
&gt; +<br>
&gt; +    return NULL;<br>
&gt; +}<br>
&gt; +<br>
&gt;  static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;  {<br>
&gt;      int rc = OMPI_ERR_NOT_SUPPORTED;<br>
&gt; +    volatile int barrier = 0;<br>
&gt;<br>
&gt;      BTL_VERBOSE((&quot;created cpc module %p for btl %p&quot;,<br>
&gt;                   (void*)m, (void*)btl));<br>
&gt; @@ -549,7 +562,7 @@ static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;      m-&gt;cm_channel = ibv_create_comp_channel (btl-&gt;device-&gt;ib_dev_context);<br>
&gt;      if (NULL == m-&gt;cm_channel) {<br>
&gt;          BTL_VERBOSE((&quot;error creating ud completion channel&quot;));<br>
&gt; -        return OMPI_ERR_NOT_SUPPORTED;<br>
&gt; +        goto out;<br>
&gt;      }<br>
&gt;<br>
&gt;      /* Create completion queues */<br>
&gt; @@ -558,29 +571,33 @@ static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;                                     m-&gt;cm_channel, 0);<br>
&gt;      if (NULL == m-&gt;cm_recv_cq) {<br>
&gt;          BTL_VERBOSE((&quot;error creating ud recv completion queue&quot;));<br>
&gt; -        return OMPI_ERR_NOT_SUPPORTED;<br>
&gt; +        mca_btl_openib_show_init_error(__FILE__, __LINE__, &quot;ibv_create_cq&quot;,<br>
&gt; +                                       ibv_get_device_name(btl-&gt;device-&gt;ib_dev));<br>
&gt; +        goto out1;<br>
&gt;      }<br>
&gt;<br>
&gt;      m-&gt;cm_send_cq = ibv_create_cq (btl-&gt;device-&gt;ib_dev_context,<br>
&gt;                                     UDCM_SEND_CQ_SIZE, NULL, NULL, 0);<br>
&gt;      if (NULL == m-&gt;cm_send_cq) {<br>
&gt;          BTL_VERBOSE((&quot;error creating ud send completion queue&quot;));<br>
&gt; -        return OMPI_ERR_NOT_SUPPORTED;<br>
&gt; +        mca_btl_openib_show_init_error(__FILE__, __LINE__, &quot;ibv_create_cq&quot;,<br>
&gt; +                                       ibv_get_device_name(btl-&gt;device-&gt;ib_dev));<br>
&gt; +        goto out2;<br>
&gt;      }<br>
&gt;<br>
&gt;      if (0 != (rc = udcm_module_allocate_buffers (m))) {<br>
&gt;          BTL_VERBOSE((&quot;error allocating cm buffers&quot;));<br>
&gt; -        return rc;<br>
&gt; +        goto out3;<br>
&gt;      }<br>
&gt;<br>
&gt;      if (0 != (rc = udcm_module_create_listen_qp (m))) {<br>
&gt;          BTL_VERBOSE((&quot;error creating UD QP&quot;));<br>
&gt; -        return rc;<br>
&gt; +        goto out4;<br>
&gt;      }<br>
&gt;<br>
&gt;      if (0 != (rc = udcm_module_post_all_recvs (m))) {<br>
&gt;          BTL_VERBOSE((&quot;error posting receives&quot;));<br>
&gt; -        return rc;<br>
&gt; +        goto out5;<br>
&gt;      }<br>
&gt;<br>
&gt;      /* UD CM initialized properly.  So fill in the rest of the CPC<br>
&gt; @@ -633,12 +650,41 @@ static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;      /* Finally, request CQ notification */<br>
&gt;      if (0 != ibv_req_notify_cq (m-&gt;cm_recv_cq, 0)) {<br>
&gt;          BTL_VERBOSE((&quot;error requesting recv completions&quot;));<br>
&gt; -        return OMPI_ERROR;<br>
&gt; +        rc = OMPI_ERROR;<br>
&gt; +        goto out6;<br>
&gt;      }<br>
&gt;<br>
&gt;      /* Ready to use */<br>
&gt;<br>
&gt;      return OMPI_SUCCESS;<br>
&gt; +<br>
&gt; +    out6:<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_timeout_lock);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;flying_messages);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_recv_msg_queue_lock);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_recv_msg_queue);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_send_lock);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_lock);<br>
&gt; +<br>
&gt; +        m-&gt;channel_monitored = false;<br>
&gt; +<br>
&gt; +        ompi_btl_openib_fd_unmonitor(m-&gt;cm_channel-&gt;fd,<br>
&gt; +                                     udcm_unmonitor, (void *)&amp;barrier);<br>
&gt; +        while (0 == barrier) {<br>
&gt; +            sched_yield();<br>
&gt; +        }<br>
&gt; +    out5:<br>
&gt; +        udcm_module_destroy_listen_qp (m);<br>
&gt; +    out4:<br>
&gt; +        udcm_module_destroy_buffers (m);<br>
&gt; +    out3:<br>
&gt; +        ibv_destroy_cq (m-&gt;cm_send_cq);<br>
&gt; +    out2:<br>
&gt; +        ibv_destroy_cq (m-&gt;cm_recv_cq);<br>
&gt; +    out1:<br>
&gt; +        ibv_destroy_comp_channel (m-&gt;cm_channel);<br>
&gt; +    out:<br>
&gt; +        return rc;<br>
&gt;  }<br>
&gt;<br>
&gt;  static int<br>
&gt; @@ -691,15 +737,6 @@ udcm_module_start_connect(ompi_btl_openib_connect_base_module_t *cpc,<br>
&gt;      return rc;<br>
&gt;  }<br>
&gt;<br>
&gt; -static void *udcm_unmonitor(int fd, int flags, void *context)<br>
&gt; -{<br>
&gt; -    volatile int *barrier = (volatile int *)context;<br>
&gt; -<br>
&gt; -    *barrier = 1;<br>
&gt; -<br>
&gt; -    return NULL;<br>
&gt; -}<br>
&gt; -<br>
&gt;  static int udcm_module_finalize(mca_btl_openib_module_t *btl,<br>
&gt;                                  ompi_btl_openib_connect_base_module_t *cpc)<br>
&gt;  {<br>
<br>
&gt; diff --git a/opal/mca/btl/openib/connect/btl_openib_connect_udcm.c b/opal/mca/btl/openib/connect/btl_openib_connect_udcm.c<br>
&gt; index e0b8e80..eb4785a 100644<br>
&gt; --- a/opal/mca/btl/openib/connect/btl_openib_connect_udcm.c<br>
&gt; +++ b/opal/mca/btl/openib/connect/btl_openib_connect_udcm.c<br>
&gt; @@ -8,7 +8,7 @@<br>
&gt;   * Copyright (c) 2014-2015 Research Organization for Information Science<br>
&gt;   *                         and Technology (RIST). All rights reserved.<br>
&gt;   * Copyright (c) 2014      Intel, Inc. All rights reserved.<br>
&gt; - * Copyright (c) 2014      Bull SAS.  All rights reserved.<br>
&gt; + * Copyright (c) 2014-2015 Bull SAS.  All rights reserved.<br>
&gt;   *<br>
&gt;   * $COPYRIGHT$<br>
&gt;   *<br>
&gt; @@ -470,6 +470,8 @@ static int udcm_component_query(mca_btl_openib_module_t *btl,<br>
&gt;<br>
&gt;          rc = udcm_module_init (m, btl);<br>
&gt;          if (OPAL_SUCCESS != rc) {<br>
&gt; +            free(m);<br>
&gt; +            m = NULL;<br>
&gt;              break;<br>
&gt;          }<br>
&gt;<br>
&gt; @@ -646,9 +648,19 @@ static int udcm_endpoint_finalize(struct mca_btl_base_endpoint_t *lcl_ep)<br>
&gt;      return OPAL_SUCCESS;<br>
&gt;  }<br>
&gt;<br>
&gt; +static void *udcm_unmonitor(int fd, int flags, void *context)<br>
&gt; +{<br>
&gt; +    volatile int *barrier = (volatile int *)context;<br>
&gt; +<br>
&gt; +    *barrier = 1;<br>
&gt; +<br>
&gt; +    return NULL;<br>
&gt; +}<br>
&gt; +<br>
&gt;  static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;  {<br>
&gt;      int rc = OPAL_ERR_NOT_SUPPORTED;<br>
&gt; +    volatile int barrier = 0;<br>
&gt;<br>
&gt;      BTL_VERBOSE((&quot;created cpc module %p for btl %p&quot;,<br>
&gt;                   (void*)m, (void*)btl));<br>
&gt; @@ -659,7 +671,7 @@ static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;      m-&gt;cm_channel = ibv_create_comp_channel (btl-&gt;device-&gt;ib_dev_context);<br>
&gt;      if (NULL == m-&gt;cm_channel) {<br>
&gt;          BTL_VERBOSE((&quot;error creating ud completion channel&quot;));<br>
&gt; -        return OPAL_ERR_NOT_SUPPORTED;<br>
&gt; +        goto out;<br>
&gt;      }<br>
&gt;<br>
&gt;      /* Create completion queues */<br>
&gt; @@ -668,29 +680,33 @@ static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;                                     m-&gt;cm_channel, 0);<br>
&gt;      if (NULL == m-&gt;cm_recv_cq) {<br>
&gt;          BTL_VERBOSE((&quot;error creating ud recv completion queue&quot;));<br>
&gt; -        return OPAL_ERR_NOT_SUPPORTED;<br>
&gt; +        mca_btl_openib_show_init_error(__FILE__, __LINE__, &quot;ibv_create_cq&quot;,<br>
&gt; +                                       ibv_get_device_name(btl-&gt;device-&gt;ib_dev));<br>
&gt; +        goto out1;<br>
&gt;      }<br>
&gt;<br>
&gt;      m-&gt;cm_send_cq = ibv_create_cq (btl-&gt;device-&gt;ib_dev_context,<br>
&gt;                                     UDCM_SEND_CQ_SIZE, NULL, NULL, 0);<br>
&gt;      if (NULL == m-&gt;cm_send_cq) {<br>
&gt;          BTL_VERBOSE((&quot;error creating ud send completion queue&quot;));<br>
&gt; -        return OPAL_ERR_NOT_SUPPORTED;<br>
&gt; +        mca_btl_openib_show_init_error(__FILE__, __LINE__, &quot;ibv_create_cq&quot;,<br>
&gt; +                                       ibv_get_device_name(btl-&gt;device-&gt;ib_dev));<br>
&gt; +        goto out2;<br>
&gt;      }<br>
&gt;<br>
&gt;      if (0 != (rc = udcm_module_allocate_buffers (m))) {<br>
&gt;          BTL_VERBOSE((&quot;error allocating cm buffers&quot;));<br>
&gt; -        return rc;<br>
&gt; +        goto out3;<br>
&gt;      }<br>
&gt;<br>
&gt;      if (0 != (rc = udcm_module_create_listen_qp (m))) {<br>
&gt;          BTL_VERBOSE((&quot;error creating UD QP&quot;));<br>
&gt; -        return rc;<br>
&gt; +        goto out4;<br>
&gt;      }<br>
&gt;<br>
&gt;      if (0 != (rc = udcm_module_post_all_recvs (m))) {<br>
&gt;          BTL_VERBOSE((&quot;error posting receives&quot;));<br>
&gt; -        return rc;<br>
&gt; +        goto out5;<br>
&gt;      }<br>
&gt;<br>
&gt;      /* UD CM initialized properly.  So fill in the rest of the CPC<br>
&gt; @@ -743,12 +759,40 @@ static int udcm_module_init (udcm_module_t *m, mca_btl_openib_module_t *btl)<br>
&gt;      /* Finally, request CQ notification */<br>
&gt;      if (0 != ibv_req_notify_cq (m-&gt;cm_recv_cq, 0)) {<br>
&gt;          BTL_VERBOSE((&quot;error requesting recv completions&quot;));<br>
&gt; -        return OPAL_ERROR;<br>
&gt; +        rc = OPAL_ERROR;<br>
&gt; +        goto out6;<br>
&gt;      }<br>
&gt;<br>
&gt;      /* Ready to use */<br>
&gt;<br>
&gt;      return OPAL_SUCCESS;<br>
&gt; +<br>
&gt; +    out6:<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_timeout_lock);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;flying_messages);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_recv_msg_queue_lock);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_recv_msg_queue);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_send_lock);<br>
&gt; +        OBJ_DESTRUCT(&amp;m-&gt;cm_lock);<br>
&gt; +<br>
&gt; +        m-&gt;channel_monitored = false;<br>
&gt; +<br>
&gt; +        opal_btl_openib_fd_unmonitor(m-&gt;cm_channel-&gt;fd, udcm_unmonitor, (void *)&amp;barrier);<br>
&gt; +        while (0 == barrier) {<br>
&gt; +            sched_yield();<br>
&gt; +        }<br>
&gt; +    out5:<br>
&gt; +        udcm_module_destroy_listen_qp (m);<br>
&gt; +    out4:<br>
&gt; +        udcm_module_destroy_buffers (m);<br>
&gt; +    out3:<br>
&gt; +        ibv_destroy_cq (m-&gt;cm_send_cq);<br>
&gt; +    out2:<br>
&gt; +        ibv_destroy_cq (m-&gt;cm_recv_cq);<br>
&gt; +    out1:<br>
&gt; +        ibv_destroy_comp_channel (m-&gt;cm_channel);<br>
&gt; +    out:<br>
&gt; +        return rc;<br>
&gt;  }<br>
&gt;<br>
&gt;  static int<br>
&gt; @@ -801,15 +845,6 @@ udcm_module_start_connect(opal_btl_openib_connect_base_module_t *cpc,<br>
&gt;      return rc;<br>
&gt;  }<br>
&gt;<br>
&gt; -static void *udcm_unmonitor(int fd, int flags, void *context)<br>
&gt; -{<br>
&gt; -    volatile int *barrier = (volatile int *)context;<br>
&gt; -<br>
&gt; -    *barrier = 1;<br>
&gt; -<br>
&gt; -    return NULL;<br>
&gt; -}<br>
&gt; -<br>
&gt;  static int udcm_module_finalize(mca_btl_openib_module_t *btl,<br>
&gt;                                  opal_btl_openib_connect_base_module_t *cpc)<br>
&gt;  {<br>
<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/04/17305.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/04/17305.php</a><br>
<br>
<br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/04/17311.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/04/17311.php</a><br></blockquote></div><br></div>


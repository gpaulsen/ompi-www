<div dir="ltr"><div>Jeff,</div><div>I addressed your comments and it is in the trunk for 2 weeks already. I thought that you are in rush with hosting migration, so I didn&#39;t show up.</div><div>Current solution is not complete. I plan to return to it to implement continuous synchronisation as I will have the timeframe. However it should be definitely usable as is and I would be glad if anybody will find it useful. The framework is general and can be used to profile any subsystems.</div></div><div class="gmail_extra"><br><div class="gmail_quote">2014-09-18 20:09 GMT+07:00 Jeff Squyres (jsquyres) <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span>:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">I have a few comments:<br>
<br>
- This looks nice.  Thanks for the contribution.<br>
<br>
- I notice that the ORTE timing stuff is now a compile-time decision, not a run-time decision.  Do we care that we&#39;ve now taken away the ability for users to do timings in a production build?<br>
<br>
- &quot;clksync&quot; -- can we use &quot;clocksync&quot;?  It&#39;s only 2 letters.  We tend to use real words in the OMPI code base; unnecessary abbreviation should be avoided.<br>
<br>
- r32738 introduced a several files into the code base that have no copyrights, and do not have the standard OMPI copyright header block.  Please fix.<br>
<br>
- There&#39;s no documentation on how to use mpisync, mpirun_prof, or ompi_timing_post, even though they&#39;re installed when you --enable-timing.  What are these 3 executables?  Can we get man pages?<br>
<br>
- What&#39;s the purpose of the MCA param orte_rml_base_timing?  A *quick* look through the code seems to indicate that it is ignored.<br>
<br>
- What&#39;s the purpose of the MCA params opal_clksync_file, opal_timing_file, and opal_timing_overhead?  E.g., what is a &quot;clksync&quot; file, what is it for, and what is its format?  Does the user have to provide one?  If so, how to you get one?  Or is it an output file?  ...etc.  The brief descriptions given in the MCA help strings don&#39;t really provide enough information for someone who has no idea what the timing stuff is.  Also, can those 3 params have a common prefix?  I.e., it&#39;s not obvious that opal_clksync_file is related to opal_timing_* at all.<br>
<br>
- A *quick* look at ompi/tools/mpisync shows that a bunch of that code came from an external project.  Is the license compatible with OMPI&#39;s license?  What do we need to do to conform to their license?<br>
<br>
- opal/util/timings.h is protected by OPAL_SYS_TIMING_H -- shouldn&#39;t it be OPAL_UTIL_TIMINGS_H?<br>
<br>
- There&#39;s commented-out code in opal/util/timings.h.<br>
<br>
- There&#39;s no doxygen-style documentation in opal/util/timings.h to tell developers how to use it.<br>
<br>
- There&#39;s &quot;TODO&quot; comments in opal/util/timings.c; should those be fixed?<br>
<br>
- opal_config.h should be the first include in opal/util/timings.c.<br>
<br>
- If timing support is not to be compiled in, then opal/util/timings.c should not be be compiled via the Makefile.am (rather than entirely #if&#39;ed out).<br>
<br>
It looks like this work is about 95% complete.  Finishing the remaining 5% would make it great and genuinely useful to the rest of the code base.<br>
<br>
Thanks!<br>
<div><div class="h5"><br>
<br>
<br>
On Sep 16, 2014, at 10:20 AM, Artem Polyakov &lt;<a href="mailto:artpol84@gmail.com">artpol84@gmail.com</a>&gt; wrote:<br>
<br>
&gt; Hello,<br>
&gt;<br>
&gt; I would like to introduce OMPI timing framework that was included into the trunk yesterday (r32738). The code is new so if you&#39;ll hit some bugs - just let me know.<br>
&gt;<br>
&gt; The framework consists of the set of macro&#39;s and routines for internal OMPI usage + standalone tool mpisync and few additional scripts: mpirun_prof and ompi_timing_post. The set of features is very basic and I am open for discussion of new things that are desirable there.<br>
&gt;<br>
&gt; To enable framework compilation you should configure OMPI with --enable-timing option. If the option was passed to ./configure, standalone tools and scripts will be installed into &lt;prefix&gt;/bin.<br>
&gt;<br>
&gt; The timing code is located in OPAL (opal/utils/timing.[ch]). There is a set of macro&#39;s that should be used to preprocess out all mentions of the timing code in case it wasn&#39;t requested with --enable-timing:<br>
&gt; OPAL_TIMING_DECLARE(t) - declare timing handler structure with name &quot;t&quot;.<br>
&gt; OPAL_TIMING_DECLARE_EXT(x, t) - external declaration of a timing handler &quot;t&quot;.<br>
&gt; OPAL_TIMING_INIT(t) - initialize timing handler &quot;t&quot;<br>
&gt; OPAL_TIMING_EVENT(x) - printf-like event declaration similar to OPAL_OUTPUT.<br>
&gt; The information about the event will be quickly inserted into the linked list. Maximum event description is limited by OPAL_TIMING_DESCR_MAX.<br>
&gt; The malloc is performed in buckets (OPAL_TIMING_BUFSIZE at once) and overhead (time to malloc and prepare the bucket) is accounted in corresponding list element. It might be excluded from the timing results (controlled by OMPI_MCA_opal_timing_overhead parameter).<br>
&gt; OPAL_TIMING_REPORT(enable, t, prefix) - prepare and print out timing information. If OMPI_MCA_opal_timing_file was specified the output will go to that file. In other case the output will be directed using opal_output, each line will be prefixed with &quot;prefix&quot; to ease grep&#39;ing. &quot;enable&quot; is a boolean/integer variable that is used for runtime selection of what should be reported.<br>
&gt; OPAL_TIMING_RELEASE(t) - the counterpart for OPAL_TIMING_INIT.<br>
&gt;<br>
&gt; There are several examples in OMPI code. And here is another simple example:<br>
&gt;     OPAL_TIMING_DECLARE(tm);<br>
&gt;     OPAL_TIMING_INIT(&amp;tm);<br>
&gt;     ...<br>
&gt;     OPAL_TIMING_EVENT((&amp;tm,&quot;Begin of timing: %s&quot;, ORTE_NAME_PRINT(&amp;(peer-&gt;name)) ));<br>
&gt;     ....<br>
&gt;     OPAL_TIMING_EVENT((&amp;tm,&quot;Next timing event with condition x = %d&quot;, x ));<br>
&gt;     ...<br>
&gt;     OPAL_TIMING_EVENT((&amp;tm,&quot;Finish&quot;));<br>
&gt;     OPAL_TIMING_REPORT(enable_var, &amp;tm,&quot;MPI Init&quot;);<br>
&gt;     OPAL_TIMING_RELEASE(&amp;tm);<br>
&gt;<br>
&gt;<br>
&gt; An output from all OMPI processes (mpirun, orted&#39;s, user processes) is merged together. NTP provides 1 millisecond - 100 microsecond level of precision. This may not be sufficient to order events globally.<br>
&gt; To help developers extract the most realistic picture of what is going on, additional time synchronisation might be performed before profiling. The mpisync program should be runned 1-user-process-per-node to acquire the file with time offsets relative to HNP of each node. If the cluster runs over Gig Ethernet the precision will be 30-50 microseconds, in case of Infiniband - 4 microseconds. mpisync produces output file that might be readed and used by timing framework (OMPI_MCA_opal_clksync_file parameter). The bad news is that this synchronisation is not enough because of different clock skew on different nodes. Additional periodical synchronisation is needed. This is planned for the near future (me and Ralph discussing possible ways now).<br>
&gt;<br>
&gt; the mpirun_prof &amp; ompi_timing_post script may be used to automate clock synchronisation in following manner:<br>
&gt; export OMPI_MCA_ompi_timing=true<br>
&gt; export OMPI_MCA_orte_oob_timing=true<br>
&gt; export OMPI_MCA_orte_rml_timing=true<br>
&gt; export OMPI_MCA_opal_timing_file=timing.out<br>
&gt; mpirun_prof &lt;ompi-params&gt; ./mpiprog<br>
&gt; ompi_timing_post timing.out<br>
&gt;<br>
&gt; ompi_timing_post will simply sort the events and made all times to be relative to the first one.<br>
&gt;<br>
&gt; --<br>
&gt; С Уважением, Поляков Артем Юрьевич<br>
&gt; Best regards, Artem Y. Polyakov<br>
</div></div>&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/09/15837.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/09/15837.php</a><br>
<span class="HOEnZb"><font color="#888888"><br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/09/15869.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/09/15869.php</a></font></span></blockquote></div><br><br clear="all"><div><br></div>-- <br>С Уважением, Поляков Артем Юрьевич<br>Best regards, Artem Y. Polyakov
</div>


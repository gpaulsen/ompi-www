<html><head><meta http-equiv="Content-Type" content="text/html charset=us-ascii"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"><div>Hi George,</div><div><br></div><div>Having looked again you're correct about the two 2buf reductions being wrong. For now, I've updated my patch of nbc.c to copy buf1 into buf3 and then do buf3 OP= buf2 (see below).</div><div><br></div><div>Patching ompi_3buff_op_reduce to cope with user-defined operations is certainly possible, but I don't really understand the implications of doing that for the rest of the codebase (this is the first time I've looked at the internals of OpenMPI).</div><div><br></div><div>Best,</div><div>Rupert</div><div><br></div><div><div><span class="Apple-tab-span" style="white-space:pre">	</span>if (ompi_op_is_intrinsic(opargs.op)) {</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;/* This does buf3 = buf1 OP buf2 */</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;ompi_3buff_op_reduce(opargs.op, buf1, buf2, buf3, opargs.count, opargs.datatype);</div><div><span class="Apple-tab-span" style="white-space:pre">	</span>} else {</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;/* Copy buf1 -&gt; buf3 (if necessary)</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; * then do buf3 OP= buf2</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; * If the output is the same as the first input, we don't need to copy</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; * This only applies to the second if the operator commutes */</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;if (buf1 == buf3) {</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; &nbsp;ompi_op_reduce(opargs.op, buf2, buf3, opargs.count, opargs.datatype);</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;} else if (buf2 == buf3 &amp;&amp; ompi_op_is_commute(opargs.op)) {</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; &nbsp;ompi_op_reduce(opargs.op, buf1, buf3, opargs.count, opargs.datatype);</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;} else {</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; &nbsp;res = NBC_Copy(buf1, opargs.count, opargs.datatype, buf3, opargs.count, opargs.datatype, handle-&gt;comm);</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; &nbsp;if(res != NBC_OK) { printf("NBC_Copy() failed (code: %i)\n", res); ret=res; goto error; }</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp; &nbsp;ompi_op_reduce(opargs.op, buf2, buf3, opargs.count, opargs.datatype);</div><div><span class="Apple-tab-span" style="white-space:pre">	</span> &nbsp;}</div><div><span class="Apple-tab-span" style="white-space:pre">	</span>}</div></div><div><br></div><br><blockquote type="cite"><p style="font-family: verdana, arial, helvetica;">Rupert,&nbsp;<br></p><p style="font-family: verdana, arial, helvetica;">You are right, the code of any non-blocking reduce is not built with&nbsp;<br>user-level op in mind. However, I'm not sure about your patch. One&nbsp;<br>reason is that ompi_3buff is doing target = source1 op source2 while&nbsp;<br>&nbsp;&nbsp;&nbsp;ompi_2buf is doing target op= source (notice the op=)&nbsp;<br></p><p style="font-family: verdana, arial, helvetica;">Thus you can't replace ompi_3buff by 2 ompi_2buff because you&nbsp;<br>basically replace target = source1 op source2 by target op= source1 op&nbsp;<br>source2&nbsp;<br></p><p style="font-family: verdana, arial, helvetica;">Moreover, I much nicer solution will be to patch directly the&nbsp;<br>ompi_3buff_op_reduce function in op.h to fallback to a user defined&nbsp;<br>function when necessary.&nbsp;<br></p><p style="font-family: verdana, arial, helvetica;">&nbsp;&nbsp;George.&nbsp;</p></blockquote></body></html>

<div dir="ltr">SHARED is only supported when the pthread library does support spinlock, while in all other case it falls back into using atomic locks. Providing support only for a small fraction of environments without reporting errors or providing any alternative on other systems is difficult to accept.<div>
<br></div><div>I think I prefer your suggestion to integrate this with the atomic locks and provide a single mechanism to handle them. Regarding this do you think there will be a need to separate the spinlocks and the atomic locks?</div>
<div><br></div><div>  George.</div><div><br></div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Thu, Aug 14, 2014 at 11:40 AM, Dave Goodell (dgoodell) <span dir="ltr">&lt;<a href="mailto:dgoodell@cisco.com" target="_blank">dgoodell@cisco.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">WHAT: Add a new &quot;opal/threads/spinlock.h&quot; header to OPAL that will typically use the OS spinlock primitives if present.<br>

<br>
WHY: opal_mutex_t is too slow for some use cases and opal_atomic_lock_t is inefficiently implemented for most architectures<br>
<br>
WHEN: timeout is after next week&#39;s engineering call on Tuesday, 2014-08-19<br>
<br>
<br>
As discussed at the June developer meeting, I propose this patch to add spinlocks to OPAL.  There are at least a half dozen reasonable ways to implement spinlocks; which one is best will vary from platform to platform.  In general, the OS spinlock implementations are well tested and efficient.  We should usually be relying on those implementations instead of rolling our own.<br>

<br>
<br>
My primary criticism of this patch is that it muddies the waters a bit with opal_atomic_lock_t.  An alternative approach would be to spend some time working on improving the opal_atomic_lock_t implementation, but I have two concerns with this approach:<br>

<br>
1) It&#39;s very difficult for me to measure the potential performance impact of opal_atomic_lock_t modifications on all of the various platforms that we currently run on.  Adding this new implementation allows component maintainers to decide if and when to convert to using the new facility.<br>

<br>
2) There&#39;s a reasonable chance that I&#39;ll make a mistake.  Writing tests for this stuff helps to catch the really basic errors, but it doesn&#39;t help as much with the really subtle mistakes.<br>
<span class="HOEnZb"><font color="#888888"><br>
-Dave<br>
<br>
</font></span><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/08/15652.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/08/15652.php</a><br></blockquote></div><br></div>


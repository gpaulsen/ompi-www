Jeff,<div><br></div><div>this is not what I observed</div><div>(tcp btl, 2 to 4 nodes with one task per node, cutoff=0)</div><div>the add_procs of the tcp btl is invoked once with the 4 tasks.</div><div>I checked the sources and found cutoff only controls if the modex is invoked once for all at init, or on demand.</div><div><br></div><div>Cheers,</div><div><br></div><div>Gilles<br><br>On Monday, May 16, 2016, Jeff Squyres (jsquyres) &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">We changed the way BTL add_procs is invoked on master and v2.x for scalability reasons.<br>
<br>
In short: add_procs is only invoked the first time you talk to a given peer.  The cutoff switch is an override to that -- if the sizeof COMM_WORLD is less than the cutoff, we revert to the old behavior of calling add_procs for all procs.<br>
<br>
As for why one BTL would be chosen over another, be sure to look at not only the priority of the component/module, but also the exclusivity level.  In short, only BTLs with the same exclusivity level will be considered (e.g., this is how we exclude TCP when using HPC-class networks), and then the BTL modules with the highest priority will be used for a given peer.<br>
<br>
<br>
&gt; On May 16, 2016, at 7:19 AM, Gilles Gouaillardet &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;gilles.gouaillardet@gmail.com&#39;)">gilles.gouaillardet@gmail.com</a>&gt; wrote:<br>
&gt;<br>
&gt; it seems I misunderstood some things ...<br>
&gt;<br>
&gt; add_procs is always invoked, regardless the cutoff value.<br>
&gt; cutoff is used to retrieve processes info via the modex &quot;on demand&quot; vs at init time.<br>
&gt;<br>
&gt; Please someone correct me and/or elaborate if needed<br>
&gt;<br>
&gt; Cheers,<br>
&gt;<br>
&gt; Gilles<br>
&gt;<br>
&gt; On Monday, May 16, 2016, Gilles Gouaillardet &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;gilles@rist.or.jp&#39;)">gilles@rist.or.jp</a>&gt; wrote:<br>
&gt; i cannot reproduce this behavior.<br>
&gt;<br>
&gt; note mca_btl_tcp_add_procs is invoked once per tcp component (e.g. once per physical NIC)<br>
&gt;<br>
&gt; so you might want to explicitly select one nic<br>
&gt;<br>
&gt; mpirun --mca btl_tcp_if_include xxx ...<br>
&gt;<br>
&gt; my printf output are the same and regardless the mpi_add_procs_cutoff value<br>
&gt;<br>
&gt;<br>
&gt; Cheers,<br>
&gt;<br>
&gt;<br>
&gt; Gilles<br>
&gt; On 5/16/2016 12:22 AM, dpchoudh . wrote:<br>
&gt;&gt; Sorry, I accidentally pressed &#39;Send&#39; before I was done writing the last mail. What I wanted to ask was what is the parameter mpi_add_procs_cutoff and why adding it seems to make a difference in the code path but not in the end result of the program? How would it help me debug my problem?<br>
&gt;&gt;<br>
&gt;&gt; Thank you<br>
&gt;&gt; Durga<br>
&gt;&gt;<br>
&gt;&gt; The surgeon general advises you to eat right, exercise regularly and quit ageing.<br>
&gt;&gt;<br>
&gt;&gt; On Sun, May 15, 2016 at 11:17 AM, dpchoudh . &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;dpchoudh@gmail.com&#39;)">dpchoudh@gmail.com</a>&gt; wrote:<br>
&gt;&gt; Hello Gilles<br>
&gt;&gt;<br>
&gt;&gt; Setting -mca mpi_add_procs_cutoff 1024 indeed makes a difference to the output, as follows:<br>
&gt;&gt;<br>
&gt;&gt; With -mca mpi_add_procs_cutoff 1024:<br>
&gt;&gt; reachable =     0x1<br>
&gt;&gt; (Note that add_procs was called once and the value of &#39;reachable is correct&#39;)<br>
&gt;&gt;<br>
&gt;&gt; Without -mca mpi_add_procs_cutoff 1024<br>
&gt;&gt; reachable =     0x0<br>
&gt;&gt; reachable = NULL<br>
&gt;&gt; reachable = NULL<br>
&gt;&gt; (Note that add_procs() was caklled three times and the value of &#39;reachable&#39; seems wrong.<br>
&gt;&gt;<br>
&gt;&gt; The program does run correctly in either case. The program listing is as below (note that I have removed output from the program itself in the above reporting.)<br>
&gt;&gt;<br>
&gt;&gt; The code that prints &#39;reachable&#39; is as follows:<br>
&gt;&gt;<br>
&gt;&gt; if (reachable == NULL)<br>
&gt;&gt;     printf(&quot;reachable = NULL\n&quot;);<br>
&gt;&gt; else<br>
&gt;&gt; {<br>
&gt;&gt;     int i;<br>
&gt;&gt;     printf(&quot;reachable = &quot;);<br>
&gt;&gt;     for (i = 0; i &lt; reachable-&gt;array_size; i++)<br>
&gt;&gt;     printf(&quot;\t0x%llu&quot;, reachable-&gt;bitmap[i]);<br>
&gt;&gt;     printf(&quot;\n\n&quot;);<br>
&gt;&gt; }<br>
&gt;&gt; return OPAL_SUCCESS;<br>
&gt;&gt;<br>
&gt;&gt; And the code for the test program is as follows:<br>
&gt;&gt;<br>
&gt;&gt; #include &lt;mpi.h&gt;<br>
&gt;&gt; #include &lt;stdio.h&gt;<br>
&gt;&gt; #include &lt;string.h&gt;<br>
&gt;&gt; #include &lt;stdlib.h&gt;<br>
&gt;&gt;<br>
&gt;&gt; int main(int argc, char *argv[])<br>
&gt;&gt; {<br>
&gt;&gt;     int world_size, world_rank, name_len;<br>
&gt;&gt;     char hostname[MPI_MAX_PROCESSOR_NAME], buf[8];<br>
&gt;&gt;<br>
&gt;&gt;     MPI_Init(&amp;argc, &amp;argv);<br>
&gt;&gt;     MPI_Comm_size(MPI_COMM_WORLD, &amp;world_size);<br>
&gt;&gt;     MPI_Comm_rank(MPI_COMM_WORLD, &amp;world_rank);<br>
&gt;&gt;     MPI_Get_processor_name(hostname, &amp;name_len);<br>
&gt;&gt;     printf(&quot;Hello world from processor %s, rank %d out of %d processors\n&quot;, hostname, world_rank, world_size);<br>
&gt;&gt;     if (world_rank == 1)<br>
&gt;&gt;     {<br>
&gt;&gt;     MPI_Recv(buf, 6, MPI_CHAR, 0, 99, MPI_COMM_WORLD, MPI_STATUS_IGNORE);<br>
&gt;&gt;     printf(&quot;%s received %s, rank %d\n&quot;, hostname, buf, world_rank);<br>
&gt;&gt;     }<br>
&gt;&gt;     else<br>
&gt;&gt;     {<br>
&gt;&gt;     strcpy(buf, &quot;haha!&quot;);<br>
&gt;&gt;     MPI_Send(buf, 6, MPI_CHAR, 1, 99, MPI_COMM_WORLD);<br>
&gt;&gt;     printf(&quot;%s sent %s, rank %d\n&quot;, hostname, buf, world_rank);<br>
&gt;&gt;     }<br>
&gt;&gt;     MPI_Barrier(MPI_COMM_WORLD);<br>
&gt;&gt;     MPI_Finalize();<br>
&gt;&gt;     return 0;<br>
&gt;&gt; }<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; The surgeon general advises you to eat right, exercise regularly and quit ageing.<br>
&gt;&gt;<br>
&gt;&gt; On Sun, May 15, 2016 at 10:49 AM, Gilles Gouaillardet &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;gilles.gouaillardet@gmail.com&#39;)">gilles.gouaillardet@gmail.com</a>&gt; wrote:<br>
&gt;&gt; At first glance, that seems a bit odd...<br>
&gt;&gt; are you sure you correctly print the reachable bitmap ?<br>
&gt;&gt; I would suggest you add some instrumentation to understand what happens<br>
&gt;&gt; (e.g., printf before opal_bitmap_set_bit() and other places that prevent this from happening)<br>
&gt;&gt;<br>
&gt;&gt; one more thing ...<br>
&gt;&gt; now, master default behavior is<br>
&gt;&gt; mpirun --mca mpi_add_procs_cutoff 0 ...<br>
&gt;&gt; you might want to try<br>
&gt;&gt; mpirun --mca mpi_add_procs_cutoff 1024 ...<br>
&gt;&gt; and see if things make more sense.<br>
&gt;&gt; if it helps, and iirc, there is a parameter so a btl can report it does not support cutoff.<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; Cheers,<br>
&gt;&gt;<br>
&gt;&gt; Gilles<br>
&gt;&gt;<br>
&gt;&gt; On Sunday, May 15, 2016, dpchoudh . &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;dpchoudh@gmail.com&#39;)">dpchoudh@gmail.com</a>&gt; wrote:<br>
&gt;&gt; Hello Gilles<br>
&gt;&gt;<br>
&gt;&gt; Thanks for jumping in to help again. Actually, I had already tried some of your suggestions before asking for help.<br>
&gt;&gt;<br>
&gt;&gt; I have several interconnects that can run both openib and tcp BTL. To simplify things, I explicitly mentioned TCP:<br>
&gt;&gt;<br>
&gt;&gt; mpirun -np 2 -hostfile ~/hostfile -mca pml ob1 -mca btl self.tcp ./mpitest<br>
&gt;&gt;<br>
&gt;&gt; where mpitest is a small program that does MPI_Send()/MPI_Recv() on a small string, and then does an MPI_Barrier(). The program does work as expected.<br>
&gt;&gt;<br>
&gt;&gt; I put a printf on the last line of mca_tcp_add_procs() to print the value of &#39;reachable&#39;. What I saw was that the value was always 0 when it was invoked for Send()/Recv() and the pointer itself was NULL when invoked for Barrier()<br>
&gt;&gt;<br>
&gt;&gt; Next I looked at pml_ob1_add_procs(), where the call chain starts, and found that it initializes and passes an opal_bitmap_t reachable down the call chain, but the resulting value is not used later in the code (the memory is simply freed later).<br>
&gt;&gt;<br>
&gt;&gt; That, coupled with the fact that I am trying to imitate what the other BTL implementations are doing, yet in mca_bml_r2_endpoint_add_btl() by BTL is not being picked up, left me puzzled. Please note that the interconnect that I am developing for is on a different cluster (than where I ran the above test for TCP BTL.)<br>
&gt;&gt;<br>
&gt;&gt; Thanks again<br>
&gt;&gt; Durga<br>
&gt;&gt;<br>
&gt;&gt; The surgeon general advises you to eat right, exercise regularly and quit ageing.<br>
&gt;&gt;<br>
&gt;&gt; On Sun, May 15, 2016 at 10:20 AM, Gilles Gouaillardet &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;gilles.gouaillardet@gmail.com&#39;)">gilles.gouaillardet@gmail.com</a>&gt; wrote:<br>
&gt;&gt; did you check the add_procs callbacks ?<br>
&gt;&gt; (e.g. mca_btl_tcp_add_procs() for the tcp btl)<br>
&gt;&gt; this is where the reachable bitmap is set, and I guess this is what you are looking for.<br>
&gt;&gt;<br>
&gt;&gt; keep in mind that if several btl can be used, the one with the higher exclusivity is used<br>
&gt;&gt; (e.g. tcp is never used if openib is available)<br>
&gt;&gt; you can simply force your btl and self, and the ob1 pml, so you do not have to worry about other btl exclusivity.<br>
&gt;&gt;<br>
&gt;&gt; Cheers,<br>
&gt;&gt;<br>
&gt;&gt; Gilles<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; On Sunday, May 15, 2016, dpchoudh . &lt;<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;dpchoudh@gmail.com&#39;)">dpchoudh@gmail.com</a>&gt; wrote:<br>
&gt;&gt; Hello all<br>
&gt;&gt;<br>
&gt;&gt; I have been struggling with this issue for a while and figured it might be a good idea to ask for help.<br>
&gt;&gt;<br>
&gt;&gt; Where (in the code path) is the connectivity map created?<br>
&gt;&gt;<br>
&gt;&gt; I can see that it is *used* in mca_bml_r2_endpoint_add_btl(), but obviously I am not setting it up right, because this routine is not finding the BTL corresponding to my interconnect.<br>
&gt;&gt;<br>
&gt;&gt; Thanks in advance<br>
&gt;&gt; Durga<br>
&gt;&gt;<br>
&gt;&gt; The surgeon general advises you to eat right, exercise regularly and quit ageing.<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; devel mailing list<br>
&gt;&gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;devel@open-mpi.org&#39;)">devel@open-mpi.org</a><br>
&gt;&gt; Subscription: <a href="https://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">https://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2016/05/18975.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/05/18975.php</a><br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; devel mailing list<br>
&gt;&gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;devel@open-mpi.org&#39;)">devel@open-mpi.org</a><br>
&gt;&gt; Subscription: <a href="https://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">https://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2016/05/18977.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/05/18977.php</a><br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; devel mailing list<br>
&gt;&gt;<br>
&gt;&gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;devel@open-mpi.org&#39;)">devel@open-mpi.org</a><br>
&gt;&gt;<br>
&gt;&gt; Subscription:<br>
&gt;&gt; <a href="https://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">https://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt;<br>
&gt;&gt; Link to this post:<br>
&gt;&gt; <a href="http://www.open-mpi.org/community/lists/devel/2016/05/18979.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/05/18979.php</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;devel@open-mpi.org&#39;)">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="https://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">https://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2016/05/18981.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/05/18981.php</a><br>
<br>
<br>
--<br>
Jeff Squyres<br>
<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;jsquyres@cisco.com&#39;)">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;devel@open-mpi.org&#39;)">devel@open-mpi.org</a><br>
Subscription: <a href="https://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">https://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2016/05/18982.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/05/18982.php</a><br>
</blockquote></div>


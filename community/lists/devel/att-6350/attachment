<div dir="ltr"><div>Hi,</div><div>Proposed small patch to extend current rankfile syntax to be compliant with orte_hosts syntax</div><div>making it possible to claim relative hosts from the hostfile/scheduler</div><div>by using +n# hostname, where  0 &lt;= # &lt; np</div>
<div>ex:</div><div>cat ~/work/svn/hpc/dev/test/Rankfile/rankfile<br>rank 0=+n0 slot=0<br>rank 1=+n0 slot=1<br>rank 2=+n1 slot=2<br>rank 3=+n1 slot=1</div><div></div><div>for your review and blessing before I commit it to the trunk.</div>
<div>I also ask to add it to 1.3 branch.</div><div></div><div></div><div>thanks,</div><div>Lenny. <br><br><br></div><div>Index: orte/mca/rmaps/rank_file/help-rmaps_rank_file.txt<br>===================================================================<br>
--- orte/mca/rmaps/rank_file/help-rmaps_rank_file.txt   (revision 21529)<br>+++ orte/mca/rmaps/rank_file/help-rmaps_rank_file.txt   (working copy)<br>@@ -56,6 +56,9 @@<br> Please review your rank-slot assignments and your host allocation to ensure<br>
 a proper match.<br><br>+[bad-index]<br>+Rankfile claimed host %s by index that is bigger than number of allocated hosts.<br>+<br> [orte-rmaps-rf:alloc-error]<br> There are not enough slots available in the system to satisfy the %d slots<br>
 that were requested by the application:<br>Index: orte/mca/rmaps/rank_file/rmaps_rank_file_lex.h<br>===================================================================<br>--- orte/mca/rmaps/rank_file/rmaps_rank_file_lex.h      (revision 21529)<br>
+++ orte/mca/rmaps/rank_file/rmaps_rank_file_lex.h      (working copy)<br>@@ -75,6 +75,7 @@<br> #define ORTE_RANKFILE_NEWLINE        13<br> #define ORTE_RANKFILE_IPV6           14<br> #define ORTE_RANKFILE_SLOT           15<br>
+#define ORTE_RANKFILE_RELATIVE       16<br><br> #if defined(c_plusplus) || defined(__cplusplus)<br> }<br>Index: orte/mca/rmaps/rank_file/rmaps_rank_file.c<br>===================================================================<br>
--- orte/mca/rmaps/rank_file/rmaps_rank_file.c  (revision 21529)<br>+++ orte/mca/rmaps/rank_file/rmaps_rank_file.c  (working copy)<br>@@ -273,11 +273,11 @@<br>     orte_vpid_t total_procs;<br>     opal_list_t node_list;<br>
     opal_list_item_t *item;<br>-    orte_node_t *node, *nd;<br>+    orte_node_t *node, *nd, *root_node;<br>     orte_vpid_t rank, vpid_start;<br>     orte_std_cntr_t num_nodes, num_slots;<br>     orte_rmaps_rank_file_map_t *rfmap;<br>
-    orte_std_cntr_t slots_per_node;<br>+    orte_std_cntr_t slots_per_node, relative_index, tmp_cnt;<br>     int rc;<br><br>     /* convenience def */<br>@@ -411,7 +411,25 @@<br>                     0 == strcmp(nd-&gt;name, rfmap-&gt;node_name)) {<br>
                     node = nd;<br>                     break;<br>-                }<br>+                               } else if (NULL != rfmap-&gt;node_name &amp;&amp;<br>+                                               ((&#39;+&#39; == rfmap-&gt;node_name[0]) &amp;&amp;<br>
+                                               ((&#39;n&#39; == rfmap-&gt;node_name[1]) ||<br>+                                                (&#39;N&#39; == rfmap-&gt;node_name[1])))) {<br>+<br>+                                               relative_index=atoi(strtok(rfmap-&gt;node_name,&quot;+n&quot;));<br>
+                                               if ( relative_index &gt;= opal_list_get_size (&amp;node_list) || ( 0 &gt; relative_index)){<br>+                                                       orte_show_help(&quot;help-rmaps_rank_file.txt&quot;,&quot;bad-index&quot;, true,rfmap-&gt;node_name);<br>
+                                                       ORTE_ERROR_LOG(ORTE_ERR_BAD_PARAM);<br>+                                                       return ORTE_ERR_BAD_PARAM;<br>+                                               }<br>
+                                               root_node = (orte_node_t*) opal_list_get_first(&amp;node_list);<br>+                       for(tmp_cnt=0; tmp_cnt&lt;relative_index; tmp_cnt++) {<br>+                               root_node = (orte_node_t*) opal_list_get_next(root_node);<br>
+                       }<br>+                       node = root_node;<br>+                                               break;<br>+                               }<br>+<br>             }<br>             if (NULL == node) {<br>
                 orte_show_help(&quot;help-rmaps_rank_file.txt&quot;,&quot;bad-host&quot;, true, rfmap-&gt;node_name);<br>@@ -631,6 +649,7 @@<br>                     case ORTE_RANKFILE_IPV6:<br>                     case ORTE_RANKFILE_STRING:<br>
                     case ORTE_RANKFILE_INT:<br>+                    case ORTE_RANKFILE_RELATIVE:<br>                         if(ORTE_RANKFILE_INT == token) {<br>                             sprintf(buff,&quot;%d&quot;, orte_rmaps_rank_file_value.ival);<br>
                             value = buff;<br>Index: orte/mca/rmaps/rank_file/rmaps_rank_file_lex.l<br>===================================================================<br>--- orte/mca/rmaps/rank_file/rmaps_rank_file_lex.l      (revision 21529)<br>
+++ orte/mca/rmaps/rank_file/rmaps_rank_file_lex.l      (working copy)<br>@@ -111,6 +111,9 @@<br>                      orte_rmaps_rank_file_value.sval = yytext;<br>                      return ORTE_RANKFILE_HOSTNAME; }<br>
<br>+\+n[0-9]+           { orte_rmaps_rank_file_value.sval = yytext;<br>+                                        return ORTE_RANKFILE_RELATIVE; }<br>+<br> .                  { orte_rmaps_rank_file_value.sval = yytext;<br>
                      return ORTE_RANKFILE_ERROR; }<br><br></div><div> </div></div>


<HTML>
<HEAD>
<TITLE>Re: [OMPI devel] BTL move - the notion</TITLE>
</HEAD>
<BODY>
<BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>&gt; think we all agree that STCI and OMPI have different objectives and requirements. OMPI is facing the need to launch and operate at extreme scales by next summer, has received a lot of interest in having it report errors into various systems, etc. We don't have all the answers as to what will be necessary to meet these requirements, but indications so far are that tighter integration, not deeper abstraction, between the various layers will be needed. By that, I don't mean we will violate abstraction layers, but rather that the various layers need to work more as a tightly tuned instrument, with each layer operating based on a clear knowledge of how the other layers are functioning.<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'><BR>
OMPI and STCI are two different things together, and I have vested interest in both, and have no desire<BR>
to have either go south. &nbsp;You have a set of requirement at LANL which are<BR>
important, and we also have a set of requirement at ORNL, and as such we need to compromise on these<BR>
in the code base. &nbsp;We have MPI level goals, which will be accomplished in the OMPI code base, and<BR>
tools and other related goals that will be accomplished in other code bases.<BR>
We both have the need to function well at the high end, so have the same set<BR>
of goals there.<BR>
<BR>
&gt; <BR>
&gt; For example, for modex-less operations, the MPI/BTLs have to know that the RTE/OS will be providing certain information. This means that they don't have to go out and discover it themselves every time. Yes, we will leave that as the default behavior so that small and/or unmanaged clusters can operate, but we have to also introduce logic that can detect when we are utilizing this alternative capability and exploit it. While we are trying our best to avoid introducing RTE-like calls into the code, the fact is that we may well have to do so (we have already identified one btl that will definitely need to). It is simply too early to make the decision to cut that off now - we don't know what the long-term impacts of such a decision will be.<BR>
<BR>
This is where discussions will need to go both ways. &nbsp;Your changes also can impact us, and we need to agree<BR>
to those changes, just as much as you need to agree with the changes we are proposing. &nbsp;This is not a code<BR>
base focused on a single institution's requirements, and we all do our best (and I believe tend to<BR>
succeed) at helping meet all of our needs.<BR>
<BR>
&gt; <BR>
&gt; Finally, although I don't do much on the MPI layer, I am concerned about performance. I would tend to oppose any additional abstraction until we can measure the performance impact. Thus, I would like to see the BTL move done on a tmp branch (technology to branch up to the implementer - I don't care) so we can verify that it isn't hurting us in some unforeseeable manner.<BR>
<BR>
Agreed - at least for the last phase of what we are suggesting, but we can talk about this. &nbsp;I am a bit<BR>
confused about how the location of the source code has anything to do with how it performs at run-time.<BR>
At this stage we have said nothing about changing the way the btl works, just cosmetic things. &nbsp;When it<BR>
comes to enabling the use of stci with ompi, then these issues will come up, and need to be addressed<BR>
very carefully. &nbsp;To be honest, since we don't want to change the btl's (aside from add some attributes)<BR>
I don't expect this to be an issue, UNLESS we end up needing to change some data structures for abstraction<BR>
purposes. &nbsp;This is where we need to be very careful. &nbsp;If you look at what has happened with the btl's<BR>
(actually first the PTL's) historically, I have been one of the ones pushing hard for improved performance -<BR>
why would this change now ?<BR>
<BR>
&gt; <BR>
&gt; <BR>
&gt; So I guess my concerns really boil down to dealing with conflicting schedules and requirements, how to support multiple possibly competing groups that want to share one or more parts of our code base, and retaining an OMPI-first philosophy when it comes to what changes get made. My proposed solution is:<BR>
<BR>
This is the problem we face all the time, and on a regular basis we as a community do our best to help<BR>
each other out. &nbsp;This is one of the reasons 1.3 is as late as it is, and this is a good thing that will<BR>
continue as long as this is a community project.<BR>
<BR>
&gt; <BR>
&gt; 1. shift our repository to a technical solution that supports broader code sharing<BR>
&gt; <BR>
&gt; 2. have the non-OMPI groups access our code base via that technology. They can &quot;pull&quot; changes at will, subject to the licensing agreement. It is true that they may have to do some local editing if the change hits a spot where they have local mods to support their system, but both Hg and GIT are very good at handling this - much better than svn ever has been.<BR>
&gt; <BR>
&gt; 3. if there are minor mods required to make the BTL code area easier to share via the above methods, then we should explore and implement them. Certainly, renaming #define values would seem a no-brainer. I suspect there are other similar things that could be done. Removing orte/opal dependencies is more controversial and would need to thoroughly be examined.<BR>
&gt; <BR>
&gt; 4. OMPI decides what changes get made to its code base. We are polite about it and talk to the other groups to try and minimize impact, but ultimately we do what is best for OMPI, and send out notifications (perhaps a new mailing list specifically for that purpose) when changes occur. Note that this would have helped the Eclipse group enormously as otherwise they drown in the devel list trying to spot the changes.<BR>
<BR>
I don't see that anything else is being proposed. &nbsp;The emerging STCI community and the OMPI community are<BR>
not two non-overlapping groups, and run-time support we want to bring into OMPI is to support new<BR>
functionality. &nbsp;The main point is that this is not STCI vs. OMPI at all.<BR>
<BR>
Rich<BR>
<BR>
&gt; <BR>
&gt; My $0.0002 - hope it helps<BR>
&gt; Ralph<BR>
&gt; <BR>
&gt; <BR>
&gt; On Dec 4, 2008, at 6:00 PM, Richard Graham wrote:<BR>
&gt; <BR>
&gt; Let me start the e-mail conversation, and see how far we get.<BR>
&gt; <BR>
&gt; Goal: The goal several of us have is to be able to use the btl&#8218;&Auml;&ocirc;s outside of the MPI layer in Open MPI. &nbsp;The layer itself is generic, w/o specific knowledge of Upper Level Protocols, so is well suited for this sort of use.<BR>
&gt; <BR>
&gt; Technical Approach: What we have suggested is to start the process with the Open MPI code base, and make it independent of the mpi-layer (which it is now), and the run-time layer.<BR>
&gt; <BR>
&gt; Before we get into any specific technical details,<BR>
&gt; the first question I have is are people totally opposed to the notion of making the btl&#8218;&Auml;&ocirc;s independent of MPI and the run-time ?<BR>
&gt; This does not mean that it can&#8218;&Auml;&ocirc;t be used by it, but that there are well defined abstraction layers, i.e., are people against the goal in the first place ?<BR>
&gt; <BR>
&gt; What are alternative suggestions to the technical approach ?<BR>
&gt; <BR>
&gt; One suggestion has been to branch and patch. &nbsp;To me this is a long-term maintenance nightmare.<BR>
&gt; <BR>
&gt; What are peoples thoughts here ?<BR>
&gt; <BR>
&gt; Rich<BR>
&gt; <BR>
&gt; <BR>
&gt; _______________________________________________<BR>
&gt; devel mailing list<BR>
&gt; <a href="devel@open-mpi.org">devel@open-mpi.org</a><BR>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><BR>
&gt; <BR>
&gt; <BR>
&gt; &Ocirc;&oslash;&ordm;<BR>
&gt; _______________________________________________<BR>
&gt; devel mailing list<BR>
&gt; <a href="devel@open-mpi.org">devel@open-mpi.org</a><BR>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><BR>
&gt; <BR>
</SPAN></FONT>
</BODY>
</HTML>



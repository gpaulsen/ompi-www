<div dir="ltr">Lisandro,<div><br></div><div>You rely on a feature clearly prohibited by the MPI standard. Please read the entire section I pinpointed you to (8.7.1).</div><div><br></div><div>There are 2 key sentences in the section.</div>
<div><br></div><div>1. When MPI_FINALIZE is called, it will first execute the equivalent of an MPI_COMM_FREE on <span class="">MPI_COMM_SELF.</span></div><div><span class=""><br></span></div><div><span class="">2. </span>The freeing of <span class="">MPI_COMM_SELF </span>occurs before any other parts of MPI are affected. Thus, for example, calling MPI_FINALIZED will return <span class="">false </span>in any of these callback functions. Once done with <span class="">MPI_COMM_SELF</span>, the order and rest of the actions taken by MPI_FINALIZE is not specified. </div>
<div><br></div><div>Thus when MPI is calling the equivalent of MPI_COMM_FREE on your communicator, it is too late the MPI is already considered as finalized. Moreover, relying on MPI to cleanup your communicators is already bad habit, which is rightfully punished by Open MPI.</div>
<div><br></div><div>  George.</div><div><br></div><div><br></div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Tue, Aug 26, 2014 at 3:01 PM, Lisandro Dalcin <span dir="ltr">&lt;<a href="mailto:dalcinl@gmail.com" target="_blank">dalcinl@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div class="">On 26 August 2014 21:29, George Bosilca &lt;<a href="mailto:bosilca@icl.utk.edu">bosilca@icl.utk.edu</a>&gt; wrote:<br>

&gt; The MPI standard clearly states (in 8.7.1 Allowing User Functions at Process<br>
&gt; Termination) that the mechanism you describe is only allowed on<br>
&gt; MPI_COMM_SELF. The most relevant part starts at line 14.<br>
&gt;<br>
<br>
</div>IMHO, you are misinterpreting the standard. Please note that the<br>
&quot;callbacks&quot; I&#39;m talking about are the ones registered for freeing<br>
cached attributes, their invocation is tied to the lifetime of the MPI<br>
handle. The callbacks you are talking about are different kind of<br>
beasts, they are callbacks you what to run specifically at<br>
MPI_Finalize().<br>
<br>
Caching duplicated communicators is a key feature in many libraries.<br>
How do you propose to handle the deallocation of the duped<br>
communicators when COMM_WORLD is involved?<br>
<div class=""><br>
<br>
<br>
<br>
--<br>
Lisandro Dalcin<br>
============<br>
Research Scientist<br>
Computer, Electrical and Mathematical Sciences &amp; Engineering (CEMSE)<br>
Numerical Porous Media Center (NumPor)<br>
King Abdullah University of Science and Technology (KAUST)<br>
<a href="http://numpor.kaust.edu.sa/" target="_blank">http://numpor.kaust.edu.sa/</a><br>
<br>
4700 King Abdullah University of Science and Technology<br>
al-Khawarizmi Bldg (Bldg 1), Office # 4332<br>
Thuwal 23955-6900, Kingdom of Saudi Arabia<br>
<a href="http://www.kaust.edu.sa" target="_blank">http://www.kaust.edu.sa</a><br>
<br>
Office Phone: <a href="tel:%2B966%2012%20808-0459" value="+966128080459">+966 12 808-0459</a><br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div>Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/08/15718.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/08/15718.php</a><br>
</blockquote></div><br></div>


<div dir="ltr">Not really a bad exemple. It&#39;s a safety net, you release the object (which doesn&#39;t means you free it, but simply that you don&#39;t need it anymore in this particular context). You then set it to NULL to be sure you don&#39;t use it anymore in that particular block of code. As Gilles said an harmless overkill, that can save your life in same cases.<div><br></div><div>  George.</div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Thu, Feb 12, 2015 at 10:33 AM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">True - but to directly answer Adrian’s question:<br>
<br>
Setting the buffer to NULL is not necessary and definitely a bad example.<br>
<div><div class="h5"><br>
<br>
&gt; On Feb 12, 2015, at 3:01 AM, Gilles Gouaillardet &lt;<a href="mailto:gilles.gouaillardet@iferc.org">gilles.gouaillardet@iferc.org</a>&gt; wrote:<br>
&gt;<br>
&gt; Adrian,<br>
&gt;<br>
&gt; in the case of ompi/group/group_init.c, new_group = NULL is clearly an<br>
&gt; overkill,<br>
&gt; but there is nothing wrong with it :<br>
&gt; it can only be 1 when OBJ_RELEASE is invoked<br>
&gt; (and hence new_group is already NULL, so no need to NULLify it a second<br>
&gt; time)<br>
&gt;<br>
&gt; that being said some typing can also be saved by replacing goto<br>
&gt; error_exit; with return NULL;<br>
&gt;<br>
&gt; Cheers,<br>
&gt;<br>
&gt; Gilles<br>
&gt;<br>
&gt; On 2015/02/12 18:48, Adrian Reber wrote:<br>
&gt;&gt; I am not 100% sure I was understood correctly and I am also not sure I<br>
&gt;&gt; understand the discussion I triggered.<br>
&gt;&gt;<br>
&gt;&gt; Being not very familiar with the Open MPI code base I often look at<br>
&gt;&gt; other places in the code for examples how something can/could be done.<br>
&gt;&gt; Looking at different examples OBJ_RELEASE() I see at some places first a<br>
&gt;&gt; OBJ_RELEASE() and then the buffer is set to NULL.<br>
&gt;&gt;<br>
&gt;&gt; pcregrep -r -M  &#39;OBJ_RELEASE.*(\n|.).*=(\s)?NULL&#39; *<br>
&gt;&gt;<br>
&gt;&gt; [...]<br>
&gt;&gt; ompi/group/group_init.c:        OBJ_RELEASE (new_group);<br>
&gt;&gt;        new_group = NULL;<br>
&gt;&gt; ompi/group/group_init.c:        OBJ_RELEASE (new_group);<br>
&gt;&gt;        new_group = NULL;<br>
&gt;&gt; ompi/group/group_init.c:        OBJ_RELEASE(new_group);<br>
&gt;&gt;        new_group = NULL;<br>
&gt;&gt; ompi/group/group_init.c:            OBJ_RELEASE (new_group);<br>
&gt;&gt;            new_group = NULL;<br>
&gt;&gt; ompi/group/group_init.c:        OBJ_RELEASE(new_group);<br>
&gt;&gt;        new_group = NULL;<br>
&gt;&gt; ompi/group/group_init.c:        OBJ_RELEASE(new_group);<br>
&gt;&gt;        new_group = NULL;<br>
&gt;&gt; [... and many more ...]<br>
&gt;&gt;<br>
&gt;&gt; That was the reason I was looking at the definition of OBJ_RELEASE() and<br>
&gt;&gt; I saw it already does set the buffer to NULL. Manually setting it to<br>
&gt;&gt; NULL could theoretically lead to situation where memory is not correctly<br>
&gt;&gt; free&#39;d (I have not actually seen it).<br>
&gt;&gt;<br>
&gt;&gt; My question is more theoretically that setting the buffer to<br>
&gt;&gt; NULL is not necessary and a bad example?<br>
&gt;&gt;<br>
&gt;&gt;              Adrian<br>
&gt;&gt;<br>
&gt;&gt; On Thu, Feb 12, 2015 at 12:45:06AM -0800, Ralph Castain wrote:<br>
&gt;&gt;&gt; It would be good to know where you are seeing this - as was stated, the macro reduces the ref count and will NULL the pointer if and only if the ref count goes to zero. However, the code may set it to NULL for some other reason that relates to the later use of that particular variable.<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; If not used properly, however, it can lead to a memory leak. So it’s best that we (a) identify where this was done (I personally don’t recall having seen it), and (b) add comments to the code explaining why it explicitly sets the param to NULL (e.g., the object is tracked elsewhere and will later be free’d).<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; On Feb 12, 2015, at 12:09 AM, Adrian Reber &lt;<a href="mailto:adrian@lisas.de">adrian@lisas.de</a>&gt; wrote:<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; I was just curious as if I am calling<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; OBJ_RELEASE(buffer);<br>
&gt;&gt;&gt;&gt; buffer = NULL;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; on a buffer with an object count different to 1, the buffer is not free&#39;d<br>
&gt;&gt;&gt;&gt; but set to NULL. If I call it again the buffer is NULL and the original<br>
&gt;&gt;&gt;&gt; buffer will not be free&#39;d. Setting the buffer to NULL seems unnecessary.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; I have not seen this as a problem in the code I was just trying to<br>
&gt;&gt;&gt;&gt; understand if I have to call only<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; OBJ_RELEASE(buffer);<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; or<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; OBJ_RELEASE(buffer);<br>
&gt;&gt;&gt;&gt; buffer = NULL;<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; and for me the first variant seems to be the correct one.<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;            Adrian<br>
&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt; On Thu, Feb 12, 2015 at 04:58:02PM +0900, Gilles Gouaillardet wrote:<br>
&gt;&gt;&gt;&gt;&gt; Adrian,<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; opal_obj_update does not fail or success, it returns the new<br>
&gt;&gt;&gt;&gt;&gt; obj_reference_count.<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; can you point to one specific location in the code where you think it is<br>
&gt;&gt;&gt;&gt;&gt; wrong ?<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; OBJ_RELEASE(buffer)<br>
&gt;&gt;&gt;&gt;&gt; buffer = NULL;<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; could be written as<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; if (((opal_object_t *)buffer)-&gt;obj_reference_count == 1) {<br>
&gt;&gt;&gt;&gt;&gt;   OBJ_RELEASE(buffer);<br>
&gt;&gt;&gt;&gt;&gt; } else {<br>
&gt;&gt;&gt;&gt;&gt;   buffer = NULL;<br>
&gt;&gt;&gt;&gt;&gt; }<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; that would never ever set buffer to NULL twice, but would be wrong<br>
&gt;&gt;&gt;&gt;&gt; since there is no atomicity here<br>
&gt;&gt;&gt;&gt;&gt; /* that was for for the &quot;unnecessary&quot; part */<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; about the &quot;wrong&quot; part, why do you think the else branch is wrong ?<br>
&gt;&gt;&gt;&gt;&gt; /* i mean setting a pointer to NULL is not necessarily wrong */<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; Cheers,<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; Gilles<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt; On 2015/02/12 16:41, Adrian Reber wrote:<br>
&gt;&gt;&gt;&gt;&gt;&gt; At many places all over the code I see<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; OBJ_RELEASE(buffer)<br>
&gt;&gt;&gt;&gt;&gt;&gt; buffer = NULL;<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; Looking at the definition of OBJ_RELEASE() this seems unnecessary and<br>
&gt;&gt;&gt;&gt;&gt;&gt; wrong:<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; #define OBJ_RELEASE(object)                                             \<br>
&gt;&gt;&gt;&gt;&gt;&gt;   do {                                                                \<br>
&gt;&gt;&gt;&gt;&gt;&gt;       if (0 == opal_obj_update((opal_object_t *) (object), -1)) {     \<br>
&gt;&gt;&gt;&gt;&gt;&gt;           opal_obj_run_destructors((opal_object_t *) (object));       \<br>
&gt;&gt;&gt;&gt;&gt;&gt;           free(object);                                               \<br>
&gt;&gt;&gt;&gt;&gt;&gt;           object = NULL;                                              \<br>
&gt;&gt;&gt;&gt;&gt;&gt;       }                                                               \<br>
&gt;&gt;&gt;&gt;&gt;&gt;   } while (0)<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt; The object is set to NULL by the macro and only if the opal_obj_update() was<br>
&gt;&gt;&gt;&gt;&gt;&gt; successful. So it seems setting the buffer manually to NULL after OBJ_RELEASE()<br>
&gt;&gt;&gt;&gt;&gt;&gt; is unnecessary and if opal_obj_update() failed it also is wrong.<br>
&gt;&gt;&gt;&gt;&gt;&gt;<br>
&gt;&gt;&gt;&gt;&gt;&gt;          Adrian<br>
&gt;&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt;&gt;&gt;&gt; devel mailing list<br>
&gt;&gt;&gt;&gt;&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt;&gt;&gt;&gt;&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt;&gt;&gt;&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16970.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16970.php</a><br>
&gt;&gt;&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt;&gt;&gt; devel mailing list<br>
&gt;&gt;&gt;&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt;&gt;&gt;&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt;&gt;&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16971.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16971.php</a><br>
&gt;&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt;&gt; devel mailing list<br>
&gt;&gt;&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt;&gt;&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt;&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16972.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16972.php</a><br>
&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt; devel mailing list<br>
&gt;&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt;&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16973.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16973.php</a><br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; devel mailing list<br>
&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16974.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16974.php</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16976.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16976.php</a><br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div></div>Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/02/16977.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/02/16977.php</a></blockquote></div><br></div>


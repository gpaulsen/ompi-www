Index: open-mpi/opal/util/if.c
===================================================================
--- open-mpi/opal/util/if.c	(revision 13482)
+++ open-mpi/opal/util/if.c	(working copy)
@@ -477,7 +477,7 @@ int opal_ifnametoindex(const char* if_na
 
 
 /*
- *  Attempt to resolve the adddress as either a dotted decimal formated
+ *  Attempt to resolve the adddress as either a dotted decimal formatted
  *  string or a hostname and lookup corresponding interface.
  */
 
Index: open-mpi/opal/util/cmd_line.h
===================================================================
--- open-mpi/opal/util/cmd_line.h	(revision 13482)
+++ open-mpi/opal/util/cmd_line.h	(working copy)
@@ -35,7 +35,7 @@
  *
  * The "single dash" name is a multi-character name that only
  * requires a single dash.  This only exists to provide backwards
- * compatability for some well-known command line options in prior
+ * compatibility for some well-known command line options in prior
  * MPI implementations (e.g., "mpirun -np 3").  It should be used
  * sparingly.
  *
Index: open-mpi/opal/util/stacktrace.c
===================================================================
--- open-mpi/opal/util/stacktrace.c	(revision 13482)
+++ open-mpi/opal/util/stacktrace.c	(working copy)
@@ -51,7 +51,7 @@ static char stacktrace_hostname[64];
  * For Linux/Glibc, it then uses backtrace and backtrace_symbols
  * to figure the current stack and then prints that out to stdout.
  * Where available, the BSD libexecinfo is used to provide Linux/Glibc
- * compatable backtrace and backtrace_symbols functions.
+ * compatible backtrace and backtrace_symbols functions.
  * Yes, printf and malloc are not signal-safe per se, but should be 
  * on Linux?
  *
Index: open-mpi/contrib/nightly/ompi_cronjob.sh
===================================================================
--- open-mpi/contrib/nightly/ompi_cronjob.sh	(revision 13482)
+++ open-mpi/contrib/nightly/ompi_cronjob.sh	(working copy)
@@ -149,7 +149,7 @@ for MPI_DIR in `cat $SRCDIR/ompi-out-$ve
   dump $f "  export PATH=$MPI_DIR/bin:\$OLD_PATH"
   dump $f "  export LD_LIBRARY_PATH=$MPI_DIR/lib:\$OLD_LD_LIBRARY_PATH"
   dump $f "  rm -fr $HOME/ompi-tmp/openmpi-sessions-*"
-  # Start the orted deamon in a commonly accessible directory (/tmp is local to each node)
+  # Start the orted daemon in a commonly accessible directory (/tmp is local to each node)
   dump $f "  orted --tmpdir $HOME/ompi-tmp --seed --persistent --scope public"
   for j in `cat $SRCDIR/ompi-tests-out-$test_version.txt` ; do
     dump $f "    cd $j/bin"
Index: open-mpi/ompi/mca/btl/btl.h
===================================================================
--- open-mpi/ompi/mca/btl/btl.h	(revision 13482)
+++ open-mpi/ompi/mca/btl/btl.h	(working copy)
@@ -296,7 +296,7 @@ struct mca_btl_base_component_1_0_1_t {
 typedef struct mca_btl_base_component_1_0_1_t mca_btl_base_component_1_0_1_t;
 typedef struct mca_btl_base_component_1_0_1_t mca_btl_base_component_t;
 
-/* add the 1_0_0_t typedef for source compatability 
+/* add the 1_0_0_t typedef for source compatibility 
  *   we can do this safely because 1_0_0 components are the same as 
  *  1_0_1 components, the difference is in the btl module. 
  *  Fortunately the only difference in the module is an additional interface
Index: open-mpi/ompi/mca/btl/openib/btl_openib_mca.c
===================================================================
--- open-mpi/ompi/mca/btl/openib/btl_openib_mca.c	(revision 13482)
+++ open-mpi/ompi/mca/btl/openib/btl_openib_mca.c	(working copy)
@@ -239,7 +239,7 @@ int btl_openib_register_mca_params(void)
 
     /* JMS what is this? */
     CHECK(reg_int("ib_static_rate", "InfiniBand static rate "
-                  "(must be >= 0; defulat: %d)",
+                  "(must be >= 0; default: %d)",
                   0, &ival, REGINT_GE_ZERO));
     mca_btl_openib_component.ib_static_rate = (uint32_t) ival;
 
Index: open-mpi/ompi/mca/common/portals/common_portals.h
===================================================================
--- open-mpi/ompi/mca/common/portals/common_portals.h	(revision 13482)
+++ open-mpi/ompi/mca/common/portals/common_portals.h	(working copy)
@@ -84,9 +84,9 @@ int ompi_common_portals_register_mca(voi
 
 
 /**
- * Initialize compatability code
+ * Initialize compatibility code
  *
- * Initialize Portals compatability code.  A best effort is made to
+ * Initialize Portals compatibility code.  A best effort is made to
  * initialize Portals (with PtlInit() and PtlNIInit(), although this
  * may not be possible if use of the modex is required to setup the
  * network (as is the case with the utcp reference implementation).
Index: open-mpi/ompi/mca/coll/tuned/coll_tuned_allgather.c
===================================================================
--- open-mpi/ompi/mca/coll/tuned/coll_tuned_allgather.c	(revision 13482)
+++ open-mpi/ompi/mca/coll/tuned/coll_tuned_allgather.c	(working copy)
@@ -249,7 +249,7 @@ int ompi_coll_tuned_allgather_intra_bruc
  *
  *  TODO: Modify the algorithm to work with any number of nodes.
  *        We can modify code to use identical implementation like MPICH-2:
- *        - using recursive-halving algorith, at the end of each step, 
+ *        - using recursive-halving algorithm, at the end of each step, 
  *          determine if there are nodes who did not exchange their data in that
  *          step, and send them appropriate messages.
  */
Index: open-mpi/config/ompi_mca.m4
===================================================================
--- open-mpi/config/ompi_mca.m4	(revision 13482)
+++ open-mpi/config/ompi_mca.m4	(working copy)
@@ -837,7 +837,7 @@ AC_DEFUN([MCA_COMPONENT_BUILD_CHECK],[
         if test -f $component_path/.ompi_ignore ; then
             # If there is an ompi_ignore file, don't build
             # the component.  Note that this decision can be
-            # overriden by the unignore logic below.
+            # overridden by the unignore logic below.
             want_component=0
         fi
         if test -f $component_path/.ompi_unignore ; then
Index: open-mpi/doc/user/mca.tex
===================================================================
--- open-mpi/doc/user/mca.tex	(revision 13482)
+++ open-mpi/doc/user/mca.tex	(working copy)
@@ -335,7 +335,7 @@ As implied by the previous sections, mod
 either by examining (in order) user-specified parameters, run-time
 calculations, and compiled-in defaults.  The selection process
 involves a flexible negotitation phase which can be both tweaked and
-arbitrarily overriden by the user and system administrator.
+arbitrarily overridden by the user and system administrator.
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
Index: open-mpi/orte/mca/oob/base/oob_base_init.c
===================================================================
--- open-mpi/orte/mca/oob/base/oob_base_init.c	(revision 13482)
+++ open-mpi/orte/mca/oob/base/oob_base_init.c	(working copy)
@@ -243,7 +243,7 @@ int mca_oob_set_contact_info(const char*
 
 /**
 * Called to request the selected oob components to
-* register their address with the seed deamon.
+* register their address with the seed daemon.
 */
 
 int mca_oob_base_module_init(void)
Index: open-mpi/orte/mca/pls/bproc/pls_bproc.c
===================================================================
--- open-mpi/orte/mca/pls/bproc/pls_bproc.c	(revision 13482)
+++ open-mpi/orte/mca/pls/bproc/pls_bproc.c	(working copy)
@@ -1022,7 +1022,7 @@ cleanup:
  * The main bproc launcher. See pls_bproc.h for a high level overview of how
  * the bproc launching works.
  * Here we:
- * -# Launch the deamons on the backend nodes.
+ * -# Launch the daemons on the backend nodes.
  * -# The daemons setup files for io forwarding then connect back to us to
  *     tells us they are ready for the actual apps.
  * -# Launch the apps on the backend nodes

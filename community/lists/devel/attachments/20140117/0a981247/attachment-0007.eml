[From nobody Fri Jan 17 14:44:19 2014
Received: from gscodens03.cr.usgs.gov ([136.177.7.24])          by
	gscodenh01.cr.usgs.gov (Lotus Domino Release 8.5.3HF42) with ESMTP
	id 2012121416491850-645760 ; Fri, 14 Dec 2012 16:49:18 -0700 
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AgkDAIi6y1DPfpCJlGdsb2JhbABCA4NIu0EWDgEBAQEJCwkJFAUigh4BAQEEDwEIGgEFQA8CCxgJFggHCQMCAQIBCSsRBg0GAgEBiA+ePYpzAZNxBIxeEHqDLgOBIIdAiXaDM4VrjXGBTA
Received: from eu1sys200aog114.obsmtp.com ([207.126.144.137])  by
	gscodens03.cr.usgs.gov with ESMTP; 14 Dec 2012 16:49:17 -0700
Received: from beta.dmz-eu.st.com ([164.129.1.35]) (using TLSv1) by
	eu1sys200aob114.postini.com ([207.126.147.11]) with SMTP	ID
	DSNKUMu6/ARuT+LkEyh7aNwZnPZQedFwCT7w@postini.com;
	Fri, 14 Dec 2012 23:49:17 UTC
Received: from zeta.dmz-eu.st.com (zeta.dmz-eu.st.com [164.129.230.9])	by
	beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 6F1CD10E	for
	&lt;baker@usgs.gov&gt;; Fri, 14 Dec 2012 23:49:14 +0000 (GMT)
Received: from mail7.sgp.st.com (mail7.sgp.st.com [164.129.223.81])	by
	zeta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 18A6BA08E	for
	&lt;baker@usgs.gov&gt;; Fri, 14 Dec 2012 23:49:14 +0000 (GMT)
Received: from [167.4.208.110] (borer.wil.st.com [167.4.208.110])	by
	mail7.sgp.st.com (MOS 4.3.3-GA)	with ESMTP id ATP73571 (AUTH pgi.trs);
	Sat, 15 Dec 2012 00:49:12 +0100
Message-ID: &lt;50CBBAF6.8030801@pgroup.com&gt;
Date: Fri, 14 Dec 2012 15:49:10 -0800
From: PGI Technical Support &lt;trs@pgroup.com&gt;
Reply-To: &lt;trs@pgroup.com&gt;
Organization: STMicroelectronics,SST Portland Lab
User-Agent: Mozilla/5.0 (X11; Linux i686;
	rv:9.0) Gecko/20111222 Thunderbird/9.0.1
MIME-Version: 1.0
To: Larry Baker &lt;baker@usgs.gov&gt;
Subject: Re: pgcc overly picky about type mismatch?
References: &lt;07842FE0-A7CD-43F9-B1DD-DA3D12AC2837@usgs.gov&gt;
	&lt;4C4F80DB.2070004@pgroup.com&gt;
	&lt;CDF3D271-B935-43D5-94E9-0EB4A762DD6D@usgs.gov&gt;
	&lt;4C51B23E.6040205@pgroup.com&gt;
	&lt;5BAD199D-E861-4B55-AD63-C0DF12ED0575@usgs.gov&gt;
In-Reply-To: &lt;5BAD199D-E861-4B55-AD63-C0DF12ED0575@usgs.gov&gt;
X-MIMETrack: Itemize by SMTP Server on gscodenh01/SERVER/USGS/DOI(Release
	8.5.3HF42 | November 1, 2011) at 12/14/2012 16:49:18,
	Serialize by Router on gscamnlm03/SERVER/USGS/DOI(Release 8.5.2FP2HF661
	| September 20, 2011) at 12/14/2012 18:49:21,
	Serialize complete at 12/14/2012 18:49:21,
	Serialize by POP3 Server on gscamnlm02/SERVER/USGS/DOI(Release
	8.5.2FP2HF661 | September 20, 2011) at 12/14/2012 15:50:56
Content-Type: text/plain; charset=&quot;windows-1252&quot;; format=flowed
Content-Transfer-Encoding: quoted-printable

Larry,

     This mail is inform you that TPRs

17185 - pgcc generating warnings from legal code - part 2

17186 - pgcc: Pragma ignored =96 string expected after #pragma ident

have been verified as fixed in the 12.10 PGI release.

Thanks again for the submissions.

regards,
dave



On 08/17/10 14:49, Larry Baker wrote:
&gt; Dave,
&gt;
&gt; I have encountered more warnings that I think are spurious in=20
&gt; conditional expressions.  They all seem to be related to type=20
&gt; conversions, like TPR 17139.  I'll let you decide whether to report=20
&gt; these separately, or add them to TPR 17139.
&gt;
&gt; Before that, I wanted to add to TPR 17139 a discovery I made while=20
&gt; looking into these other warnings.  In the 1990 ISO C standard,=20
&gt; section 6.3.15, Conditional operator, there are examples of operand=20
&gt; types and the common type of the result of the conditional operator. =20
&gt; One example is practically identical to the case I described, with int=20
&gt; instead of char:
&gt;
&gt;&gt; Given the declarations
&gt;&gt;
&gt;&gt;    const int *c=5Fip;
&gt;&gt;    int *ip;
&gt;&gt;
&gt;&gt; the third column in the following table is the common type that is=20
&gt;&gt; the result of a conditional expression in which the first two columns=20
&gt;&gt; are the second and third operands (in either order):
&gt;&gt;
&gt;&gt;    ip    c=5Fip  const int *
&gt;
&gt; These warnings appear when compiling openmpi-1.4.2 from=20
&gt; http://www.open-mpi.org.
&gt;
&gt; =95 Array name used in logical expression
&gt;
&gt; OpenMPI defines a macro LT=5FSTRLEN() that guards against calling=20
&gt; strlen() with a null string.  pgcc issues a warning for instances of=20
&gt; LT=5FSTRLEN() with a character array as the argument.  For example:
&gt;
&gt;&gt; /* LT=5FSTRLEN can be used safely on NULL pointers.  */
&gt;&gt; #define LT=5FSTRLEN(s)    (((s) &amp;&amp; (s)[0]) ? strlen (s) : 0)
&gt;&gt;
&gt;&gt; int main () {
&gt;&gt;    char text[] =3D &quot;junk&quot;;
&gt;&gt;    return LT=5FSTRLEN( text );
&gt;&gt; }
&gt;&gt;
&gt;&gt; [baker@hydra ~]$ pgcc -c junk.c
&gt;&gt; PGC-W-0089-Array name used in logical expression (junk.c: 6)
&gt;&gt; PGC/x86-64 Linux 10.3-0: compilation completed with warnings
&gt;
&gt; Whether or not this warning is issued is inconsistent: it does not=20
&gt; occur when the character array is a dummy argument:
&gt;
&gt;&gt; /* LT=5FSTRLEN can be used safely on NULL pointers.  */
&gt;&gt; #define LT=5FSTRLEN(s)    (((s) &amp;&amp; (s)[0]) ? strlen (s) : 0)
&gt;&gt;
&gt;&gt; int junk( char text[] ) {
&gt;&gt;    return LT=5FSTRLEN( text );
&gt;&gt; }
&gt;
&gt; I simplified the LT=5FSTRLEN() macro to use a simpler form:
&gt;
&gt;&gt; /* LT=5FSTRLEN can be used safely on NULL pointers.  */
&gt;&gt; #define LT=5FSTRLEN(s)    ((s) ? strlen (s) : 0)
&gt;
&gt; pgcc issues the same warning.
&gt;
&gt; I assume the warning is because section 6.3.15 Conditional operator,=20
&gt; requires a scalar type for the first operand:
&gt;
&gt;&gt; Constraints
&gt;&gt;
&gt;&gt;    Each of the operands shall have a scalar type.
&gt;
&gt; However, section 6.2 Conversions, 6.2.2 Other operands, 6.2.2.1 L=20
&gt; values and function designators, covers this situation:
&gt;
&gt;&gt; Except ..., an lvalue that has type &quot;array of type&quot; is converted to=20
&gt;&gt; an expression that has type &quot;pointer to type&quot; that points to the=20
&gt;&gt; initial element of the array object and is not an lvalue.
&gt;
&gt; According to section 6.1.2.5 Types, that is sufficient to convert an=20
&gt; array name to a scalar type:
&gt;
&gt;&gt; Arithmetic types and pointer types are collectively called scalar types.
&gt;
&gt; I think this warning is spurious.
&gt;
&gt; =95 Pointer value created from a nonlong integral type
&gt;
&gt; OpenMPI uses 0 instead of NULL in conditional expressions with pointer=20
&gt; type, usually as the third operand.  For example, I modified one of=20
&gt; their functions to simplify the code:
&gt;
&gt;&gt; #include &lt;stdlib.h&gt;
&gt;&gt;
&gt;&gt; void* malloc=5Fstarter(size=5Ft sz, const void *caller) {
&gt;&gt;   void* victim;
&gt;&gt;   victim =3D malloc(sz);
&gt;&gt;   return victim ? victim : 0;
&gt;&gt; }
&gt;&gt;
&gt;&gt; [baker@hydra ~]$ pgcc -c junk.c
&gt;&gt; PGC-W-0095-Type cast required for this conversion (junk.c: 6)
&gt;&gt; PGC-W-0155-Pointer value created from a nonlong integral type =20
&gt;&gt; (junk.c: 6)
&gt;&gt; PGC/x86-64 Linux 10.3-0: compilation completed with warnings
&gt;
&gt; Section 6.3.15 Conditional operator, Semantics, says:
&gt;
&gt;&gt; If both the second and third operands are pointers or one is a null=20
&gt;&gt; pointer constant and the other is a pointer, the result type is a=20
&gt;&gt; pointer to a type qualified with all the type qualifiers of the types=20
&gt;&gt; pointer-to by both operands.  Furthermore, ...; if one operand is a=20
&gt;&gt; null pointer constant, the result has the type of the other operand; ...
&gt;
&gt; Section 6.2.2.3 Pointers, defines literal 0 as the null pointer constant:
&gt;
&gt;&gt; An integral constant expression with the value 0, or such an=20
&gt;&gt; expression cast to type void *, is called a null pointer constant.
&gt;
&gt; According to the 1990 ISO C standard, no type cast is required; in=20
&gt; this context, 0 is not an int (nonlong integral type), it is a pointer=20
&gt; value -- specifically, it is the null pointer constant.
&gt;
&gt; I think this warning is wrong.
&gt;
&gt; Thanks,
&gt;
&gt; Larry Baker
&gt; US Geological Survey
&gt; 650-329-5608
&gt; baker@usgs.gov
&gt;
&gt; On Jul 29, 2010, at 9:54 AM, PGI Technical Support wrote:
&gt;
&gt;&gt; Larry Baker wrote:
&gt;&gt;&gt; Dave,
&gt;&gt;&gt;
&gt;&gt;&gt; The more I thought about this issue, it seems to me the C 1990=20
&gt;&gt;&gt; section 6.3.15 applies:
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; =95 6.3.15 Conditional operator, says if the second and third=20
&gt;&gt;&gt;&gt;&gt; operands are pointers ..., the result type is a pointer to a type=20
&gt;&gt;&gt;&gt;&gt; qualified with all the type qualifiers of the types pointed-to by=20
&gt;&gt;&gt;&gt;&gt; both operands.
&gt;&gt;&gt;
&gt;&gt;&gt; Thus, ( cond ? (char *) : (const char *) ) should have the result=20
&gt;&gt;&gt; type (const char *).  Both (char *) and (const char *) are=20
&gt;&gt;&gt; compatible as rvalues with (const char *), similar to passing either=20
&gt;&gt;&gt; a (char *) or a (const char *) to a (const char *) function=20
&gt;&gt;&gt; argument.  pgcc should not be complaining.  Do you agree?
&gt;&gt;&gt;
&gt;&gt;&gt; Larry Baker
&gt;&gt;&gt; US Geological Survey
&gt;&gt;&gt; 650-329-5608
&gt;&gt;&gt; baker@usgs.gov &lt;mailto:baker@usgs.gov&gt;
&gt;&gt;&gt;
&gt;&gt; Larry,
&gt;&gt;
&gt;&gt; I created TPR 17139, and put your arguments in the report.
&gt;&gt; Engineering has not responded yet, but there is every possibility
&gt;&gt; you are correct.
&gt;&gt;
&gt;&gt; The language standards are are complicated, so I let
&gt;&gt; engineering tell me if a problem like this is a user bug or a=20
&gt;&gt; compiler defect.
&gt;&gt;
&gt;&gt; regards,
&gt;&gt; dave
&gt;&gt;
&gt;&gt;
&gt;&gt; --=20
&gt;&gt; Dave Borer    Customer Service Manager, The Portland Group
&gt;&gt; email        dave.borer@st.com
&gt;&gt; phone        (503)-431-7113
&gt;&gt;
&gt;
&gt;


--=20
Dave Borer, Customer Service Manager             email: trs@pgroup.com
The Portland Group                               Phone:  +1-503-682-2806
Two Centerpointe Dr, Suite 320                   Direct: +1-503-431-7113
Lake Oswego, OR USA 97035                        FAX:    +1-503-682-2637

=
]
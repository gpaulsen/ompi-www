[From nobody Fri Jan 17 14:44:19 2014
Received: from gscodens03.cr.usgs.gov ([136.177.7.24])          by
	gscodenh01.cr.usgs.gov (Lotus Domino Release 8.5.1FP2) with ESMTP id
	2010072718591296-172283 ;          Tue, 27 Jul 2010 18:59:12 -0600 
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjoBAO8dT0zPfpCFkWdsb2JhbACfahUBAQEBBw0KBxEFHcJrAoMGgi4EhAmEYYZ6
X-IronPort-AV: E=Sophos;i=&quot;4.55,271,1278309600&quot;; d=&quot;scan'208&quot;;a=&quot;187592002&quot;
Received: from eu1sys200aog112.obsmtp.com ([207.126.144.133])  by
	gscodens03.cr.usgs.gov with ESMTP; 27 Jul 2010 18:59:10 -0600
Received: from source ([164.129.1.35]) (using TLSv1) by
	eu1sys200aob112.postini.com ([207.126.147.11]) with SMTP	ID
	DSNKTE+A3zrae4mqUHE+ZyTWgp/sLeiut+oU@postini.com;
	Wed, 28 Jul 2010 00:59:13 UTC
Received: from zeta.dmz-eu.st.com (ns2.st.com [164.129.230.9])	by
	beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 4151A87	for
	&lt;baker@usgs.gov&gt;; Wed, 28 Jul 2010 00:59:11 +0000 (GMT)
Received: from mail7.sgp.st.com (mail7.sgp.st.com [164.129.223.81])	by
	zeta.dmz-eu.st.com (STMicroelectronics) with ESMTP id F1A0D4C83	for
	&lt;baker@usgs.gov&gt;; Wed, 28 Jul 2010 00:59:10 +0000 (GMT)
Received: from [167.4.208.110] (borer.wil.st.com [167.4.208.110])	by
	mail7.sgp.st.com (MOS 4.1.8-GA)	with ESMTP id AFW69691 (AUTH pgi.trs);
	Wed, 28 Jul 2010 02:59:09 +0200
Message-ID: &lt;4C4F80DB.2070004@pgroup.com&gt;
Date: Tue, 27 Jul 2010 17:59:07 -0700
From: PGI Technical Support &lt;trs@pgroup.com&gt;
Reply-To: PGI Technical Support &lt;trs@pgroup.com&gt;
Organization: STMicroelectronics,SST Portland Lab
User-Agent: Thunderbird 2.0.0.22 (X11/20090605)
MIME-Version: 1.0
To: Larry Baker &lt;baker@usgs.gov&gt;
Subject: Re: pgcc overly picky about type mismatch?
References: &lt;07842FE0-A7CD-43F9-B1DD-DA3D12AC2837@usgs.gov&gt;
In-Reply-To: &lt;07842FE0-A7CD-43F9-B1DD-DA3D12AC2837@usgs.gov&gt;
X-MIMETrack: Itemize by SMTP Server on gscodenh01/SERVER/USGS/DOI(Release
	8.5.1FP2|March 17, 2010) at 07/27/2010 18:59:13,
	Serialize by Router on gscamnlm03/SERVER/USGS/DOI(Release 8.0.2FP1HF618
	| November 5, 2009) at 07/27/2010 05:59:15 PM,
	Serialize complete at 07/27/2010 05:59:15 PM,
	Serialize by POP3 Server on gscamnlm03/SERVER/USGS/DOI(Release
	8.0.2FP1HF618 | November 5, 2009) at 07/27/2010 06:14:04 PM
Content-Type: text/plain; charset=&quot;windows-1252&quot;; format=flowed
Content-Transfer-Encoding: quoted-printable

Larry,

     Thanks for the report.

     We recreated your behavior and logged it as TPR 17139.

regards,
dave


Larry Baker wrote:
&gt; Customer information:
&gt;
&gt; Larry Baker
&gt; US Geological Survey
&gt; 650-329-5608
&gt; baker@usgs.gov
&gt;
&gt; Product: 2183-WS
&gt; PIN: 507549
&gt;
&gt; Problem description:
&gt;
&gt; I am trying to track down the warnings that occur when compiling the=20
&gt; UCAR NetCDF package with PGI compilers.  I have found a case that gcc=20
&gt; does not warn about, but pgcc does.  If I understand the code and the=20
&gt; C (1990) standard, I think pgcc is complaining too much.
&gt;
&gt; You can reproduce the warnings by downloading the UCAR NetCDF source=20
&gt; package, netcdf.tar.gz, from=20
&gt; http://www.unidata.ucar.edu/software/netcdf/.  Assuming you download=20
&gt; it to /usr/local/src, here are the commands that illustrate the warnings:
&gt;
&gt; # cd /usr/local/src
&gt; # tar -xzf netcdf.tar.gz
&gt; # cd netcdf-4.1.1
&gt; # ./configure &gt;/dev/null 2&gt;&amp;1
&gt; # cd ncgen
&gt; # pgcc -DHAVE=5FCONFIG=5FH -I. -I.. -I../fortran       -I.. -I../libsrc=20
&gt; -I../libsrc    -g -O2 -tp amd64 -Msignextend -DNO=5FPGI=5FOFFSET -c -o=20
&gt; genf77.o genf77.c
&gt; PGC-W-0095-Type cast required for this conversion (genf77.c: 498)
&gt; PGC-W-0095-Type cast required for this conversion (genf77.c: 511)
&gt; PGC/x86-64 Linux 10.3-0: compilation completed with warnings
&gt;
&gt; To eliminate the warnings, I had to modify the two source lines to=20
&gt; cast the result from static const char* f77varncid() as (char *):
&gt;
&gt;&gt;     /* Use the specialized put=5Fatt=5FXX routines if possible*/
&gt;&gt;     switch (basetype-&gt;typ.typecode) {
&gt;&gt;     case NC=5FBYTE:
&gt;&gt;     case NC=5FSHORT:
&gt;&gt;     case NC=5FINT:
&gt;&gt;     case NC=5FFLOAT:
&gt;&gt;     case NC=5FDOUBLE:
&gt;&gt;         f77attrify(asym,code);
&gt;&gt;         codedump(code);
&gt;&gt;         bbClear(code);
&gt;&gt;         bbprintf0(stmt,&quot;stat =3D nf=5Fput=5Fatt=5F%s(ncid, %s, %s, %s, %=
lu,=20
&gt;&gt; %sval)\n&quot;,
&gt;&gt;                 nfstype(basetype-&gt;typ.typecode),
&gt;&gt;                 (asym-&gt;att.var =3D=3D NULL?&quot;NF=5FGLOBAL&quot;
&gt;&gt;                                       :(char *)=20
&gt;&gt; f77varncid(asym-&gt;att.var)),   &lt;--- here
&gt;&gt;                 f77escapifyname(asym-&gt;name),
&gt;&gt;                 nftype(basetype-&gt;typ.typecode),
&gt;&gt;                 len,
&gt;&gt;                 ncftype(basetype-&gt;typ.typecode));
&gt;&gt;         codedump(stmt);
&gt;&gt;         break;
&gt;&gt;
&gt;&gt;     case NC=5FCHAR:
&gt;&gt;         len =3D bbLength(code);
&gt;&gt;         f77quotestring(code);
&gt;&gt;         bbprintf0(stmt,&quot;stat =3D nf=5Fput=5Fatt=5Ftext(ncid, %s, %s, %lu=
, &quot;,
&gt;&gt;                 (asym-&gt;att.var =3D=3D NULL?&quot;NF=5FGLOBAL&quot;
&gt;&gt;                                       :(char=20
&gt;&gt; *)f77varncid(asym-&gt;att.var)),   &lt;--- and here
&gt;&gt;                 f77escapifyname(asym-&gt;name),
&gt;&gt;                 (len=3D=3D0?1:len));
&gt;&gt;         codedump(stmt);
&gt;&gt;         codedump(code);
&gt;&gt;         codeline(&quot;)&quot;);
&gt;&gt;         break;
&gt;
&gt; Here is static const char* f77varncid():
&gt;
&gt;&gt; /* Compute the name for a given var's id*/
&gt;&gt; /* Watch out: the result is a static*/
&gt;&gt; static const char*
&gt;&gt; f77varncid(Symbol* vsym)
&gt;&gt; {
&gt;&gt;     const char* tmp1;
&gt;&gt;     char* vartmp;
&gt;&gt;     tmp1 =3D f77name(vsym);
&gt;&gt;     vartmp =3D poolalloc(strlen(tmp1)+strlen(&quot;=5Fid&quot;)+1);
&gt;&gt;     strcpy(vartmp,tmp1);
&gt;&gt;     strcat(vartmp,&quot;=5Fid&quot;);
&gt;&gt;     return vartmp;
&gt;&gt; }
&gt;
&gt; There are other lines in genf77.c that use f77varncid() in a print=20
&gt; statement, so the warnings do not occur every time f77varncid()=20
&gt; provides a string for %s:
&gt;
&gt;&gt;     if (nvars &gt; 0) {
&gt;&gt;         f77skip();
&gt;&gt;         f77comment(&quot;variable ids&quot;);
&gt;&gt;         for(ivar =3D 0; ivar &lt; nvars; ivar++) {
&gt;&gt;             Symbol* vsym =3D (Symbol*)listget(vardefs,ivar);
&gt;&gt;             bbprintf0(stmt,&quot;integer %s;\n&quot;, f77varncid(vsym));
&gt;&gt;             codedump(stmt);
&gt;&gt;         }
&gt;
&gt; The warnings occur in the only two instances where f77varncid() is=20
&gt; used in a conditional expression.  In both cases, the second operand=20
&gt; is a literal string, e.g., &quot;NF=5FGLOBAL&quot;.  I would have thought that a=20
&gt; (static const char*) and a string literal would be compatible types. =20
&gt; I experimented with a (const char *) cast instead of a (char *) cast,=20
&gt; but that does not work.  I think it should.
&gt;
&gt; I admit, I have an old copy of the C standard =97 from 1990.  But,=20
&gt; here's my interpretation of what it says about this:
&gt;
&gt; =95 6.1.4 String literals, says string literals are converted to an=20
&gt; array of type char.  If the program attempts to modify a string=20
&gt; literal, the behavior is undefined.  It does not say that the type has=20
&gt; the const type qualifier (though, you would think it should).
&gt;
&gt; =95 6.3.15 Conditional operator, says if the second and third operands=20
&gt; are pointers ..., the result type is a pointer to a type qualified=20
&gt; with all the type qualifiers of the types pointed-to by both operands.
&gt;
&gt; This would seem to explain the warning message, since the string=20
&gt; literal is (char *) and f77varncid() is (const char *).  However,=20
&gt; 6.3.15 goes on to say:
&gt;
&gt; Furthermore, if both operands are pointers to ... differently=20
&gt; qualified versions of a compatible type, the result has the composite=20
&gt; type.
&gt;
&gt; Which leads me to believe you are allowed to mix const and non-const=20
&gt; versions of a compatible type.
&gt;
&gt; Lastly:
&gt;
&gt; =95 6.5.3 Type qualifiers, says that the properties associated with=20
&gt; qualified types are meaningful only for expressions that are lvalues.
&gt;
&gt; Seems to make the issue moot, since it says const-ness only applies to=20
&gt; lvalues.
&gt;
&gt; So, I think both 6.3.15 and 6.5.3 imply that (char *) and (const char=20
&gt; *) are compatible as the second and third operands in a conditional=20
&gt; expression which is not an lvalue, which is the case in this code.  As=20
&gt; I mentioned above, gcc does not complain about this code.  What do you=20
&gt; think?
&gt;
&gt; Larry Baker
&gt; US Geological Survey
&gt; 650-329-5608
&gt; baker@usgs.gov
&gt;


--=20
Dave Borer	Customer Service Manager, The Portland Group
email		dave.borer@st.com
phone		(503)-431-7113

]
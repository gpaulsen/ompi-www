$ ./configure --disable-io-romio --disable-mpi-cxx --disable-mpi-f77 --disable-threads --disable-mpi-profile --disable-shared --enable-static --enable-debug --prefix=c:/sw/ompi CC=cl CXX=cl CPP='cl -E' LD=link AR=lib NM='dumpbin /SYMBOLS' AR=lib RANLIB=true LN_S='cp -p' LN=cp
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for gawk... gawk
checking whether make sets $(MAKE)... yes

============================================================================
== Configuring Open MPI
============================================================================

*** Checking versions
checking for SVN version... done
checking Open MPI version... 1.3a1r12014M
checking Open MPI Subversion repository version... r12014M
checking Open Run-Time Environment version... 1.3a1r12014M
checking Open Run-Time Environment Subversion repository version... r12014M
checking Open Portable Access Layer version... 1.3a1r12014M
checking Open Portable Access Layer Subversion repository version... r12014M

*** Initialization, setup
configure: builddir: /home/bosilca/ompi-trunk
configure: srcdir: /home/bosilca/ompi-trunk
checking build system type... i686-pc-cygwin
checking host system type... i686-pc-cygwin
installing to directory "c:/sw/ompi"

*** Configuration options
checking Whether to run code coverage... no
checking whether to debug memory usage... no
--> developer override: enable mem profiling by default
checking whether to profile memory usage... no
--> developer override: enable mem profiling by default
checking if want developer-level compiler pickyness... no
--> developer override: enable picky compiler by default
checking if want developer-level debugging code... yes
checking if want Fortran 77 bindings... no
checking if want Fortran 90 bindings... yes
checking desired Fortran 90 bindings "size"... small
checking whether to enable PMPI... no
checking if want C++ bindings... no
checking if want to enable weak symbol support... yes
checking if want run-time MPI parameter checking... runtime
checking if want to install OMPI header files... no
checking if want pretty-print stacktrace... yes
checking if want deprecated executable names... no
checking if peruse support is required... no
checking max supported array dimension in F90 MPI bindings... 4
checking if pty support should be enabled... yes
checking if user wants dlopen support... yes
checking if heterogeneous support should be enabled... yes
checking if want trace file debugging... no
checking if want IPv6 support... yes (if underlying system supports it)
checking if want orterun "--prefix" behavior to be enabled by default... no

============================================================================
== Compiler and preprocessor tests
============================================================================

*** C compiler and preprocessor
checking for style of include used by make... GNU
checking for gcc... cl
checking for C compiler default output file name... conftest.exe
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... .exe
checking for suffix of object files... obj
checking whether we are using the GNU C compiler... no
checking whether cl accepts -g... yes
checking for cl option to accept ISO C89... none needed
checking dependency style of cl... none
checking whether cl and cc understand -c and -o together... no
checking for the C compiler vendor... microsoft
configure: WARNING: -g has been added to CFLAGS (--enable-debug)
checking if /home/bosilca/ompi-trunk/config/compile cl supports __builtin_expect... no
checking if /home/bosilca/ompi-trunk/config/compile cl supports __builtin_prefetch... no
checking for C optimization flags... -g
checking how to run the C preprocessor... cl -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... no
checking for inttypes.h... no
checking for stdint.h... no
checking for unistd.h... no
checking for long long... yes
checking for long double... yes
checking for int8_t... no
checking for uint8_t... no
checking for int16_t... no
checking for uint16_t... no
checking for int32_t... no
checking for uint32_t... no
checking for int64_t... no
checking for uint64_t... no
checking for intptr_t... yes
checking for uintptr_t... yes
checking for mode_t... no
checking for char... yes
checking size of char... 1
checking for short... yes
checking size of short... 2
checking for int... yes
checking size of int... 4
checking for long... yes
checking size of long... 4
checking for long long... (cached) yes
checking size of long long... 8
checking for long double... (cached) yes
checking size of long double... 8
checking for float... yes
checking size of float... 4
checking for double... yes
checking size of double... 8
checking for void *... yes
checking size of void *... 4
checking for size_t... yes
checking size of size_t... 4
checking alignment of char... 1
checking alignment of short... 2
checking alignment of wchar_t... 2
checking alignment of int... 4
checking alignment of long... 4
checking alignment of long long... 8
checking alignment of float... 4
checking alignment of double... 8
checking alignment of long double... 8
checking alignment of void *... 4
checking for C bool type... no
checking for inline... __inline
checking for weak symbol support... no

*** C++ compiler and preprocessor
checking whether we are using the GNU C++ compiler... no
checking whether cl accepts -g... yes
checking dependency style of cl... none
checking how to run the C++ preprocessor... cl -E
checking for the C++ compiler vendor... microsoft
configure: WARNING: -g has been added to CXXFLAGS (--enable-debug)
checking if want C++ exception handling... no
checking for C++ template_repository_directory... not used
checking for C++ compiler template parameters... none needed
checking if cl supports __builtin_expect... no
checking if cl supports __builtin_prefetch... no
checking if cl supports const_cast<> properly... yes
checking for C++ optimization flags... -g

*** Assembler
checking for BSD- or MS-compatible name lister (nm)... dumpbin /SYMBOLS
checking the name lister (dumpbin /SYMBOLS) interface... MS dumpbin
checking for fgrep... /usr/bin/grep -F
checking whether to enable smp locks... yes
checking for asssembly architecture... WINDOWS
checking for atomic assembly filename... none

*** Fortran 77 compiler
checking for gfortran... no
checking for g77... no
checking for f77... no
checking for xlf... no
checking for frt... no
checking for ifort... no
checking for pgf77... no
checking for fort77... no
checking for fl32... no
checking for af77... no
checking whether we are using the GNU Fortran 77 compiler... no
checking whether  accepts -g... no
configure: WARNING: *** Fortran 77 bindings disabled (could not find compiler)
checking  external symbol convention... skipped
checking if Fortran 77 compiler supports LOGICAL... skipped
checking if Fortran 77 compiler supports INTEGER... skipped
checking if Fortran 77 compiler supports INTEGER*1... skipped
checking if Fortran 77 compiler supports INTEGER*2... skipped
checking if Fortran 77 compiler supports INTEGER*4... skipped
checking if Fortran 77 compiler supports INTEGER*8... skipped
checking if Fortran 77 compiler supports INTEGER*16... skipped
checking if Fortran 77 compiler supports REAL... skipped
checking if Fortran 77 compiler supports REAL*4... skipped
checking if Fortran 77 compiler supports REAL*8... skipped
checking if Fortran 77 compiler supports REAL*16... skipped
checking if Fortran 77 compiler supports DOUBLE PRECISION... skipped
checking if Fortran 77 compiler supports COMPLEX... skipped
checking if Fortran 77 compiler supports COMPLEX*8... skipped
checking if Fortran 77 compiler supports COMPLEX*16... skipped
checking if Fortran 77 compiler supports COMPLEX*32... skipped
checking for max Fortran MPI handle index... 2147483647
checking FORTRAN value for .TRUE. logical type... 0
checking for correct handling of FORTRAN logical arrays... yes

*** Fortran 90/95 compiler
configure: WARNING: *** Fortran 90/95 bindings implicitly disabled (because
configure: WARNING: *** Fortran 77 bindings were disabled)
checking if need to force static library... no
checking if Fortran 90 compiler supports LOGICAL... skipped
checking if Fortran 90 compiler supports INTEGER... skipped
checking if Fortran 90 compiler supports INTEGER*1... skipped
checking if Fortran 90 compiler supports INTEGER*2... skipped
checking if Fortran 90 compiler supports INTEGER*4... skipped
checking if Fortran 90 compiler supports INTEGER*8... skipped
checking if Fortran 90 compiler supports INTEGER*16... skipped
checking if Fortran 90 compiler supports REAL... skipped
checking if Fortran 90 compiler supports REAL*4... skipped
checking if Fortran 90 compiler supports REAL*8... skipped
checking if Fortran 90 compiler supports REAL*16... skipped
checking if Fortran 90 compiler supports DOUBLE PRECISION... skipped
checking if Fortran 90 compiler supports COMPLEX... skipped
checking if Fortran 90 compiler supports COMPLEX*8... skipped
checking if Fortran 90 compiler supports COMPLEX*16... skipped
checking if Fortran 90 compiler supports COMPLEX*32... skipped
checking if Fortran 90 compiler supports DOUBLE COMPLEX... skipped
configure: error: Cannot support Fortran MPI_ADDRESS_KIND!


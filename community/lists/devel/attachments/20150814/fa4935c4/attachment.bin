#include <stdio.h>
#include <string.h>
#include "mpi.h"

int main( int argc, char* argv[] )
{
    int provided, err, scope;
    int numPvar, numCvar, nameLen, descLen, verbosity, varClass;
    int binding, isReadonly, isContinous, isAtomic, i;
    char name[128], desc[1024];
    MPI_T_enum enumtype;
    MPI_Datatype datatype;

    MPI_Init_thread(0, 0, MPI_THREAD_SINGLE, &provided);
    err = MPI_T_init_thread(MPI_THREAD_SINGLE, &provided);
    if(err) MPI_Abort(MPI_COMM_WORLD, 0);

    err = MPI_T_pvar_get_num(&numPvar);
    if(err) MPI_Abort(MPI_COMM_WORLD, 0);
    printf("%d MPI Performance Variables\n", numPvar);

    for(i = 0; i < numPvar; i++) {
      nameLen = sizeof(name);
      descLen = sizeof(desc);
      err = MPI_T_pvar_get_info(i, name, &nameLen, &verbosity,
                                &varClass, &datatype, &enumtype, desc,
                                &descLen, &binding, &isReadonly,
                                &isContinous, &isAtomic);
      if(err) {
        printf("Failed to read Pvar %d/%d\n", i, numPvar);
        MPI_Abort(MPI_COMM_WORLD, 0);
      }
      printf("\t%s\tClass-%d\tReadonly-%s\tContinous-%s\tAtomic-%s\t%s\n",
             name, varClass, isReadonly ? "T" : "F",
             isContinous ? "T" : "F", isAtomic ? "T" : "F", desc);
    }

    err = MPI_T_cvar_get_num(&numCvar);
    if(err) MPI_Abort(MPI_COMM_WORLD, 0);
    printf("\n%d MPI Control Variables\n", numCvar);

    for(i = 0; i < numCvar; i++) {
      nameLen = sizeof(name);
      descLen = sizeof(desc);
      err = MPI_T_cvar_get_info(i, name, &nameLen, &verbosity,
                                &datatype, &enumtype, desc,
                                &descLen, &binding, &scope);
      if(err) {
        printf("Failed to read Cvar %d/%d\n", i, numCvar);
      }
      printf("\t%s\tClass-%d\tScope-%d\t%s\n",
             name, varClass, scope, desc);
    }

    MPI_T_finalize();
    MPI_Finalize();
    return 0;
}

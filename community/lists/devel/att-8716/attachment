<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 TRANSITIONAL//EN">
<HTML>
<HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=UTF-8">
  <META NAME="GENERATOR" CONTENT="GtkHTML/3.28.3">
</HEAD>
<BODY>
Le mardi 23 novembre 2010 &#224; 20:21 -0500, Jeff Squyres (jsquyres) a &#233;crit :
<BLOCKQUOTE TYPE=CITE>
<PRE>
Beware that MPI-request-free on active buffers is valid but evil. You CANNOT be sure when the buffer is available for reuse. 
</PRE>
</BLOCKQUOTE>
<BR>
Yes, but as I said, in my program an MPI rank never flood other MPI ranks.<BR>
(I like to think they respect each other haha)<BR>
<BR>
Therefore the evilness is no more -- it is casted away in oblivions.<BR>
<BR>
If I understand correctly, a call to MPI_Request_free does not affect in any way the void*buffer associated to the request, it just free the memory of the MPI_Request.<BR>
For statuses, I use MPI_STATUS_IGNORE, except with my MPI_Iprobe obviously !<BR>
<BR>
So, in a way, MPI_REQUEST_IGNORE would be cool, but it does not exist.<BR>
<BR>
<BR>
For buffer availability:<BR>
<BR>
For MPI_Recv and MPI_Isend, buffers are allocated with a &quot;RingAllocator&quot; (one malloc at the start of execution). <BR>
But it is useless as most of the time there is only on active send.<BR>
<BR>
<BR>
Here is an example of my code (14567 lines, but yet MPI_Isend and MPI_Recv appear both only once).<BR>
<U>p.s. it is GPLed !</U><BR>
<BR>
<BR>
<BR>
<B><U><I>These bits extract a k-mer (a string of k symbols) from a DNA (the code of life) sequence and send it to the good MPI rank</I></U></B><BR>
<BR>
<BR>
void VerticesExtractor::process(...){<BR>
<FONT COLOR="#ff0000"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!m_ready){</B></FONT><BR>
<FONT COLOR="#ff0000"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</B></FONT><BR>
<FONT COLOR="#ff0000"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</B></FONT><BR>
...<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(isValidDNA(memory)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VERTEX_TYPE a=wordId(memory);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int rankToFlush=0;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(*m_reverseComplementVertex==false){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rankToFlush=vertexRank(a,size);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_disData-&gt;m_messagesStock.addAt(rankToFlush,a);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VERTEX_TYPE b=complementVertex(a,m_wordSize,m_colorSpaceMode);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rankToFlush=vertexRank(b,size);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_disData-&gt;m_messagesStock.addAt(rankToFlush,b);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(m_disData-&gt;m_messagesStock.flush(rankToFlush,1,<FONT COLOR="#008000"><B><U><I>TAG_VERTICES_DATA</I></U></B></FONT>,m_outboxAllocator,m_outbox,rank,false)){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT COLOR="#ff0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT><FONT COLOR="#ff0000"><B>&nbsp;&nbsp; </B></FONT><FONT COLOR="#ff0000"><B><I><U>m_ready=false;</U></I></B></FONT><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
...<BR>
}<BR>
<BR>
<BR>
<I>so, if the &quot;toilet&quot; if flushed, the rank set its slot called m_ready to false.</I><BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<B><I><U>The following bits select the message handler:</U></I></B><BR>
<BR>
<U>O(1) message handler selection !</U><BR>
<BR>
<BR>
<BR>
void MessageProcessor::processMessage(Message*message){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int tag=message-&gt;getTag();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FNMETHOD f=m_methods[tag];<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (this-&gt;*f)(message);<BR>
}<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<B><I><U>Obviously, it calls something like this:</U></I></B><BR>
<B><U>(note that a reply is sent)</U></B><BR>
<BR>
<BR>
<BR>
void MessageProcessor::call_<B><FONT COLOR="#008000"><I><U>TAG_VERTICES_DATA</U></I></FONT></B>(Message*message){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void*buffer=message-&gt;getBuffer();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int count=message-&gt;getCount();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VERTEX_TYPE*incoming=(VERTEX_TYPE*)buffer;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int length=count;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int i=0;i&lt;length;i++){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VERTEX_TYPE l=incoming[i];<BR>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #ifdef SHOW_PROGRESS<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((*m_last_value)!=(int)m_subgraph-&gt;size() and (int)m_subgraph-&gt;size()%100000==0){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (*m_last_value)=m_subgraph-&gt;size();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout&lt;&lt;&quot;Rank &quot;&lt;&lt;rank&lt;&lt;&quot; has &quot;&lt;&lt;m_subgraph-&gt;size()&lt;&lt;&quot; vertices &quot;&lt;&lt;endl;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endif<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SplayNode&lt;VERTEX_TYPE,Vertex&gt;*tmp=m_subgraph-&gt;insert(l);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #ifdef ASSERT<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assert(tmp!=NULL);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endif<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(m_subgraph-&gt;inserted()){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmp-&gt;getValue()-&gt;constructor();<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmp-&gt;getValue()-&gt;setCoverage(tmp-&gt;getValue()-&gt;getCoverage()+1);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #ifdef ASSERT<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assert(tmp-&gt;getValue()-&gt;getCoverage()&gt;0);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endif<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message aMessage(NULL,0,MPI_UNSIGNED_LONG_LONG,message-&gt;getSource(),<U><I><B><FONT COLOR="#008000">TAG_VERTICES_DATA_REPLY</FONT></B></I></U>,rank);<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_outbox-&gt;push_back(aMessage);<BR>
}<BR>
<BR>
<BR>
<BR>
<BR>
<B><I><U>These bits process the reply:</U></I></B><BR>
<I>(all my message handlers are called call_&lt;TAG_NAME&gt;)</I><BR>
<BR>
<BR>
<BR>
void MessageProcessor::call_<FONT COLOR="#008000"><B><I><U>TAG_VERTICES_DATA_REPLY</U></I></B></FONT>(Message*message){<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_verticesExtractor-&gt;set<B><FONT COLOR="#800080">Readiness</FONT></B>();<BR>
}<BR>
<BR>
<BR>
<B><I><U>And, finally, here it goes:</U></I></B><BR>
<BR>
void VerticesExtractor::setReadiness(){<BR>
<B>&nbsp;</B><B><FONT COLOR="#ff0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_ready=true;</FONT></B><BR>
}<BR>
<BR>
<BR>
<BR>
So, you can see that there is no problem with my use of MPI_Isend followed by MPI_Request_free.<BR>
<BR>
<BR>
Thanks !<BR>
<BR>
<BLOCKQUOTE TYPE=CITE>
<PRE>

There was a sentence or paragraph added yo MPI 2.2 describing exactly this case. 

Sent from my PDA. No type good. 

On Nov 23, 2010, at 5:36 PM, S&#233;bastien Boisvert &lt;<A HREF="mailto:Sebastien.Boisvert.3@ulaval.ca">Sebastien.Boisvert.3@ulaval.ca</A>&gt; wrote:

&gt; Le mardi 23 novembre 2010 &#224; 17:28 -0500, George Bosilca a &#233;crit :
&gt;&gt; Sebastien,
&gt;&gt; 
&gt;&gt; Using MPI_Isend doesn't guarantee asynchronous progress. As you might be aware, the non-blocking communications are guaranteed to progress only when the application is in the MPI library. Currently very few MPI implementations progress asynchronously (and unfortunately Open MPI is not one of them).
&gt;&gt; 
&gt; 
&gt; Regardless, I just need the non-blocking behavior.
&gt; I call MPI_Request_free just after MPI_Isend, and I use a ring allocator
&gt; to allocate message buffers.
&gt; 
&gt; Message recipients just reply with another message to the source, using
&gt; a NULL buffer.
&gt; 
&gt; The sender waits for the reply before sending the next message.
&gt; 
&gt; And it works for assembling bacterial genomes on many MPI ranks:
&gt; 
&gt; ...
&gt; Rank 0: 162 contigs/4576725 nucleotides
&gt; 
&gt; Rank 0 reports the elapsed time, Tue Nov 23 01:35:48 2010
&gt; ---&gt; Step: Collection of fusions
&gt;      Elapsed time: 0 seconds
&gt;      Since beginning: 17 minutes, 33 seconds
&gt; 
&gt; Elapsed time for each step, Tue Nov 23 01:35:48 2010
&gt; 
&gt; Beginning of computation: 1 seconds
&gt; Distribution of sequence reads: 7 minutes, 49 seconds
&gt; Distribution of vertices: 19 seconds
&gt; Calculation of coverage distribution: 1 seconds
&gt; Distribution of edges: 29 seconds
&gt; Indexing of sequence reads: 1 seconds
&gt; Computation of seeds: 2 minutes, 33 seconds
&gt; Computation of library sizes: 1 minutes, 47 seconds
&gt; Extension of seeds: 3 minutes, 34 seconds
&gt; Computation of fusions: 59 seconds
&gt; Collection of fusions: 0 seconds
&gt; Completion of the assembly: 17 minutes, 33 seconds
&gt; 
&gt; Rank 0 wrote Ecoli-THEONE.CoverageDistribution.txt
&gt; Rank 0 wrote Ecoli-THEONE.fasta
&gt; Rank 0 wrote Ecoli-THEONE.ReceivedMessages.txt
&gt; Rank 0 wrote Ecoli-THEONE.Library0.txt
&gt; Rank 0 wrote Ecoli-THEONE.Library1.txt
&gt; 
&gt; Au revoir !
&gt; 
&gt; 
&gt;&gt;  george.
&gt;&gt; 
&gt;&gt; On Nov 23, 2010, at 17:17 , S&#233;bastien Boisvert wrote:
&gt;&gt; 
&gt;&gt;&gt; I now use MPI_Isend, so the problem is no more.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; _______________________________________________
&gt;&gt; devel mailing list
&gt;&gt; <A HREF="mailto:devel@open-mpi.org">devel@open-mpi.org</A>
&gt;&gt; <A HREF="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</A>
&gt; 
&gt; -- 
&gt; M. S&#233;bastien Boisvert
&gt; &#201;tudiant au doctorat en physiologie-endocrinologie &#224; l'Universit&#233; Laval
&gt; Boursier des Instituts de recherche en sant&#233; du Canada
&gt; &#201;quipe du Professeur Jacques Corbeil
&gt; 
&gt; Centre de recherche en infectiologie de l'Universit&#233; Laval
&gt; Local R-61B
&gt; 2705, boulevard Laurier
&gt; Qu&#233;bec, Qu&#233;bec
&gt; Canada G1V 4G2
&gt; T&#233;l&#233;phone: 418 525 4444 46342
&gt; 
&gt; Courriel: <A HREF="mailto:SEB@BOISVERT.INFO">SEB@BOISVERT.INFO</A>
&gt; Web: <A HREF="http://boisvert.info">http://boisvert.info</A>
&gt; 
&gt; &quot;Innovation comes only from an assault on the unknown&quot; -Sydney Brenner
&gt; 
&gt; _______________________________________________
&gt; devel mailing list
&gt; <A HREF="mailto:devel@open-mpi.org">devel@open-mpi.org</A>
&gt; <A HREF="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</A>

_______________________________________________
devel mailing list
<A HREF="mailto:devel@open-mpi.org">devel@open-mpi.org</A>
<A HREF="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</A>
</PRE>
</BLOCKQUOTE>
<BR>
<TABLE CELLSPACING="0" CELLPADDING="0" WIDTH="100%">
<TR>
<TD>
<PRE>
-
</PRE>
</TD>
</TR>
</TABLE>
</BODY>
</HTML>


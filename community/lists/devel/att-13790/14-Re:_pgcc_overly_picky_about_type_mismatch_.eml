Received: from gscodens03.cr.usgs.gov ([136.177.7.24])          by
 gscodenh01.cr.usgs.gov (Lotus Domino Release 8.5.1FP2)          with ESMTP id
 2010081718492904-160013 ;          Tue, 17 Aug 2010 18:49:29 -0600 
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: ApgAAGPKakzPfpB9kWdsb2JhbACgQRUBAQEBBw0KBxEFHcARAoMFgjAEhDGFNodM
X-IronPort-AV: E=Sophos;i="4.56,225,1280728800"; 
   d="scan'208";a="194158633"
Received: from eu1sys200aog108.obsmtp.com ([207.126.144.125])  by
 gscodens03.cr.usgs.gov with ESMTP; 17 Aug 2010 18:49:25 -0600
Received: from source ([164.129.1.35]) (using TLSv1) by
 eu1sys200aob108.postini.com ([207.126.147.11]) with SMTP	ID
 DSNKTGsuF58aaNcBhb8GjIsUIJLccmEhKmBG@postini.com; Wed, 18 Aug 2010 00:49:28
 UTC
Received: from zeta.dmz-eu.st.com (ns2.st.com [164.129.230.9])	by
 beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id A380E74	for
 <baker@usgs.gov>; Wed, 18 Aug 2010 00:49:26 +0000 (GMT)
Received: from mail7.sgp.st.com (mail7.sgp.st.com [164.129.223.81])	by
 zeta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 1D0674D13	for
 <baker@usgs.gov>; Wed, 18 Aug 2010 00:49:26 +0000 (GMT)
Received: from [167.4.208.110] (borer.wil.st.com [167.4.208.110])	by
 mail7.sgp.st.com (MOS 4.1.8-GA)	with ESMTP id AFZ53879 (AUTH pgi.trs);	Wed,
 18 Aug 2010 02:49:24 +0200
Message-ID: <4C6B2E12.6050109@pgroup.com>
Date: Tue, 17 Aug 2010 17:49:22 -0700
From: PGI Technical Support <trs@pgroup.com>
Reply-To: PGI Technical Support <trs@pgroup.com>
Organization: STMicroelectronics,SST Portland Lab
User-Agent: Thunderbird 2.0.0.22 (X11/20090605)
MIME-Version: 1.0
To: Larry Baker <baker@usgs.gov>
Subject: Re: pgcc overly picky about type mismatch?
References: <07842FE0-A7CD-43F9-B1DD-DA3D12AC2837@usgs.gov> <4C4F80DB.2070004@pgroup.com> <CDF3D271-B935-43D5-94E9-0EB4A762DD6D@usgs.gov> <4C51B23E.6040205@pgroup.com> <5BAD199D-E861-4B55-AD63-C0DF12ED0575@usgs.gov>
In-Reply-To: <5BAD199D-E861-4B55-AD63-C0DF12ED0575@usgs.gov>
X-MIMETrack: Itemize by SMTP Server on gscodenh01/SERVER/USGS/DOI(Release 8.5.1FP2|March
 17, 2010) at 08/17/2010 18:49:29,
	Serialize by Router on gscamnlm03/SERVER/USGS/DOI(Release 8.0.2FP1HF618 | November
 5, 2009) at 08/17/2010 17:49:30,
	Serialize complete at 08/17/2010 17:49:30,
	Serialize by POP3 Server on gscamnlm03/SERVER/USGS/DOI(Release
 8.0.2FP1HF618 | November 5, 2009) at 08/17/2010 18:02:08
Content-Type: text/plain; charset="windows-1252"; format=flowed
Content-Transfer-Encoding: quoted-printable

Larry,

   I have logged your report as TPR 17185.

thanks,
dave



Larry Baker wrote:
> Dave,
>
> I have encountered more warnings that I think are spurious in=20
> conditional expressions.  They all seem to be related to type=20
> conversions, like TPR 17139.  I'll let you decide whether to report=20
> these separately, or add them to TPR 17139.
>
> Before that, I wanted to add to TPR 17139 a discovery I made while=20
> looking into these other warnings.  In the 1990 ISO C standard,=20
> section 6.3.15, Conditional operator, there are examples of operand=20
> types and the common type of the result of the conditional operator. =20
> One example is practically identical to the case I described, with int=20
> instead of char:
>
>> Given the declarations
>>
>>    const int *c=5Fip;
>>    int *ip;
>>
>> the third column in the following table is the common type that is=20
>> the result of a conditional expression in which the first two columns=20
>> are the second and third operands (in either order):
>>
>>    ip    c=5Fip  const int *
>
> These warnings appear when compiling openmpi-1.4.2 from=20
> http://www.open-mpi.org.
>
> =95 Array name used in logical expression
>
> OpenMPI defines a macro LT=5FSTRLEN() that guards against calling=20
> strlen() with a null string.  pgcc issues a warning for instances of=20
> LT=5FSTRLEN() with a character array as the argument.  For example:
>
>> /* LT=5FSTRLEN can be used safely on NULL pointers.  */
>> #define LT=5FSTRLEN(s)    (((s) && (s)[0]) ? strlen (s) : 0)
>>
>> int main () {
>>    char text[] =3D "junk";
>>    return LT=5FSTRLEN( text );
>> }
>>
>> [baker@hydra ~]$ pgcc -c junk.c
>> PGC-W-0089-Array name used in logical expression (junk.c: 6)
>> PGC/x86-64 Linux 10.3-0: compilation completed with warnings
>
> Whether or not this warning is issued is inconsistent: it does not=20
> occur when the character array is a dummy argument:
>
>> /* LT=5FSTRLEN can be used safely on NULL pointers.  */
>> #define LT=5FSTRLEN(s)    (((s) && (s)[0]) ? strlen (s) : 0)
>>
>> int junk( char text[] ) {
>>    return LT=5FSTRLEN( text );
>> }
>
> I simplified the LT=5FSTRLEN() macro to use a simpler form:
>
>> /* LT=5FSTRLEN can be used safely on NULL pointers.  */
>> #define LT=5FSTRLEN(s)    ((s) ? strlen (s) : 0)
>
> pgcc issues the same warning.
>
> I assume the warning is because section 6.3.15 Conditional operator,=20
> requires a scalar type for the first operand:
>
>> Constraints
>>
>>    Each of the operands shall have a scalar type.
>
> However, section 6.2 Conversions, 6.2.2 Other operands, 6.2.2.1 L=20
> values and function designators, covers this situation:
>
>> Except ..., an lvalue that has type "array of type" is converted to=20
>> an expression that has type "pointer to type" that points to the=20
>> initial element of the array object and is not an lvalue.
>
> According to section 6.1.2.5 Types, that is sufficient to convert an=20
> array name to a scalar type:
>
>> Arithmetic types and pointer types are collectively called scalar types.
>
> I think this warning is spurious.
>
> =95 Pointer value created from a nonlong integral type
>
> OpenMPI uses 0 instead of NULL in conditional expressions with pointer=20
> type, usually as the third operand.  For example, I modified one of=20
> their functions to simplify the code:
>
>> #include <stdlib.h>
>>
>> void* malloc=5Fstarter(size=5Ft sz, const void *caller) {
>>   void* victim;
>>   victim =3D malloc(sz);
>>   return victim ? victim : 0;
>> }
>>
>> [baker@hydra ~]$ pgcc -c junk.c
>> PGC-W-0095-Type cast required for this conversion (junk.c: 6)
>> PGC-W-0155-Pointer value created from a nonlong integral type =20
>> (junk.c: 6)
>> PGC/x86-64 Linux 10.3-0: compilation completed with warnings
>
> Section 6.3.15 Conditional operator, Semantics, says:
>
>> If both the second and third operands are pointers or one is a null=20
>> pointer constant and the other is a pointer, the result type is a=20
>> pointer to a type qualified with all the type qualifiers of the types=20
>> pointer-to by both operands.  Furthermore, ...; if one operand is a=20
>> null pointer constant, the result has the type of the other operand; ...
>
> Section 6.2.2.3 Pointers, defines literal 0 as the null pointer constant:
>
>> An integral constant expression with the value 0, or such an=20
>> expression cast to type void *, is called a null pointer constant.
>
> According to the 1990 ISO C standard, no type cast is required; in=20
> this context, 0 is not an int (nonlong integral type), it is a pointer=20
> value -- specifically, it is the null pointer constant.
>
> I think this warning is wrong.
>
> Thanks,
>
> Larry Baker
> US Geological Survey
> 650-329-5608
> baker@usgs.gov
>
> On Jul 29, 2010, at 9:54 AM, PGI Technical Support wrote:
>
>> Larry Baker wrote:
>>> Dave,
>>>
>>> The more I thought about this issue, it seems to me the C 1990=20
>>> section 6.3.15 applies:
>>>
>>>>> =95 6.3.15 Conditional operator, says if the second and third=20
>>>>> operands are pointers ..., the result type is a pointer to a type=20
>>>>> qualified with all the type qualifiers of the types pointed-to by=20
>>>>> both operands.
>>>
>>> Thus, ( cond ? (char *) : (const char *) ) should have the result=20
>>> type (const char *).  Both (char *) and (const char *) are=20
>>> compatible as rvalues with (const char *), similar to passing either=20
>>> a (char *) or a (const char *) to a (const char *) function=20
>>> argument.  pgcc should not be complaining.  Do you agree?
>>>
>>> Larry Baker
>>> US Geological Survey
>>> 650-329-5608
>>> baker@usgs.gov <mailto:baker@usgs.gov>
>>>
>> Larry,
>>
>> I created TPR 17139, and put your arguments in the report.
>> Engineering has not responded yet, but there is every possibility
>> you are correct.
>>
>> The language standards are are complicated, so I let
>> engineering tell me if a problem like this is a user bug or a=20
>> compiler defect.
>>
>> regards,
>> dave
>>
>>
>> --=20
>> Dave Borer    Customer Service Manager, The Portland Group
>> email        dave.borer@st.com
>> phone        (503)-431-7113
>>
>


--=20
Dave Borer	Customer Service Manager, The Portland Group
email		dave.borer@st.com
phone		(503)-431-7113



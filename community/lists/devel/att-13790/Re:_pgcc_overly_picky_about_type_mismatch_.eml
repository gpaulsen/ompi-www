Received: from gscodens03.cr.usgs.gov ([136.177.7.24])          by
 gscodenh01.cr.usgs.gov (Lotus Domino Release 8.5.1FP2)          with ESMTP id
 2010072718591296-172283 ;          Tue, 27 Jul 2010 18:59:12 -0600 
X-IronPort-Anti-Spam-Filtered: true
X-IronPort-Anti-Spam-Result: AjoBAO8dT0zPfpCFkWdsb2JhbACfahUBAQEBBw0KBxEFHcJrAoMGgi4EhAmEYYZ6
X-IronPort-AV: E=Sophos;i="4.55,271,1278309600"; 
   d="scan'208";a="187592002"
Received: from eu1sys200aog112.obsmtp.com ([207.126.144.133])  by
 gscodens03.cr.usgs.gov with ESMTP; 27 Jul 2010 18:59:10 -0600
Received: from source ([164.129.1.35]) (using TLSv1) by
 eu1sys200aob112.postini.com ([207.126.147.11]) with SMTP	ID
 DSNKTE+A3zrae4mqUHE+ZyTWgp/sLeiut+oU@postini.com; Wed, 28 Jul 2010 00:59:13
 UTC
Received: from zeta.dmz-eu.st.com (ns2.st.com [164.129.230.9])	by
 beta.dmz-eu.st.com (STMicroelectronics) with ESMTP id 4151A87	for
 <baker@usgs.gov>; Wed, 28 Jul 2010 00:59:11 +0000 (GMT)
Received: from mail7.sgp.st.com (mail7.sgp.st.com [164.129.223.81])	by
 zeta.dmz-eu.st.com (STMicroelectronics) with ESMTP id F1A0D4C83	for
 <baker@usgs.gov>; Wed, 28 Jul 2010 00:59:10 +0000 (GMT)
Received: from [167.4.208.110] (borer.wil.st.com [167.4.208.110])	by
 mail7.sgp.st.com (MOS 4.1.8-GA)	with ESMTP id AFW69691 (AUTH pgi.trs);	Wed,
 28 Jul 2010 02:59:09 +0200
Message-ID: <4C4F80DB.2070004@pgroup.com>
Date: Tue, 27 Jul 2010 17:59:07 -0700
From: PGI Technical Support <trs@pgroup.com>
Reply-To: PGI Technical Support <trs@pgroup.com>
Organization: STMicroelectronics,SST Portland Lab
User-Agent: Thunderbird 2.0.0.22 (X11/20090605)
MIME-Version: 1.0
To: Larry Baker <baker@usgs.gov>
Subject: Re: pgcc overly picky about type mismatch?
References: <07842FE0-A7CD-43F9-B1DD-DA3D12AC2837@usgs.gov>
In-Reply-To: <07842FE0-A7CD-43F9-B1DD-DA3D12AC2837@usgs.gov>
X-MIMETrack: Itemize by SMTP Server on gscodenh01/SERVER/USGS/DOI(Release 8.5.1FP2|March
 17, 2010) at 07/27/2010 18:59:13,
	Serialize by Router on gscamnlm03/SERVER/USGS/DOI(Release 8.0.2FP1HF618 | November
 5, 2009) at 07/27/2010 05:59:15 PM,
	Serialize complete at 07/27/2010 05:59:15 PM,
	Serialize by POP3 Server on gscamnlm03/SERVER/USGS/DOI(Release
 8.0.2FP1HF618 | November 5, 2009) at 07/27/2010 06:14:04 PM
Content-Type: text/plain; charset="windows-1252"; format=flowed
Content-Transfer-Encoding: quoted-printable

Larry,

     Thanks for the report.

     We recreated your behavior and logged it as TPR 17139.

regards,
dave


Larry Baker wrote:
> Customer information:
>
> Larry Baker
> US Geological Survey
> 650-329-5608
> baker@usgs.gov
>
> Product: 2183-WS
> PIN: 507549
>
> Problem description:
>
> I am trying to track down the warnings that occur when compiling the=20
> UCAR NetCDF package with PGI compilers.  I have found a case that gcc=20
> does not warn about, but pgcc does.  If I understand the code and the=20
> C (1990) standard, I think pgcc is complaining too much.
>
> You can reproduce the warnings by downloading the UCAR NetCDF source=20
> package, netcdf.tar.gz, from=20
> http://www.unidata.ucar.edu/software/netcdf/.  Assuming you download=20
> it to /usr/local/src, here are the commands that illustrate the warnings:
>
> # cd /usr/local/src
> # tar -xzf netcdf.tar.gz
> # cd netcdf-4.1.1
> # ./configure >/dev/null 2>&1
> # cd ncgen
> # pgcc -DHAVE=5FCONFIG=5FH -I. -I.. -I../fortran       -I.. -I../libsrc=20
> -I../libsrc    -g -O2 -tp amd64 -Msignextend -DNO=5FPGI=5FOFFSET -c -o=20
> genf77.o genf77.c
> PGC-W-0095-Type cast required for this conversion (genf77.c: 498)
> PGC-W-0095-Type cast required for this conversion (genf77.c: 511)
> PGC/x86-64 Linux 10.3-0: compilation completed with warnings
>
> To eliminate the warnings, I had to modify the two source lines to=20
> cast the result from static const char* f77varncid() as (char *):
>
>>     /* Use the specialized put=5Fatt=5FXX routines if possible*/
>>     switch (basetype->typ.typecode) {
>>     case NC=5FBYTE:
>>     case NC=5FSHORT:
>>     case NC=5FINT:
>>     case NC=5FFLOAT:
>>     case NC=5FDOUBLE:
>>         f77attrify(asym,code);
>>         codedump(code);
>>         bbClear(code);
>>         bbprintf0(stmt,"stat =3D nf=5Fput=5Fatt=5F%s(ncid, %s, %s, %s, %=
lu,=20
>> %sval)\n",
>>                 nfstype(basetype->typ.typecode),
>>                 (asym->att.var =3D=3D NULL?"NF=5FGLOBAL"
>>                                       :(char *)=20
>> f77varncid(asym->att.var)),   <--- here
>>                 f77escapifyname(asym->name),
>>                 nftype(basetype->typ.typecode),
>>                 len,
>>                 ncftype(basetype->typ.typecode));
>>         codedump(stmt);
>>         break;
>>
>>     case NC=5FCHAR:
>>         len =3D bbLength(code);
>>         f77quotestring(code);
>>         bbprintf0(stmt,"stat =3D nf=5Fput=5Fatt=5Ftext(ncid, %s, %s, %lu=
, ",
>>                 (asym->att.var =3D=3D NULL?"NF=5FGLOBAL"
>>                                       :(char=20
>> *)f77varncid(asym->att.var)),   <--- and here
>>                 f77escapifyname(asym->name),
>>                 (len=3D=3D0?1:len));
>>         codedump(stmt);
>>         codedump(code);
>>         codeline(")");
>>         break;
>
> Here is static const char* f77varncid():
>
>> /* Compute the name for a given var's id*/
>> /* Watch out: the result is a static*/
>> static const char*
>> f77varncid(Symbol* vsym)
>> {
>>     const char* tmp1;
>>     char* vartmp;
>>     tmp1 =3D f77name(vsym);
>>     vartmp =3D poolalloc(strlen(tmp1)+strlen("=5Fid")+1);
>>     strcpy(vartmp,tmp1);
>>     strcat(vartmp,"=5Fid");
>>     return vartmp;
>> }
>
> There are other lines in genf77.c that use f77varncid() in a print=20
> statement, so the warnings do not occur every time f77varncid()=20
> provides a string for %s:
>
>>     if (nvars > 0) {
>>         f77skip();
>>         f77comment("variable ids");
>>         for(ivar =3D 0; ivar < nvars; ivar++) {
>>             Symbol* vsym =3D (Symbol*)listget(vardefs,ivar);
>>             bbprintf0(stmt,"integer %s;\n", f77varncid(vsym));
>>             codedump(stmt);
>>         }
>
> The warnings occur in the only two instances where f77varncid() is=20
> used in a conditional expression.  In both cases, the second operand=20
> is a literal string, e.g., "NF=5FGLOBAL".  I would have thought that a=20
> (static const char*) and a string literal would be compatible types. =20
> I experimented with a (const char *) cast instead of a (char *) cast,=20
> but that does not work.  I think it should.
>
> I admit, I have an old copy of the C standard =97 from 1990.  But,=20
> here's my interpretation of what it says about this:
>
> =95 6.1.4 String literals, says string literals are converted to an=20
> array of type char.  If the program attempts to modify a string=20
> literal, the behavior is undefined.  It does not say that the type has=20
> the const type qualifier (though, you would think it should).
>
> =95 6.3.15 Conditional operator, says if the second and third operands=20
> are pointers ..., the result type is a pointer to a type qualified=20
> with all the type qualifiers of the types pointed-to by both operands.
>
> This would seem to explain the warning message, since the string=20
> literal is (char *) and f77varncid() is (const char *).  However,=20
> 6.3.15 goes on to say:
>
> Furthermore, if both operands are pointers to ... differently=20
> qualified versions of a compatible type, the result has the composite=20
> type.
>
> Which leads me to believe you are allowed to mix const and non-const=20
> versions of a compatible type.
>
> Lastly:
>
> =95 6.5.3 Type qualifiers, says that the properties associated with=20
> qualified types are meaningful only for expressions that are lvalues.
>
> Seems to make the issue moot, since it says const-ness only applies to=20
> lvalues.
>
> So, I think both 6.3.15 and 6.5.3 imply that (char *) and (const char=20
> *) are compatible as the second and third operands in a conditional=20
> expression which is not an lvalue, which is the case in this code.  As=20
> I mentioned above, gcc does not complain about this code.  What do you=20
> think?
>
> Larry Baker
> US Geological Survey
> 650-329-5608
> baker@usgs.gov
>


--=20
Dave Borer	Customer Service Manager, The Portland Group
email		dave.borer@st.com
phone		(503)-431-7113



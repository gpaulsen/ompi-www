<html><head><meta http-equiv="Content-Type" content="text/html charset=utf-8"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" class="">Soooo….are you going to restore the rest of it? Or are we asking Nathan to refile it without that one piece?<div class=""><br class=""></div><div class=""><br class=""><div><blockquote type="cite" class=""><div class="">On Apr 15, 2015, at 7:26 AM, Elena Elkina &lt;<a href="mailto:elena.elkina@itseez.com" class="">elena.elkina@itseez.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><div class=""><div dir="ltr" class=""><div class=""><div class="">Hi Ralph. <br class=""><br class="">We don't need to revert the whole commit, just to fix this small part. I proposed a fast fix for that in the PR but probably we need to fix it more intellectually.<br class=""><br class=""></div>Best regards,<br class=""></div>Elena<br class=""></div><div class="gmail_extra"><br class=""><div class="gmail_quote">On Wed, Apr 15, 2015 at 6:08 PM, Ralph Castain <span dir="ltr" class="">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank" class="">rhc@open-mpi.org</a>&gt;</span> wrote:<br class=""><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">I’m really puzzled - I saw where you fixed the one part of this commit that caused a problem for you. But what happened to the rest of it? Was it really necessary to revert the entire thing, or was it only that piece that caused a problem?<br class="">
<br class="">
<br class="">
&gt; On Apr 15, 2015, at 5:41 AM, <a href="mailto:gitdub@crest.iu.edu" class="">gitdub@crest.iu.edu</a> wrote:<br class="">
&gt;<br class="">
&gt; This is an automated email from the git hooks/post-receive script. It was<br class="">
&gt; generated because a ref change was pushed to the repository containing<br class="">
&gt; the project "open-mpi/ompi".<br class="">
&gt;<br class="">
&gt; The branch, revert-520-valgrind_cleanness has been created<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; at&nbsp; 7a8a4a0c945f1918094caf57bca62cf1f263bfba (commit)<br class="">
&gt;<br class="">
&gt; - Log -----------------------------------------------------------------<br class="">
&gt; <a href="https://github.com/open-mpi/ompi/commit/7a8a4a0c945f1918094caf57bca62cf1f263bfba" target="_blank" class="">https://github.com/open-mpi/ompi/commit/7a8a4a0c945f1918094caf57bca62cf1f263bfba</a><br class="">
&gt;<br class="">
&gt; commit 7a8a4a0c945f1918094caf57bca62cf1f263bfba<br class="">
&gt; Author: Mike Dubman &lt;<a href="mailto:miked@mellanox.com" class="">miked@mellanox.com</a>&gt;<br class="">
&gt; Date:&nbsp; &nbsp;Wed Apr 15 15:41:27 2015 +0300<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; Revert "fix memory leaks and valgrind errors"<br class="">
&gt;<br class="">
&gt; diff --git a/ompi/mpi/tool/finalize.c b/ompi/mpi/tool/finalize.c<br class="">
&gt; index 38a0ce3..7efec79 100644<br class="">
&gt; --- a/ompi/mpi/tool/finalize.c<br class="">
&gt; +++ b/ompi/mpi/tool/finalize.c<br class="">
&gt; @@ -37,15 +37,6 @@ int MPI_T_finalize (void)<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;if (0 == --mpit_init_count) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(void) ompi_info_close_components ();<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; if ((!ompi_mpi_initialized || ompi_mpi_finalized) &amp;&amp;<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (NULL != ompi_mpi_main_thread)) {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* we are not between MPI_Init and MPI_Finalize so we<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* have to free the ompi_mpi_main_thread */<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OBJ_RELEASE(ompi_mpi_main_thread);<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ompi_mpi_main_thread = NULL;<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; }<br class="">
&gt; -<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(void) opal_finalize_util ();<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt;<br class="">
&gt; diff --git a/ompi/runtime/ompi_mpi_init.c b/ompi/runtime/ompi_mpi_init.c<br class="">
&gt; index 81fef2a..dbc800b 100644<br class="">
&gt; --- a/ompi/runtime/ompi_mpi_init.c<br class="">
&gt; +++ b/ompi/runtime/ompi_mpi_init.c<br class="">
&gt; @@ -1,4 +1,3 @@<br class="">
&gt; -/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */<br class="">
&gt; /*<br class="">
&gt;&nbsp; * Copyright (c) 2004-2010 The Trustees of Indiana University and Indiana<br class="">
&gt;&nbsp; *&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;University Research and Technology<br class="">
&gt; @@ -11,7 +10,7 @@<br class="">
&gt;&nbsp; * Copyright (c) 2004-2005 The Regents of the University of California.<br class="">
&gt;&nbsp; *&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;All rights reserved.<br class="">
&gt;&nbsp; * Copyright (c) 2006-2014 Cisco Systems, Inc.&nbsp; All rights reserved.<br class="">
&gt; - * Copyright (c) 2006-2015 Los Alamos National Security, LLC.&nbsp; All rights<br class="">
&gt; + * Copyright (c) 2006-2013 Los Alamos National Security, LLC.&nbsp; All rights<br class="">
&gt;&nbsp; *&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reserved.<br class="">
&gt;&nbsp; * Copyright (c) 2006-2009 University of Houston. All rights reserved.<br class="">
&gt;&nbsp; * Copyright (c) 2008-2009 Sun Microsystems, Inc.&nbsp; All rights reserved.<br class="">
&gt; @@ -343,10 +342,7 @@ void ompi_mpi_thread_level(int requested, int *provided)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ompi_mpi_thread_provided = *provided = requested;<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; if (!ompi_mpi_main_thread) {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; ompi_mpi_main_thread = opal_thread_get_self();<br class="">
&gt; -&nbsp; &nbsp; }<br class="">
&gt; +&nbsp; &nbsp; ompi_mpi_main_thread = opal_thread_get_self();<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;ompi_mpi_thread_multiple = (ompi_mpi_thread_provided ==<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MPI_THREAD_MULTIPLE);<br class="">
&gt; diff --git a/opal/mca/base/mca_base_var.c b/opal/mca/base/mca_base_var.c<br class="">
&gt; index fe6a87e..67511f3 100644<br class="">
&gt; --- a/opal/mca/base/mca_base_var.c<br class="">
&gt; +++ b/opal/mca/base/mca_base_var.c<br class="">
&gt; @@ -67,8 +67,7 @@ static char *mca_base_var_file_prefix = NULL;<br class="">
&gt; static char *mca_base_envar_file_prefix = NULL;<br class="">
&gt; static char *mca_base_param_file_path = NULL;<br class="">
&gt; static char *mca_base_env_list = NULL;<br class="">
&gt; -#define MCA_BASE_ENV_LIST_SEP_DEFAULT ";"<br class="">
&gt; -static char *mca_base_env_list_sep = MCA_BASE_ENV_LIST_SEP_DEFAULT;<br class="">
&gt; +static char *mca_base_env_list_sep = ";";<br class="">
&gt; static char *mca_base_env_list_internal = NULL;<br class="">
&gt; static bool mca_base_var_suppress_override_warning = false;<br class="">
&gt; static opal_list_t mca_base_var_file_values;<br class="">
&gt; @@ -274,8 +273,6 @@ int mca_base_var_init(void)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "Set SHELL env variables",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0, OPAL_INFO_LVL_3,<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MCA_BASE_VAR_SCOPE_READONLY, &amp;mca_base_env_list);<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; mca_base_env_list_sep = MCA_BASE_ENV_LIST_SEP_DEFAULT;<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(void)mca_base_var_register ("opal", "mca", "base", "env_list_delimiter",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "Set SHELL env variables delimiter. Default: semicolon ';'",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0, OPAL_INFO_LVL_3,<br class="">
&gt; @@ -433,7 +430,6 @@ static int mca_base_var_cache_files(bool rel_path_search)<br class="">
&gt;&nbsp; &nbsp; &nbsp;if (OPAL_SUCCESS != ret) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return ret;<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt; -<br class="">
&gt;&nbsp; &nbsp; &nbsp;mca_base_envar_files = strdup(mca_base_var_files);<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;(void) mca_base_var_register_synonym (ret, "opal", "mca", NULL, "param_files",<br class="">
&gt; @@ -1135,15 +1131,11 @@ int mca_base_var_finalize(void)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (NULL != mca_base_var_file_list) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;opal_argv_free(mca_base_var_file_list);<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; mca_base_var_file_list = NULL;<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(void) mca_base_var_group_finalize ();<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(void) mca_base_pvar_finalize ();<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OBJ_DESTRUCT(&amp;mca_base_var_index_hash);<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; free (mca_base_envar_files);<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; mca_base_envar_files = NULL;<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* All done */<br class="">
&gt; @@ -1249,31 +1241,15 @@ static int fixup_files(char **file_list, char * path, bool rel_path_search, char<br class="">
&gt;<br class="">
&gt; static int read_files(char *file_list, opal_list_t *file_values, char sep)<br class="">
&gt; {<br class="">
&gt; -&nbsp; &nbsp; char **tmp = opal_argv_split(file_list, sep);<br class="">
&gt; -&nbsp; &nbsp; int i, count, ret;<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; if (!tmp) {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; return OPAL_ERR_OUT_OF_RESOURCE;<br class="">
&gt; -&nbsp; &nbsp; }<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; if (mca_base_var_file_list) {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; count = opal_argv_count (mca_base_var_file_list);<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; ret = opal_argv_insert (&amp;mca_base_var_file_list, count, tmp);<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; if (OPAL_SUCCESS != ret) {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ret;<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; }<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; opal_argv_free (tmp);<br class="">
&gt; -&nbsp; &nbsp; } else {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; mca_base_var_file_list = tmp;<br class="">
&gt; -&nbsp; &nbsp; }<br class="">
&gt; -<br class="">
&gt; -&nbsp; &nbsp; count = opal_argv_count(mca_base_var_file_list);<br class="">
&gt; +&nbsp; &nbsp; int i, count;<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* Iterate through all the files passed in -- read them in reverse<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; order so that we preserve unix/shell path-like semantics (i.e.,<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; the entries farthest to the left get precedence) */<br class="">
&gt;<br class="">
&gt; +&nbsp; &nbsp; mca_base_var_file_list = opal_argv_split(file_list, sep);<br class="">
&gt; +&nbsp; &nbsp; count = opal_argv_count(mca_base_var_file_list);<br class="">
&gt; +<br class="">
&gt;&nbsp; &nbsp; &nbsp;for (i = count - 1; i &gt;= 0; --i) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mca_base_parse_paramfile(mca_base_var_file_list[i], file_values);<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt; diff --git a/opal/mca/btl/vader/btl_vader_component.c b/opal/mca/btl/vader/btl_vader_component.c<br class="">
&gt; index 9363d47..e25035a 100644<br class="">
&gt; --- a/opal/mca/btl/vader/btl_vader_component.c<br class="">
&gt; +++ b/opal/mca/btl/vader/btl_vader_component.c<br class="">
&gt; @@ -209,7 +209,6 @@ static int mca_btl_vader_component_register (void)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "single_copy_mechanism", "Single copy mechanism to use (defaults to best available)",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MCA_BASE_VAR_TYPE_INT, new_enum, 0, MCA_BASE_VAR_FLAG_SETTABLE,<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; OPAL_INFO_LVL_3, MCA_BASE_VAR_SCOPE_GROUP, &amp;mca_btl_vader_component.single_copy_mechanism);<br class="">
&gt; -&nbsp; &nbsp; OBJ_RELEASE(new_enum);<br class="">
&gt;<br class="">
&gt; #if OPAL_BTL_VADER_HAVE_KNEM<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* Currently disabling DMA mode by default; it's not clear that this is useful in all applications and architectures. */<br class="">
&gt; diff --git a/opal/mca/installdirs/base/installdirs_base_components.c b/opal/mca/installdirs/base/installdirs_base_components.c<br class="">
&gt; index 4ae3a0f..33a92db 100644<br class="">
&gt; --- a/opal/mca/installdirs/base/installdirs_base_components.c<br class="">
&gt; +++ b/opal/mca/installdirs/base/installdirs_base_components.c<br class="">
&gt; @@ -164,7 +164,6 @@ opal_installdirs_base_close(void)<br class="">
&gt;&nbsp; &nbsp; &nbsp;free(opal_install_dirs.opaldatadir);<br class="">
&gt;&nbsp; &nbsp; &nbsp;free(opal_install_dirs.opallibdir);<br class="">
&gt;&nbsp; &nbsp; &nbsp;free(opal_install_dirs.opalincludedir);<br class="">
&gt; -&nbsp; &nbsp; memset (&amp;opal_install_dirs, 0, sizeof (opal_install_dirs));<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;return mca_base_framework_components_close (&amp;opal_installdirs_base_framework, NULL);<br class="">
&gt; }<br class="">
&gt; diff --git a/opal/runtime/opal_finalize.c b/opal/runtime/opal_finalize.c<br class="">
&gt; index 5a12398..b6d67bd 100644<br class="">
&gt; --- a/opal/runtime/opal_finalize.c<br class="">
&gt; +++ b/opal/runtime/opal_finalize.c<br class="">
&gt; @@ -104,9 +104,6 @@ opal_finalize_util(void)<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* finalize the class/object system */<br class="">
&gt;&nbsp; &nbsp; &nbsp;opal_class_finalize();<br class="">
&gt;<br class="">
&gt; -&nbsp; &nbsp; free (opal_process_info.nodename);<br class="">
&gt; -&nbsp; &nbsp; opal_process_info.nodename = NULL;<br class="">
&gt; -<br class="">
&gt;&nbsp; &nbsp; &nbsp;return OPAL_SUCCESS;<br class="">
&gt; }<br class="">
&gt;<br class="">
&gt; diff --git a/opal/runtime/opal_init.c b/opal/runtime/opal_init.c<br class="">
&gt; index 7ae32a4..89d6600 100644<br class="">
&gt; --- a/opal/runtime/opal_init.c<br class="">
&gt; +++ b/opal/runtime/opal_init.c<br class="">
&gt; @@ -303,6 +303,11 @@ opal_init_util(int* pargc, char*** pargv)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;goto return_error;<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt;<br class="">
&gt; +&nbsp; &nbsp; if (OPAL_SUCCESS != (ret = opal_net_init())) {<br class="">
&gt; +&nbsp; &nbsp; &nbsp; &nbsp; error = "opal_net_init";<br class="">
&gt; +&nbsp; &nbsp; &nbsp; &nbsp; goto return_error;<br class="">
&gt; +&nbsp; &nbsp; }<br class="">
&gt; +<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* Setup the parameter system */<br class="">
&gt;&nbsp; &nbsp; &nbsp;if (OPAL_SUCCESS != (ret = mca_base_var_init())) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;error = "mca_base_var_init";<br class="">
&gt; @@ -315,11 +320,6 @@ opal_init_util(int* pargc, char*** pargv)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;goto return_error;<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt;<br class="">
&gt; -&nbsp; &nbsp; if (OPAL_SUCCESS != (ret = opal_net_init())) {<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; error = "opal_net_init";<br class="">
&gt; -&nbsp; &nbsp; &nbsp; &nbsp; goto return_error;<br class="">
&gt; -&nbsp; &nbsp; }<br class="">
&gt; -<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* pretty-print stack handlers */<br class="">
&gt;&nbsp; &nbsp; &nbsp;if (OPAL_SUCCESS != (ret = opal_util_register_stackhandlers())) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;error = "opal_util_register_stackhandlers";<br class="">
&gt; diff --git a/opal/runtime/opal_params.c b/opal/runtime/opal_params.c<br class="">
&gt; index ff28a0c..3b4d4a7 100644<br class="">
&gt; --- a/opal/runtime/opal_params.c<br class="">
&gt; +++ b/opal/runtime/opal_params.c<br class="">
&gt; @@ -231,7 +231,6 @@ int opal_register_params(void)<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt;<br class="">
&gt; #if OPAL_ENABLE_TIMING<br class="">
&gt; -&nbsp; &nbsp; opal_timing_sync_file = NULL;<br class="">
&gt;&nbsp; &nbsp; &nbsp;(void) mca_base_var_register ("opal", "opal", NULL, "timing_sync_file",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"Clock synchronisation information generated by mpisync tool. You don't need to touch this if you use mpirun_prof tool.",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0,<br class="">
&gt; @@ -241,14 +240,12 @@ int opal_register_params(void)<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;opal_output(0, "Cannot read file %s containing clock synchronisation information\n", opal_timing_sync_file);<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt;<br class="">
&gt; -&nbsp; &nbsp; opal_timing_output = NULL;<br class="">
&gt;&nbsp; &nbsp; &nbsp;(void) mca_base_var_register ("opal", "opal", NULL, "timing_output",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"The name of output file for timing information. If this parameter is not set then output will be directed into OPAL debug channel.",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0,<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OPAL_INFO_LVL_9, MCA_BASE_VAR_SCOPE_ALL,<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;opal_timing_output);<br class="">
&gt;<br class="">
&gt; -&nbsp; &nbsp; opal_timing_overhead = true;<br class="">
&gt;&nbsp; &nbsp; &nbsp;(void) mca_base_var_register ("opal", "opal", NULL, "timing_overhead",<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"Timing framework introduce additional overhead (malloc's mostly)."<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;" The time spend in such costly routines is measured and may be accounted"<br class="">
&gt; @@ -283,6 +280,9 @@ int opal_register_params(void)<br class="">
&gt;<br class="">
&gt; int opal_deregister_params(void)<br class="">
&gt; {<br class="">
&gt; +&nbsp; &nbsp; opal_signal_string = NULL;<br class="">
&gt; +&nbsp; &nbsp; opal_net_private_ipv4 = NULL;<br class="">
&gt; +&nbsp; &nbsp; opal_set_max_sys_limits = NULL;<br class="">
&gt;&nbsp; &nbsp; &nbsp;opal_register_done = false;<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;return OPAL_SUCCESS;<br class="">
&gt; diff --git a/orte/runtime/orte_init.c b/orte/runtime/orte_init.c<br class="">
&gt; index 678a66c..cc47927 100644<br class="">
&gt; --- a/orte/runtime/orte_init.c<br class="">
&gt; +++ b/orte/runtime/orte_init.c<br class="">
&gt; @@ -182,8 +182,7 @@ int orte_init(int* pargc, char*** pargv, orte_proc_type_t flags)<br class="">
&gt;&nbsp; &nbsp; &nbsp;if (NULL != opal_process_info.nodename) {<br class="">
&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;free(opal_process_info.nodename);<br class="">
&gt;&nbsp; &nbsp; &nbsp;}<br class="">
&gt; -&nbsp; &nbsp; /* opal_finalize_util will call free on this pointer so set from strdup */<br class="">
&gt; -&nbsp; &nbsp; opal_process_info.nodename = strdup (orte_process_info.nodename);<br class="">
&gt; +&nbsp; &nbsp; opal_process_info.nodename = orte_process_info.nodename;<br class="">
&gt;<br class="">
&gt;&nbsp; &nbsp; &nbsp;/* setup the dstore framework */<br class="">
&gt;&nbsp; &nbsp; &nbsp;if (ORTE_SUCCESS != (ret = mca_base_framework_open(&amp;opal_dstore_base_framework, 0))) {<br class="">
&gt;<br class="">
&gt;<br class="">
&gt; -----------------------------------------------------------------------<br class="">
&gt;<br class="">
&gt;<br class="">
&gt; hooks/post-receive<br class="">
&gt; --<br class="">
&gt; open-mpi/ompi<br class="">
&gt; _______________________________________________<br class="">
&gt; ompi-commits mailing list<br class="">
&gt; <a href="mailto:ompi-commits@open-mpi.org" class="">ompi-commits@open-mpi.org</a><br class="">
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/ompi-commits" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/ompi-commits</a><br class="">
<br class="">
_______________________________________________<br class="">
devel mailing list<br class="">
<a href="mailto:devel@open-mpi.org" class="">devel@open-mpi.org</a><br class="">
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank" class="">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br class="">
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/04/17224.php" target="_blank" class="">http://www.open-mpi.org/community/lists/devel/2015/04/17224.php</a></blockquote></div><br class=""></div>
_______________________________________________<br class="">devel mailing list<br class=""><a href="mailto:devel@open-mpi.org" class="">devel@open-mpi.org</a><br class="">Subscription: http://www.open-mpi.org/mailman/listinfo.cgi/devel<br class="">Link to this post: http://www.open-mpi.org/community/lists/devel/2015/04/17225.php</div></blockquote></div><br class=""></div></body></html>

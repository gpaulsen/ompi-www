<html><head><style type="text/css"><!-- DIV {margin:0px;} --></style></head><body><div style="font-family:times new roman, new york, times, serif;font-size:10pt">Okay guys.. with all your support and help in understanding ompi architecture, I was able to get Xensocket to work.&nbsp; Only minor changes to the xensocket kernel module made it compatible with libevent. I am getting results which are bad but I am sure, I have to cleanup the code. At least my results have improved over native netfront-netback of xen for messages of size larger than 1 MB. <br><br>I started with making minor changes in the TCP btl, but it seems it is not the best way, as changes are quite huge and it is better to have separate dedicated btl for xensockets. As you guys might be aware Xen supports live migration, now I have one stupid question. My knowledge so far suggests that btl component is initialized only once. The scerario here is if my guest os is migrated from one
 physical node to another, and realizes that the communicating processes are now on one physical host and they should abandon use of TCP btl and make use of Xensocket btl. I am sure it would not happen out of the box, but is it possible without making heavy changes in the openmpi architecture? <br>With the current design, i am running a mix of tcp and xensocket btls, and endpoints check periodically if they are on same physical host or not. This has quite a big penalty in terms of time.<br><br>Another question is (good thing i am using email otherwise you guys would beat the hell outta me, its such a basic question). I am not able to track MPI_Recv(...) api call and its alike calls. Once in the code of MPI_Recv(..) we give a call to rc = MCA_PML_CALL(recv(buf, count ... ). This call goes to the macro, and pml.recv(..) gets invoked (mca_pml_base_module_recv_fn_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pml_recv;) . Where can I find the actual
 function? I get totally lost when trying to pinpoint what exactly is happening. Basically, I am looking for a place where tcp btl recv is getting called with all the goodies and&nbsp; parameters which were passed by the MPI programmer. I hope I have made my question understandable. <br><div>&nbsp;</div>Best Regards,<br>Muhammad Atif<div style="font-family: times new roman,new york,times,serif; font-size: 10pt;"><br><br><div style="font-family: times new roman,new york,times,serif; font-size: 12pt;">----- Original Message ----<br>From: Brian W. Barrett &lt;brbarret@open-mpi.org&gt;<br>To: Open MPI Developers &lt;devel@open-mpi.org&gt;<br>Sent: Wednesday, February 6, 2008 2:57:31 AM<br>Subject: Re: [OMPI devel] xensocket - callbacks through OPAL/libevent<br><br>
On 
Mon, 
4 
Feb 
2008, 
Muhammad 
Atif 
wrote:<br><br>&gt; 
I 
am 
trying 
to 
port 
xensockets 
to 
openmpi. 
In 
principle, 
I 
have 
the <br>&gt; 
framework 
and 
everything, 
but 
there 
seems 
to 
be 
a 
small 
issue, 
I 
cannot <br>&gt; 
get 
libevent 
(or 
OPAL) 
to 
give 
callbacks 
for 
receive 
(or 
send) 
for <br>&gt; 
xensockets. 
I 
have 
tried 
to 
implement 
native 
code 
for 
xensockets 
with <br>&gt; 
libevent 
library, 
again 
the 
same 
issue.&nbsp; 
No 
call 
backs! 
. 
With 
normal <br>&gt; 
sockets, 
callbacks 
do 
come 
easily.<br>&gt;<br>&gt; 
So 
question 
is, 
do 
the 
socket/file 
descriptors 
have 
to 
have 
some 
special <br>&gt; 
mechanism 
attached 
to 
them 
to 
support 
callbacks 
for 
libevent/opal? 
i.e <br>&gt; 
some 
structure/magic?. 
i.e. 
maybe 
the 
developers 
of 
xensockets 
did 
not <br>&gt; 
add 
that 
callback/interrupt 
thing 
at 
the 
time 
of 
creation. 
Xensockets 
is <br>&gt; 
open 
source, 
but 
my 
knowledge 
about 
these 
issues 
is 
limited. 
So 
I 
though <br>&gt; 
some 
pointer 
in 
right 
direction 
might 
be 
useful.<br><br>Yes 
and 
no 
:).&nbsp; 
As 
you 
discovered, 
the 
OPAL 
interface 
just 
repackages 
a <br>library 
called 
libevent 
to 
handle 
its 
socket 
multiplexing.&nbsp; 
Libevent 
can <br>use 
a 
number 
of 
different 
mechanisms 
to 
look 
for 
activity 
on 
sockets, <br>including 
select() 
and 
poll() 
calls.&nbsp; 
On 
Linux, 
it 
will 
generally 
use <br>poll().&nbsp; 
poll() 
requires 
some 
kernel 
support 
to 
do 
its 
thing, 
so 
if <br>Xensockets 
doesn't 
implement 
the 
right 
magic 
to 
trigger 
poll() 
events, <br>then 
libevent 
won't 
work 
for 
Xensockets.&nbsp; 
There's 
really 
nothing 
you 
can <br>do 
from 
the 
Open 
MPI 
front 
to 
work 
around 
this 
issue 
-- 
it 
would 
have 
to <br>be 
fixed 
as 
part 
of 
Xensockets.<br><br>&gt; 
Second 
question 
is, 
what 
if 
we 
cannot 
have 
the 
callbacks. 
What 
is 
the <br>&gt; 
recommended 
way 
to 
implement 
the 
btl 
component 
for 
such 
a 
device? 
Do 
we <br>&gt; 
need 
to 
do 
this 
with 
event 
timers?<br><br>Have 
a 
look 
at 
any 
of 
the 
BTLs 
that 
isn't 
TCP 
-- 
none 
of 
them 
use 
libevent <br>callbacks 
for 
progress.&nbsp; 
Instead, 
they 
provide 
a 
progress 
function 
as 
part <br>of 
the 
BTL 
interface, 
which 
is 
called 
on 
a 
regular 
basis 
whenever 
progress <br>needs 
to 
be 
made.<br><br>Brian<br>_______________________________________________<br>devel 
mailing 
list<br><a ymailto="mailto:devel@open-mpi.org" href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></div><br></div></div><br>
      <hr size=1>Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile. <a href="http://us.rd.yahoo.com/evt=51733/*http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ "> Try it now.</a></body></html>

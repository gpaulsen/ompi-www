<div dir="ltr">Some progress:<div><br></div><div>I fixed IA64.asm but still saw failures.</div><div>I realized I&#39;d not checked the ia64/atomic.h file.</div><div><br></div><div>Lo and behold the origin of the bogus &quot;sxt4&quot; is a pair of improper casts, removed by the following:</div>
<div><div>--- opal/include/opal/sys/ia64/atomic.h~        2014-01-23 13:04:03.000000000 -0800</div><div>+++ opal/include/opal/sys/ia64/atomic.h 2014-01-23 13:04:42.000000000 -0800</div><div>@@ -119,7 +119,7 @@</div><div>     __asm__ __volatile__ (&quot;cmpxchg8.acq %0=[%1],%2,ar.ccv&quot;:</div>
<div>                   &quot;=r&quot;(ret) : &quot;r&quot;(addr), &quot;r&quot;(newval) : &quot;memory&quot;);</div><div> </div><div>-    return ((int32_t)ret == oldval);</div><div>+    return (ret == oldval);</div><div>
 }</div><div> </div><div> </div><div>@@ -132,7 +132,7 @@</div><div>     __asm__ __volatile__ (&quot;cmpxchg8.rel %0=[%1],%2,ar.ccv&quot;:</div><div>                   &quot;=r&quot;(ret) : &quot;r&quot;(addr), &quot;r&quot;(newval) : &quot;memory&quot;);</div>
<div> </div><div>-    return ((int32_t)ret == oldval);</div><div>+    return (ret == oldval);</div><div> }</div><div> </div><div> #endif /* OMPI_GCC_INLINE_ASSEMBLY */</div></div><div><br></div><div><br></div><div>I will retest ASAP and report with, I hope, an attachment to fix both IA64.asm and ia64/atomic.h</div>
<div><br></div><div>-Paul</div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Wed, Jan 22, 2014 at 4:24 PM, Paul Hargrove <span dir="ltr">&lt;<a href="mailto:phhargrove@lbl.gov" target="_blank">phhargrove@lbl.gov</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div class="gmail_extra"><br><div class="gmail_quote">On Wed, Jan 22, 2014 at 2:22 PM, Paul Hargrove <span dir="ltr">&lt;<a href="mailto:phhargrove@lbl.gov" target="_blank">phhargrove@lbl.gov</a>&gt;</span> wrote:<br>

<blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex">My ia64 asm is a bit rusty, but I&#39;ll give a quick look if/when I can.</blockquote>

</div><br>I had a look (in v1.7) and this is what I see:</div><div class="gmail_extra"><br></div><div class="gmail_extra"><font face="courier new, monospace">$cat -n IA64.asm | grep -A14 opal_atomic_cmpset_acq_64:<div class="gmail_extra">

    70  opal_atomic_cmpset_acq_64:</div><div class="gmail_extra">    71          .prologue</div><div class="gmail_extra">    72          .body</div><div class="gmail_extra">    73          mov ar.ccv=r33;;</div><div class="gmail_extra">

    74          cmpxchg8.acq r32=[r32],r34,ar.ccv</div><div class="gmail_extra">    75          ;;</div><div class="gmail_extra">    76          sxt4 r32 = r32</div><div class="gmail_extra">    77          ;;</div><div class="gmail_extra">

    78          cmp.eq p6, p7 = r33, r32</div><div class="gmail_extra">    79          ;;</div><div class="gmail_extra">    80          (p6) addl r8 = 1, r0</div><div class="gmail_extra">    81          (p7) mov r8 = r0</div>

<div class="gmail_extra">    82          br.ret.sptk.many b0</div><div class="gmail_extra">    83          ;;</div><div class="gmail_extra">    84          .endp opal_atomic_cmpset_acq_64#</div></font><div><br></div><div>

The (approximate and non-atomic) C equivalent is:<br></div><div><br></div><div><font face="courier new, monospace">// r32 = address</font></div><div><font face="courier new, monospace">// r33 = oldvalue</font></div><div>
<font face="courier new, monospace">// r34 = newvalue</font></div>
<div><font face="courier new, monospace">int opal_atomic_cmpset_acq_64(int64_t r32, int64_t r33, int64 r34) {</font></div><div><font face="courier new, monospace">   int64_t ccv = r33; // L73</font></div><div><font face="courier new, monospace">   if (*(int64_t *)r32 == ccv) *(int64_t *)r32 = r34; // L74<br>

</font></div><div><font face="courier new, monospace"><br></font></div><div><font face="courier new, monospace">   r32 = (int64_t)(int32_t)r32; // L76 = sign-extend 32-&gt;64</font></div><div><font face="courier new, monospace"><br>

</font></div><div><div><font face="courier new, monospace">   bool p6, p7;</font></div></div><div><font face="courier new, monospace">   p7 = !(p6 = (r33 == r32)); // L78</font></div><div><font face="courier new, monospace"><br>

</font></div><div><div><font face="courier new, monospace">   const int r0 = 0;</font></div><div><font face="courier new, monospace">   int r8;</font></div></div><div><font face="courier new, monospace">   if (p6) r8 = 1 + r0; // L80</font></div>

<div><font face="courier new, monospace">   if (p7) r8 = r0; // L81</font></div><div><font face="courier new, monospace">   return r8; // L82</font></div><div><font face="courier new, monospace">}</font></div><div><font face="courier new, monospace">   </font></div>

<div>Which is fine except that line 76 is totally wrong!!</div><div>The &quot;sxt4&quot; instruction is &quot;sign-extend from 4 bytes to 8 bytes&quot;.</div><div>Thus the upper 32-bits of the value read from memory are lost!</div>

<div>Unless the upper 33 bits off r33 (oldvalue) are all 0s or all 1s, the comparison on line 78 MUST fail.</div><div>This explains the hang, as the lifo push will loop indefinitely waiting for the success of this cmpset.</div>

<div class="gmail_extra"><br></div>Note the same erroneous instruction is also present in the _rel variant (at line 94).</div><div class="gmail_extra">The trunk has the same issue.</div><div class="gmail_extra">This code has not changed at all since IA64.asm was added way back in r4471.</div>

<div class="gmail_extra"><br></div><div class="gmail_extra">I won&#39;t have access to the IA64 platform again until tomorrow AM.</div><div class="gmail_extra">So, testing my hypothesis will need to wait.</div><div class="gmail_extra">

<br></div><div class="gmail_extra">BTW:</div><div class="gmail_extra">IFF I am right about the source of this problem, then it would be beneficial to have (and I may contribute) a stronger test (for &quot;make check&quot;) that would detect this sort of bug in the atomics (specifically look for both false-positive and false-negative return value from 64-bit cmpset operations with values satisfying a range of &quot;corner cases&quot;).  I think I have single-bit and double-bit &quot;marching tests&quot; for cmpset in my own arsenal of tests for GASNet&#39;s atomics.  If I don&#39;t have time to contribute a complete test, I can at least contribute that logic for somebody else to port to the OPAL atomics.</div>

<div class="gmail_extra"><br></div><div class="gmail_extra">-Paul</div><div class="gmail_extra"><br></div><div class="gmail_extra">P.S.:</div><div class="gmail_extra">The cmpxchgN for N in 1,2,4 are documented as ZERO-extending their loads to 64-bits.</div>

<div class="gmail_extra">So, there is a slim chance that the sxt4 actually was intended for the 32-bit cmpset code.</div><div class="gmail_extra">However, since the comparison used there is a &quot;cmp4.eq&quot; the &quot;sxt4&quot; would still not be needed.</div>
<span class="HOEnZb"><font color="#888888">
<div class="gmail_extra"><br clear="all"><div><br></div>-- <br><font face="courier new, monospace"><div>Paul H. Hargrove                          <a href="mailto:PHHargrove@lbl.gov" target="_blank">PHHargrove@lbl.gov</a></div>

<div>Future Technologies Group</div><div>Computer and Data Sciences Department     Tel: <a href="tel:%2B1-510-495-2352" value="+15104952352" target="_blank">+1-510-495-2352</a></div><div>Lawrence Berkeley National Laboratory     Fax: <a href="tel:%2B1-510-486-6900" value="+15104866900" target="_blank">+1-510-486-6900</a></div>
</font>
</div></font></span></div>
</blockquote></div><br><br clear="all"><div><br></div>-- <br><font face="courier new, monospace"><div>Paul H. Hargrove                          <a href="mailto:PHHargrove@lbl.gov" target="_blank">PHHargrove@lbl.gov</a></div>
<div>Future Technologies Group</div><div>Computer and Data Sciences Department     Tel: +1-510-495-2352</div><div>Lawrence Berkeley National Laboratory     Fax: +1-510-486-6900</div></font>
</div>


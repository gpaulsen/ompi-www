<div dir="ltr"><div>Does this mean that you maintain a separate channel for &#39;put&#39; and &#39;gets&#39; that can use multiple transports and another for atomics?<br><br></div>Josh<br></div><div class="gmail_extra"><br><div class="gmail_quote">On Wed, Nov 5, 2014 at 10:15 AM, Nathan Hjelm <span dir="ltr">&lt;<a href="mailto:hjelmn@lanl.gov" target="_blank">hjelmn@lanl.gov</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
In the new osc component I don&#39;t try to handle that case. All atomics<br>
have to be done through the same btl (including atomics on self). I did<br>
this because with the default setup of Gemini they can not be mixed. If<br>
it is possible to mix them with other networks I would be happy to add<br>
an atomic flag for that.<br>
<br>
-Nathan<br>
<div><div class="h5"><br>
On Wed, Nov 05, 2014 at 03:41:58AM -0500, Joshua Ladd wrote:<br>
&gt;    Quick question. Out of curiosity, how do you handle the (common) case of<br>
&gt;    mixing network atomics with CPU atomics? Say for a single target with two<br>
&gt;    initiators, one initiator is on host with the target, so goes through the<br>
&gt;    SM BTL, and the other initiator is off host, so goes through the network<br>
&gt;    BTL.<br>
&gt;<br>
&gt;    Josh<br>
&gt;    On Tue, Nov 4, 2014 at 6:46 PM, Nathan Hjelm &lt;<a href="mailto:hjelmn@lanl.gov">hjelmn@lanl.gov</a>&gt; wrote:<br>
&gt;<br>
&gt;      What: Completely revamp the BTL RDMA interface (btl_put, btl_get) to<br>
&gt;      better match what is needed for MPI one-sided.<br>
&gt;<br>
&gt;      Why: I am preparing to push an enhanced MPI-3 one-sided component that<br>
&gt;      makes use of network rdma and atomic operations to provide a fast truely<br>
&gt;      one-sided implementation. Before I can push this component I want to<br>
&gt;      change the btl interface to:<br>
&gt;<br>
&gt;       - Provide access to network atomic operations. I only need add and<br>
&gt;         cswap but the interface can be extended to any number of operations.<br>
&gt;<br>
&gt;         The new interface provides three new functions: btl_atomic_op,<br>
&gt;         btl_atomic_fop, and btl_atomic_cswap. Additionally there are two new<br>
&gt;         btl_flags to indicate available atomic support:<br>
&gt;         MCA_BTL_FLAGS_ATOMIC_OPS, and MCA_BTL_FLAGS_ATOMIC_FOPS. The<br>
&gt;         btl_atomics_flags field has been added to indicate which atomic<br>
&gt;         operations are supported (see mca_btl_base_atomic_op_t). At this time<br>
&gt;         I only added support for 64-bit integer atomics but I am open to<br>
&gt;         adding support for 32-bit as well.<br>
&gt;<br>
&gt;       - Provide an interface that will allow simultaneous put/get operations<br>
&gt;         without extra calls into the btl. The current interface requires the<br>
&gt;         btl user to call prepare_src/prepare_dst before every rdma<br>
&gt;         operation. In some cases this is a complete waste (vader, sm with<br>
&gt;         CMA, knem, or xpmem).<br>
&gt;<br>
&gt;         I seperated the registration of memory from the segment info. More<br>
&gt;         information is provided below. The new put/get functions have the<br>
&gt;         following signatures:<br>
&gt;<br>
&gt;      typedef int (*mca_btl_base_module_put_fn_t) (struct<br>
&gt;      mca_btl_base_module_t *btl,<br>
&gt;          struct mca_btl_base_endpoint_t *endpoint, void *local_address,<br>
&gt;          uint64_t remote_address, struct mca_btl_base_registration_handle_t<br>
&gt;      *local_handle,<br>
&gt;          struct mca_btl_base_registration_handle_t *remote_handle, size_t<br>
&gt;      size, int flags,<br>
&gt;          int order, mca_btl_base_rdma_completion_fn_t cbfunc, void<br>
&gt;      *cbcontext, void *cbdata);<br>
&gt;<br>
&gt;      typedef int (*mca_btl_base_module_get_fn_t) (struct<br>
&gt;      mca_btl_base_module_t *btl,<br>
&gt;          struct mca_btl_base_endpoint_t *endpoint, void *local_address,<br>
&gt;          uint64_t remote_address, struct mca_btl_base_registration_handle_t<br>
&gt;      *local_handle,<br>
&gt;          struct mca_btl_base_registration_handle_t *remote_handle, size_t<br>
&gt;      size, int flags,<br>
&gt;          int order, mca_btl_base_rdma_completion_fn_t cbfunc, void<br>
&gt;      *cbcontext, void *cbdata);<br>
&gt;<br>
&gt;      typedef void (*mca_btl_base_rdma_completion_fn_t)(<br>
&gt;          struct mca_btl_base_module_t* module,<br>
&gt;          struct mca_btl_base_endpoint_t* endpoint,<br>
&gt;          void *local_address,<br>
&gt;          struct mca_btl_base_registration_handle_t *local_handle,<br>
&gt;          void *context,<br>
&gt;          void *cbdata,<br>
&gt;          int status);<br>
&gt;<br>
&gt;         I may modify the completion function to provide more information on<br>
&gt;         the completed operation (size).<br>
&gt;<br>
&gt;       - Allow the registration of an entire region even if the region can not<br>
&gt;         be modified with a single rdma operation. At this time prepare_src<br>
&gt;         and prepare_dst may modify the size and register a smaller<br>
&gt;         region. This will not work.<br>
&gt;<br>
&gt;         This is done in the new interface through the new btl_register_mem,<br>
&gt;         and btl_deregister_mem interfaces. The btl_register_mem interface<br>
&gt;         returns a registration handle of size btl_registration_handle_size<br>
&gt;         that can be used as either the local_handle or remote_handle to any<br>
&gt;         rdma/atomic function. BTLs that do not provide these functions do not<br>
&gt;         require registration for rdma/atomic operations.<br>
&gt;<br>
&gt;      typedef struct mca_btl_base_registration_handle_t<br>
&gt;      *(*mca_btl_base_module_register_mem_fn_t)(<br>
&gt;          struct mca_btl_base_module_t* btl, struct mca_btl_base_endpoint_t<br>
&gt;      *endpoint, void *base,<br>
&gt;          size_t size, uint32_t flags);<br>
&gt;<br>
&gt;      typedef struct mca_btl_base_registration_handle_t<br>
&gt;      *(*mca_btl_base_module_register_mem_fn_t)(<br>
&gt;          struct mca_btl_base_module_t* btl, struct mca_btl_base_endpoint_t<br>
&gt;      *endpoint, void *base,<br>
&gt;          size_t size, uint32_t flags);<br>
&gt;<br>
&gt;       - Expose the limitations of the put and get operations so the caller<br>
&gt;         can make decisions before trying a get or put operation. Two<br>
&gt;         examples: the Gemini interconnect has an alignment restriction on<br>
&gt;         get, openib devices may have a limit on how large a single get/put<br>
&gt;         operation can be. The current interface sort of gives the put limit<br>
&gt;         but it is tied to the rdma pipeline protocol.<br>
&gt;<br>
&gt;         This is done in the new interface by providing btl_get_limit,<br>
&gt;         btl_get_alignment, btl_put_limit, and btl_put_alignment. Operations<br>
&gt;         that violate these restrictions should return OPAL_ERR_BAD_PARAM<br>
&gt;         (operation over limit) or OPAL_ERR_NOT_SUPPORTED (operation not<br>
&gt;         supported due to alignment restructions with either the source or<br>
&gt;         destination buffer).<br>
&gt;<br>
&gt;      This is a big change and I do not expect everyone to like 100% of these<br>
&gt;      changes. I welcome any feedback people have.<br>
&gt;<br>
&gt;      When: Tuesday, Nov 17, 2015. This is during SC so there will be time for<br>
&gt;      face-to-face discussion if anyone has any concerns or would like to see<br>
&gt;      something changed.<br>
&gt;<br>
&gt;      The proposed new btl interface as well as updated versions of: pml/ob1,<br>
&gt;      btl/openib, btl/self, btl/scif, btl/sm, btl/tcp, btl/ugni, and btl/vader<br>
&gt;      can be found in my btlmod branch at:<br>
&gt;<br>
&gt;      <a href="https://github.com/hjelmn/ompi/tree/btlmod" target="_blank">https://github.com/hjelmn/ompi/tree/btlmod</a><br>
&gt;<br>
&gt;      Other btls (smcuda, and usnic) still need to be updated to provide the<br>
&gt;      new interface. Unmodified btl will not build.<br>
&gt;<br>
&gt;      If there are no objections I will push the btl modifications into the<br>
&gt;      master two weeks from today (Nov 17). Please take a look and let me know<br>
&gt;      what you think.<br>
&gt;<br>
&gt;      _______________________________________________<br>
&gt;      devel mailing list<br>
&gt;      <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;      Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;      Link to this post:<br>
&gt;      <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16193.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16193.php</a><br>
<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div></div>&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16195.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16195.php</a><br>
<br>
<br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16198.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16198.php</a><br></blockquote></div><br></div>


<div dir="ltr">The MPI standard clearly states (in 8.7.1 Allowing User Functions at Process Termination) that the mechanism you describe is only allowed on MPI_COMM_SELF. The most relevant part starts at line 14.<div><br></div>
<div>George.</div><div><br></div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Tue, Aug 26, 2014 at 11:20 AM, Lisandro Dalcin <span dir="ltr">&lt;<a href="mailto:dalcinl@gmail.com" target="_blank">dalcinl@gmail.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Another issue while testing 1.8.2 (./configure --enable-debug<br>
--enable-mem-debug).<br>
<br>
Please look at the following code. I&#39;m duplicating COMM_WORLD and<br>
composing the dupe on it. The attribute free function is written to<br>
Comm_free the duped comm and deallocate memory. However, the run fails<br>
with the error you can see at the end.<br>
<br>
IMHO, this is a bug. This way of managing duplicated communicator<br>
contexts is quite common in parallel libraries. Moreover, In the MPI 3<br>
standard, page 364, lines 11 and 12, it says:<br>
&quot;&quot;&quot;<br>
For example, MPI is “active” in callback functions that are invoked<br>
during MPI_FINALIZE.<br>
&quot;&quot;&quot;<br>
<br>
Interestingly, if I replace WORLD -&gt; SELF in the code below, I do not<br>
get the error.<br>
<br>
$ cat finalize.c<br>
#include &lt;stdlib.h&gt;<br>
#include &lt;mpi.h&gt;<br>
<br>
static int free_comm(MPI_Comm comm, int k, void *v, void *xs)<br>
{<br>
  MPI_Comm_free((MPI_Comm *)v);<br>
  free(v);<br>
  return MPI_SUCCESS;<br>
}<br>
<br>
<br>
int main(int argc, char *argv[])<br>
{<br>
  int keyval;<br>
  MPI_Comm base,*comm;<br>
  MPI_Init(&amp;argc, &amp;argv);<br>
<br>
  MPI_Comm_create_keyval(MPI_COMM_NULL_COPY_FN, free_comm, &amp;keyval, NULL);<br>
<br>
  base = MPI_COMM_WORLD;<br>
  comm = (MPI_Comm *)malloc(sizeof(MPI_Comm));<br>
  MPI_Comm_dup(base, comm);<br>
  MPI_Comm_set_attr(base, keyval, comm);<br>
<br>
  MPI_Finalize();<br>
  return 0;<br>
}<br>
<br>
$ mpicc finalize.c<br>
$ ./a.out<br>
*** The MPI_Comm_free() function was called after MPI_FINALIZE was invoked.<br>
*** This is disallowed by the MPI standard.<br>
*** Your MPI job will now abort.<br>
[kw2060:14603] Local abort after MPI_FINALIZE completed successfully;<br>
not able to aggregate error messages, and not able to guarantee that<br>
all other processes were killed!<br>
<br>
<br>
--<br>
Lisandro Dalcin<br>
============<br>
Research Scientist<br>
Computer, Electrical and Mathematical Sciences &amp; Engineering (CEMSE)<br>
Numerical Porous Media Center (NumPor)<br>
King Abdullah University of Science and Technology (KAUST)<br>
<a href="http://numpor.kaust.edu.sa/" target="_blank">http://numpor.kaust.edu.sa/</a><br>
<br>
4700 King Abdullah University of Science and Technology<br>
al-Khawarizmi Bldg (Bldg 1), Office # 4332<br>
Thuwal 23955-6900, Kingdom of Saudi Arabia<br>
<a href="http://www.kaust.edu.sa" target="_blank">http://www.kaust.edu.sa</a><br>
<br>
Office Phone: <a href="tel:%2B966%2012%20808-0459" value="+966128080459">+966 12 808-0459</a><br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/08/15712.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/08/15712.php</a></blockquote></div><br></div>


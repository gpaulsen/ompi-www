I think I see what you mean.<div><br></div><div>A standard Jenkins plugin sets one build status and do not set any label.</div><div>Then the GitHub web UI shows the combined status (e.g. If one build status is failed, then the combined build status is failed)</div><div><br></div><div>With a bit of tweaking, a Jenkins plugin can set several labels.</div><div>Also, strictly speaking, one Jenkins server can set several statuses from the same run.</div><div><br></div><div>I like the idea of having several statuses (regardless how many servers are involved) so it is easier to go straight to the root cause of a failure.</div><div>My next point was the build status should not be failed (otherwise the combined status is also failed) for minor annoyances (such as valgrind failure).</div><div>Ideally, github would accept a &quot;success with warning&quot; build status, but it does not.</div><div><br></div><div>Cheers,</div><div><br></div><div>Gilles<br><br>On Wednesday, November 25, 2015, Ralph Castain &lt;<a href="mailto:rhc@open-mpi.org">rhc@open-mpi.org</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word">I agree about the limitation. However, what Howard is doing helps resolve it by breaking out the Jenkins runs into categories. So instead of one massive test session, setup one Jenkins server for each category. Then we can set the specific tags according to the test category.<div><br></div><div>Make sense?</div><div>Ralph</div><div><br><div><blockquote type="cite"><div>On Nov 25, 2015, at 3:54 AM, Gilles Gouaillardet &lt;<a href="javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;gilles.gouaillardet@gmail.com&#39;);" target="_blank">gilles.gouaillardet@gmail.com</a>&gt; wrote:</div><br><div>Ralph and all,<div><br></div><div>My 0.02US$</div><div><br></div><div>We are kind of limited by the github API <a href="https://developer.github.com/v3/repos/statuses/" target="_blank">https://developer.github.com/v3/repos/statuses/</a></div><div>Basically, a status is pending, success, error or failure plus a string.</div><div><br></div><div>A possible work around is to have Jenkins set labels on the PR.</div><div><br></div><div>If only valgrind fails, the status could be succes, and the valgrind failure cold be reported via the status string (that no one might bother reading, but this is an other story) or via a label</div><div>(Should the label be for success or failure ?)</div><div><br></div><div>I agree it is not obvious (not to say impossible) to fully understand what Jenkins is doing under the hood. That could/should be documented, or at least, the Jenkins plugin could be made published</div><div>(Public repository like the bot used to set labels/milestones/assignees, or private in the ompi-tests repository)</div><div><br></div><div>I will give some more thoughts to the testing part.</div><div><br></div><div>Cheers,</div><div><br></div><div>Gilles</div><div><br>On Wednesday, November 25, 2015, Ralph Castain &lt;<a href="javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;rhc@open-mpi.org&#39;);" target="_blank">rhc@open-mpi.org</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">Hi folks<br>
<br>
I wanted to pull this conversation out from the specific issue where it was being conducted as I think it merits a broader discussion. I understand and appreciate the role of the Jenkins testing - what I am trying to find is a way to make that testing more usable.<br>
<br>
There are two things that I think would help:<br>
<br>
1. separating the tests being conducted into different “buckets”. We now have several types of testing being conducted:<br>
<br>
    * simple build tests. These don’t involve any execution. If something fails a build test, it would be<br>
      very helpful to clearly state exactly what configure options were being used, and what compiler.<br>
      Ideally, such failures would be labeled as “build”.<br>
<br>
    * valgrind tests. These are problematic in that they are not necessarily PR-specific - if anything<br>
       causes a leak or valgrind issue, every PR is marked as “failed” and can lead to wasted time<br>
       chasing non-existent problems with a specific PR. Unfortunately, I can’t think of a way to get<br>
       Jenkins to properly deal with the issue other than to mark such test results as “valgrind” so<br>
       they are clearly called out as being in that category<br>
<br>
    * distribution tests that build tarballs, run “make distcheck”, etc. These usually fail due to something<br>
      not being included in the tarball, or some directory not being completely cleaned. This is<br>
      another case where it is really important to know, for example, that someone used a platform<br>
      file when building the tarball, so it would really help to know exactly how this test was conducted.<br>
      Ideally, any distribution test failure would be marked as “distribution” so we know what happened.<br>
<br>
    * run tests that execute various programs. Lots of things can go wrong here, many of them<br>
      dependent on exactly how the code was built (so we know which components were<br>
      around) and how it was run (e.g., default MCA param file). Ideally, these failures would<br>
      be marked as “run”.<br>
<br>
Please note: when I ask for a clear statement of configuration options etc, what I’m saying is that it is very hard to sift thru hundreds of lines of output to find, for example, the cmd line that failed. A more concise test output would make debugging much faster and easier, and therefore make Jenkins testing much more usable.<br>
<br>
<br>
2. having the Jenkins testers clearly tell us what tests they are expecting us to pass. Perhaps a list of these could be posted somewhere, and some notification given as to when those lists are being changed? It would help avoid surprises and allow developers a chance to test things themselves before posting PRs.<br>
<br>
I know I’m asking for some effort on behalf of those running these servers. However, I think it would make those efforts much more useful.<br>
Ralph<br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a>devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/11/18388.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/11/18388.php</a></blockquote></div>
_______________________________________________<br>devel mailing list<br><a href="javascript:_e(%7B%7D,&#39;cvml&#39;,&#39;devel@open-mpi.org&#39;);" target="_blank">devel@open-mpi.org</a><br>Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/11/18389.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/11/18389.php</a></div></blockquote></div><br></div></div></blockquote></div>


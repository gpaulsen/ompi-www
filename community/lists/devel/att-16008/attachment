<div dir="ltr">Jeff,<div><br></div><div>Using calloc() only subject to --with-valgrind sounds good to me.</div><div>If I&#39;d known such a option exists, I&#39;d not have suggested the MCA param idea.</div><div><br></div><div>-Paul</div></div><div class="gmail_extra"><br><div class="gmail_quote">On Fri, Oct 3, 2014 at 3:33 PM, Jeff Squyres (jsquyres) <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">How about a compromise -- how about enabling calloc() when --with-valgrind is specified on the command line?<br>
<br>
I.e., don&#39;t tie it to debug builds, but to valgrind-enabled builds?<br>
<br>
<br>
On Oct 3, 2014, at 6:11 PM, Paul Hargrove &lt;<a href="mailto:phhargrove@lbl.gov">phhargrove@lbl.gov</a>&gt; wrote:<br>
<br>
&gt; I agree with George that zeroing memory only in the debug builds could hide bugs, and thus would want to see the debug and non-debug builds have the same behavior (both malloc or both calloc).&nbsp; So, I also agree this looks initially like a hard choice.<br>
&gt;<br>
&gt; What about using malloc() in non-debug builds and having a MCA param control malloc-vs-calloc in a debug build (with malloc being the default)?&nbsp; The param name could be something with &quot;valgrind&quot; in it to allow it to control any other &quot;paranoid code&quot; that may be introduced just to silence valgrind warnings.<br>
&gt;<br>
&gt; -Paul<br>
&gt;<br>
&gt; On Fri, Oct 3, 2014 at 3:02 PM, George Bosilca &lt;<a href="mailto:bosilca@icl.utk.edu">bosilca@icl.utk.edu</a>&gt; wrote:<br>
&gt; It&rsquo;s a tough call. This proposal will create significant differences between the debug and fast builds. As the entire objects will be set to zero this might reduce bugs in the debug build, bugs that will be horribly difficult to track in any non-debug builds. Moreover, if the structures are carefully accessed in our code, adding such a disruptive initialization just to prevent valgrind from reporting false-positive about uninitialized reads in memcpy is too costly as a solution (I am also conscient that it will be almost impossible to write a valgrind suppression rule for the specific case you mention).<br>
&gt;<br>
&gt; Some parts of the code have (or at least had) some level of cleanness for the gaps in the structures. The solution was to minimally zero-fy the gaps, maintaining the same behavior between debug and non-debug builds. However, in order to do this one need to know the layout of the structure, so this is not a completely generic solution&hellip;<br>
&gt;<br>
&gt;&nbsp; &nbsp;George.<br>
&gt;<br>
&gt;<br>
&gt; On Oct 3, 2014, at 16:54 , Jeff Squyres (jsquyres) &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt; wrote:<br>
&gt;<br>
&gt; &gt; WHAT: change the malloc() to calloc() in opal_obj_new() (perhaps only in debug builds?)<br>
&gt; &gt;<br>
&gt; &gt; WHY: Drastically reduces valgrind output<br>
&gt; &gt;<br>
&gt; &gt; WHERE: see <a href="https://github.com/open-mpi/ompi/blob/master/opal/class/opal_object.h#L462-L467" target="_blank">https://github.com/open-mpi/ompi/blob/master/opal/class/opal_object.h#L462-L467</a><br>
&gt; &gt;<br>
&gt; &gt; TIMEOUT: teleconf, Tue, Oct 14 (there&#39;s no rush)<br>
&gt; &gt;<br>
&gt; &gt; MORE DETAIL:<br>
&gt; &gt;<br>
&gt; &gt; I was debugging some code today and came across a bunch of places where we write structs down various IPC mechanisms, and the structs contain holes.&nbsp; In most places, the performance doesn&#39;t matter / the readability of struct members is more important, so we haven&#39;t re-ordered the structs to remove holes.&nbsp; But consequently, those holes end up uninitialized, and therefore memcpy()ing or write()ing instances of these structs causes valgrind to emit warnings.<br>
&gt; &gt;<br>
&gt; &gt; The patch below eliminates most (all?) of these valgrind warnings -- in debug builds, it changes the malloc() inside OBJ_NEW to a calloc().<br>
&gt; &gt;<br>
&gt; &gt; Upon a little more thought, however, I wonder if we use OBJ_NEW in any fast code paths (other than in bulk, such as when we need to grow a free list).&nbsp; Specifically: would it be terrible to *always* calloc -- not just for debug builds?<br>
&gt; &gt;<br>
&gt; &gt; -----<br>
&gt; &gt; diff --git a/opal/class/opal_object.h b/opal/class/opal_object.h<br>
&gt; &gt; index 7012bac..585f13e 100644<br>
&gt; &gt; --- a/opal/class/opal_object.h<br>
&gt; &gt; +++ b/opal/class/opal_object.h<br>
&gt; &gt; @@ -464,7 +464,11 @@ static inline opal_object_t *opal_obj_new(opal_class_t * cl<br>
&gt; &gt;&nbsp; &nbsp; &nbsp;opal_object_t *object;<br>
&gt; &gt;&nbsp; &nbsp; &nbsp;assert(cls-&gt;cls_sizeof &gt;= sizeof(opal_object_t));<br>
&gt; &gt;<br>
&gt; &gt; +#if OPAL_ENABLE_DEBUG<br>
&gt; &gt; +&nbsp; &nbsp; object = (opal_object_t *) calloc(1, cls-&gt;cls_sizeof);<br>
&gt; &gt; +#else<br>
&gt; &gt;&nbsp; &nbsp; &nbsp;object = (opal_object_t *) malloc(cls-&gt;cls_sizeof);<br>
&gt; &gt; +#endif<br>
&gt; &gt;&nbsp; &nbsp; &nbsp;if (0 == cls-&gt;cls_initialized) {<br>
&gt; &gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;opal_class_initialize(cls);<br>
&gt; &gt;&nbsp; &nbsp; &nbsp;}<br>
&gt; &gt; -----<br>
&gt; &gt;<br>
&gt; &gt; --<br>
&gt; &gt; Jeff Squyres<br>
&gt; &gt; <a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
&gt; &gt; For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
&gt; &gt;<br>
&gt; &gt; _______________________________________________<br>
&gt; &gt; devel mailing list<br>
&gt; &gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; &gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; &gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/10/16001.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/10/16001.php</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/10/16004.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/10/16004.php</a><br>
&gt;<br>
&gt;<br>
<span class="HOEnZb"><font color="#888888">&gt;<br>
&gt; --<br>
&gt; Paul H. Hargrove&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <a href="mailto:PHHargrove@lbl.gov">PHHargrove@lbl.gov</a><br>
&gt; Future Technologies Group<br>
&gt; Computer and Data Sciences Department&nbsp; &nbsp; &nbsp;Tel: <a href="tel:%2B1-510-495-2352" value="+15104952352">+1-510-495-2352</a><br>
&gt; Lawrence Berkeley National Laboratory&nbsp; &nbsp; &nbsp;Fax: <a href="tel:%2B1-510-486-6900" value="+15104866900">+1-510-486-6900</a><br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/10/16005.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/10/16005.php</a><br>
<br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/10/16006.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/10/16006.php</a><br>
</font></span></blockquote></div><br><br clear="all"><div><br></div>-- <br><font face="courier new, monospace"><div>Paul H. Hargrove &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href="mailto:PHHargrove@lbl.gov" target="_blank">PHHargrove@lbl.gov</a></div><div>Future Technologies Group</div><div>Computer and Data Sciences Department &nbsp; &nbsp; Tel: +1-510-495-2352</div><div>Lawrence Berkeley National Laboratory &nbsp; &nbsp; Fax: +1-510-486-6900</div></font>
</div>


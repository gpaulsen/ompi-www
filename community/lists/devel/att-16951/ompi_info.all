                 Package: Open MPI portage@elf01 Distribution
                Open MPI: 1.8.3
  Open MPI repo revision: r32794
   Open MPI release date: Sep 25, 2014
                Open RTE: 1.8.3
  Open RTE repo revision: r32794
   Open RTE release date: Sep 25, 2014
                    OPAL: 1.8.3
      OPAL repo revision: r32794
       OPAL release date: Sep 25, 2014
                 MPI API: 3.0
            Ident string: 1.8.3
                  Prefix: /usr
             Exec_prefix: /usr
                  Bindir: /usr/bin
                 Sbindir: /usr/sbin
                  Libdir: /usr/lib64
                  Incdir: /usr/include
                  Mandir: /usr/share/man
               Pkglibdir: /usr/lib64/openmpi
              Libexecdir: /usr/libexec
             Datarootdir: /usr/share
                 Datadir: /usr/share
              Sysconfdir: /etc/openmpi
          Sharedstatedir: /usr/com
           Localstatedir: /var/lib
                 Infodir: /usr/share/info
              Pkgdatadir: /usr/share/openmpi
               Pkglibdir: /usr/lib64/openmpi
           Pkgincludedir: /usr/include/openmpi
 Configured architecture: x86_64-pc-linux-gnu
          Configure host: elf01
           Configured by: portage
           Configured on: Tue Nov 25 08:50:37 CST 2014
          Configure host: elf01
                Built by: 
                Built on: Tue Nov 25 08:54:03 CST 2014
              Built host: elf01
              C bindings: yes
            C++ bindings: yes
             Fort mpif.h: yes (all)
            Fort use mpi: yes (full: ignore TKR)
       Fort use mpi size: deprecated-ompi-info-value
        Fort use mpi_f08: yes
 Fort mpi_f08 compliance: The mpi_f08 module is available, but due to limitations in the ifort compiler, does not support the following: array subsections, direct passthru (where possible) to underlying Open MPI's C functionality
  Fort mpi_f08 subarrays: no
           Java bindings: no
  Wrapper compiler rpath: runpath
              C compiler: x86_64-pc-linux-gnu-gcc
     C compiler absolute: /usr/bin/x86_64-pc-linux-gnu-gcc
  C compiler family name: GNU
      C compiler version: 4.8.3
             C char size: 1
             C bool size: 1
            C short size: 2
              C int size: 4
             C long size: 8
            C float size: 4
           C double size: 8
          C pointer size: 8
            C char align: 1
            C bool align: 1
             C int align: 4
           C float align: 4
          C double align: 8
            C++ compiler: x86_64-pc-linux-gnu-g++
   C++ compiler absolute: /usr/bin/x86_64-pc-linux-gnu-g++
           Fort compiler: ifort
       Fort compiler abs: /opt/intel/composerxe-2015.0.090/bin/intel64/ifort
         Fort ignore TKR: yes (!DEC$ ATTRIBUTES NO_ARG_CHECK ::)
   Fort 08 assumed shape: no
      Fort optional args: yes
      Fort BIND(C) (all): yes
      Fort ISO_C_BINDING: yes
 Fort SUBROUTINE BIND(C): yes
       Fort TYPE,BIND(C): yes
 Fort T,BIND(C,name="a"): yes
            Fort PRIVATE: yes
          Fort PROTECTED: yes
           Fort ABSTRACT: yes
       Fort ASYNCHRONOUS: yes
          Fort PROCEDURE: yes
 Fort f08 using wrappers: yes
       Fort integer size: 4
       Fort logical size: 4
 Fort logical value true: -1
      Fort have integer1: yes
      Fort have integer2: yes
      Fort have integer4: yes
      Fort have integer8: yes
     Fort have integer16: no
         Fort have real4: yes
         Fort have real8: yes
        Fort have real16: yes
      Fort have complex8: yes
     Fort have complex16: yes
     Fort have complex32: yes
      Fort integer1 size: 1
      Fort integer2 size: 2
      Fort integer4 size: 4
      Fort integer8 size: 8
     Fort integer16 size: -1
          Fort real size: 4
         Fort real4 size: 4
         Fort real8 size: 8
        Fort real16 size: 16
      Fort dbl prec size: 8
          Fort cplx size: 8
      Fort dbl cplx size: 16
         Fort cplx8 size: 8
        Fort cplx16 size: 16
        Fort cplx32 size: 32
      Fort integer align: 1
     Fort integer1 align: 1
     Fort integer2 align: 1
     Fort integer4 align: 1
     Fort integer8 align: 1
    Fort integer16 align: -1
         Fort real align: 1
        Fort real4 align: 1
        Fort real8 align: 1
       Fort real16 align: 1
     Fort dbl prec align: 1
         Fort cplx align: 1
     Fort dbl cplx align: 1
        Fort cplx8 align: 1
       Fort cplx16 align: 1
       Fort cplx32 align: 1
             C profiling: yes
           C++ profiling: yes
   Fort mpif.h profiling: yes
  Fort use mpi profiling: yes
   Fort use mpi_f08 prof: yes
          C++ exceptions: no
          Thread support: posix (MPI_THREAD_MULTIPLE: no, OPAL support: yes, OMPI progress: no, ORTE progress: yes, Event lib: yes)
           Sparse Groups: no
            Build CFLAGS: -DNDEBUG -mtune=corei7-avx -march=corei7-avx -mcx16 -msahf -mpopcnt -maes -mpclmul -msse4.2 -msse4.1 -mavx -O2 -pipe -finline-functions -fno-strict-aliasing -pthread
          Build CXXFLAGS: -DNDEBUG -mtune=corei7-avx -march=corei7-avx -mcx16 -msahf -mpopcnt -maes -mpclmul -msse4.2 -msse4.1 -mavx -O2 -pipe -finline-functions -pthread
           Build FCFLAGS: -O2 -pipe
           Build LDFLAGS: -export-dynamic -Wl,-O1 -Wl,--as-needed
              Build LIBS: -lrt -lm -lutil   -lhwloc
    Wrapper extra CFLAGS: -pthread
  Wrapper extra CXXFLAGS: -pthread
   Wrapper extra FCFLAGS: 
   Wrapper extra LDFLAGS: -Wl,-rpath -Wl,@{libdir} -Wl,--enable-new-dtags
      Wrapper extra LIBS: -ldl -lutil -lm
  Internal debug support: no
  MPI interface warnings: yes
     MPI parameter check: runtime
Memory profiling support: no
Memory debugging support: no
         libltdl support: yes
   Heterogeneous support: no
 mpirun default --prefix: yes
         MPI I/O support: yes
       MPI_WTIME support: gettimeofday
     Symbol vis. support: yes
   Host topology support: yes
          MPI extensions: 
   FT Checkpoint support: no (checkpoint thread: no)
   C/R Enabled Debugging: no
     VampirTrace support: no
  MPI_MAX_PROCESSOR_NAME: 256
    MPI_MAX_ERROR_STRING: 256
     MPI_MAX_OBJECT_NAME: 64
        MPI_MAX_INFO_KEY: 36
        MPI_MAX_INFO_VAL: 256
       MPI_MAX_PORT_NAME: 1024
  MPI_MAX_DATAREP_STRING: 128
                 MCA mca: parameter "mca_param_files" (current value: "/homes/daveturner/.openmpi/mca-params.conf:/etc/openmpi/openmpi-mca-params.conf", data source: default, level: 2 user/detail, type: string, deprecated, synonym of: mca_base_param_files)
                          Path for MCA configuration files containing variable values
                 MCA mca: parameter "mca_component_path" (current value: "/usr/lib64/openmpi:/homes/daveturner/.openmpi/components", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: mca_base_component_path)
                          Path where to look for Open MPI and ORTE components
                 MCA mca: parameter "mca_component_show_load_errors" (current value: "true", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: mca_base_component_show_load_errors)
                          Whether to show errors for components that failed to load or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mca: parameter "mca_component_disable_dlopen" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: mca_base_component_disable_dlopen)
                          Whether to attempt to disable opening dynamic components or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mca: parameter "mca_verbose" (current value: "stderr", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: mca_base_verbose)
                          Specifies where the default error output stream goes (this is separate from distinct help messages).  Accepts a comma-delimited list of: stderr, stdout, syslog, syslogpri:<notice|info|debug>, syslogid:<str> (where str is the prefix string for all syslog notices), file[:filename] (if filename is not specified, a default filename is used), fileappend (if not specified, the file is opened for truncation), level[:N] (if specified, integer verbose level; otherwise, 0 is implied)
                 MCA mca: parameter "mca_base_param_files" (current value: "/homes/daveturner/.openmpi/mca-params.conf:/etc/openmpi/openmpi-mca-params.conf", data source: default, level: 2 user/detail, type: string, synonyms: mca_param_files)
                          Path for MCA configuration files containing variable values
                 MCA mca: informational "mca_base_override_param_file" (current value: "/etc/openmpi/openmpi-mca-params-override.conf", data source: default, level: 2 user/detail, type: string)
                          Variables set in this file will override any value set inthe environment or another configuration file
                 MCA mca: parameter "mca_base_suppress_override_warning" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Suppress warnings when attempting to set an overridden value (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mca: parameter "mca_base_param_file_prefix" (current value: "", data source: default, level: 3 user/all, type: string)
                          Aggregate MCA parameter file sets
                 MCA mca: parameter "mca_base_param_file_path" (current value: "/usr/share/openmpi/amca-param-sets:/homes/daveturner", data source: default, level: 3 user/all, type: string)
                          Aggregate MCA parameter Search path
                 MCA mca: parameter "mca_base_param_file_path_force" (current value: "", data source: default, level: 3 user/all, type: string)
                          Forced Aggregate MCA parameter Search path
                 MCA mca: parameter "mca_base_component_path" (current value: "/usr/lib64/openmpi:/homes/daveturner/.openmpi/components", data source: default, level: 9 dev/all, type: string, synonyms: mca_component_path)
                          Path where to look for Open MPI and ORTE components
                 MCA mca: parameter "mca_base_component_show_load_errors" (current value: "true", data source: default, level: 9 dev/all, type: bool, synonyms: mca_component_show_load_errors)
                          Whether to show errors for components that failed to load or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mca: parameter "mca_base_component_disable_dlopen" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: mca_component_disable_dlopen)
                          Whether to attempt to disable opening dynamic components or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mca: parameter "mca_base_verbose" (current value: "stderr", data source: default, level: 9 dev/all, type: string, synonyms: mca_verbose)
                          Specifies where the default error output stream goes (this is separate from distinct help messages).  Accepts a comma-delimited list of: stderr, stdout, syslog, syslogpri:<notice|info|debug>, syslogid:<str> (where str is the prefix string for all syslog notices), file[:filename] (if filename is not specified, a default filename is used), fileappend (if not specified, the file is opened for truncation), level[:N] (if specified, integer verbose level; otherwise, 0 is implied)
                MCA opal: parameter "opal_signal" (current value: "6,7,8,11", data source: default, level: 3 user/all, type: string)
                          Comma-delimited list of integer signal numbers to Open MPI to attempt to intercept.  Upon receipt of the intercepted signal, Open MPI will display a stack trace and abort.  Open MPI will *not* replace signals if handlers are already installed by the time MPI_INIT is invoked.  Optionally append ":complain" to any signal number in the comma-delimited list to make Open MPI complain if it detects another signal handler (and therefore does not insert its own).
                MCA opal: parameter "opal_set_max_sys_limits" (current value: "", data source: default, level: 3 user/all, type: string)
                          Set the specified system-imposed limits to the specified value, including "unlimited".Supported params: core, filesize, maxmem, openfiles, stacksize, maxchildren
                MCA opal: parameter "opal_net_private_ipv4" (current value: "10.0.0.0/8;172.16.0.0/12;192.168.0.0/16;169.254.0.0/16", data source: default, level: 3 user/all, type: string)
                          Semicolon-delimited list of CIDR notation entries specifying what networks are considered "private" (default value based on RFC1918 and RFC3330)
                MCA opal: parameter "opal_event_include" (current value: "poll", data source: default, level: 3 user/all, type: string, synonym of: event_libevent2021_event_include)
                          Comma-delimited list of libevent subsystems to use (epoll, poll, select -- available on your platform)
           MCA backtrace: parameter "backtrace" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the backtrace framework (<none> means use all components that can be found)
           MCA backtrace: parameter "backtrace_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the backtrace framework (0 = no verbosity)
            MCA compress: parameter "compress" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the compress framework (<none> means use all components that can be found)
            MCA compress: parameter "compress_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the compress framework (0 = no verbosity)
            MCA compress: parameter "compress_bzip_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the COMPRESS bzip component (default: 10)
            MCA compress: parameter "compress_bzip_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbose level for the COMPRESS bzip component
            MCA compress: parameter "compress_gzip_priority" (current value: "15", data source: default, level: 9 dev/all, type: int)
                          Priority of the COMPRESS gzip component (default: 15)
            MCA compress: parameter "compress_gzip_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbose level for the COMPRESS gzip component
                 MCA crs: parameter "crs" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the crs framework (<none> means use all components that can be found)
                 MCA crs: parameter "crs_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the crs framework (0 = no verbosity)
                 MCA crs: informational "crs_none_priority" (current value: "1", data source: default, level: 3 user/all, type: int)
                          Priority of the crs none component
                 MCA crs: parameter "crs_none_select_warning" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable warning when the 'none' component is selected when checkpoint/restart functionality is requested.[Default = disabled/no-warning]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                  MCA db: parameter "db" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the db framework (<none> means use all components that can be found)
                  MCA db: parameter "db_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the db framework (0 = no verbosity)
                  MCA db: parameter "db_hash_store_priority" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Priority dictating order in which store commands will given to database components
                  MCA db: parameter "db_hash_fetch_priority" (current value: "100", data source: default, level: 9 dev/all, type: int)
                          Priority dictating order in which fetch commands will given to database components
                  MCA db: parameter "db_print_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Print to the indicated file (- => stdout, + => stderr)
               MCA event: parameter "event" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the event framework (<none> means use all components that can be found)
               MCA event: parameter "event_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the event framework (0 = no verbosity)
               MCA event: parameter "event_libevent2021_event_include" (current value: "poll", data source: default, level: 3 user/all, type: string, synonyms: opal_event_include)
                          Comma-delimited list of libevent subsystems to use (epoll, poll, select -- available on your platform)
               MCA hwloc: parameter "hwloc" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the hwloc framework (<none> means use all components that can be found)
               MCA hwloc: parameter "hwloc_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the hwloc framework (0 = no verbosity)
               MCA hwloc: parameter "hwloc_base_mem_alloc_policy" (current value: "none", data source: default, level: 9 dev/all, type: int)
                          General memory allocations placement policy (this is not memory binding). "none" means that no memory policy is applied. "local_only" means that a process' memory allocations will be restricted to its local NUMA node. If using direct launch, this policy will not be in effect until after MPI_INIT. Note that operating system paging policies are unaffected by this setting. For example, if "local_only" is used and local NUMA node memory is exhausted, a new memory allocation may cause paging.
                          Valid values: 0:"none", 1:"local_only"
               MCA hwloc: parameter "hwloc_base_mem_bind_failure_action" (current value: "warn", data source: default, level: 9 dev/all, type: int)
                          What Open MPI will do if it explicitly tries to bind memory to a specific NUMA location, and fails.  Note that this is a different case than the general allocation policy described by hwloc_base_alloc_policy.  A value of "silent" means that Open MPI will proceed without comment. A value of "warn" means that Open MPI will warn the first time this happens, but allow the job to continue (possibly with degraded performance).  A value of "error" means that Open MPI will abort the job if this happens.
                          Valid values: 0:"silent", 1:"warn", 2:"error"
               MCA hwloc: parameter "hwloc_base_binding_policy" (current value: "none", data source: file (/etc/openmpi/openmpi-mca-params.conf), level: 9 dev/all, type: string)
                          Policy for binding processes. Allowed values: none, hwthread, core, l1cache, l2cache, l3cache, socket, numa, board ("none" is the default when oversubscribed, "core" is the default when np<=2, and "socket" is the default when np>2). Allowed qualifiers: overload-allowed, if-supported
               MCA hwloc: parameter "hwloc_base_bind_to_core" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Bind processes to cores
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA hwloc: parameter "hwloc_base_bind_to_socket" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Bind processes to sockets
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA hwloc: parameter "hwloc_base_report_bindings" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Report bindings to stderr
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA hwloc: parameter "hwloc_base_slot_list" (current value: "", data source: default, level: 9 dev/all, type: string)
                          List of processor IDs to bind processes to [default=NULL]
               MCA hwloc: parameter "hwloc_base_cpu_set" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of ranges specifying logical cpus allocated to this job [default: none]
               MCA hwloc: parameter "hwloc_base_use_hwthreads_as_cpus" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Use hardware threads as independent cpus
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA hwloc: parameter "hwloc_base_topo_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Read local topology from file instead of directly sensing it
                  MCA if: parameter "if" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the if framework (<none> means use all components that can be found)
                  MCA if: parameter "if_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the if framework (0 = no verbosity)
                  MCA if: parameter "if_base_do_not_resolve" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, do not attempt to resolve interfaces
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                  MCA if: parameter "if_base_retain_loopback" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, retain loopback interfaces
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
          MCA memchecker: parameter "memchecker" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the memchecker framework (<none> means use all components that can be found)
          MCA memchecker: parameter "memchecker_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the memchecker framework (0 = no verbosity)
              MCA memcpy: parameter "memcpy" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the memcpy framework (<none> means use all components that can be found)
              MCA memcpy: parameter "memcpy_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the memcpy framework (0 = no verbosity)
              MCA memory: parameter "memory" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the memory framework (<none> means use all components that can be found)
              MCA memory: parameter "memory_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the memory framework (0 = no verbosity)
              MCA memory: parameter "memory_linux_ptmalloc2_available" (current value: "true", data source: default, level: 3 user/all, type: bool)
                          Whether ptmalloc2 support is included in Open MPI or not (1 = yes, 0 = no)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
              MCA memory: parameter "memory_linux_ummunotify_available" (current value: "false", data source: default, level: 3 user/all, type: bool)
                          Whether ummunotify support is included in Open MPI or not (1 = yes, 0 = no)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
              MCA memory: parameter "memory_linux_ptmalloc2_enable" (current value: "-1", data source: default, level: 3 user/all, type: int)
                          Whether to enable ptmalloc2 support or not (negative = try to enable, but continue even if support is not available, 0 = do not enable support, positive = try to enable and fail if support is not available)
              MCA memory: parameter "memory_linux_ummunotify_enable" (current value: "-1", data source: default, level: 3 user/all, type: int)
                          Whether to enable ummunotify support or not (negative = try to enable, but continue even if support is not available, 0 = do not enable support, positive = try to enable and fail if support is not available)
              MCA memory: parameter "memory_linux_disable" (current value: "false", data source: default, level: 3 user/all, type: bool)
                          If this MCA parameter is set to 1 **VIA ENVIRONMENT VARIABLE ONLY*** (this MCA parameter *CANNOT* be set in a file or on the mpirun command line!), this component will be disabled and will not attempt to use either ummunotify or memory hook support
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA pstat: parameter "pstat" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the pstat framework (<none> means use all components that can be found)
               MCA pstat: parameter "pstat_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the pstat framework (0 = no verbosity)
                 MCA sec: parameter "sec" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sec framework (<none> means use all components that can be found)
                 MCA sec: parameter "sec_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sec framework (0 = no verbosity)
               MCA shmem: parameter "shmem" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the shmem framework (<none> means use all components that can be found)
               MCA shmem: parameter "shmem_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the shmem framework (0 = no verbosity)
               MCA shmem: parameter "shmem_mmap_priority" (current value: "50", data source: default, level: 3 user/all, type: int)
                          Priority for shmem mmap component (default: 50)
               MCA shmem: parameter "shmem_mmap_enable_nfs_warning" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Enable the warning emitted when Open MPI detects that its shared memory backing file is located on a network filesystem (1 = enabled, 0 = disabled).
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA shmem: parameter "shmem_mmap_relocate_backing_file" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Whether to change the default placement of backing files or not (Negative = try to relocate backing files to an area rooted at the path specified by shmem_mmap_backing_file_base_dir, but continue with the default path if the relocation fails, 0 = do not relocate, Positive = same as the negative option, but will fail if the relocation fails.
               MCA shmem: parameter "shmem_mmap_backing_file_base_dir" (current value: "/dev/shm", data source: default, level: 9 dev/all, type: string)
                          Specifies where backing files will be created when shmem_mmap_relocate_backing_file is in use.
               MCA shmem: parameter "shmem_posix_priority" (current value: "40", data source: default, level: 3 user/all, type: int)
                          Priority for the shmem posix component (default: 40)
               MCA shmem: parameter "shmem_sysv_priority" (current value: "30", data source: default, level: 3 user/all, type: int)
                          Priority for the shmem sysv component (default: 30)
               MCA timer: parameter "timer" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the timer framework (<none> means use all components that can be found)
               MCA timer: parameter "timer_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the timer framework (0 = no verbosity)
                MCA orte: parameter "orte_tmpdir_base" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Base of the session directory tree to be used by all processes
                MCA orte: parameter "orte_local_tmpdir_base" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Base of the session directory tree to be used by orterun/mpirun
                MCA orte: parameter "orte_remote_tmpdir_base" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Base of the session directory tree on remote nodes, if required to be different from head node
                MCA orte: parameter "orte_no_session_dirs" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Prohibited locations for session directories (multiple locations separated by ',', default=NULL)
                MCA orte: parameter "orte_create_session_dirs" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Create session directories
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_execute_quiet" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Do not output error and help messages
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_report_silent_errors" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Report all errors, including silent ones
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_debug" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Top-level ORTE debug switch (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_debug_verbose" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Verbosity level for ORTE debug messages (default: 1)
                MCA orte: parameter "orte_debug_daemons_file" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether want stdout/stderr of daemons to go to a file or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_debug_daemons" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to debug the ORTE daemons or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_progress_thread_debug" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Debug level for ORTE progress threads
                MCA orte: parameter "orte_leave_session_attached" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether applications and/or daemons should leave their sessions attached so that any output can be received - this allows X forwarding without all the attendant debugging output
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_output_debugger_proctable" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not to output the debugger proctable after launch (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_debugger_test_daemon" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Name of the executable to be used to simulate a debugger colaunch (relative or absolute path)
                MCA orte: parameter "orte_debugger_test_attach" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Test debugger colaunch after debugger attachment
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_debugger_check_rate" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Set rate (in secs) for auto-detect of debugger attachment (0 => do not check)
                MCA orte: parameter "orte_do_not_launch" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Perform all necessary operations to prepare to launch the application, but do not actually launch it
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_daemon_spin" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Have any orteds spin until we can connect a debugger to them
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_daemon_fail" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Have the specified orted fail after init for debugging purposes
                MCA orte: parameter "orte_daemon_fail_delay" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Have the specified orted fail after specified number of seconds (default: 0 => no delay)
                MCA orte: parameter "orte_startup_timeout" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Seconds to wait for startup or job launch before declaring failed_to_start (default: 0 => do not check)
                MCA orte: parameter "orte_timing_details" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Request that detailed timing data by reported
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_timing" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Request that critical timing loops be measured
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_base_user_debugger" (current value: "totalview @mpirun@ -a @mpirun_args@ : ddt -n @np@ -start @executable@ @executable_argv@ @single_app@ : fxp @mpirun@ -a @mpirun_args@", data source: default, level: 9 dev/all, type: string)
                          Sequence of user-level debuggers to search for in orterun
                MCA orte: parameter "orte_default_hostfile" (current value: "/etc/openmpi/openmpi-default-hostfile", data source: default, level: 9 dev/all, type: string)
                          Name of the default hostfile (relative or absolute path, "none" to ignore environmental or default MCA param setting)
                MCA orte: parameter "orte_node_regex" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Regular expression defining nodes in the system
                MCA orte: parameter "orte_keep_fqdn_hostnames" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not to keep FQDN hostnames [default: no]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_retain_aliases" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not to keep aliases for host names [default: no]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_hostname_alias_index" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          If hostname aliases are being retained, which one to use for the debugger proc table [default: 1st alias]
                MCA orte: parameter "orte_xml_output" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Display all output in XML format (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_tag_output" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Tag all output with [job,rank] (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_xml_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Provide all output in XML format to the specified file
                MCA orte: parameter "orte_timestamp_output" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Timestamp all application process output (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_output_filename" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Redirect output from application processes into filename.rank [default: NULL]
                MCA orte: parameter "orte_show_resolved_nodenames" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Display any node names that are resolved to a different name (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_hetero_nodes" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Nodes in cluster may differ in topology, so send the topology back from each node [Default = false]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_launch_agent" (current value: "orted", data source: default, level: 9 dev/all, type: string)
                          Command used to start processes on remote nodes (default: orted)
                MCA orte: parameter "orte_fork_agent" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Command used to fork processes on remote nodes (default: NULL)
                MCA orte: parameter "orte_allocation_required" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether or not an allocation by a resource manager is required [default: no]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_map_stddiag_to_stderr" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Map output from opal_output to stderr of the local process [default: no]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_xterm" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Create a new xterm window and display output from the specified ranks there [default: none]
                MCA orte: parameter "orte_forward_job_control" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Forward SIGTSTP (after converting to SIGSTOP) and SIGCONT signals to the application procs [default: no]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_report_launch_progress" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Output a brief periodic report on launch progress [default: no]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_report_events" (current value: "", data source: default, level: 9 dev/all, type: string)
                          URI to which events are to be reported (default: NULL)
                MCA orte: parameter "orte_enable_recovery" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable recovery from process failure [Default = disabled]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_max_restarts" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Max number of times to restart a failed process
                MCA orte: parameter "orte_abort_on_non_zero_status" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Abort the job if any process returns a non-zero exit status - no restart in such cases
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_allowed_exit_without_sync" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Process exiting without calling finalize will not trigger job termination
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_staged_execution" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Staged execution is being used
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_report_child_jobs_separately" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Return the exit status of the primary job only
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_stat_history_size" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Number of stat samples to keep
                MCA orte: parameter "orte_forward_envars" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited environmental variables to forward, can include value to set
                MCA orte: parameter "orte_max_vm_size" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of virtual machine - used to subdivide allocation
                MCA orte: parameter "orte_set_default_slots" (current value: "cores", data source: default, level: 9 dev/all, type: string)
                          Set the number of slots on nodes that lack such info to the number of specified objects [a number, "cores" (default), "numas", "sockets", "hwthreads" (default if hwthreads_as_cpus is set), or "none" to skip this option]
                MCA orte: parameter "orte_display_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: ras_base_display_alloc)
                          Whether to display the allocation after it is determined
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_display_devel_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: ras_base_display_devel_alloc)
                          Whether to display a developer-detail allocation after it is determined
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_soft_locations" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Treat -host directives as desired, but not required
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_daemon_cores" (current value: "", data source: default, level: 5 tuner/detail, type: string)
                          Restrict the ORTE daemons (including mpirun) to operate on the specified cores (comma-separated list of ranges)
                MCA orte: parameter "orte_rsh_agent" (current value: "ssh : rsh", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: plm_rsh_agent)
                          The command used to launch executables on remote nodes (typically either "ssh" or "rsh")
                MCA orte: parameter "orte_assume_same_shell" (current value: "true", data source: default, level: 9 dev/all, type: bool, synonym of: plm_rsh_assume_same_shell)
                          If set to true, assume that the shell on the remote node is the same as the shell on the local node.  Otherwise, probe for what the remote shell [default: 1]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_rankfile" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: rmaps_rank_file_path)
                          Name of the rankfile to be used for mapping processes (relative or absolute path)
                MCA orte: parameter "orte_base_help_aggregate" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If orte_base_help_aggregate is true, duplicate help messages will be aggregated rather than displayed individually.  This can be helpful for parallel jobs that experience multiple identical failures; rather than print out the same help/failure message N times, display it once with a count of how many processes sent the same message.
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA orte: parameter "orte_ess_jobid" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: ess_base_jobid)
                          Process jobid
                MCA orte: parameter "orte_ess_vpid" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: ess_base_vpid)
                          Process vpid
                MCA orte: parameter "orte_ess_num_procs" (current value: "-1", data source: default, level: 9 dev/all, type: int, synonym of: ess_base_num_procs)
                          Used to discover the number of procs in the job
                 MCA dfs: parameter "dfs" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the dfs framework (<none> means use all components that can be found)
                 MCA dfs: parameter "dfs_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the dfs framework (0 = no verbosity)
                 MCA dfs: parameter "dfs_orted_num_worker_threads" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Number of worker threads to use for processing file requests
                 MCA dfs: parameter "dfs_test_select" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Apps select the test plug-in for the DFS framework
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
              MCA errmgr: parameter "errmgr" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the errmgr framework (<none> means use all components that can be found)
              MCA errmgr: parameter "errmgr_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the errmgr framework (0 = no verbosity)
              MCA errmgr: parameter "errmgr_default_app_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_app errmgr component
              MCA errmgr: parameter "errmgr_default_hnp_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_hnp errmgr component
              MCA errmgr: parameter "errmgr_default_orted_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_orted errmgr component
              MCA errmgr: parameter "errmgr_default_tool_priority" (current value: "1000", data source: default, level: 9 dev/all, type: int)
                          Priority of the default_tool errmgr component
                 MCA ess: parameter "ess" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the ess framework (<none> means use all components that can be found)
                 MCA ess: parameter "ess_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the ess framework (0 = no verbosity)
                 MCA ess: parameter "ess_base_stream_buffering" (current value: "default", data source: default, level: 9 dev/all, type: int)
                          Adjust buffering for stdout/stderr [-1 system default] [0 unbuffered] [1 line buffered] [2 fully buffered] (Default: -1)
                          Valid values: -1:"default", 0:"unbuffered", 1:"line_buffered", 2:"fully_buffered"
                 MCA ess: parameter "ess_singleton_server" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: server)
                          Server to be used as HNP - [file|FILE]:<filename> or just uri
               MCA filem: parameter "filem" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the filem framework (<none> means use all components that can be found)
               MCA filem: parameter "filem_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the filem framework (0 = no verbosity)
               MCA filem: parameter "filem_raw_flatten_directory_trees" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Put all files in the working directory instead of creating their respective directory trees
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
             MCA grpcomm: parameter "grpcomm" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the grpcomm framework (<none> means use all components that can be found)
             MCA grpcomm: parameter "grpcomm_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the grpcomm framework (0 = no verbosity)
                 MCA iof: parameter "iof" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the iof framework (<none> means use all components that can be found)
                 MCA iof: parameter "iof_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the iof framework (0 = no verbosity)
                 MCA iof: parameter "iof_base_output_limit" (current value: "2147483647", data source: default, level: 9 dev/all, type: size_t)
                          Maximum backlog of output messages [default: unlimited]
                 MCA iof: parameter "iof_base_input_files" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of input files to be read and sent to stdin of procs (default: NULL)
                MCA odls: parameter "odls" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the odls framework (<none> means use all components that can be found)
                MCA odls: parameter "odls_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the odls framework (0 = no verbosity)
                MCA odls: parameter "odls_base_sigkill_timeout" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Time to wait for a process to die after issuing a kill signal to it
                 MCA oob: parameter "oob" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the oob framework (<none> means use all components that can be found)
                 MCA oob: parameter "oob_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the oob framework (0 = no verbosity)
                 MCA oob: parameter "oob_base_enable_module_progress_threads" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to independently progress OOB messages for each interface
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA oob: parameter "oob_tcp_peer_limit" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum number of peer connections to simultaneously maintain (-1 = infinite)
                 MCA oob: parameter "oob_tcp_peer_retries" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          Number of times to try shutting down a connection before giving up
                 MCA oob: parameter "oob_tcp_sndbuf" (current value: "131072", data source: default, level: 9 dev/all, type: int)
                          TCP socket send buffering size (in bytes)
                 MCA oob: parameter "oob_tcp_rcvbuf" (current value: "131072", data source: default, level: 9 dev/all, type: int)
                          TCP socket receive buffering size (in bytes)
                 MCA oob: parameter "oob_tcp_if_include" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: oob_tcp_include)
                          Comma-delimited list of devices and/or CIDR notation of TCP networks to use for Open MPI bootstrap communication (e.g., "eth0,192.168.0.0/16").  Mutually exclusive with oob_tcp_if_exclude.
                 MCA oob: parameter "oob_tcp_if_exclude" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: oob_tcp_exclude)
                          Comma-delimited list of devices and/or CIDR notation of TCP networks to NOT use for Open MPI bootstrap communication -- all devices not matching these specifications will be used (e.g., "eth0,192.168.0.0/16").  If set to a non-default value, it is mutually exclusive with oob_tcp_if_include.
                 MCA oob: parameter "oob_tcp_static_ipv4_ports" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Static ports for daemons and procs (IPv4)
                 MCA oob: parameter "oob_tcp_static_ipv6_ports" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Static ports for daemons and procs (IPv6)
                 MCA oob: parameter "oob_tcp_dynamic_ipv4_ports" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Range of ports to be dynamically used by daemons and procs (IPv4)
                 MCA oob: parameter "oob_tcp_dynamic_ipv6_ports" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Range of ports to be dynamically used by daemons and procs (IPv6)
                 MCA oob: parameter "oob_tcp_disable_ipv4_family" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Disable the IPv4 interfaces
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA oob: parameter "oob_tcp_disable_ipv6_family" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Disable the IPv6 interfaces
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the plm framework (<none> means use all components that can be found)
                 MCA plm: parameter "plm_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the plm framework (0 = no verbosity)
                 MCA plm: parameter "plm_rsh_num_concurrent" (current value: "128", data source: default, level: 9 dev/all, type: int)
                          How many plm_rsh_agent instances to invoke concurrently (must be > 0)
                 MCA plm: parameter "plm_rsh_force_rsh" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Force the launcher to always use rsh
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_disable_qrsh" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Disable the launcher to use qrsh when under the Grid Engine parallel environment
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_daemonize_qrsh" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Daemonize the orted under the Grid Engine parallel environment
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_disable_llspawn" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Disable the use of llspawn when under the LoadLeveler environment
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_daemonize_llspawn" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Daemonize the orted when under the LoadLeveler environment
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the rsh plm component
                 MCA plm: parameter "plm_rsh_delay" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Delay between invocations of the remote agent (sec[:usec])
                 MCA plm: parameter "plm_rsh_no_tree_spawn" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If set to true, do not launch via a tree-based topology
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_agent" (current value: "ssh : rsh", data source: default, level: 9 dev/all, type: string, synonyms: pls_rsh_agent, orte_rsh_agent)
                          The command used to launch executables on remote nodes (typically either "ssh" or "rsh")
                 MCA plm: parameter "plm_rsh_assume_same_shell" (current value: "true", data source: default, level: 9 dev/all, type: bool, synonyms: orte_assume_same_shell)
                          If set to true, assume that the shell on the remote node is the same as the shell on the local node.  Otherwise, probe for what the remote shell [default: 1]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA plm: parameter "plm_rsh_pass_environ_mca_params" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If set to false, do not include mca params from the environment on the orted cmd line
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA ras: parameter "ras" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the ras framework (<none> means use all components that can be found)
                 MCA ras: parameter "ras_base_display_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: orte_display_alloc)
                          Whether to display the allocation after it is determined
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA ras: parameter "ras_base_display_devel_alloc" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: orte_display_devel_alloc)
                          Whether to display a developer-detail allocation after it is determined
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA ras: parameter "ras_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the ras framework (0 = no verbosity)
                 MCA ras: parameter "ras_gridengine_priority" (current value: "100", data source: default, level: 9 dev/all, type: int)
                          Priority of the gridengine ras component
                 MCA ras: parameter "ras_gridengine_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable verbose output for the gridengine ras component
                 MCA ras: parameter "ras_gridengine_show_jobid" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Show the JOB_ID of the Grid Engine job
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA ras: parameter "ras_loadleveler_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          Priority of the loadleveler ras component
                 MCA ras: parameter "ras_simulator_slots" (current value: "1", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of number of slots on each node to simulate
                 MCA ras: parameter "ras_simulator_max_slots" (current value: "0", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of number of max slots on each node to simulate
                 MCA ras: parameter "ras_simulator_num_nodes" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of number of nodes to simulate for each topology
                 MCA ras: parameter "ras_simulator_topo_files" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-separated list of files containing xml topology descriptions for simulated nodes
                 MCA ras: parameter "ras_simulator_have_cpubind" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Topology supports binding to cpus
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA ras: parameter "ras_simulator_have_membind" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Topology supports binding to memory
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rmaps framework (<none> means use all components that can be found)
               MCA rmaps: parameter "rmaps_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rmaps framework (0 = no verbosity)
               MCA rmaps: parameter "rmaps_base_pernode" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: rmaps_ppr_pernode)
                          Launch one ppn as directed
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_n_pernode" (current value: "0", data source: default, level: 9 dev/all, type: int, synonyms: rmaps_ppr_n_pernode)
                          Launch n procs/node
               MCA rmaps: parameter "rmaps_base_n_persocket" (current value: "0", data source: default, level: 9 dev/all, type: int, synonyms: rmaps_ppr_n_persocket)
                          Launch n procs/socket
               MCA rmaps: parameter "rmaps_base_pattern" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: rmaps_ppr_pattern)
                          Comma-separated list of number of processes on a given resource type [default: none]
               MCA rmaps: parameter "rmaps_base_mapping_policy" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: rmaps_base_schedule_policy)
                          Mapping Policy [slot | hwthread | core (default:np<=2) | l1cache | l2cache | l3cache | socket (default:np>2) | numa | board | node | seq | dist | ppr], with allowed modifiers :PE=y,SPAN,OVERSUBSCRIBE,NOOVERSUBSCRIBE
               MCA rmaps: parameter "rmaps_base_schedule_policy" (current value: "", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: rmaps_base_mapping_policy)
                          Mapping Policy [slot | hwthread | core (default:np<=2) | l1cache | l2cache | l3cache | socket (default:np>2) | numa | board | node | seq | dist | ppr], with allowed modifiers :PE=y,SPAN,OVERSUBSCRIBE,NOOVERSUBSCRIBE
               MCA rmaps: parameter "rmaps_base_ranking_policy" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Ranking Policy [slot (default:np<=2) | hwthread | core | l1cache | l2cache | l3cache | socket (default:np>2) | numa | board | node], with modifier :SPAN or :FILL
               MCA rmaps: parameter "rmaps_base_bycore" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to map and rank processes round-robin by core
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_byslot" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to map and rank processes round-robin by slot
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_bynode" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to map and rank processes round-robin by node
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_cpus_per_proc" (current value: "1", data source: default, level: 9 dev/all, type: int, synonyms: rmaps_base_cpus_per_rank)
                          Number of cpus to use for each rank [1-2**15 (default=1)]
               MCA rmaps: parameter "rmaps_base_cpus_per_rank" (current value: "1", data source: default, level: 9 dev/all, type: int, synonym of: rmaps_base_cpus_per_proc)
                          Number of cpus to use for each rank [1-2**15 (default=1)]
               MCA rmaps: parameter "rmaps_base_no_schedule_local" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If false, allow scheduling MPI applications on the same node as mpirun (default).  If true, do not schedule any MPI applications on the same node as mpirun
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_no_oversubscribe" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If true, then do not allow oversubscription of nodes - mpirun will return an error if there aren't enough nodes to launch all processes without oversubscribing
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_oversubscribe" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If true, then allow oversubscription of nodes and overloading of processing elements
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_display_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display the process map after it is computed
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_display_devel_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display a developer-detail process map after it is computed
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_display_topo_with_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display the topology with the map
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_display_diffable_map" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to display a diffable process map after it is computed
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_base_topology" (current value: "", data source: default, level: 9 dev/all, type: string)
                          hwloc topology file (xml format) describing the topology of the compute nodes [default: none]
               MCA rmaps: parameter "rmaps_ppr_pernode" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonym of: rmaps_base_pernode)
                          Launch one ppn as directed
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_ppr_n_pernode" (current value: "0", data source: default, level: 9 dev/all, type: int, synonym of: rmaps_base_n_pernode)
                          Launch n procs/node
               MCA rmaps: parameter "rmaps_ppr_n_persocket" (current value: "0", data source: default, level: 9 dev/all, type: int, synonym of: rmaps_base_n_persocket)
                          Launch n procs/socket
               MCA rmaps: parameter "rmaps_ppr_pattern" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: rmaps_base_pattern)
                          Comma-separated list of number of processes on a given resource type [default: none]
               MCA rmaps: parameter "rmaps_ppr_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          Priority of the ppr rmaps component
               MCA rmaps: parameter "rmaps_lama_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the LAMA rmaps component
               MCA rmaps: parameter "rmaps_lama_timing" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable timing information. [Default = disabled]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA rmaps: parameter "rmaps_lama_map" (current value: "", data source: default, level: 5 tuner/detail, type: string)
                          LAMA Map: Process layout iteration ordering (See documentation)
               MCA rmaps: parameter "rmaps_lama_bind" (current value: "", data source: default, level: 5 tuner/detail, type: string)
                          LAMA Bind: Bind to the specified number of resources (See documentation)
               MCA rmaps: parameter "rmaps_lama_mppr" (current value: "", data source: default, level: 5 tuner/detail, type: string)
                          LAMA MPPR: Maximum number of the specified resources available (See documentation)
               MCA rmaps: parameter "rmaps_lama_ordering" (current value: "", data source: default, level: 5 tuner/detail, type: string)
                          LAMA Ordering: Ordering (s) sequential, (n) natural - Default: n (See documentation)
               MCA rmaps: parameter "rmaps_mindist_priority" (current value: "20", data source: default, level: 9 dev/all, type: int)
                          Priority of the mindist rmaps component
               MCA rmaps: parameter "rmaps_rank_file_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the rank_file rmaps component
               MCA rmaps: parameter "rmaps_rank_file_path" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: orte_rankfile)
                          Name of the rankfile to be used for mapping processes (relative or absolute path)
               MCA rmaps: parameter "rmaps_resilient_priority" (current value: "40", data source: default, level: 9 dev/all, type: int)
                          Priority of the resilient rmaps component
               MCA rmaps: parameter "rmaps_resilient_fault_grp_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Filename that contains a description of fault groups for this system
               MCA rmaps: parameter "rmaps_round_robin_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the rr rmaps component
               MCA rmaps: parameter "rmaps_seq_priority" (current value: "60", data source: default, level: 9 dev/all, type: int)
                          Priority of the seq rmaps component
                 MCA rml: parameter "rml" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rml framework (<none> means use all components that can be found)
                 MCA rml: parameter "rml_wrapper" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: rml_base_wrapper)
                          Use a Wrapper component around the selected RML component
                 MCA rml: parameter "rml_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rml framework (0 = no verbosity)
                 MCA rml: parameter "rml_base_wrapper" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: rml_wrapper)
                          Use a Wrapper component around the selected RML component
              MCA routed: parameter "routed" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the routed framework (<none> means use all components that can be found)
              MCA routed: parameter "routed_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the routed framework (0 = no verbosity)
              MCA routed: parameter "routed_radix" (current value: "32", data source: default, level: 9 dev/all, type: int)
                          Radix to be used for routed radix tree
              MCA routed: parameter "routed_radix_max_connections" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Send direct between daemons if the number of nodes is less than this number
              MCA sensor: parameter "sensor" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sensor framework (<none> means use all components that can be found)
              MCA sensor: parameter "sensor_sample_rate" (current value: "0", data source: default, level: 9 dev/all, type: int, deprecated, synonym of: sensor_base_sample_rate)
                          Sample rate in seconds
              MCA sensor: parameter "sensor_log_samples" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: sensor_base_log_samples)
                          Log samples to database
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
              MCA sensor: parameter "sensor_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sensor framework (0 = no verbosity)
              MCA sensor: parameter "sensor_base_sample_rate" (current value: "0", data source: default, level: 9 dev/all, type: int, synonyms: sensor_sample_rate)
                          Sample rate in seconds
              MCA sensor: parameter "sensor_base_log_samples" (current value: "false", data source: default, level: 9 dev/all, type: bool, synonyms: sensor_log_samples)
                          Log samples to database
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA snapc: parameter "snapc" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the snapc framework (<none> means use all components that can be found)
               MCA snapc: parameter "snapc_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the snapc framework (0 = no verbosity)
               MCA snapc: parameter "snapc_base_only_one_seq" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Only store the most recent checkpoint sequence. [Default = disabled]
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA snapc: parameter "snapc_base_global_snapshot_dir" (current value: "/homes/daveturner", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: sstore_base_global_snapshot_dir)
                          The base directory to use when storing global snapshots
               MCA snapc: parameter "snapc_base_global_snapshot_ref" (current value: "", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: sstore_base_global_snapshot_ref)
                          The global snapshot reference to be used for this job.  [Default = ompi_global_snapshot_MPIRUNPID.ckpt]
              MCA sstore: parameter "sstore" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sstore framework (<none> means use all components that can be found)
              MCA sstore: parameter "sstore_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sstore framework (0 = no verbosity)
              MCA sstore: parameter "sstore_base_global_snapshot_dir" (current value: "/homes/daveturner", data source: default, level: 9 dev/all, type: string, synonyms: snapc_base_global_snapshot_dir)
                          The base directory to use when storing global snapshots
              MCA sstore: parameter "sstore_base_global_snapshot_ref" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: snapc_base_global_snapshot_ref)
                          The global snapshot reference to be used for this job.  [Default = ompi_global_snapshot_MPIRUNPID.ckpt]
               MCA state: parameter "state" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the state framework (<none> means use all components that can be found)
               MCA state: parameter "state_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the state framework (0 = no verbosity)
               MCA state: parameter "state_novm_select" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Use this component
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA ompi: parameter "ompi_hostname_cutoff" (current value: "4294967295", data source: default, level: 9 dev/all, type: unsigned)
                          If the number of processes in the application exceeds the provided value,hostnames for remote processes will not be retrieved by applications [default: UINT32_MAX]
                 MCA mpi: parameter "mpi_param_check" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether you want MPI API parameters checked at run-time or not.  Possible values are 0 (no checking) and 1 (perform checking at run-time)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_yield_when_idle" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Yield the processor when waiting for MPI communication (for MPI processes, will default to 1 when oversubscribing nodes)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_event_tick_rate" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          How often to progress TCP communications (0 = never, otherwise specified in microseconds)
                 MCA mpi: parameter "mpi_show_handle_leaks" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether MPI_FINALIZE shows all MPI handles that were not freed or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_no_free_handles" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to actually free MPI objects when their handles are freed
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_show_mpi_alloc_mem_leaks" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          If >0, MPI_FINALIZE will show up to this many instances of memory allocated by MPI_ALLOC_MEM that was not freed by MPI_FREE_MEM
                 MCA mpi: parameter "mpi_show_mca_params" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Whether to show all MCA parameter values during MPI_INIT or not (good for reproducability of MPI jobs for debug purposes). Accepted values are all, default, file, api, and enviro - or a comma delimited combination of them
                 MCA mpi: parameter "mpi_show_mca_params_file" (current value: "", data source: default, level: 9 dev/all, type: string)
                          If mpi_show_mca_params is true, setting this string to a valid filename tells Open MPI to dump all the MCA parameter values into a file suitable for reading via the mca_param_files parameter (good for reproducability of MPI jobs)
                 MCA mpi: parameter "mpi_abort_delay" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          If nonzero, print out an identifying message when MPI_ABORT is invoked (hostname, PID of the process that called MPI_ABORT) and delay for that many seconds before exiting (a negative delay value means to never abort).  This allows attaching of a debugger before quitting the job.
                 MCA mpi: informational "mpi_abort_print_stack" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, print out a stack trace when MPI_ABORT is invoked
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_preconnect_all" (current value: "false", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: mpi_preconnect_mpi)
                          Whether to force MPI processes to fully wire-up the MPI connections between MPI processes during MPI_INIT (vs. making connections lazily -- upon the first MPI traffic between each process peer pair)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_leave_pinned" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Whether to use the "leave pinned" protocol or not.  Enabling this setting can help bandwidth performance when repeatedly sending and receiving large messages with the same buffers over RDMA-based networks (0 = do not use "leave pinned" protocol, 1 = use "leave pinned" protocol, -1 = allow network to choose at runtime).
                 MCA mpi: parameter "mpi_leave_pinned_pipeline" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to use the "leave pinned pipeline" protocol or not.
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_warn_on_fork" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, issue a warning if program forks under conditions that could cause system errors
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: informational "mpi_have_sparse_group_storage" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether this Open MPI installation supports storing of data in MPI groups in "sparse" formats (good for extremely large process count MPI jobs that create many communicators/groups)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: informational "mpi_use_sparse_group_storage" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Whether to use "sparse" storage formats for MPI groups (only relevant if mpi_have_sparse_group_storage is 1)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: informational "mpi_built_with_cuda_support" (current value: "false", data source: default, level: 4 tuner/basic, type: bool)
                          Whether CUDA GPU buffer support is built into library or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA mpi: parameter "mpi_cuda_support" (current value: "false", data source: default, level: 4 tuner/basic, type: bool)
                          Whether CUDA GPU buffer support is enabled or not
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
           MCA allocator: parameter "allocator" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the allocator framework (<none> means use all components that can be found)
           MCA allocator: parameter "allocator_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the allocator framework (0 = no verbosity)
           MCA allocator: parameter "allocator_bucket_num_buckets" (current value: "30", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the bcol framework (<none> means use all components that can be found)
                MCA bcol: parameter "bcol_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the bcol framework (0 = no verbosity)
                MCA bcol: parameter "bcol_base_string" (current value: "basesmuma,basesmuma,iboffload,ptpcoll,ugni", data source: default, level: 9 dev/all, type: string)
                          Default set of basic collective components to use
                MCA bcol: parameter "bcol_basesmuma_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_basesmuma_num_ctl_banks" (current value: "2", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_basesmuma_num_buffs_per_bank" (current value: "16", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_n_poll_loops" (current value: "4", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_n_groups_supported" (current value: "100", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_radix_fanin" (current value: "2", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_radix_fanout" (current value: "2", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_radix_read_tree" (current value: "3", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_order_reduction_tree" (current value: "2", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_k_nomial_radix" (current value: "3", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_num_to_probe" (current value: "10", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_scatter_kary_radix" (current value: "4", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_min_frag_size" (current value: "4096", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_max_frag_size" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_basesmuma_can_use_user_buffers" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA bcol: parameter "bcol_basesmuma_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                MCA bcol: parameter "bcol_ptpcoll_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          PTPCOLL component priority(from 0(low) to 90 (high))
                MCA bcol: parameter "bcol_ptpcoll_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Output some verbose PTPCOLL information (0 = no output, nonzero = output)
                MCA bcol: parameter "bcol_ptpcoll_k_nomial_radix" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          The radix of K-Nomial Tree (starts from 2)
                MCA bcol: parameter "bcol_ptpcoll_narray_radix" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          The radix of Narray Tree (starts from 2)
                MCA bcol: parameter "bcol_ptpcoll_narray_knomial_radix" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          The radix of Narray/Knomial Tree for scatther-gather type algorithms(starts from 2)
                MCA bcol: parameter "bcol_ptpcoll_num_to_probe" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Number of probe operation in single source data check(starts from 8)
                MCA bcol: parameter "bcol_ptpcoll_bcast_small_msg_known_root_alg" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Algoritm selection for bcast small messages known root(1 - K-nomial, 2 - N-array)
                MCA bcol: parameter "bcol_ptpcoll_bcast_large_msg_known_root_alg" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Algoritm selection for bcast large messages known root(1 - Binomial scatther-gather, 2 - N-array scather, K-nomial gather)
                MCA bcol: parameter "bcol_ptpcoll_barrier_alg" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Algoritm selection for Barrier(1 - Recursive doubling, 2 - Recursive K-ing)
                MCA bcol: parameter "bcol_ptpcoll_min_frag_size" (current value: "4096", data source: default, level: 9 dev/all, type: int)
                          Minimum fragment size
                MCA bcol: parameter "bcol_ptpcoll_max_frag_size" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum fragment size
                MCA bcol: parameter "bcol_ptpcoll_can_use_user_buffers" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          User memory can be used by the collective algorithms
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA bml: parameter "bml" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the bml framework (<none> means use all components that can be found)
                 MCA bml: parameter "bml_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the bml framework (0 = no verbosity)
                 MCA bml: parameter "bml_r2_show_unreach_errors" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Show error message when procs are unreachable
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the btl framework (<none> means use all components that can be found)
                 MCA btl: parameter "btl_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the btl framework (0 = no verbosity)
                 MCA btl: parameter "btl_base_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                 MCA btl: parameter "btl_base_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                 MCA btl: parameter "btl_base_warn_component_unused" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          This parameter is used to turn on warning messages when certain NICs are not used
                 MCA btl: parameter "btl_openib_verbose" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Output some verbose OpenIB BTL information (0 = no output, nonzero = output)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_warn_no_device_params_found" (current value: "true", data source: default, level: 9 dev/all, type: bool, synonyms: btl_openib_warn_no_hca_params_found)
                          Warn when no device-specific parameters are found in the INI file specified by the btl_openib_device_param_files MCA parameter (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_warn_no_hca_params_found" (current value: "true", data source: default, level: 9 dev/all, type: bool, deprecated, synonym of: btl_openib_warn_no_device_params_found)
                          Warn when no device-specific parameters are found in the INI file specified by the btl_openib_device_param_files MCA parameter (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_warn_default_gid_prefix" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Warn when there is more than one active ports and at least one of them connected to the network with only default GID prefix configured (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_warn_nonexistent_if" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Warn if non-existent devices and/or ports are specified in the btl_openib_if_[in|ex]clude MCA parameters (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_abort_not_enough_reg_mem" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          If there is not enough registered memory available on the system for Open MPI to function properly, Open MPI will issue a warning.  If this MCA parameter is set to true, then Open MPI will also abort all MPI jobs (0 = warn, but do not abort; any other value = warn and abort)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_poll_cq_batch" (current value: "256", data source: default, level: 9 dev/all, type: unsigned)
                          Retrieve up to poll_cq_batch completions from CQ
                 MCA btl: parameter "btl_openib_want_fork_support" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Whether fork support is desired or not (negative = try to enable fork support, but continue even if it is not available, 0 = do not enable fork support, positive = try to enable fork support and fail if it is not available)
                 MCA btl: parameter "btl_openib_device_param_files" (current value: "/usr/share/openmpi/mca-btl-openib-device-params.ini", data source: default, level: 9 dev/all, type: string, synonyms: btl_openib_hca_param_files)
                          Colon-delimited list of INI-style files that contain device vendor/part-specific parameters (use semicolon for Windows)
                 MCA btl: parameter "btl_openib_hca_param_files" (current value: "/usr/share/openmpi/mca-btl-openib-device-params.ini", data source: default, level: 9 dev/all, type: string, deprecated, synonym of: btl_openib_device_param_files)
                          Colon-delimited list of INI-style files that contain device vendor/part-specific parameters (use semicolon for Windows)
                 MCA btl: parameter "btl_openib_device_type" (current value: "all", data source: default, level: 9 dev/all, type: int)
                          Specify to only use IB or iWARP network adapters (infiniband = only use InfiniBand HCAs; iwarp = only use iWARP NICs; all = use any available adapters)
                          Valid values: 0:"infiniband", 0:"ib", 1:"iwarp", 1:"iw", 2:"all"
                 MCA btl: parameter "btl_openib_max_btls" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum number of device ports to use (-1 = use all available, otherwise must be >= 1)
                 MCA btl: parameter "btl_openib_free_list_num" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Initial size of free lists (must be >= 1)
                 MCA btl: parameter "btl_openib_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of free lists (-1 = infinite, otherwise must be >= 0)
                 MCA btl: parameter "btl_openib_free_list_inc" (current value: "32", data source: default, level: 9 dev/all, type: int)
                          Increment size of free lists (must be >= 1)
                 MCA btl: parameter "btl_openib_mpool" (current value: "grdma", data source: default, level: 9 dev/all, type: string)
                          Name of the memory pool to be used (it is unlikely that you will ever want to change this)
                 MCA btl: parameter "btl_openib_reg_mru_len" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Length of the registration cache most recently used list (must be >= 1)
                 MCA btl: parameter "btl_openib_cq_size" (current value: "8192", data source: default, level: 9 dev/all, type: int, synonyms: btl_openib_ib_cq_size)
                          Minimum size of the OpenFabrics completion queue (CQs are automatically sized based on the number of peer MPI processes; this value determines the *minimum* size of all CQs)
                 MCA btl: parameter "btl_openib_ib_cq_size" (current value: "8192", data source: default, level: 9 dev/all, type: int, deprecated, synonym of: btl_openib_cq_size)
                          Minimum size of the OpenFabrics completion queue (CQs are automatically sized based on the number of peer MPI processes; this value determines the *minimum* size of all CQs)
                 MCA btl: parameter "btl_openib_max_inline_data" (current value: "-1", data source: default, level: 9 dev/all, type: int, synonyms: btl_openib_ib_max_inline_data)
                          Maximum size of inline data segment (-1 = run-time probe to discover max value, otherwise must be >= 0). If not explicitly set, use max_inline_data from the INI file containing device-specific parameters
                 MCA btl: parameter "btl_openib_ib_max_inline_data" (current value: "-1", data source: default, level: 9 dev/all, type: int, deprecated, synonym of: btl_openib_max_inline_data)
                          Maximum size of inline data segment (-1 = run-time probe to discover max value, otherwise must be >= 0). If not explicitly set, use max_inline_data from the INI file containing device-specific parameters
                 MCA btl: parameter "btl_openib_pkey" (current value: "0", data source: default, level: 9 dev/all, type: unsigned, synonyms: btl_openib_ib_pkey_val)
                          OpenFabrics partition key (pkey) value. Unsigned integer decimal or hex values are allowed (e.g., "3" or "0x3f") and will be masked against the maximum allowable IB partition key value (0x7fff)
                 MCA btl: parameter "btl_openib_ib_pkey_val" (current value: "0", data source: default, level: 9 dev/all, type: unsigned, deprecated, synonym of: btl_openib_pkey)
                          OpenFabrics partition key (pkey) value. Unsigned integer decimal or hex values are allowed (e.g., "3" or "0x3f") and will be masked against the maximum allowable IB partition key value (0x7fff)
                 MCA btl: parameter "btl_openib_psn" (current value: "0", data source: default, level: 9 dev/all, type: unsigned, synonyms: btl_openib_ib_psn)
                          OpenFabrics packet sequence starting number (must be >= 0)
                 MCA btl: parameter "btl_openib_ib_psn" (current value: "0", data source: default, level: 9 dev/all, type: unsigned, deprecated, synonym of: btl_openib_psn)
                          OpenFabrics packet sequence starting number (must be >= 0)
                 MCA btl: parameter "btl_openib_ib_qp_ous_rd_atom" (current value: "4", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand outstanding atomic reads (must be >= 0)
                 MCA btl: parameter "btl_openib_mtu" (current value: "1k", data source: default, level: 9 dev/all, type: int, synonyms: btl_openib_ib_mtu)
                          OpenFabrics MTU, in bytes (if not specified in INI files).  Valid values are: 1=256 bytes, 2=512 bytes, 3=1024 bytes, 4=2048 bytes, 5=4096 bytes
                          Valid values: 1:"256B", 2:"512B", 3:"1k", 4:"2k", 5:"4k"
                 MCA btl: parameter "btl_openib_ib_mtu" (current value: "1k", data source: default, level: 9 dev/all, type: int, deprecated, synonym of: btl_openib_mtu)
                          OpenFabrics MTU, in bytes (if not specified in INI files).  Valid values are: 1=256 bytes, 2=512 bytes, 3=1024 bytes, 4=2048 bytes, 5=4096 bytes
                          Valid values: 1:"256B", 2:"512B", 3:"1k", 4:"2k", 5:"4k"
                 MCA btl: parameter "btl_openib_ib_min_rnr_timer" (current value: "25", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand minimum "receiver not ready" timer, in seconds (must be >= 0 and <= 31)
                 MCA btl: parameter "btl_openib_ib_timeout" (current value: "20", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand transmit timeout, plugged into formula: 4.096 microseconds * (2^btl_openib_ib_timeout) (must be >= 0 and <= 31)
                 MCA btl: parameter "btl_openib_ib_retry_count" (current value: "7", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand transmit retry count (must be >= 0 and <= 7)
                 MCA btl: parameter "btl_openib_ib_rnr_retry" (current value: "7", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand "receiver not ready" retry count; applies *only* to SRQ/XRC queues.  PP queues use RNR retry values of 0 because Open MPI performs software flow control to guarantee that RNRs never occur (must be >= 0 and <= 7; 7 = "infinite")
                 MCA btl: parameter "btl_openib_ib_max_rdma_dst_ops" (current value: "4", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand maximum pending RDMA destination operations (must be >= 0)
                 MCA btl: parameter "btl_openib_ib_service_level" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          InfiniBand service level (must be >= 0 and <= 15)
                 MCA btl: parameter "btl_openib_ib_path_record_service_level" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          Enable getting InfiniBand service level from PathRecord (must be >= 0, 0 = disabled, positive = try to get the service level from PathRecord)
                 MCA btl: parameter "btl_openib_use_eager_rdma" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Use RDMA for eager messages (-1 = use device default, 0 = do not use eager RDMA, 1 = use eager RDMA)
                 MCA btl: parameter "btl_openib_eager_rdma_threshold" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Use RDMA for short messages after this number of messages are received from a given peer (must be >= 1)
                 MCA btl: parameter "btl_openib_max_eager_rdma" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Maximum number of peers allowed to use RDMA for short messages (RDMA is used for all long messages, except if explicitly disabled, such as with the "dr" pml) (must be >= 0)
                 MCA btl: parameter "btl_openib_eager_rdma_num" (current value: "17", data source: default, level: 9 dev/all, type: int)
                          Number of RDMA buffers to allocate for small messages (must be >= 1)
                 MCA btl: parameter "btl_openib_btls_per_lid" (current value: "1", data source: default, level: 9 dev/all, type: unsigned)
                          Number of BTLs to create for each InfiniBand LID (must be >= 1)
                 MCA btl: parameter "btl_openib_max_lmc" (current value: "1", data source: default, level: 9 dev/all, type: unsigned)
                          Maximum number of LIDs to use for each device port (must be >= 0, where 0 = use all available)
                 MCA btl: parameter "btl_openib_enable_apm_over_lmc" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Maximum number of alternative paths for each device port (must be >= -1, where 0 = disable apm, -1 = all available alternative paths )
                 MCA btl: parameter "btl_openib_enable_apm_over_ports" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable alternative path migration (APM) over different ports of the same device (must be >= 0, where 0 = disable APM over ports, 1 = enable APM over ports of the same device)
                 MCA btl: parameter "btl_openib_use_async_event_thread" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, use the thread that will handle InfiniBand asynchronous events
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_enable_srq_resize" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Enable/Disable on demand SRQ resize. (0 = without resizing, nonzero = with resizing)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_rroce_enable" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable/Disable routing between different subnets(0 = disable, nonzero = enable)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_buffer_alignment" (current value: "64", data source: default, level: 9 dev/all, type: unsigned)
                          Preferred communication buffer alignment, in bytes (must be > 0 and power of two)
                 MCA btl: parameter "btl_openib_use_message_coalescing" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          If nonzero, use message coalescing
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_cq_poll_ratio" (current value: "100", data source: default, level: 9 dev/all, type: unsigned)
                          How often to poll high priority CQ versus low priority CQ
                 MCA btl: parameter "btl_openib_eager_rdma_poll_ratio" (current value: "100", data source: default, level: 9 dev/all, type: unsigned)
                          How often to poll eager RDMA channel versus CQ
                 MCA btl: parameter "btl_openib_hp_cq_poll_per_progress" (current value: "10", data source: default, level: 9 dev/all, type: unsigned)
                          Max number of completion events to process for each call of BTL progress engine
                 MCA btl: parameter "btl_openib_max_hw_msg_size" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          Maximum size (in bytes) of a single fragment of a long message when using the RDMA protocols (must be > 0 and <= hw capabilities).
                 MCA btl: parameter "btl_openib_memory_registration_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Output some verbose memory registration information (0 = no output, nonzero = output)
                 MCA btl: parameter "btl_openib_ignore_locality" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Ignore any locality information and use all devices (0 = use locality informaiton and use only close devices, nonzero = ignore locality information)
                 MCA btl: informational "btl_openib_have_fork_support" (current value: "true", data source: default, level: 9 dev/all, type: bool)
                          Whether the OpenFabrics stack supports applications that invoke the "fork()" system call or not (0 = no, 1 = yes). Note that this value does NOT indicate whether the system being run on supports "fork()" with OpenFabrics applications or not.
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_exclusivity" (current value: "1024", data source: default, level: 7 dev/basic, type: unsigned)
                          BTL exclusivity (must be >= 0)
                 MCA btl: parameter "btl_openib_flags" (current value: "310", data source: default, level: 5 tuner/detail, type: unsigned)
                          BTL bit flags (general flags: SEND=1, PUT=2, GET=4, SEND_INPLACE=8, RDMA_MATCHED=64, HETEROGENEOUS_RDMA=256; flags only used by the "dr" PML (ignored by others): ACK=16, CHECKSUM=32, RDMA_COMPLETION=128; flags only used by the "bfo" PML (ignored by others): FAILOVER_SUPPORT=512)
                 MCA btl: parameter "btl_openib_rndv_eager_limit" (current value: "12288", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
                 MCA btl: parameter "btl_openib_eager_limit" (current value: "12288", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
                 MCA btl: parameter "btl_openib_max_send_size" (current value: "65536", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
                 MCA btl: parameter "btl_openib_rdma_pipeline_send_length" (current value: "1048576", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_openib_rdma_pipeline_frag_size" (current value: "1048576", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_openib_min_rdma_pipeline_size" (current value: "1060864", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_openib_bandwidth" (current value: "4", data source: default, level: 5 tuner/detail, type: unsigned)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
                 MCA btl: parameter "btl_openib_receive_queues" (current value: "P,128,256,192,128:S,2048,1024,1008,64:S,12288,1024,1008,64:S,65536,1024,1008,64", data source: default, level: 9 dev/all, type: string)
                          Colon-delimited, comma-delimited list of receive queues: P,4096,8,6,4:P,32768,8,6,4
                 MCA btl: parameter "btl_openib_if_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of devices/ports to be used (e.g. "mthca0,mthca1:2"; empty value means to use all ports found).  Mutually exclusive with btl_openib_if_exclude.
                 MCA btl: parameter "btl_openib_if_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of device/ports to be excluded (empty value means to not exclude any ports).  Mutually exclusive with btl_openib_if_include.
                 MCA btl: parameter "btl_openib_ipaddr_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of IP Addresses to be used (e.g. "192.168.1.0/24").  Mutually exclusive with btl_openib_ipaddr_exclude.
                 MCA btl: parameter "btl_openib_ipaddr_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Comma-delimited list of IP Addresses to be excluded (e.g. "192.168.1.0/24").  Mutually exclusive with btl_openib_ipaddr_include.
                 MCA btl: parameter "btl_openib_gid_index" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          GID index to use on verbs device ports
                 MCA btl: parameter "btl_openib_memalign" (current value: "32", data source: default, level: 9 dev/all, type: int)
                          [64 | 32 | 0] - Enable (64bit or 32bit)/Disable(0) memoryalignment for all malloc calls if btl openib is used.
                 MCA btl: parameter "btl_openib_memalign_threshold" (current value: "0", data source: default, level: 9 dev/all, type: size_t)
                          Allocating memory more than btl_openib_memalign_threshholdbytes will automatically be algined to the value of btl_openib_memalign bytes.memalign_threshhold defaults to the same value as mca_btl_openib_eager_limit.
                 MCA btl: parameter "btl_openib_cpc_include" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Method used to select OpenFabrics connections (valid values: rdmacm,udcm)
                 MCA btl: parameter "btl_openib_cpc_exclude" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Method used to exclude OpenFabrics connections (valid values: rdmacm,udcm)
                 MCA btl: parameter "btl_openib_connect_rdmacm_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
                          The selection method priority for rdma_cm
                 MCA btl: parameter "btl_openib_connect_rdmacm_port" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          The selection method port for rdma_cm
                 MCA btl: parameter "btl_openib_connect_rdmacm_resolve_timeout" (current value: "30000", data source: default, level: 9 dev/all, type: int)
                          The timeout (in miliseconds) for address and route resolution
                 MCA btl: parameter "btl_openib_connect_rdmacm_retry_count" (current value: "20", data source: default, level: 9 dev/all, type: int)
                          Maximum number of times rdmacm will retry route resolution
                 MCA btl: parameter "btl_openib_connect_rdmacm_reject_causes_connect_error" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          The drivers for some devices are buggy such that an RDMA REJECT action may result in a CONNECT_ERROR event instead of a REJECTED event.  Setting this MCA parameter to true tells Open MPI to treat CONNECT_ERROR events on connections where a REJECT is expected as a REJECT (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_openib_connect_udcm_priority" (current value: "63", data source: default, level: 9 dev/all, type: int)
                          Priority of the udcm connection method
                 MCA btl: parameter "btl_openib_connect_udcm_recv_count" (current value: "512", data source: default, level: 9 dev/all, type: int)
                          Number of registered buffers to post
                 MCA btl: parameter "btl_openib_connect_udcm_timeout" (current value: "500000", data source: default, level: 9 dev/all, type: int)
                          Ack timeout for udcm connection messages
                 MCA btl: parameter "btl_openib_connect_udcm_max_retry" (current value: "25", data source: default, level: 9 dev/all, type: int)
                          Maximum number of times to retry sending a udcm connection message
                 MCA btl: parameter "btl_self_free_list_num" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Number of fragments by default
                 MCA btl: parameter "btl_self_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum number of fragments
                 MCA btl: parameter "btl_self_free_list_inc" (current value: "32", data source: default, level: 9 dev/all, type: int)
                          Increment by this number of fragments
                 MCA btl: parameter "btl_self_exclusivity" (current value: "65536", data source: default, level: 7 dev/basic, type: unsigned)
                          BTL exclusivity (must be >= 0)
                 MCA btl: parameter "btl_self_flags" (current value: "10", data source: default, level: 5 tuner/detail, type: unsigned)
                          BTL bit flags (general flags: SEND=1, PUT=2, GET=4, SEND_INPLACE=8, RDMA_MATCHED=64, HETEROGENEOUS_RDMA=256; flags only used by the "dr" PML (ignored by others): ACK=16, CHECKSUM=32, RDMA_COMPLETION=128; flags only used by the "bfo" PML (ignored by others): FAILOVER_SUPPORT=512)
                 MCA btl: parameter "btl_self_rndv_eager_limit" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
                 MCA btl: parameter "btl_self_eager_limit" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
                 MCA btl: parameter "btl_self_max_send_size" (current value: "262144", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
                 MCA btl: parameter "btl_self_rdma_pipeline_send_length" (current value: "2147483647", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_self_rdma_pipeline_frag_size" (current value: "2147483647", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_self_min_rdma_pipeline_size" (current value: "2147614719", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_self_bandwidth" (current value: "0", data source: default, level: 5 tuner/detail, type: unsigned)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
                 MCA btl: informational "btl_sm_use_knem" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Whether knem support is desired or not (negative = try to enable knem support, but continue even if it is not available, 0 = do not enable knem support, positive = try to enable knem support and fail if it is not available)
                 MCA btl: parameter "btl_sm_knem_dma_min" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          Minimum message size (in bytes) to use the knem DMA mode; ignored if knem does not support DMA mode (0 = do not use the knem DMA mode)
                 MCA btl: parameter "btl_sm_knem_max_simultaneous" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          Max number of simultaneous ongoing knem operations to support (0 = do everything synchronously, which probably gives the best large message latency; >0 means to do all operations asynchronously, which supports better overlap for simultaneous large message sends)
                 MCA btl: parameter "btl_sm_use_cma" (current value: "0", data source: default, level: 9 dev/all, type: unsigned)
                          Whether or not to enable CMA
                 MCA btl: parameter "btl_sm_free_list_num" (current value: "8", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_sm_free_list_max" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_sm_free_list_inc" (current value: "64", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_sm_max_procs" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_sm_fifo_size" (current value: "4096", data source: default, level: 4 tuner/basic, type: unsigned)
                 MCA btl: parameter "btl_sm_num_fifos" (current value: "1", data source: default, level: 4 tuner/basic, type: int)
                 MCA btl: parameter "btl_sm_fifo_lazy_free" (current value: "120", data source: default, level: 5 tuner/detail, type: unsigned)
                 MCA btl: parameter "btl_sm_sm_extra_procs" (current value: "0", data source: default, level: 9 dev/all, type: int)
                 MCA btl: parameter "btl_sm_exclusivity" (current value: "65535", data source: default, level: 7 dev/basic, type: unsigned)
                          BTL exclusivity (must be >= 0)
                 MCA btl: parameter "btl_sm_flags" (current value: "1", data source: default, level: 5 tuner/detail, type: unsigned)
                          BTL bit flags (general flags: SEND=1, PUT=2, GET=4, SEND_INPLACE=8, RDMA_MATCHED=64, HETEROGENEOUS_RDMA=256; flags only used by the "dr" PML (ignored by others): ACK=16, CHECKSUM=32, RDMA_COMPLETION=128; flags only used by the "bfo" PML (ignored by others): FAILOVER_SUPPORT=512)
                 MCA btl: parameter "btl_sm_rndv_eager_limit" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
                 MCA btl: parameter "btl_sm_eager_limit" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
                 MCA btl: parameter "btl_sm_max_send_size" (current value: "32768", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
                 MCA btl: parameter "btl_tcp_links" (current value: "1", data source: default, level: 4 tuner/basic, type: unsigned)
                 MCA btl: parameter "btl_tcp_if_include" (current value: "", data source: default, level: 1 user/basic, type: string)
                          Comma-delimited list of devices and/or CIDR notation of networks to use for MPI communication (e.g., "eth0,192.168.0.0/16").  Mutually exclusive with btl_tcp_if_exclude.
                 MCA btl: parameter "btl_tcp_if_exclude" (current value: "127.0.0.1/8,sppp", data source: default, level: 1 user/basic, type: string)
                          Comma-delimited list of devices and/or CIDR notation of networks to NOT use for MPI communication -- all devices not matching these specifications will be used (e.g., "eth0,192.168.0.0/16").  If set to a non-default value, it is mutually exclusive with btl_tcp_if_include.
                 MCA btl: parameter "btl_tcp_free_list_num" (current value: "8", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_tcp_free_list_max" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_tcp_free_list_inc" (current value: "32", data source: default, level: 5 tuner/detail, type: int)
                 MCA btl: parameter "btl_tcp_sndbuf" (current value: "131072", data source: default, level: 4 tuner/basic, type: int)
                 MCA btl: parameter "btl_tcp_rcvbuf" (current value: "131072", data source: default, level: 4 tuner/basic, type: int)
                 MCA btl: parameter "btl_tcp_endpoint_cache" (current value: "30720", data source: default, level: 4 tuner/basic, type: int)
                          The size of the internal cache for each TCP connection. This cache is used to reduce the number of syscalls, by replacing them with memcpy. Every read will read the expected data plus the amount of the endpoint_cache
                 MCA btl: parameter "btl_tcp_use_nagle" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          Whether to use Nagle's algorithm or not (using Nagle's algorithm may increase short message latency)
                 MCA btl: parameter "btl_tcp_port_min_v4" (current value: "1024", data source: default, level: 2 user/detail, type: int)
                          The minimum port where the TCP BTL will try to bind (default 1024)
                 MCA btl: parameter "btl_tcp_port_range_v4" (current value: "64511", data source: default, level: 2 user/detail, type: int)
                          The number of ports where the TCP BTL will try to bind (default 64511). This parameter together with the port min, define a range of ports where Open MPI will open sockets.
                 MCA btl: parameter "btl_tcp_port_min_v6" (current value: "1024", data source: default, level: 2 user/detail, type: int)
                          The minimum port where the TCP BTL will try to bind (default 1024)
                 MCA btl: parameter "btl_tcp_port_range_v6" (current value: "64511", data source: default, level: 2 user/detail, type: int)
                          The number of ports where the TCP BTL will try to bind (default 64511). This parameter together with the port min, define a range of ports where Open MPI will open sockets.
                 MCA btl: parameter "btl_tcp_warn_all_unfound_interfaces" (current value: "false", data source: default, level: 2 user/detail, type: bool)
                          Issue a warning for all unfound interfaces included in if_exclude
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_tcp_exclusivity" (current value: "100", data source: default, level: 7 dev/basic, type: unsigned)
                          BTL exclusivity (must be >= 0)
                 MCA btl: parameter "btl_tcp_flags" (current value: "314", data source: default, level: 5 tuner/detail, type: unsigned)
                          BTL bit flags (general flags: SEND=1, PUT=2, GET=4, SEND_INPLACE=8, RDMA_MATCHED=64, HETEROGENEOUS_RDMA=256; flags only used by the "dr" PML (ignored by others): ACK=16, CHECKSUM=32, RDMA_COMPLETION=128; flags only used by the "bfo" PML (ignored by others): FAILOVER_SUPPORT=512)
                 MCA btl: parameter "btl_tcp_rndv_eager_limit" (current value: "65536", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
                 MCA btl: parameter "btl_tcp_eager_limit" (current value: "65536", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
                 MCA btl: parameter "btl_tcp_max_send_size" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
                 MCA btl: parameter "btl_tcp_rdma_pipeline_send_length" (current value: "131072", data source: default, level: 4 tuner/basic, type: size_t)
                          Length of the "phase 2" portion of a large message (in bytes) when using the pipeline protocol.  This part of the message will be split into fragments of size max_send_size and sent using send/receive semantics (must be >= 0; only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_tcp_rdma_pipeline_frag_size" (current value: "2147483647", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 3" fragment from a long message when using the pipeline protocol.  These fragments will be sent using RDMA semantics (must be >= 1; only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_tcp_min_rdma_pipeline_size" (current value: "196608", data source: default, level: 4 tuner/basic, type: size_t)
                          Messages smaller than this size (in bytes) will not use the RDMA pipeline protocol.  Instead, they will be split into fragments of max_send_size and sent using send/receive semantics (must be >=0, and is automatically adjusted up to at least (eager_limit+btl_rdma_pipeline_send_length); only relevant when the PUT flag is set)
                 MCA btl: parameter "btl_tcp_bandwidth" (current value: "100", data source: default, level: 5 tuner/detail, type: unsigned)
                          Approximate maximum bandwidth of interconnect (0 = auto-detect value at run-time [not supported in all BTL modules], >= 1 = bandwidth in Mbps)
                 MCA btl: parameter "btl_tcp_disable_family" (current value: "0", data source: default, level: 2 user/detail, type: int)
                 MCA btl: parameter "btl_tcp_if_seq" (current value: "", data source: default, level: 9 dev/all, type: string)
                          If specified, a comma-delimited list of TCP interfaces.  Interfaces will be assigned, one to each MPI process, in a round-robin fashion on each server.  For example, if the list is "eth0,eth1" and four MPI processes are run on a single server, then local ranks 0 and 2 will use eth0 and local ranks 1 and 3 will use eth1.
                 MCA btl: parameter "btl_usnic_max_btls" (current value: "0", data source: default, level: 2 user/detail, type: int)
                          Maximum number of usNICs to use (default: 0 = as many as are available)
                 MCA btl: parameter "btl_usnic_if_include" (current value: "", data source: default, level: 1 user/basic, type: string)
                          Comma-delimited list of devices/networks to be used (e.g. "usnic_0,10.10.0.0/16"; empty value means to use all available usNICs).  Mutually exclusive with btl_usnic_if_exclude.
                 MCA btl: parameter "btl_usnic_if_exclude" (current value: "", data source: default, level: 1 user/basic, type: string)
                          Comma-delimited list of devices/networks to be excluded (empty value means to not exclude any usNICs).  Mutually exclusive with btl_usnic_if_include.
                 MCA btl: parameter "btl_usnic_stats" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          A non-negative integer specifying the frequency at which each USNIC BTL will output statistics (default: 0 seconds, meaning that statistics are disabled)
                 MCA btl: parameter "btl_usnic_stats_relative" (current value: "0", data source: default, level: 4 tuner/basic, type: int)
                          If stats are enabled, output relative stats between the timestemps (vs. cumulative stats since the beginning of the job) (default: 0 -- i.e., absolute)
                 MCA btl: parameter "btl_usnic_mpool" (current value: "grdma", data source: default, level: 5 tuner/detail, type: string)
                          Name of the memory pool to be used
                 MCA btl: parameter "btl_usnic_want_numa_device_assignment" (current value: "1", data source: default, level: 5 tuner/detail, type: int)
                          If 1, use only Cisco VIC ports thare are a minimum NUMA distance from the MPI process for short messages.  If 0, use all available Cisco VIC ports for short messages.  This parameter is meaningless (and ignored) unless MPI proceses are bound to processor cores.  Defaults to 1 if NUMA support is included in Open MPI; -1 otherwise.
                 MCA btl: parameter "btl_usnic_sd_num" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                          Maximum send descriptors to post (-1 = pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_rd_num" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                          Number of pre-posted receive buffers (-1 = pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_prio_sd_num" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                          Maximum priority send descriptors to post (-1 = pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_prio_rd_num" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                          Number of pre-posted priority receive buffers (-1 = pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_cq_num" (current value: "-1", data source: default, level: 5 tuner/detail, type: int)
                          Number of completion queue entries (-1 = pre-set defaults; depends on number and type of devices available; will error if (sd_num+rd_num)>cq_num)
                 MCA btl: parameter "btl_usnic_retrans_timeout" (current value: "1000", data source: default, level: 5 tuner/detail, type: int)
                          Number of microseconds before retransmitting a frame
                 MCA btl: parameter "btl_usnic_priority_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Max size of "priority" messages (0 = use pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_eager_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Eager send limit (0 = use pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_rndv_eager_limit" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Eager rendezvous limit (0 = use pre-set defaults; depends on number and type of devices available)
                 MCA btl: parameter "btl_usnic_pack_lazy_threshold" (current value: "16384", data source: default, level: 5 tuner/detail, type: int)
                          Convertor packing on-the-fly threshold (-1 = always pack eagerly, 0 = always pack lazily, otherwise will pack on the fly if fragment size is > limit)
                 MCA btl: parameter "btl_usnic_arp_timeout" (current value: "10", data source: default, level: 6 tuner/all, type: int)
                          Timeout, in seconds, for the maximum delay between ARP replies when using the usNIC/UDP transport (ignored when using the usNIC/L2 transport, must be >=1)
                 MCA btl: parameter "btl_usnic_max_short_packets" (current value: "25", data source: default, level: 5 tuner/detail, type: int)
                          Number of abnormally-short packets received before outputting a warning (0 = never show the warning)
                 MCA btl: parameter "btl_usnic_show_route_failures" (current value: "true", data source: default, level: 3 user/all, type: bool)
                          Whether to show a warning when route failures between MPI process peers are detected (default = 1, enabled; 0 = disabled)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_usnic_connectivity_check" (current value: "true", data source: default, level: 3 user/all, type: bool)
                          Whether to enable the usNIC connectivity check upon first send (default = 1, enabled; 0 = disabled)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_usnic_connectivity_ack_timeout" (current value: "250", data source: default, level: 3 user/all, type: int)
                          Timeout, in milliseconds, while waiting for an ACK while verification connectivity between usNIC devices.  If 0, the connectivity check is disabled (must be >=0).
                 MCA btl: parameter "btl_usnic_connectivity_error_num_retries" (current value: "40", data source: default, level: 3 user/all, type: int)
                          Number of times to retry usNIC connectivity verification before aborting the MPI job (must be >0).
                 MCA btl: parameter "btl_usnic_connectivity_map" (current value: "", data source: default, level: 3 user/all, type: string)
                          Display the usNIC connectivity map.  If this parameter is specified, it is the filename prefix emitted by each MPI process.  The full filename emitted by each process is of the form: <prefix>-<hostname>.<pid>.<jobid>.<MCW rank>.txt.
                 MCA btl: parameter "btl_usnic_warn_nonexistent_if" (current value: "true", data source: default, level: 9 dev/all, type: bool, synonym of: ompi_common_verbs_warn_nonexistent_if)
                          Warn if non-existent devices and/or ports are specified in device include/exclude MCA parameters (0 = do not warn; any other value = warn)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA btl: parameter "btl_vader_free_list_num" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Initial number of fragments to allocate for shared memory communication.
                 MCA btl: parameter "btl_vader_free_list_max" (current value: "16384", data source: default, level: 9 dev/all, type: int)
                          Maximum number of fragments to allocate for shared memory communication.
                 MCA btl: parameter "btl_vader_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Number of fragments to create on each allocation.
                 MCA btl: parameter "btl_vader_memcpy_limit" (current value: "524288", data source: default, level: 5 tuner/detail, type: int)
                          Message size to switch from using memove to memcpy. The relative speed of these two routines can vary by size.
                 MCA btl: parameter "btl_vader_log_align" (current value: "21", data source: default, level: 5 tuner/detail, type: int)
                          Log base 2 of the alignment to use for xpmem segments (default: 21, minimum: 12, maximum: 25)
                 MCA btl: parameter "btl_vader_segment_size" (current value: "4194304", data source: default, level: 5 tuner/detail, type: int)
                          Maximum size of all shared memory buffers (default: 4M)
                 MCA btl: parameter "btl_vader_max_inline_send" (current value: "256", data source: default, level: 5 tuner/detail, type: unsigned)
                          Maximum size to transfer using copy-in copy-out semantics
                 MCA btl: parameter "btl_vader_exclusivity" (current value: "65536", data source: default, level: 7 dev/basic, type: unsigned)
                          BTL exclusivity (must be >= 0)
                 MCA btl: parameter "btl_vader_flags" (current value: "8", data source: default, level: 5 tuner/detail, type: unsigned)
                          BTL bit flags (general flags: SEND=1, PUT=2, GET=4, SEND_INPLACE=8, RDMA_MATCHED=64, HETEROGENEOUS_RDMA=256; flags only used by the "dr" PML (ignored by others): ACK=16, CHECKSUM=32, RDMA_COMPLETION=128; flags only used by the "bfo" PML (ignored by others): FAILOVER_SUPPORT=512)
                 MCA btl: parameter "btl_vader_rndv_eager_limit" (current value: "32768", data source: default, level: 4 tuner/basic, type: size_t)
                          Size (in bytes, including header) of "phase 1" fragment sent for all large messages (must be >= 0 and <= eager_limit)
                 MCA btl: parameter "btl_vader_eager_limit" (current value: "4096", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes, including header) of "short" messages (must be >= 1).
                 MCA btl: parameter "btl_vader_max_send_size" (current value: "32768", data source: default, level: 4 tuner/basic, type: size_t)
                          Maximum size (in bytes) of a single "phase 2" fragment of a long message when using the pipeline protocol (must be >= 1)
                MCA coll: parameter "coll" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the coll framework (<none> means use all components that can be found)
                MCA coll: parameter "coll_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the coll framework (0 = no verbosity)
                MCA coll: parameter "coll_basic_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the basic coll component
                MCA coll: parameter "coll_basic_crossover" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Minimum number of processes in a communicator before using the logarithmic algorithms
                MCA coll: parameter "coll_hierarch_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the hierarchical coll component
                MCA coll: parameter "coll_hierarch_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Turn verbose message of the hierarchical coll component on/off
                MCA coll: parameter "coll_hierarch_use_rdma" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Switch from the send btl list used to detect hierarchies to the rdma btl list
                MCA coll: parameter "coll_hierarch_ignore_sm" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Ignore sm protocol when detecting hierarchies. Required to enable the usage of protocol specific collective operations
                MCA coll: parameter "coll_hierarch_detection_alg" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          Used to specify the algorithm for detecting Hierarchy.Choose between all or two levels of hierarchy
                MCA coll: parameter "coll_hierarch_bcast_alg" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Used to specify the algorithm used for bcast operations.
                MCA coll: parameter "coll_hierarch_segment_size" (current value: "32768", data source: default, level: 9 dev/all, type: int)
                          Used to specify the segment size for segmented algorithms.
                MCA coll: parameter "coll_inter_priority" (current value: "40", data source: default, level: 9 dev/all, type: int)
                          Priority of the inter coll component
                MCA coll: parameter "coll_inter_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Turn verbose message of the inter coll component on/off
                MCA coll: parameter "coll_libnbc_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the libnbc coll component
                MCA coll: parameter "coll_ml_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          ML component priority(from 0(low) to 90 (high))
                MCA coll: parameter "coll_ml_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Output some verbose ML information (0 = no output, nonzero = output)
                MCA coll: parameter "coll_ml_max_comm" (current value: "24", data source: default, level: 9 dev/all, type: int)
                          Maximum number of communicators that can use coll/ml
                MCA coll: parameter "coll_ml_min_comm_size" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Minimum size of communicator to use coll/ml
                MCA coll: parameter "coll_ml_n_payload_mem_banks" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          Number of payload memory banks
                MCA coll: parameter "coll_ml_n_payload_buffs_per_bank" (current value: "16", data source: default, level: 9 dev/all, type: int)
                          Number of payload buffers per bank
                MCA coll: parameter "coll_ml_payload_buffer_size" (current value: "4096", data source: default, level: 9 dev/all, type: unsigned long long)
                          Size of payload buffers
                MCA coll: parameter "coll_ml_pipeline_depth" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          Size of fragmentation pipeline
                MCA coll: parameter "coll_ml_free_list_init_size" (current value: "128", data source: default, level: 9 dev/all, type: int)
                          Initial size of free lists in coll/ml
                MCA coll: parameter "coll_ml_free_list_grow_size" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Initial size of free lists in coll/ml
                MCA coll: parameter "coll_ml_free_list_max_size" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Initial size of free lists in coll/ml
                MCA coll: parameter "coll_ml_bcast_algorithm" (current value: "static", data source: default, level: 9 dev/all, type: int)
                          Algorithm to use for broadcast
                          Valid values: 0:"static", 1:"sequential", 2:"unknown-root"
                MCA coll: parameter "coll_ml_disable_allgather" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Disable Allgather
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA coll: parameter "coll_ml_disable_reduce" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Disable Reduce
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA coll: parameter "coll_ml_enable_fragmentation" (current value: "auto", data source: default, level: 9 dev/all, type: int)
                          Disable/Enable fragmentation for large messages
                          Valid values: 0:"disable", 1:"enable", 2:"auto"
                MCA coll: parameter "coll_ml_config_file" (current value: "/usr/share/openmpi/mca-coll-ml.config", data source: default, level: 9 dev/all, type: string)
                          ML collectives configuration file
                MCA coll: parameter "coll_ml_memory_manager_list_size" (current value: "24", data source: default, level: 9 dev/all, type: size_t)
                          Memory manager list size
                MCA coll: parameter "coll_ml_memory_manager_block_size" (current value: "3145728", data source: default, level: 9 dev/all, type: size_t)
                          Memory manager block size
                MCA coll: parameter "coll_ml_memory_manager_alignment" (current value: "3145728", data source: default, level: 9 dev/all, type: size_t)
                          Memory manager alignment
                MCA coll: parameter "coll_self_priority" (current value: "75", data source: default, level: 9 dev/all, type: int)
                MCA coll: parameter "coll_sm_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the sm coll component
                MCA coll: parameter "coll_sm_control_size" (current value: "4096", data source: default, level: 9 dev/all, type: int)
                          Length of the control data -- should usually be either the length of a cache line on most SMPs, or the size of a page on machines that support direct memory affinity page placement (in bytes)
                MCA coll: parameter "coll_sm_fragment_size" (current value: "8192", data source: default, level: 9 dev/all, type: int)
                          Fragment size (in bytes) used for passing data through shared memory (will be rounded up to the nearest control_size size)
                MCA coll: parameter "coll_sm_comm_in_use_flags" (current value: "2", data source: default, level: 9 dev/all, type: int)
                          Number of "in use" flags, used to mark a message passing area segment as currently being used or not (must be >= 2 and <= comm_num_segments)
                MCA coll: parameter "coll_sm_comm_num_segments" (current value: "8", data source: default, level: 9 dev/all, type: int)
                          Number of segments in each communicator's shared memory message passing area (must be >= 2, and must be a multiple of comm_in_use_flags)
                MCA coll: parameter "coll_sm_tree_degree" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Degree of the tree for tree-based operations (must be => 1 and <= min(control_size, 255))
                MCA coll: parameter "coll_sm_info_num_procs" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Number of processes to use for the calculation of the shared_mem_size MCA information parameter (must be => 2)
                MCA coll: informational "coll_sm_shared_mem_used_data" (current value: "548864", data source: default, level: 9 dev/all, type: int)
                          Amount of shared memory used, per communicator, in the shared memory data area for info_num_procs processes (in bytes)
                MCA coll: parameter "coll_tuned_priority" (current value: "30", data source: default, level: 6 tuner/all, type: int)
                          Priority of the tuned coll component
                MCA coll: parameter "coll_tuned_pre_allocate_memory_comm_size_limit" (current value: "32768", data source: default, level: 6 tuner/all, type: int)
                          Size of communicator were we stop pre-allocating memory for the fixed internal buffer used for message requests etc that is hung off the communicator data segment. I.e. if you have a 100'000 nodes you might not want to pre-allocate 200'000 request handle slots per communicator instance!
                MCA coll: parameter "coll_tuned_init_tree_fanout" (current value: "4", data source: default, level: 6 tuner/all, type: int)
                          Inital fanout used in the tree topologies for each communicator. This is only an initial guess, if a tuned collective needs a different fanout for an operation, it build it dynamically. This parameter is only for the first guess and might save a little time
                MCA coll: parameter "coll_tuned_init_chain_fanout" (current value: "4", data source: default, level: 6 tuner/all, type: int)
                          Inital fanout used in the chain (fanout followed by pipeline) topologies for each communicator. This is only an initial guess, if a tuned collective needs a different fanout for an operation, it build it dynamically. This parameter is only for the first guess and might save a little time
                MCA coll: parameter "coll_tuned_use_dynamic_rules" (current value: "false", data source: default, level: 6 tuner/all, type: bool)
                          Switch used to decide if we use static (compiled/if statements) or dynamic (built at runtime) decision function rules
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA coll: parameter "coll_tuned_dynamic_rules_filename" (current value: "", data source: default, level: 6 tuner/all, type: string)
                          Filename of configuration file that contains the dynamic (@runtime) decision function rules
                MCA coll: informational "coll_tuned_allreduce_algorithm_count" (current value: "5", data source: default, level: 5 tuner/detail, type: int)
                          Number of allreduce algorithms available
                MCA coll: parameter "coll_tuned_allreduce_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which allreduce algorithm is used. Can be locked down to any of: 0 ignore, 1 basic linear, 2 nonoverlapping (tuned reduce + tuned bcast), 3 recursive doubling, 4 ring, 5 segmented ring
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"nonoverlapping", 3:"recursive_doubling", 4:"ring", 5:"segmented_ring"
                MCA coll: parameter "coll_tuned_allreduce_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for allreduce algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
                MCA coll: parameter "coll_tuned_allreduce_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for allreduce algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
                MCA coll: parameter "coll_tuned_allreduce_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for allreduce algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
                MCA coll: informational "coll_tuned_alltoall_algorithm_count" (current value: "5", data source: default, level: 5 tuner/detail, type: int)
                          Number of alltoall algorithms available
                MCA coll: parameter "coll_tuned_alltoall_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which alltoall algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 pairwise, 3: modified bruck, 4: linear with sync, 5:two proc only.
                          Valid values: 0:"ignore", 1:"linear", 2:"pairwise", 3:"modified_bruck", 4:"linear_sync", 5:"two_proc"
                MCA coll: parameter "coll_tuned_alltoall_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for alltoall algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
                MCA coll: parameter "coll_tuned_alltoall_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for alltoall algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
                MCA coll: parameter "coll_tuned_alltoall_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for alltoall algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
                MCA coll: parameter "coll_tuned_alltoall_algorithm_max_requests" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Maximum number of outstanding send or recv requests.  Only has meaning for synchronized algorithms.
                MCA coll: informational "coll_tuned_allgather_algorithm_count" (current value: "6", data source: default, level: 5 tuner/detail, type: int)
                          Number of allgather algorithms available
                MCA coll: parameter "coll_tuned_allgather_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which allallgather algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 bruck, 3 recursive doubling, 4 ring, 5 neighbor exchange, 6: two proc only.
                          Valid values: 0:"ignore", 1:"linear", 2:"bruck", 3:"recursive_doubling", 4:"ring", 5:"neighbor", 6:"two_proc"
                MCA coll: parameter "coll_tuned_allgather_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for allgather algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
                MCA coll: parameter "coll_tuned_allgather_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for allgather algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
                MCA coll: parameter "coll_tuned_allgather_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for allgather algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
                MCA coll: informational "coll_tuned_allgatherv_algorithm_count" (current value: "5", data source: default, level: 5 tuner/detail, type: int)
                          Number of allgatherv algorithms available
                MCA coll: parameter "coll_tuned_allgatherv_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which allallgatherv algorithm is used. Can be locked down to choice of: 0 ignore, 1 default (allgathervv + bcast), 2 bruck, 3 ring, 4 neighbor exchange, 5: two proc only.
                          Valid values: 0:"ignore", 1:"default", 2:"bruck", 3:"ring", 4:"neighbor", 5:"two_proc"
                MCA coll: parameter "coll_tuned_allgatherv_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for allgatherv algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
                MCA coll: parameter "coll_tuned_allgatherv_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for allgatherv algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
                MCA coll: parameter "coll_tuned_allgatherv_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for allgatherv algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
                MCA coll: informational "coll_tuned_alltoallv_algorithm_count" (current value: "2", data source: default, level: 5 tuner/detail, type: int)
                          Number of alltoallv algorithms available
                MCA coll: parameter "coll_tuned_alltoallv_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which alltoallv algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 pairwise.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"pairwise"
                MCA coll: informational "coll_tuned_barrier_algorithm_count" (current value: "6", data source: default, level: 5 tuner/detail, type: int)
                          Number of barrier algorithms available
                MCA coll: parameter "coll_tuned_barrier_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which barrier algorithm is used. Can be locked down to choice of: 0 ignore, 1 linear, 2 double ring, 3: recursive doubling 4: bruck, 5: two proc only, 6: tree
                          Valid values: 0:"ignore", 1:"linear", 2:"double_ring", 3:"recursive_doubling", 4:"bruck", 5:"two_proc", 6:"tree"
                MCA coll: informational "coll_tuned_bcast_algorithm_count" (current value: "6", data source: default, level: 5 tuner/detail, type: int)
                          Number of bcast algorithms available
                MCA coll: parameter "coll_tuned_bcast_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which bcast algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 chain, 3: pipeline, 4: split binary tree, 5: binary tree, 6: binomial tree.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"chain", 3:"pipeline", 4:"split_binary_tree", 5:"binary_tree", 6:"binomial"
                MCA coll: parameter "coll_tuned_bcast_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for bcast algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
                MCA coll: parameter "coll_tuned_bcast_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for bcast algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
                MCA coll: parameter "coll_tuned_bcast_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for bcast algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
                MCA coll: informational "coll_tuned_reduce_algorithm_count" (current value: "6", data source: default, level: 5 tuner/detail, type: int)
                          Number of reduce algorithms available
                MCA coll: parameter "coll_tuned_reduce_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which reduce algorithm is used. Can be locked down to choice of: 0 ignore, 1 linear, 2 chain, 3 pipeline, 4 binary, 5 binomial, 6 in-order binary
                          Valid values: 0:"ignore", 1:"linear", 2:"chain", 3:"pipeline", 4:"binary", 5:"binomial", 6:"in-order_binary"
                MCA coll: parameter "coll_tuned_reduce_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for reduce algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
                MCA coll: parameter "coll_tuned_reduce_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for reduce algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
                MCA coll: parameter "coll_tuned_reduce_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for reduce algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
                MCA coll: parameter "coll_tuned_reduce_algorithm_max_requests" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Maximum number of outstanding send requests on leaf nodes. 0 means no limit.
                MCA coll: informational "coll_tuned_reduce_scatter_algorithm_count" (current value: "2", data source: default, level: 5 tuner/detail, type: int)
                          Number of reduce_scatter algorithms available
                MCA coll: parameter "coll_tuned_reduce_scatter_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which reduce reduce_scatter algorithm is used. Can be locked down to choice of: 0 ignore, 1 non-overlapping (Reduce + Scatterv), 2 recursive halving, 3 ring
                          Valid values: 0:"ignore", 1:"non-overlapping", 2:"recursive_halfing", 3:"ring"
                MCA coll: parameter "coll_tuned_reduce_scatter_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for reduce_scatter algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation.
                MCA coll: parameter "coll_tuned_reduce_scatter_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for reduce_scatter algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation.
                MCA coll: parameter "coll_tuned_reduce_scatter_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for reduce_scatter algorithms. Only has meaning if algorithm is forced and supports chain topo based operation.
                MCA coll: informational "coll_tuned_gather_algorithm_count" (current value: "3", data source: default, level: 5 tuner/detail, type: int)
                          Number of gather algorithms available
                MCA coll: parameter "coll_tuned_gather_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which gather algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 binomial, 3 linear with synchronization.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"binomial", 3:"linear_sync"
                MCA coll: parameter "coll_tuned_gather_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for gather algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
                MCA coll: parameter "coll_tuned_gather_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for gather algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
                MCA coll: parameter "coll_tuned_gather_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for gather algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
                MCA coll: informational "coll_tuned_scatter_algorithm_count" (current value: "2", data source: default, level: 5 tuner/detail, type: int)
                          Number of scatter algorithms available
                MCA coll: parameter "coll_tuned_scatter_algorithm" (current value: "ignore", data source: default, level: 5 tuner/detail, type: int)
                          Which scatter algorithm is used. Can be locked down to choice of: 0 ignore, 1 basic linear, 2 binomial.
                          Valid values: 0:"ignore", 1:"basic_linear", 2:"binomial"
                MCA coll: parameter "coll_tuned_scatter_algorithm_segmentsize" (current value: "0", data source: default, level: 5 tuner/detail, type: int)
                          Segment size in bytes used by default for scatter algorithms. Only has meaning if algorithm is forced and supports segmenting. 0 bytes means no segmentation. Currently, available algorithms do not support segmentation.
                MCA coll: parameter "coll_tuned_scatter_algorithm_tree_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for n-tree used for scatter algorithms. Only has meaning if algorithm is forced and supports n-tree topo based operation. Currently, available algorithms do not support n-tree topologies.
                MCA coll: parameter "coll_tuned_scatter_algorithm_chain_fanout" (current value: "4", data source: default, level: 5 tuner/detail, type: int)
                          Fanout for chains used for scatter algorithms. Only has meaning if algorithm is forced and supports chain topo based operation. Currently, available algorithms do not support chain topologies.
                MCA crcp: parameter "crcp" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the crcp framework (<none> means use all components that can be found)
                MCA crcp: parameter "crcp_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the crcp framework (0 = no verbosity)
                 MCA dpm: parameter "dpm" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the dpm framework (<none> means use all components that can be found)
                 MCA dpm: parameter "dpm_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the dpm framework (0 = no verbosity)
                MCA fbtl: parameter "fbtl" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the fbtl framework (<none> means use all components that can be found)
                MCA fbtl: parameter "fbtl_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the fbtl framework (0 = no verbosity)
               MCA fcoll: parameter "fcoll" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the fcoll framework (<none> means use all components that can be found)
               MCA fcoll: parameter "fcoll_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the fcoll framework (0 = no verbosity)
               MCA fcoll: parameter "fcoll_individual_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the individual fcoll component
               MCA fcoll: parameter "fcoll_individual_constant_cbs" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          wether we are using constant or scaling cycle buffer size in the individual fcoll component
               MCA fcoll: parameter "fcoll_individual_cycle_buffer_size" (current value: "33554432", data source: default, level: 9 dev/all, type: int)
                          Cycle Buffer Size of the individual fcoll component
               MCA fcoll: parameter "fcoll_two_phase_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the two_phase fcoll component
               MCA fcoll: parameter "fcoll_two_phase_num_io_procs" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Number of writers in the two_phase fcoll component
               MCA fcoll: parameter "fcoll_two_phase_constant_cbs" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          wether we are using constant or scaling cycle buffer size in the two_phase fcoll component
               MCA fcoll: parameter "fcoll_two_phase_cycle_buffer_size" (current value: "33554432", data source: default, level: 9 dev/all, type: int)
                          Cycle Buffer Size of the two_phase fcoll component
               MCA fcoll: parameter "fcoll_ylib_priority" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Priority of the ylib fcoll component
               MCA fcoll: parameter "fcoll_ylib_num_io_procs" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          Number of writers in the ylib fcoll component
               MCA fcoll: parameter "fcoll_ylib_stripe_size" (current value: "1048576", data source: default, level: 9 dev/all, type: int)
                          Stripe Size of the ylib fcoll component
               MCA fcoll: parameter "fcoll_ylib_blocks_per_cycle" (current value: "20", data source: default, level: 9 dev/all, type: int)
                          Blocks to write per cycle of the ylib fcoll component
                  MCA fs: parameter "fs" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the fs framework (<none> means use all components that can be found)
                  MCA fs: parameter "fs_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the fs framework (0 = no verbosity)
                  MCA io: parameter "io" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the io framework (<none> means use all components that can be found)
                  MCA io: parameter "io_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the io framework (0 = no verbosity)
                  MCA io: parameter "io_ompio_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the io ompio component
                  MCA io: parameter "io_ompio_delete_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Delete priority of the io ompio component
                  MCA io: parameter "io_ompio_record_file_offset_info" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          The information of the file offset/length
                  MCA io: parameter "io_ompio_coll_timing_info" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable collective algorithm timing information
                  MCA io: parameter "io_ompio_cycle_buffer_size" (current value: "33554432", data source: default, level: 9 dev/all, type: int)
                          Cycle Buffer Size of individual reads/writes
                  MCA io: parameter "io_ompio_bytes_per_agg" (current value: "33554432", data source: default, level: 9 dev/all, type: int)
                          Bytes per aggregator process for automatic selection
                  MCA io: parameter "io_ompio_sharedfp_lazy_open" (current value: "1", data source: default, level: 9 dev/all, type: int)
                          lazy allocation of internal shared file pointer structures
               MCA mpool: parameter "mpool" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the mpool framework (<none> means use all components that can be found)
               MCA mpool: parameter "mpool_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the mpool framework (0 = no verbosity)
               MCA mpool: parameter "mpool_grdma_rcache_name" (current value: "vma", data source: default, level: 9 dev/all, type: string)
                          The name of the registration cache the mpool should use
               MCA mpool: parameter "mpool_grdma_print_stats" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          print pool usage statistics at the end of the run
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
               MCA mpool: parameter "mpool_sm_allocator" (current value: "bucket", data source: default, level: 9 dev/all, type: string)
                          Name of allocator component to use with sm mpool
               MCA mpool: parameter "mpool_sm_min_size" (current value: "134217728", data source: default, level: 9 dev/all, type: unsigned long long)
                          Minimum size of the sm mpool shared memory file
               MCA mpool: parameter "mpool_sm_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Enable verbose output for mpool sm component
                 MCA mtl: parameter "mtl" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the mtl framework (<none> means use all components that can be found)
                 MCA mtl: parameter "mtl_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the mtl framework (0 = no verbosity)
                  MCA op: parameter "op" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the op framework (<none> means use all components that can be found)
                  MCA op: parameter "op_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the op framework (0 = no verbosity)
                 MCA osc: parameter "osc" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the osc framework (<none> means use all components that can be found)
                 MCA osc: parameter "osc_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the osc framework (0 = no verbosity)
                 MCA osc: parameter "osc_rdma_no_locks" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable optimizations available only if MPI_LOCK is not used.  Info key of same name overrides this value.
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                 MCA osc: parameter "osc_rdma_buffer_size" (current value: "8192", data source: default, level: 9 dev/all, type: unsigned)
                          Data transfers smaller than this limit may be coalesced before being transferred (default: 8k)
                 MCA pml: parameter "pml" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the pml framework (<none> means use all components that can be found)
                 MCA pml: parameter "pml_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the pml framework (0 = no verbosity)
                 MCA pml: parameter "pml_base_bsend_allocator" (current value: "basic", data source: default, level: 9 dev/all, type: string)
                 MCA pml: parameter "pml_v_output" (current value: "stderr", data source: default, level: 9 dev/all, type: string)
                 MCA pml: parameter "pml_v_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the pml v component
                 MCA pml: parameter "pml_v_vprotocol" (current value: "", data source: default, level: 9 dev/all, type: string, synonyms: vprotocol)
                          Specify a specific vprotocol to use
                 MCA pml: parameter "pml_bfo_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_free_list_num" (current value: "4", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_priority" (current value: "5", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_send_pipeline_depth" (current value: "3", data source: default, level: 9 dev/all, type: unsigned)
                 MCA pml: parameter "pml_bfo_recv_pipeline_depth" (current value: "4", data source: default, level: 9 dev/all, type: unsigned)
                 MCA pml: parameter "pml_bfo_rdma_put_retries_limit" (current value: "5", data source: default, level: 9 dev/all, type: unsigned)
                 MCA pml: parameter "pml_bfo_max_rdma_per_request" (current value: "4", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_max_send_per_range" (current value: "4", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_bfo_unexpected_limit" (current value: "128", data source: default, level: 9 dev/all, type: unsigned)
                 MCA pml: parameter "pml_bfo_allocator" (current value: "bucket", data source: default, level: 9 dev/all, type: string)
                          Name of allocator component for unexpected messages
                 MCA pml: parameter "pml_cm_free_list_num" (current value: "4", data source: default, level: 9 dev/all, type: int)
                          Initial size of request free lists
                 MCA pml: parameter "pml_cm_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                          Maximum size of request free lists
                 MCA pml: parameter "pml_cm_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
                          Number of elements to add when growing request free lists
                 MCA pml: parameter "pml_cm_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          CM PML selection priority
                 MCA pml: parameter "pml_ob1_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_free_list_num" (current value: "4", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_priority" (current value: "20", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_send_pipeline_depth" (current value: "3", data source: default, level: 9 dev/all, type: size_t)
                 MCA pml: parameter "pml_ob1_recv_pipeline_depth" (current value: "4", data source: default, level: 9 dev/all, type: size_t)
                 MCA pml: parameter "pml_ob1_max_rdma_per_request" (current value: "4", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_max_send_per_range" (current value: "4", data source: default, level: 9 dev/all, type: int)
                 MCA pml: parameter "pml_ob1_unexpected_limit" (current value: "128", data source: default, level: 9 dev/all, type: unsigned)
                 MCA pml: parameter "pml_ob1_allocator" (current value: "bucket", data source: default, level: 9 dev/all, type: string)
                          Name of allocator component for unexpected messages
                 MCA pml: performance "pml_ob1_unexpected_msgq_length" (type: unsigned, class: size)
                          Number of unexpected messages received by each peer in a communicator
                 MCA pml: performance "pml_ob1_posted_recvq_length" (type: unsigned, class: size)
                          Number of unmatched receives posted for each peer in a communicator
              MCA pubsub: parameter "pubsub" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the pubsub framework (<none> means use all components that can be found)
              MCA pubsub: parameter "pubsub_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the pubsub framework (0 = no verbosity)
              MCA pubsub: parameter "pubsub_orte_priority" (current value: "50", data source: default, level: 9 dev/all, type: int)
                          Priority of the pubsub pmi component
              MCA pubsub: parameter "pubsub_orte_server" (current value: "", data source: default, level: 9 dev/all, type: string)
                          Contact info for ompi_server for publish/subscribe operations
              MCA rcache: parameter "rcache" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rcache framework (<none> means use all components that can be found)
              MCA rcache: parameter "rcache_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rcache framework (0 = no verbosity)
                 MCA rte: parameter "rte" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the rte framework (<none> means use all components that can be found)
                 MCA rte: parameter "rte_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the rte framework (0 = no verbosity)
                 MCA rte: parameter "rte_orte_direct_modex" (current value: "false", data source: default, level: 9 dev/all, type: bool)
                          Enable direct modex (default: false)
                          Valid values: 0: f|false|disabled, 1: t|true|enabled
                MCA sbgp: parameter "sbgp" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sbgp framework (<none> means use all components that can be found)
                MCA sbgp: parameter "sbgp_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sbgp framework (0 = no verbosity)
                MCA sbgp: parameter "sbgp_base_subgroups_string" (current value: "basesmsocket,basesmuma,ibnet,p2p", data source: default, level: 9 dev/all, type: string)
                          Default set of subgroup operations to apply
                MCA sbgp: parameter "sbgp_basesmsocket_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          Priority for the sbgp basesmsocket component
                MCA sbgp: parameter "sbgp_basesmuma_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          Priority of the sbgp basesmuma
                MCA sbgp: parameter "sbgp_p2p_priority" (current value: "90", data source: default, level: 9 dev/all, type: int)
                          Priority for the sbgp p2p component
            MCA sharedfp: parameter "sharedfp" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the sharedfp framework (<none> means use all components that can be found)
            MCA sharedfp: parameter "sharedfp_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the sharedfp framework (0 = no verbosity)
            MCA sharedfp: parameter "sharedfp_individual_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the individual sharedfp component
            MCA sharedfp: parameter "sharedfp_individual_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the individual sharedfp component
            MCA sharedfp: parameter "sharedfp_lockedfile_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the lockedfile sharedfp component
            MCA sharedfp: parameter "sharedfp_lockedfile_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the lockedfile sharedfp component
            MCA sharedfp: parameter "sharedfp_sm_priority" (current value: "10", data source: default, level: 9 dev/all, type: int)
                          Priority of the sm sharedfp component
            MCA sharedfp: parameter "sharedfp_sm_verbose" (current value: "0", data source: default, level: 9 dev/all, type: int)
                          Verbosity of the sm sharedfp component
                MCA topo: parameter "topo" (current value: "", data source: default, level: 2 user/detail, type: string)
                          Default selection set of components for the topo framework (<none> means use all components that can be found)
                MCA topo: parameter "topo_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the topo framework (0 = no verbosity)
           MCA vprotocol: parameter "vprotocol" (current value: "", data source: default, level: 9 dev/all, type: string, synonym of: pml_v_vprotocol)
                          Specify a specific vprotocol to use
           MCA vprotocol: parameter "vprotocol_base_verbose" (current value: "0", data source: default, level: 8 dev/detail, type: int)
                          Verbosity level for the vprotocol framework (0 = no verbosity)
           MCA vprotocol: parameter "vprotocol_pessimist_priority" (current value: "30", data source: default, level: 9 dev/all, type: int)
           MCA vprotocol: parameter "vprotocol_pessimist_free_list_num" (current value: "16", data source: default, level: 9 dev/all, type: int)
           MCA vprotocol: parameter "vprotocol_pessimist_free_list_max" (current value: "-1", data source: default, level: 9 dev/all, type: int)
           MCA vprotocol: parameter "vprotocol_pessimist_free_list_inc" (current value: "64", data source: default, level: 9 dev/all, type: int)
           MCA vprotocol: parameter "vprotocol_pessimist_sender_based_chunk" (current value: "268435456", data source: default, level: 9 dev/all, type: int)
           MCA vprotocol: parameter "vprotocol_pessimist_event_buffer_size" (current value: "1024", data source: default, level: 9 dev/all, type: int)
           MCA vprotocol: parameter "vprotocol_pessimist_sender_based_file" (current value: "vprotocol_pessimist-senderbased", data source: default, level: 9 dev/all, type: string)

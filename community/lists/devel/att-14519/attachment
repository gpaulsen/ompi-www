<div dir="ltr">this was true if all external libraries were maintaining ABI compatibility indicator properly with libtool.<div>Let`s check your favorite, libibverbs :), the version is always 0.0.0 in libibverbs.so.0.0.0 so openib btl will not fail on link.</div>
<div>The libibverbs can have experimental verbs included but libibverbs version still will be indicating the libtool version is &quot;0:0:0&quot;.</div><div><br></div><div>So, the only way for sysadmin/user to know if he has a right version of libibvers installed is to check verbs.getVersion() and see if it is matches to one which includes experimental verbs and then he will know that there is a problem.</div>
<div><br></div><div>but for us, the most powerful case is the one that you described: compare ompi_info output on head and compute node and warn user if differ.</div><div><br></div><div>Also, to provide an infrastructure to digitize release notes.</div>
</div><div class="gmail_extra"><br><br><div class="gmail_quote">On Mon, Apr 14, 2014 at 9:52 PM, Jeff Squyres (jsquyres) <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">BTW, I should point out that this really is only relevant if libfoo A.B.C and X.Y.Z are *ABI compatible*, but not *behavior compatible*.<br>

<br>
If A.B.C and X.Y.Z are not ABI compatible, then ompi_info will fail just like the MPI processes fail (i.e., it may not be able to dlopen the component using libfoo X.Y.Z).<br>
<br>
A useful case to determine behavior compatibility is if libfoo exports a capability vector; A.B.C supports capability 13 and 27, but X.Y.Z supports only 13.  If the OMPI component is smart enough to detect these run-time behavior differences, it&#39;ll only use capability 13 with X.Y.Z but will use both 13 and 27 with A.B.C.<br>

<div><div class="h5"><br>
<br>
<br>
<br>
On Apr 14, 2014, at 2:48 PM, &quot;Jeff Squyres (jsquyres)&quot; &lt;<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a>&gt; wrote:<br>
<br>
&gt; On Apr 14, 2014, at 10:59 AM, Mike Dubman &lt;<a href="mailto:miked@dev.mellanox.co.il">miked@dev.mellanox.co.il</a>&gt; wrote:<br>
&gt;<br>
&gt;&gt; There is no correlation between built_with and running_with versions of external libraries supported by OMPI.<br>
&gt;<br>
&gt; Ah, I see -- yes, that&#39;s the disconnect here.<br>
&gt;<br>
&gt; I think one use case that shows this is the following:<br>
&gt;<br>
&gt; 1. Admin Bob builds Open MPI on the cluster head node with dependent library libfoo.so version A.B.C, which is a fully supported configuration.  Therefore, the appropriate configure.m4&#39;s are happy, and everything builds and installs.<br>

&gt;<br>
&gt; 2. But when User Betty goes to run, the libfoo.so on the back-end compute nodes is accidentally version X.Y.Z, which is *not* supported.  And Bad Things happen.<br>
&gt;<br>
&gt; 3. So you&#39;d like to be able to run ompi_info on the head node and on the compute nodes and compare the output, and see an obvious difference of A.B.C vs. X.Y.Z in the dependent library of a given component, and use that to help figure out what is going wrong.<br>

&gt;<br>
&gt;&gt; The next release of external library does not mean we should remove code in ompi for all previous supported releases for the same library.<br>
&gt;<br>
&gt; This is another use case: OMPI was built against dep library libfoo.so A.B.C (which is a supported config).  But then someone does an upgrade of libfoo *without rebuilding OMPI*, and now OMPI run-time links against libfoo.so X.Y.Z, which is no longer a supported configuration.<br>

&gt;<br>
&gt;&gt; Why are you so against it? I don`t see any issue with printing ext lib version number in the MCA description, something that can improve sysadmin/user-experience.<br>
&gt;<br>
&gt; FWIW, we&#39;ve done this before by putting them in read-only MCA parameters -- we&#39;ve called them &quot;info&quot; MCA params.<br>
&gt;<br>
&gt; I don&#39;t see any in the code base today, but I know we&#39;ve definitely had version kinds of MCA params before.<br>
&gt;<br>
&gt; --<br>
&gt; Jeff Squyres<br>
&gt; <a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
&gt; For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
&gt;<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/04/14513.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/04/14513.php</a><br>
<br>
<br>
--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div></div>Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/04/14514.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/04/14514.php</a><br>
</blockquote></div><br></div>


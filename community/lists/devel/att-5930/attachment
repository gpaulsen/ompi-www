<br><div class="gmail_quote">On Thu, Apr 30, 2009 at 12:55 PM, Brian W. Barrett <span dir="ltr">&lt;<a href="mailto:brbarret@open-mpi.org">brbarret@open-mpi.org</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div class="im">On Thu, 30 Apr 2009, Edgar Gabriel wrote:<br>
<br>
</div><div class="im"><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Brian W. Barrett wrote:<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
When we added the CM PML, we added a pml_max_contextid field to the PML structure, which is the max size cid the PML can handle (because the matching interfaces don&#39;t allow 32 bits to be used for the cid.  At the same time, the max cid for OB1 was shrunk significantly, so that the header on a short message would be packed tightly with no alignment padding.<br>

<br>
At the time, we believed 32k simultaneous communicators was plenty, and that CIDs were reused (we checked, I&#39;m pretty sure).  It sounds like someone removed the CID reuse code, which seems rather bad to me. <br>
</blockquote>
<br>
yes, we added the block algorithm. Not reusing a CID actually doesn&#39;t bite me as that dramatic, and I am still not sure and convinced about that:-) We do not have an empty array or something like that, its just a number.<br>

<br>
The reason for the block algorithm was that the performance of our communicator creation code sucked, and the cid allocation was one portion of that. We used to require *at least* 4 collective operations per communicator creation at that time. We are now potentially down to 0, among others thanks to the block algorithm.<br>

<br>
However, let me think about reusing entire blocks, its probably doable just requires a little more bookkeeping...<br>
<br>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
There have to be unused CIDs in Ralph&#39;s example - is there a way to fallback out of the block algorithm when it can&#39;t find a new CID and find one it can reuse?  Other than setting the multi-threaded case back on, that is?<br>

</blockquote>
<br>
remember that its not the communicator id allocation that is failing at this point, so the question is do we have to &#39;validate&#39; a cid with the pml before we declare it to be ok?<br>
</blockquote>
<br></div>
well, that&#39;s only because the code&#39;s doing something it shouldn&#39;t.  Have a look at comm_cid.c:185 - there&#39;s the check we added to the multi-threaded case (which was the only case when we added it).  The cid generation should never generate a number larger than mca_pml.pml_max_contextid. I&#39;m actually somewhat amazed this fails gracefully, as OB1 doesn&#39;t appear to check it got a valid cid in add_comm, which it should probably do.<br>

</blockquote><div><br><br>Actually, as an FYI: it doesn&#39;t fail gracefully. It just hangs...ick.<br>
<br> </div><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
Looking at the differences between v1.2 and v1.3, the max_contextid code was already in v1.2 and OB1 was setting it to 32k.  So the cid blocking code removed a rather critical feature and probably should be fixed or removed for v1.3.  On Portals, I only get 8k cids, so not having reuse is a rather large problem.<div>
<div></div><div class="h5"><br>
<br>
Brian<br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div></div></blockquote></div><br>


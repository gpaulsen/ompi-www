I believe you are thinking parallel to what Josh and I have been doing, and slightly different to the UTK approach. The &quot;orcm&quot; method follows what you describe: we maintain operation on the current remaining nodes, see if we can use another new node to replace the failed one, and redistribute the affected procs (on the failed node) either to existing nodes or to new ones.<br>
<br>I believe UTK&#39;s approach focuses on retaining operation of the existing nodes, redistributing procs across them. I suspect we will eventually integrate some of these operations so that users can exploit the best of both methods.<br>
<br>Josh hasn&#39;t exposed his MPI recovery work yet. As he mentioned in his response, he has done some things in this area that are complementary to the UTK method. Just needs to finish his thesis before making them public. :-)<br>
<br><br><div class="gmail_quote">On Thu, Feb 25, 2010 at 9:54 AM, Leonardo Fialho <span dir="ltr">&lt;<a href="mailto:leonardofialho@gmail.com">leonardofialho@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
Hi George,<br>
<div class="im"><br>
&gt;&gt; Hum... I&#39;m really afraid about this. I understand your choice since it is really a good solution for fail/stop/restart behaviour, but looking from the fail/recovery side, can you envision some alternative for the orted&#39;s reconfiguration on the fly?<br>

&gt;<br>
</div><div class="im">&gt; I don&#39;t see why the current code prohibit such behavior. However, I don&#39;t see right now in this branch how the remaining daemons (and MPI processes) reconstruct the communication topology, but this is just a technicality.<br>

&gt;<br>
&gt; Anyway, this is the code that UT will bring in. All our work focus on maintaining the exiting environment up and running instead of restarting everything. The orted will auto-heal (i.e reshape the underlying topology, recreate the connections, and so on), and the fault is propagated to the MPI layer who will take the decision on what to do next.<br>

<br>
<br>
</div>When you say MPI layer, what exactly it means? The MPI interface or the network stack which supports the MPI communication (BTL, PML, etc.)?<br>
<br>
In my mind I see an orted failure (and all procs running under this deamon) as an environment failure which leads to job failures. Thus, to use a fail/recovery strategy, this daemons should be recovered (possibly relaunching and updating its procs/jobs structures) and after that all failed procs which are originally running under this daemon should be recovered also (maybe from a checkpoint, log optionally). Of course, in available, an spare orted could be used.<br>

<br>
Regarding to the MPI application, probably this &#39;environment reconfiguration&#39; requires updates/reconfiguration/whatever on the communication stack which supports the MPI communication (BTL, PML, etc.).<br>
<br>
Are we thinking in the same direction or I have missed something in the way?<br>
<br>
Best regards,<br>
<font color="#888888">Leonardo<br>
</font><div><div></div><div class="h5">_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div></div></blockquote></div><br>


<html><head><style type="text/css"><!-- DIV {margin:0px;} --></style></head><body><div style="font-family:times new roman, new york, times, serif;font-size:10pt">
<div style="font-family: times new roman,new york,times,serif; font-size: 10pt;">Thanks a lot Jeff and Josh. <br>Seems it will be quite an interesting task to implement a separate btl for xensocket (xs) or anything related to migration.&nbsp; I plan to stick to initial design for the time which seems ugly but simple and quite efficient (at the moment). I have bundled xs with tcp btl. So instead of using tcp btl, interested parties will use xs btl, which supports tcp inherently. Now during the execution - which starts by normal tcp, if we see that both the endpoints are on same physical host, we construct the xensockets (two in fact, one per endpoint to receive data -- xs is unidirectional). Upon signal that xs are created and connected, we start to make progress through xs sock descriptors, which means that normal tcp socket descriptors are alive but not in-charge as no data is being send or received through them. When we migrate to
 other physical host, our plan is to somehow make xs_socket invalid, and resort to normal tcp sockets. If a new endpoint pair is detected on the new physical host, we will do the same what was done initially. <br><br>I am not sure, if it is an efficient design, but in theory it seems interesting, although has slight overhead. The worst part of design is that it is highly tcp centric.  My current status is that I am able to run normal mpi programs on xs btl, but am having some problems with some benchmark programs using non blocking sends and receives coupled with MPI_Barrier(). Something somewhere somehow gets lost. <br><br>Xensockets initially were non-blocking send/recv, and did not have the necessary code for supporting epoll/select. We had to add the necessary&nbsp; code in the module so i am quite sure that they will work with the new opal/libevent.<br><div>&nbsp;</div>Best Regards,<br>Muhammad Atif<div style="font-family: times new roman,new
 york,times,serif; font-size: 10pt;"><br><br><div style="font-family: times new roman,new york,times,serif; font-size: 12pt;">----- Original Message ----<br>From: Josh Hursey &lt;jjhursey@open-mpi.org&gt;<br>To: Open MPI Developers &lt;devel@open-mpi.org&gt;<br>Sent: Wednesday, March 19, 2008 2:20:59 AM<br>Subject: Re: [OMPI devel] xensocket btl and migration<br><br>
Muhammad,<br><br>With 
regard 
to 
your 
question 
on 
migration 
you 
will 
likely 
have 
to&nbsp; <br>reload 
the 
BTL 
components 
when 
a 
migration 
occurs. 
Open 
MPI 
currently&nbsp; <br>assumes 
that 
once 
the 
set 
of 
BTLs 
are 
decided 
upon 
in 
a 
process 
they&nbsp; <br>are 
to 
be 
used 
until 
the 
application 
completes. 
There 
is 
some 
limited&nbsp; <br>support 
for 
failover 
in 
which 
if 
one 
BTL 
'fails' 
then 
it 
is&nbsp; <br>disregarded 
and 
a 
previously 
defined 
alternative 
path 
is 
used. 
For&nbsp; <br>example 
if 
between 
two 
peers 
Open 
MPI 
has 
the 
choice 
of 
using 
tcp 
or&nbsp; <br>openib 
then 
it 
will 
use 
openib. 
If 
openib 
were 
to 
fail 
during 
the&nbsp; <br>running 
of 
the 
job 
then 
it 
may 
be 
possible 
for 
Open 
MPI 
to 
fail 
over&nbsp; <br>and 
use 
just 
tcp. 
I'm 
not 
sure 
how 
well 
tested 
this 
ability 
is, 
others&nbsp; <br>can 
comment 
if 
you 
are 
interested 
in 
this.<br><br>However 
failover 
is 
not 
really 
want 
you 
are 
looking 
for. 
What 
it 
seem&nbsp; <br>you 
are 
looking 
for 
is 
the 
ability 
to 
tell 
two 
processes 
that 
they&nbsp; <br>should 
no 
longer 
communicate 
over 
tcp, 
but 
continue 
communication 
over&nbsp; <br>xensockets 
or 
visa 
versa. 
One 
technique 
would 
be 
upon 
migration, 
if&nbsp; <br>unload 
the 
BTLs 
(component_close) 
then 
reopen 
(component_open) 
and&nbsp; <br>reselect 
(component_select) 
then 
reexchange 
the 
modex 
the 
processes&nbsp; <br>should 
settle 
into 
the 
new 
configuration. 
You 
will 
have 
to 
make 
sure&nbsp; <br>that 
any 
state 
Open 
MPI 
has 
cached 
such 
as 
network 
addresses 
and 
node&nbsp; <br>name 
data 
is 
refreshed 
upon 
restart. 
Take 
a 
look 
at 
the 
checkpoint/ <br>restart 
logic 
for 
how 
I 
do 
this 
in 
the 
code 
base 
([opal|orte|ompi]/ <br>runtime/*_cr.c).<br><br>It 
is 
likely 
that 
there 
is 
another, 
more 
efficient 
method 
but 
I 
don't&nbsp; <br>have 
anything 
to 
point 
you 
to 
at 
the 
moment. 
One 
idea 
would 
be 
to 
add&nbsp; <br>a 
refresh 
function 
to 
the 
modex 
which 
would 
force 
the 
reexchange 
of 
a&nbsp; <br>single 
processes 
address 
set. 
There 
are 
a 
slew 
of 
problems 
with 
this&nbsp; <br>that 
you 
will 
have 
to 
overcome 
including 
race 
conditions, 
but 
I 
think&nbsp; <br>they 
can 
be 
surmounted.<br><br>I'd 
be 
interested 
in 
hearing 
your 
experiences 
implementing 
this 
in&nbsp; <br>Open 
MPI. 
Let 
me 
know 
if 
I 
can 
be 
of 
any 
more 
help.<br><br>Cheers,<br>Josh<br><br>On 
Mar 
9, 
2008, 
at 
6:13 
AM, 
Muhammad 
Atif 
wrote:<br><br>&gt; 
Okay 
guys.. 
with 
all 
your 
support 
and 
help 
in 
understanding 
ompi&nbsp; <br>&gt; 
architecture, 
I 
was 
able 
to 
get 
Xensocket 
to 
work.&nbsp; 
Only 
minor&nbsp; <br>&gt; 
changes 
to 
the 
xensocket 
kernel 
module 
made 
it 
compatible 
with&nbsp; <br>&gt; 
libevent. 
I 
am 
getting 
results 
which 
are 
bad 
but 
I 
am 
sure, 
I 
have&nbsp; <br>&gt; 
to 
cleanup 
the 
code. 
At 
least 
my 
results 
have 
improved 
over 
native&nbsp; <br>&gt; 
netfront-netback 
of 
xen 
for 
messages 
of 
size 
larger 
than 
1 
MB.<br>&gt;<br>&gt; 
I 
started 
with 
making 
minor 
changes 
in 
the 
TCP 
btl, 
but 
it 
seems 
it&nbsp; <br>&gt; 
is 
not 
the 
best 
way, 
as 
changes 
are 
quite 
huge 
and 
it 
is 
better 
to&nbsp; <br>&gt; 
have 
separate 
dedicated 
btl 
for 
xensockets. 
As 
you 
guys 
might 
be&nbsp; <br>&gt; 
aware 
Xen 
supports 
live 
migration, 
now 
I 
have 
one 
stupid 
question.&nbsp; <br>&gt; 
My 
knowledge 
so 
far 
suggests 
that 
btl 
component 
is 
initialized 
only&nbsp; <br>&gt; 
once. 
The 
scerario 
here 
is 
if 
my 
guest 
os 
is 
migrated 
from 
one&nbsp; <br>&gt; 
physical 
node 
to 
another, 
and 
realizes 
that 
the 
communicating&nbsp; <br>&gt; 
processes 
are 
now 
on 
one 
physical 
host 
and 
they 
should 
abandon 
use&nbsp; <br>&gt; 
of 
TCP 
btl 
and 
make 
use 
of 
Xensocket 
btl. 
I 
am 
sure 
it 
would 
not&nbsp; <br>&gt; 
happen 
out 
of 
the 
box, 
but 
is 
it 
possible 
without 
making 
heavy&nbsp; <br>&gt; 
changes 
in 
the 
openmpi 
architecture?<br>&gt; 
With 
the 
current 
design, 
i 
am 
running 
a 
mix 
of 
tcp 
and 
xensocket&nbsp; <br>&gt; 
btls, 
and 
endpoints 
check 
periodically 
if 
they 
are 
on 
same 
physical&nbsp; <br>&gt; 
host 
or 
not. 
This 
has 
quite 
a 
big 
penalty 
in 
terms 
of 
time.<br>&gt;<br>&gt; 
Another 
question 
is 
(good 
thing 
i 
am 
using 
email 
otherwise 
you 
guys&nbsp; <br>&gt; 
would 
beat 
the 
hell 
outta 
me, 
its 
such 
a 
basic 
question). 
I 
am 
not&nbsp; <br>&gt; 
able 
to 
track 
MPI_Recv(...) 
api 
call 
and 
its 
alike 
calls. 
Once 
in&nbsp; <br>&gt; 
the 
code 
of 
MPI_Recv(..) 
we 
give 
a 
call 
to 
rc 
=&nbsp; <br>&gt; 
MCA_PML_CALL(recv(buf, 
count 
... 
). 
This 
call 
goes 
to 
the 
macro, 
and&nbsp; <br>&gt; 
pml.recv(..) 
gets 
invoked 
(mca_pml_base_module_recv_fn_t&nbsp; 
&nbsp; 
&nbsp; 
&nbsp; 
&nbsp; <br>&gt; 
pml_recv;) 
. 
Where 
can 
I 
find 
the 
actual 
function? 
I 
get 
totally&nbsp; <br>&gt; 
lost 
when 
trying 
to 
pinpoint 
what 
exactly 
is 
happening. 
Basically, 
I&nbsp; <br>&gt; 
am 
looking 
for 
a 
place 
where 
tcp 
btl 
recv 
is 
getting 
called 
with 
all&nbsp; <br>&gt; 
the 
goodies 
and&nbsp; 
parameters 
which 
were 
passed 
by 
the 
MPI 
programmer.&nbsp; <br>&gt; 
I 
hope 
I 
have 
made 
my 
question 
understandable.<br>&gt;<br>&gt; 
Best 
Regards,<br>&gt; 
Muhammad 
Atif<br>&gt;<br>&gt;<br>&gt; 
----- 
Original 
Message 
----<br>&gt; 
From: 
Brian 
W. 
Barrett 
&lt;<a rel="nofollow" ymailto="mailto:brbarret@open-mpi.org" target="_blank" href="mailto:brbarret@open-mpi.org">brbarret@open-mpi.org</a>&gt;<br>&gt; 
To: 
Open 
MPI 
Developers 
&lt;<a rel="nofollow" ymailto="mailto:devel@open-mpi.org" target="_blank" href="mailto:devel@open-mpi.org">devel@open-mpi.org</a>&gt;<br>&gt; 
Sent: 
Wednesday, 
February 
6, 
2008 
2:57:31 
AM<br>&gt; 
Subject: 
Re: 
[OMPI 
devel] 
xensocket 
- 
callbacks 
through 
OPAL/libevent<br>&gt;<br>&gt; 
On 
Mon, 
4 
Feb 
2008, 
Muhammad 
Atif 
wrote:<br>&gt;<br>&gt; 
&gt; 
I 
am 
trying 
to 
port 
xensockets 
to 
openmpi. 
In 
principle, 
I 
have 
the<br>&gt; 
&gt; 
framework 
and 
everything, 
but 
there 
seems 
to 
be 
a 
small 
issue, 
I&nbsp; <br>&gt; 
cannot<br>&gt; 
&gt; 
get 
libevent 
(or 
OPAL) 
to 
give 
callbacks 
for 
receive 
(or 
send) 
for<br>&gt; 
&gt; 
xensockets. 
I 
have 
tried 
to 
implement 
native 
code 
for 
xensockets&nbsp; <br>&gt; 
with<br>&gt; 
&gt; 
libevent 
library, 
again 
the 
same 
issue.&nbsp; 
No 
call 
backs! 
. 
With&nbsp; <br>&gt; 
normal<br>&gt; 
&gt; 
sockets, 
callbacks 
do 
come 
easily.<br>&gt; 
&gt;<br>&gt; 
&gt; 
So 
question 
is, 
do 
the 
socket/file 
descriptors 
have 
to 
have 
some&nbsp; <br>&gt; 
special<br>&gt; 
&gt; 
mechanism 
attached 
to 
them 
to 
support 
callbacks 
for 
libevent/opal?&nbsp; <br>&gt; 
i.e<br>&gt; 
&gt; 
some 
structure/magic?. 
i.e. 
maybe 
the 
developers 
of 
xensockets 
did&nbsp; <br>&gt; 
not<br>&gt; 
&gt; 
add 
that 
callback/interrupt 
thing 
at 
the 
time 
of 
creation.&nbsp; <br>&gt; 
Xensockets 
is<br>&gt; 
&gt; 
open 
source, 
but 
my 
knowledge 
about 
these 
issues 
is 
limited. 
So 
I&nbsp; <br>&gt; 
though<br>&gt; 
&gt; 
some 
pointer 
in 
right 
direction 
might 
be 
useful.<br>&gt;<br>&gt; 
Yes 
and 
no 
:).&nbsp; 
As 
you 
discovered, 
the 
OPAL 
interface 
just&nbsp; <br>&gt; 
repackages 
a<br>&gt; 
library 
called 
libevent 
to 
handle 
its 
socket 
multiplexing.&nbsp; 
Libevent&nbsp; <br>&gt; 
can<br>&gt; 
use 
a 
number 
of 
different 
mechanisms 
to 
look 
for 
activity 
on 
sockets,<br>&gt; 
including 
select() 
and 
poll() 
calls.&nbsp; 
On 
Linux, 
it 
will 
generally 
use<br>&gt; 
poll().&nbsp; 
poll() 
requires 
some 
kernel 
support 
to 
do 
its 
thing, 
so 
if<br>&gt; 
Xensockets 
doesn't 
implement 
the 
right 
magic 
to 
trigger 
poll() 
events,<br>&gt; 
then 
libevent 
won't 
work 
for 
Xensockets.&nbsp; 
There's 
really 
nothing 
you&nbsp; <br>&gt; 
can<br>&gt; 
do 
from 
the 
Open 
MPI 
front 
to 
work 
around 
this 
issue 
-- 
it 
would&nbsp; <br>&gt; 
have 
to<br>&gt; 
be 
fixed 
as 
part 
of 
Xensockets.<br>&gt;<br>&gt; 
&gt; 
Second 
question 
is, 
what 
if 
we 
cannot 
have 
the 
callbacks. 
What 
is&nbsp; <br>&gt; 
the<br>&gt; 
&gt; 
recommended 
way 
to 
implement 
the 
btl 
component 
for 
such 
a 
device?&nbsp; <br>&gt; 
Do 
we<br>&gt; 
&gt; 
need 
to 
do 
this 
with 
event 
timers?<br>&gt;<br>&gt; 
Have 
a 
look 
at 
any 
of 
the 
BTLs 
that 
isn't 
TCP 
-- 
none 
of 
them 
use&nbsp; <br>&gt; 
libevent<br>&gt; 
callbacks 
for 
progress.&nbsp; 
Instead, 
they 
provide 
a 
progress 
function&nbsp; <br>&gt; 
as 
part<br>&gt; 
of 
the 
BTL 
interface, 
which 
is 
called 
on 
a 
regular 
basis 
whenever&nbsp; <br>&gt; 
progress<br>&gt; 
needs 
to 
be 
made.<br>&gt;<br>&gt; 
Brian<br>&gt; 
_______________________________________________<br>&gt; 
devel 
mailing 
list<br>&gt; 
<a rel="nofollow" ymailto="mailto:devel@open-mpi.org" target="_blank" href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>&gt; 
<a rel="nofollow" target="_blank" href="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>&gt;<br>&gt;<br>&gt; 
Be 
a 
better 
friend, 
newshound, 
and 
know-it-all 
with 
Yahoo! 
Mobile.&nbsp; <br>&gt; 
Try 
it 
now._______________________________________________<br>&gt; 
devel 
mailing 
list<br>&gt; 
<a rel="nofollow" ymailto="mailto:devel@open-mpi.org" target="_blank" href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>&gt; 
<a rel="nofollow" target="_blank" href="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br><br>_______________________________________________<br>devel 
mailing 
list<br><a rel="nofollow" ymailto="mailto:devel@open-mpi.org" target="_blank" href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br><a rel="nofollow" target="_blank" href="http://www.open-mpi.org/mailman/listinfo.cgi/devel">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></div><br></div></div></div><br>
      <hr size=1>Be a better friend, newshound, and 
know-it-all with Yahoo! Mobile. <a href="http://us.rd.yahoo.com/evt=51733/*http://mobile.yahoo.com/;_ylt=Ahu06i62sR8HDtDypao8Wcj9tAcJ "> Try it now.</a></body></html>

Thanks for help. All work as you said.<br><div><br><div class="gmail_quote">On Fri, Dec 21, 2012 at 7:11 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word">Don&#39;t know how many times I can repeat it, but I&#39;ll try again: you are not allowed to reuse a collective id. If it happens to work, it&#39;s by accident.<div>
<br></div><div>If you want to implement multiple modex/barrier operations, they each need to have their own unique collective id.</div><div><div class="h5"><div><br></div><div><br><div><div>On Dec 20, 2012, at 9:28 PM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com" target="_blank">victor.kocheganov@itseez.com</a>&gt; wrote:</div>
<br><blockquote type="cite"><div>Actually, if I reuse id&#39;s in equivalent calls like this:</div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div>

<div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;modex&#39; block;</span></div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;modex&#39; block;</span></div>

<div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;modex&#39; block;</span></div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div>
</blockquote><div>or </div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div>
</div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;barrier&#39; block;</span></div><div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;barrier&#39; block;</span></div>

</div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;barrier&#39; block;</span></div><div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div>

</div></blockquote><div><div class="gmail_quote">there is no hanging. The hang only occurs if this &quot;reusing&quot; follows after using of another collective id, In the way I wrote in the first letter:</div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px">

<div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div></div><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;modex&#39; block;</span></div>

</div><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;barrier&#39; block;</span></div></div><div><div class="gmail_quote">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;modex&#39; block; &lt;- hangs</span></div></div><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div>

</div></blockquote><div><div class="gmail_quote">or in this way</div></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px"><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div>

</div><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;barrier&#39; block;</span></div></div><div><div class="gmail_quote">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;modex&#39; block;</span></div></div><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&#39;barrier&#39; block; &lt;- hangs</span></div>

</div><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">...</span></div></div></blockquote><div><div class="gmail_quote"><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif"><br>

</span></div><div class="gmail_quote">If I use different collective id while calling modex (1, 2 , ... , but not  0==orte_process_info.peer_modex), that also won&#39;t work, unfortunately..</div><div class="gmail_quote">
<br>
</div><div class="gmail_quote"><br></div><div class="gmail_quote"><br></div><div class="gmail_quote">On Thu, Dec 20, 2012 at 10:39 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>

<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word">Yeah, that won&#39;t work. The id&#39;s cannot be reused, so you&#39;d have to assign a different one in each case.<div>

<div><br><div><div>On Dec 20, 2012, at 9:12 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com" target="_blank">victor.kocheganov@itseez.com</a>&gt; wrote:</div><br><blockquote type="cite">
In every &#39;modex&#39; block I use <span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif"> </span><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">coll-&gt;id = </span><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">orte_process_info.peer_modex;</span>  id and in every &#39;barrier&#39; block I use <span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif"> coll-&gt;id = orte_process_info.peer_init_</span><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">barrier;</span>  id. <div>


<br></div><div>P.s. In general (as I wrote in first letter), I use &#39;modex&#39; term for following code:<br><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    coll = OBJ_NEW(orte_grpcomm_</span><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">collective_t);</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    coll-&gt;id = orte_process_info.peer_modex;</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    if (ORTE_SUCCESS != (ret = orte_grpcomm.modex(coll))) {</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">        error = &quot;orte_grpcomm_modex failed&quot;;</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">        goto error;</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    }</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    /* wait for modex to complete - this may be moved anywhere in mpi_init</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">     * so long as it occurs prior to calling a function that needs</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">     * the modex info!</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">     */</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    while (coll-&gt;active) {</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">        opal_progress();  /* block in progress pending events */</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    }</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    OBJ_RELEASE(coll);</span></div><div><font color="#222222" face="arial, sans-serif"><br></font>and &#39;barrier&#39; for this:</div>
<div><br></div><div><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    coll = OBJ_NEW(orte_grpcomm_</span><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">collective_t);</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    coll-&gt;id = orte_process_info.peer_init_</span><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">barrier;</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    if (ORTE_SUCCESS != (ret = orte_grpcomm.barrier(coll))) {</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">        error = &quot;orte_grpcomm_barrier failed&quot;;</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">        goto error;</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    }</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    /* wait for barrier to complete */</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    while (coll-&gt;active) {</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">        opal_progress();  /* block in progress pending events */</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">


<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    }</span><br style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">
<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">    OBJ_RELEASE(coll);</span><br><br><div class="gmail_quote">On Thu, Dec 20, 2012 at 8:57 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>


<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word"><br><div><div><div>On Dec 20, 2012, at 8:29 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com" target="_blank">victor.kocheganov@itseez.com</a>&gt; wrote:</div>


<br><blockquote type="cite">Thanks for fast answer, Ralph.<div><br></div><div>In my example I use different collective objects. I mean in every mentioned block I call <span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif"> <i>coll = OBJ_NEW(orte_grpcomm_</i></span><i><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">collective_t);</span></i>  </div>



<div>and <span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif"><i>OBJ_RELEASE(coll);</i></span> , so all the grpcomm operations use unique collective object. </div></blockquote><div><br></div></div>


How are the procs getting the collective id for those new calls? They all have to match</div><div><div><br><blockquote type="cite">
<div><br></div><div><br></div><div><div class="gmail_quote">On Thu, Dec 20, 2012 at 7:48 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">



<div style="word-wrap:break-word">Absolutely it will hang as the collective object passed into any grpcomm operation (modex or barrier) is only allowed to be used once - any attempt to reuse it will fail.<div><br></div><div>



<br><div><div><div>On Dec 20, 2012, at 6:57 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com" target="_blank">victor.kocheganov@itseez.com</a>&gt; wrote:</div><br></div><blockquote type="cite">

<div>
  

    
  
  <div text="#000000" bgcolor="#FFFFFF">
    <div lang="x-unicode"> Hi.<br>
      <br>
      I have an issue with understanding  <i>ompi_mpi_init() </i>logic.
      Could you please tell me if you have any guesses about following
      behavior.<br>
      <br>
      I wonder if I understand ringh, there is a block in <i>ompi_mpi_init()

      </i>function for exchanging procs information between processes
      (denote this block &#39;modex&#39;):<br>
      <blockquote>    coll = OBJ_NEW(orte_grpcomm_collective_t);<br>
            coll-&gt;id = orte_process_info.peer_modex;<br>
            if (ORTE_SUCCESS != (ret = orte_grpcomm.modex(coll))) {<br>
                error = &quot;orte_grpcomm_modex failed&quot;;<br>
                goto error;<br>
            }<br>
            /* wait for modex to complete - this may be moved anywhere
        in mpi_init<br>
             * so long as it occurs prior to calling a function that
        needs<br>
             * the modex info!<br>
             */<br>
            while (coll-&gt;active) {<br>
                opal_progress();  /* block in progress pending events */<br>
            }<br>
            OBJ_RELEASE(coll);<br>
      </blockquote>
      and several instructions after this there is a block for processes
      synchronization (denote this block &#39;barrier&#39;):<br>
      <blockquote>    coll = OBJ_NEW(orte_grpcomm_collective_t);<br>
            coll-&gt;id = orte_process_info.peer_init_barrier;<br>
            if (ORTE_SUCCESS != (ret = orte_grpcomm.barrier(coll))) {<br>
                error = &quot;orte_grpcomm_barrier failed&quot;;<br>
                goto error;<br>
            }<br>
            /* wait for barrier to complete */<br>
            while (coll-&gt;active) {<br>
                opal_progress();  /* block in progress pending events */<br>
            }<br>
            OBJ_RELEASE(coll);<br>
      </blockquote>
      So,<i> </i>initially<i> </i><i>ompi_mpi_init()</i> has following
      structure:<br>
      <blockquote>...<br>
        &#39;modex&#39; block;<br>
        ...<br>
        &#39;barrier&#39; block;<br>
        ...<br>
      </blockquote>
      I made several experiments with this code and the following one is
      of interest: if I add sequence of two additional blocks, &#39;barrier&#39;
      and &#39;modex&#39;, right after &#39;modex&#39; block, then<i> </i><i>ompi_mpi_init()

      </i>hangs in <i>opal_progress()</i> of the last &#39;modex&#39; block.<br>
      <blockquote>...<br>
        &#39;modex&#39; block;<br>
        &#39;barrier&#39; block;<br>
        &#39;modex&#39; block; &lt;- hangs<br>
        ...<br>
        &#39;barrier&#39; block;<br>
        ...<br>
      </blockquote>
      Thanks,<br>
      Victor Kocheganov.<br>
    </div>
  </div></div>

_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a></blockquote>



</div><br></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a></blockquote>


</div><br></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a></blockquote>

</div><br></div></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a></blockquote>
</div><br></div></div></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br></div>


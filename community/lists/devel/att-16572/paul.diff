diff --git a/orte/mca/oob/tcp/oob_tcp_component.c b/orte/mca/oob/tcp/oob_tcp_component.c
index ecb6c28..73f8dd6 100644
--- a/orte/mca/oob/tcp/oob_tcp_component.c
+++ b/orte/mca/oob/tcp/oob_tcp_component.c
@@ -200,13 +200,10 @@ static char *dyn_port_string;
 static char *dyn_port_string6;
 #endif
 
-static char *connection_timeout_string;
-
 static int tcp_component_register(void)
 {
     mca_base_component_t *component = &mca_oob_tcp_component.super.oob_base;
     int var_id;
-    char **vals=NULL;
     
     /* register oob module parameters */
     mca_oob_tcp_component.peer_limit = -1;
@@ -405,23 +402,6 @@ static int tcp_component_register(void)
                                           &mca_oob_tcp_component.disable_ipv6_family);
 #endif
 
-    mca_oob_tcp_component.connect_timeout.tv_sec = 2;
-    mca_oob_tcp_component.connect_timeout.tv_usec = 0;
-    connection_timeout_string = "2:0";
-    (void)mca_base_component_var_register(component, "connect_timeout",
-                                          "Timeout for connection attempts to peer expressed as sec:usec",
-                                          MCA_BASE_VAR_TYPE_STRING, NULL, 0, 0,
-                                          OPAL_INFO_LVL_9,
-                                          MCA_BASE_VAR_SCOPE_READONLY,
-                                          &connection_timeout_string);
-
-    vals = opal_argv_split(connection_timeout_string, ':');
-    mca_oob_tcp_component.connect_timeout.tv_sec = strtol(vals[0], NULL, 10);
-    if (NULL != vals[1]) {
-        mca_oob_tcp_component.connect_timeout.tv_usec = strtol(vals[1], NULL, 10);
-    }
-    opal_argv_free(vals);
-    
     return ORTE_SUCCESS;
 }
 
diff --git a/orte/mca/oob/tcp/oob_tcp_component.h b/orte/mca/oob/tcp/oob_tcp_component.h
index 41e52e8..a6657ca 100644
--- a/orte/mca/oob/tcp/oob_tcp_component.h
+++ b/orte/mca/oob/tcp/oob_tcp_component.h
@@ -77,8 +77,6 @@ typedef struct {
     bool               listen_thread_active;
     struct timeval     listen_thread_tv;       /**< Timeout when using listen thread */
     int                stop_thread[2];         /**< pipe used to exit the listen thread */
-    struct timeval     connect_timeout;        /**< timeout when attempting to connect to peer */
-    
 } mca_oob_tcp_component_t;
 
 ORTE_MODULE_DECLSPEC extern mca_oob_tcp_component_t mca_oob_tcp_component;
diff --git a/orte/mca/oob/tcp/oob_tcp_connection.c b/orte/mca/oob/tcp/oob_tcp_connection.c
index 208676c..452cd82 100644
--- a/orte/mca/oob/tcp/oob_tcp_connection.c
+++ b/orte/mca/oob/tcp/oob_tcp_connection.c
@@ -149,7 +149,6 @@ void mca_oob_tcp_peer_try_connect(int fd, short args, void *cbdata)
     char *host;
     mca_oob_tcp_send_t *snd;
     bool connected = false;
-    fd_set set;
     
     opal_output_verbose(OOB_TCP_DEBUG_CONNECT, orte_oob_base_framework.framework_output,
                         "%s orte_tcp_peer_try_connect: "
@@ -209,54 +208,27 @@ void mca_oob_tcp_peer_try_connect(int fd, short args, void *cbdata)
         peer->active_addr = addr;  // record the one we are using
     retry_connect:
         addr->retries++;
-        FD_ZERO(&set);
-        FD_SET(peer->sd, &set);
         if (connect(peer->sd, (struct sockaddr*)&addr->addr, addrlen) < 0) {
             /* non-blocking so wait for completion */
             if (opal_socket_errno == EINPROGRESS || opal_socket_errno == EWOULDBLOCK) {
                 opal_output_verbose(OOB_TCP_DEBUG_CONNECT, orte_oob_base_framework.framework_output,
-                                    "%s waiting %d:%03d for connect completion to %s",
+                                    "%s waiting for connect completion to %s - activating send event",
                                     ORTE_NAME_PRINT(ORTE_PROC_MY_NAME),
-                                    (int)mca_oob_tcp_component.connect_timeout.tv_sec,
-                                    (int)mca_oob_tcp_component.connect_timeout.tv_usec,
                                     ORTE_NAME_PRINT(&peer->name));
-                /* do a select to wait */
-                rc = select(peer->sd + 1, &set, NULL, NULL, &mca_oob_tcp_component.connect_timeout);
-                if (0 > rc) {
-                    /* didn't connect, let's move to next option */
-                    addr->state = MCA_OOB_TCP_FAILED;
-                    opal_output_verbose(OOB_TCP_DEBUG_CONNECT, orte_oob_base_framework.framework_output,
-                                        "%s connection to %s failed - moving to next option",
-                                        ORTE_NAME_PRINT(ORTE_PROC_MY_NAME),
-                                        ORTE_NAME_PRINT(&peer->name));
-                    continue;
-                } else if (0 == rc) {
-                    if (mca_oob_tcp_component.max_retries < addr->retries) {
-                        opal_output_verbose(OOB_TCP_DEBUG_CONNECT, orte_oob_base_framework.framework_output,
-                                            "%s orte_tcp_peer_try_connect: %s:%d retries exceeded",
-                                            ORTE_NAME_PRINT(ORTE_PROC_MY_NAME),
-                                            opal_net_get_hostname((struct sockaddr*)&addr->addr),
-                                            opal_net_get_port((struct sockaddr*)&addr->addr));
-                        continue;
-                    } else {
-                        goto retry_connect;
-                    }
+                /* just ensure the send_event is active */
+                if (!peer->send_ev_active) {
+                    opal_event_add(&peer->send_event, 0);
+                    peer->send_ev_active = true;
                 }
-                /* if we got a positive response, then we connected */
-                opal_output_verbose(OOB_TCP_DEBUG_CONNECT, orte_oob_base_framework.framework_output,
-                                    "%s select for connection to %s succeeded",
-                                    ORTE_NAME_PRINT(ORTE_PROC_MY_NAME),
-                                    ORTE_NAME_PRINT(&peer->name));
-                addr->retries = 0;
-                connected = true;
-                break;
+                OBJ_RELEASE(op);
+                return;
             }
 
             /* Some kernels (Linux 2.6) will automatically software
-               abort a connection that was ECONNREFUSED on the last
-               attempt, without even trying to establish the
-               connection.  Handle that case in a semi-rational
-               way by trying twice before giving up */
+             * abort a connection that was ECONNREFUSED on the last
+             * attempt, without even trying to establish the
+             * connection.  Handle that case in a semi-rational
+             * way by trying twice before giving up */
             if (ECONNABORTED == opal_socket_errno) {
                 if (addr->retries < mca_oob_tcp_component.max_retries) {
                     opal_output_verbose(OOB_TCP_DEBUG_CONNECT, orte_oob_base_framework.framework_output,
@@ -266,8 +238,7 @@ void mca_oob_tcp_peer_try_connect(int fd, short args, void *cbdata)
                     goto retry_connect;
                 } else {
                     /* We were unsuccessful in establishing this connection, and are
-                     * not likely to suddenly become successful, so rotate to next option
-                     */
+                     * not likely to suddenly become successful, so rotate to next option */
                     addr->state = MCA_OOB_TCP_FAILED;
                     continue;
                 }


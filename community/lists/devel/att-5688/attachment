Hello,<br><br>I&#39;m working on an OpenMPI BTL component and am having a recurring problem, I was wondering if anyone could shed some light on it. I have a component that&#39;s quite straight forward, it uses a pair of lightweight sockets to take advantage of being in a virtualised environment (specifically Xen). My code is a bit messy and has lots of inefficiencies, but the logic seems sound enough. I&#39;ve been able to execute a few simple programs successfully using the component, and they work most of the time.<br>
<br>The problem I&#39;m having is actually happening in higher layers, specifically in my asynchronous receive handler, when I call the callback function (cbfunc) that was set by the PML in the BTL initialisation phase. It seems to be getting stuck in an infinite loop at __ompi_free_list_wait(), in this function there is a condition variable which should get set eventually but just doesn&#39;t. I&#39;ve stepped through it with GDB and I get a backtrace of something like this: <br>
<br>mca_btl_xen_endpoint_recv_handler -&gt; mca_btl_xen_endpoint_start_recv -&gt; mca_pml_ob1_recv_frag_callback -&gt; mca_pml_ob1_recv_frag_match -&gt; __ompi_free_list_wait -&gt; opal_condition_wait<br><br>and from there it just loops. Although this is happening in higher levels, I haven&#39;t noticed something like this happening in any of the other BTL components so chances are there&#39;s something in my code that&#39;s causing this. I very much doubt that it&#39;s actually waiting for a list item to be returned since this infinite loop can occur non deterministically and sometimes even on the first receive callback.<br>
<br>I&#39;m really not too sure what else to include with this e-mail. I could send my source code (a bit nasty right now) if it would be helpful, but I&#39;m hoping that someone might have noticed this problem before or something similar. Maybe I&#39;m making a common mistake. Any advice would be really appreciated!<br>
<br>I&#39;m using OpenMPI 1.2.9 from the SVN tag repository.<br><br>Kind regards<br>Tim Hayes<br>


Nathan,<div><br></div><div>the sm osc component uses communicator CID to name the file that will be used to create shared memory segments.</div><div>if I understand and correctly, two different communicators coming from the same MPI_Comm_split might share the same CID, so CID (alone) cannot be used to generate a unique per communicator file name</div><div><br></div><div>Makes sense ?</div><div><br></div><div>Cheers,</div><div><br></div><div>Gilles<br><br>---------- Forwarded message ----------<br>From: <b>Peter Wind</b> &lt;<a href="mailto:peter.wind@met.no">peter.wind@met.no</a>&gt;<br>Date: Tuesday, February 2, 2016<br>Subject: [OMPI users] shared memory under fortran, bug?<br>To: <a href="mailto:users@open-mpi.org">users@open-mpi.org</a><br><br><br>Enclosed is a short (&lt; 100 lines) fortran code example that uses shared memory.<br>
It seems to me it behaves wrongly if openmpi is used.<br>
Compiled with SGI/mpt , it gives the right result.<br>
<br>
To fail, the code must be run on a single node.<br>
It creates two groups of 2 processes each. Within each group memory is shared.<br>
The error is that the two groups get the same memory allocated, but they should not.<br>
<br>
Tested with openmpi 1.8.4, 1.8.5, 1.10.2 and gfortran, intel 13.0, intel 14.0<br>
all fail.<br>
<br>
The call:<br>
   call MPI_Win_allocate_shared(win_size, disp_unit, MPI_INFO_NULL, comm_group, cp1, win, ierr)<br>
<br>
Should allocate memory only within the group. But when the other group allocates memory, the pointers from the two groups point to the same address in memory.<br>
<br>
Could you please confirm that this is the wrong behaviour?<br>
<br>
Best regards,<br>
Peter Wind<br></div>


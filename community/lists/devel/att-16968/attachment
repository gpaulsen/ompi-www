<div dir="ltr">Hello Folks,<div><br></div><div>I&#39;ve got a question about the opal_dss.load functionality.</div><div><br></div><div>If I have a construct like</div><div><br></div><div><br></div><div>buf = OBJ_NEW(opal_buffer_t);</div><div>opal_dss.load(buffer, input_ptr, num_bytes_to_load);</div><div><br></div><div>OBJ_RELEASE(buf);</div><div><br></div><div>I&#39;m finding that input_ptr has to have been something<br></div><div>returned by malloc and friends or else I get heap corruption.</div><div><br></div><div>I can&#39;t do something like</div><div><br></div><div>oob_allgatherv(input_ptr, bytes_from_each_rank, output_ptr);</div><div><br></div><div>for (cptr = output_ptr, i = 0 ; i &lt; pmix_size ;i ++) {</div><div>opal_dss.load(buf, cptr, bytes_from_each_rank[i]);</div><div>unpack message into dstore</div><div>cptr += bytes_from_each_rank[i];</div><div>}</div><div><br></div><div>I have to create a separate malloc&#39;d buffer each time through the</div><div>loop and do a memcpy into the tmp buffer, then call opal_dss.load</div><div>for that particular tmp buffer.</div><div><br></div><div>Is this expected behavior of opal_dss.load?Â  Is there a way to</div><div>avoid these extra mallocs/memcopy&#39;s?</div><div><br></div><div>If I don&#39;t do the above technique, the heap allocator blows up</div><div>in OBJ_RELEASE of buffer.</div><div><br></div><div>Thanks,</div><div><br></div><div>Howard</div><div><br></div><div><br></div><div><br></div></div>


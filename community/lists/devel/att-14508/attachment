<div dir="ltr">it is unrelated:<div><br></div><div>1. The OMPI can support and built with many different (or all) versions of external library (for example: libmxm or libslurm).</div><div>2. The OMPI utility ompi_info can expose the currently available version of libmxm/libslurm.</div>
<div><br></div><div>3. The vendor or end-user wants to certify specific version of libmxm or libslurm to be used in the customer environment.</div><div>4. The current way - put a note into libmxm/libslurm Relase Notes, which is not a guarantee that site user/sysadmin will pay attention in production environment.</div>
<div>5. The suggestion is to use #2 to write script by user or vendor which will match currently available versions with supported/certified and let admin/user know that there is a mismatch between running and supported version.</div>
<div><br></div><div>P.S. based on the true story :)</div><div> </div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Mon, Apr 14, 2014 at 5:19 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word">&lt;let&#39;s be consistent and shift this to the devel list&gt;<div><br></div><div>I&#39;m still confused - how is that helpful? How was the build allowed to complete if the external library version isn&#39;t supported?? You should either quietly not-build the affected component, or error out if the user specifically requested that component be built.</div>
<div><br></div><div>This sounds to me like you have a weakness in your configure logic, and are trying to find a bandaid. Perhaps a better solution (that wouldn&#39;t cause us to change every component in the code base) would be to just add appropriate tests to your configure logic so you don&#39;t incorrectly build against an unsupported library?</div>
<div><div class="h5"><div><br></div><div><br><div><div>On Apr 14, 2014, at 7:12 AM, Mike Dubman &lt;<a href="mailto:miked@dev.mellanox.co.il" target="_blank">miked@dev.mellanox.co.il</a>&gt; wrote:</div><br><blockquote type="cite">
<div dir="ltr">The use-case I`m interested to expose through ompi_info/oshmem_info the compiled-in versions of external libraries.<div>User/Vendor can write small script on top of ompi_info/oshmem_info to check if running version are in par with supported matrix.</div>

</div><div class="gmail_extra"><br><br><div class="gmail_quote">On Mon, Apr 14, 2014 at 5:06 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>

<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word">Guess I&#39;m a little confused and trying to understand the issue, so let&#39;s consider a couple of cases:<div>

<br></div><div>* If we are building against an unsupported version of an external library, that is supposed to be detected by the configure logic, yes?  So you would output a nice error message at that time, and stop the build process.</div>

<div><br></div><div>* If we were built against one version of an external library, and someone attempts to run us against a different version, you&#39;d have to detect that somehow at runtime. I&#39;m not sure how you could reliably do that as the problem is likely to manifest itself as an unresolved function (i.e., we use something that doesn&#39;t exist in the version being used) or a difference in a function signature. Either way, you&#39;ll either fail to load the library or crash.</div>

<div><br></div><div>So I&#39;m not sure what the added function pointer actually accomplishes. I suppose you could use it during ompi_info to display something about what version you linked against, but that won&#39;t help solve either of the above problems.</div>

<div><br></div><div>Could you help explain a little further?</div><div><br></div><div>Thanks</div><div>Ralph</div><div><br></div><div><br><div><div><div><div>On Apr 14, 2014, at 5:57 AM, Mike Dubman &lt;<a href="mailto:miked@dev.mellanox.co.il" target="_blank">miked@dev.mellanox.co.il</a>&gt; wrote:</div>

<br></div></div><blockquote type="cite"><div><div><div dir="ltr">+devel mailing list (for web mail archive)</div><div class="gmail_extra"><br><br><div class="gmail_quote">On Sat, Apr 12, 2014 at 9:04 PM, Mike Dubman <span dir="ltr">&lt;<a href="mailto:miked@dev.mellanox.co.il" target="_blank">miked@dev.mellanox.co.il</a>&gt;</span> wrote:<br>


<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><br><div>Hi,</div><div><br></div><div>Could you please suggest if following is addressed in MCA architecture or maybe it is something we should add:</div>


<div><br></div><div>Current MCA API:</div><div>The new MCA component should provide descriptor mca_base_component_2_0_0_t which specifies how to init/open/close/query/enable every new component.</div>
<div>Also, the descriptor is used to specify version of MCA framework and version of MCA component.</div><div><br></div><div>What is missing:</div><div>Some MCA components are wrappers on top of external libraries, i.e.</div>



<div><br></div><div>hwloc (libhwloc.so)</div><div>usnic (libusnic.so)</div><div>fca (libfca.so)<br></div><div>mxm (libmxm.so)</div><div>slurm (libslurn.so)</div><div>pbs</div><div>pmi</div><div>openib (libibverbs)</div><div>



vader (knem, ...)</div><div>...</div><div><br></div><div>So, it would be very useful if MCA descriptor will have another function pointer which return the version of external dependent library (if applicable).</div><div>


The ompi_info and oshmem_info will print it if present and will allow sysadmin to track vendor specific dependencies for OMPI (like: mxm compiled with libmxm 2.1, usnic with libusnic v1.0, ...) and warn users if compiled versions do not match vendor recommended.</div>



<div><br></div><div>Please suggest.</div><div><br></div><div>Thanks</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div></div>
</blockquote></div><br></div></div></div>
_______________________________________________<br>devel-core mailing list<br><a href="mailto:devel-core@open-mpi.org" target="_blank">devel-core@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel-core" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel-core</a></blockquote>

</div><br></div></div><br>_______________________________________________<br>
devel-core mailing list<br>
<a href="mailto:devel-core@open-mpi.org" target="_blank">devel-core@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel-core" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel-core</a><br></blockquote></div><br></div>
_______________________________________________<br>devel-core mailing list<br><a href="mailto:devel-core@open-mpi.org" target="_blank">devel-core@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel-core" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel-core</a></blockquote>
</div><br></div></div></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/04/14507.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/04/14507.php</a><br></blockquote></div><br></div>


<div dir="ltr"><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">Hello all</div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">Sorry to &quot;spam&quot; the list, but we&#39;d really like to get as wide a range of input as possible on features for the next release of PMIx (see below). I haven&#39;t attached </div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">Ralph</div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">==========</div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="font-size:13px"><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">PMIx 1.0 has now been released. If you haven’t looked at it, I invite you to please do so. I’ve attached the API definitions, and you’ll find more (slightly outdated, I’m afraid) here:</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif"><br></font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><a href="https://github.com/open-mpi/pmix/wiki" target="_blank">https://github.com/open-mpi/pmix/wiki</a></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">As a reminder, the intent behind PMIx is to transparently provide backward compatibility for PMI-1 and PMI-2, while extending the APIs to support advanced capabilities and providing exascale performance. Support by SLURM, ORCM, and other RMs will be coming later this year. I am working right now on completing the embedded support for OpenMPI, and hope to release that in the next week or two - at that time, any job executed via mpirun will have full support for PMIx functions.</div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">I’d like to invite your input for the upcoming v2.0 APIs. Our initial plan is to release 2.0 in time for SC15, with the expectation that we may not have all the features implemented yet - whether we add them during the 2.0 series, or delay some to 3.0 remains TBD.</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif"><br></font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">The initial thought is to focus 2.0 in the following areas - please note that we would deeply appreciate the involvement of each relevant community, so please feel free to forward this note and/or reach out to relevant representatives:</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">1. Performance improvements</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">   * dynamic spawn/reap of listening threads to achieve target performance of completing 1000 client connections in &lt; 1 sec</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">   * shared memory use to reduce memory footprint (Elena has already sent out some thoughts on this)</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">2. Fault response support</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">We currently provide application notification of faults (existing and impending) that includes information on the impacted processes. However, the response is currently limited to calling PMIx_Abort - i.e., the app can take internal action, but the only request it can make of the RM is to abort. We do allow for abort of specific procs as opposed to the entire job, but we’d like to support a broader set of options. For example, the app might request a coordinated checkpoint, ask for replacement nodes to be allocated, or request immediate restart at a reduced size.</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">3. File system support</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">We would like to begin supporting file positioning directives - e.g., hot/warm/cold data movement, persistence requests to maintain files and/or shared memory regions across job steps, and burst buffer management.</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">4. Network/fabric support</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">The existing notification capability can be used to notify of network issues. However, there has been interest expressed in further interactions that would allow an application to specify quality of service and security requirements, request information on network topology, etc.</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">5. Power directives</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">On very large scale systems, it is expected that some form of power management will be required or desired. Most of that happens at allocation request time, but there may be some possible directives an app could want to pass during execution. We’re open to suggestion.</font></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">6. Workflow support</div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px">We have the &quot;spawn&quot; support in PMIx 1.0, but that was designed expressly for support of MPI applications. Other programming models may require different or additional support. PMIx is intended to support a wide range of models, and we&#39;d welcome input on how workflows can be better supported.</div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><br></div><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">Any other topics of interest are always welcome!</font></div><span class=""><font color="#888888"><div style="color:rgb(0,0,0);font-family:Calibri,sans-serif;font-size:14px"><font face="Calibri,sans-serif">Ralph</font></div></font></span></div></div>


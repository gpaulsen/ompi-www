<div dir="ltr"><div class="gmail_extra"><br><div class="gmail_quote">On Tue, Jul 29, 2014 at 2:10 PM, Nathan Hjelm <span dir="ltr">&lt;<a href="mailto:hjelmn@lanl.gov" target="_blank">hjelmn@lanl.gov</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-left-style:solid;padding-left:1ex"><div id=":16m" class="" style="overflow:hidden">Is there a reason why the<br>

current implementations of opal atomics (add, cmpset) do not return the<br>
old value?</div></blockquote></div><div class="gmail_extra"><br></div>Because some CPUs don&#39;t implement such an atomic instruction?<br><br>On any CPU one *can* certainly synthesize the desired operation with an added read before the compare-and-swap to return a value that was present at some time before a failed cmpset.  That is almost certainly sufficient for your purposes.  However, the added load makes it (marginally) more expensive on some CPUs that only have the native equivalent of gcc&#39;s __sync_bool_compare_and_swap().<br>
<br>-Paul<br></div><div class="gmail_extra"><div><br></div>-- <br><font face="courier new, monospace"><div>Paul H. Hargrove                          <a href="mailto:PHHargrove@lbl.gov" target="_blank">PHHargrove@lbl.gov</a></div>
<div>Future Technologies Group</div><div>Computer and Data Sciences Department     Tel: +1-510-495-2352</div><div>Lawrence Berkeley National Laboratory     Fax: +1-510-486-6900</div></font>
</div></div>


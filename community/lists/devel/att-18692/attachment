<div dir="ltr">Durga,<div><br></div><div>There is an ongoing effort to make the master (and future versions) not only thread safe for all networks (all combinations of BTL, and PML/MTL) but also thread efficient. The fact that we removed the checks (as the one you noticed in the openib BTL) doesn&#39;t means that all BTL are currently thread safe, but that we enabled them in multi-threaded builds and are actively working to fix all issues we (and out nightly MTT tests) identify.</div><div><br></div><div>Overall the BTLs should only care about protecting internal state, and little else (and there is little else in the global context that the BTLs are allowed to alter). All the components that the BTLs interact with, i.e. PML, rcache and mpool, have their own protection. Few things you should pay attention to:</div><div>1. if you have async progress don&#39;t provide a progress function. This will prevent the PML from calling the progress when it might interfere with your own. Also keep in mind that the PML has no idea if it interfere with your progress, and it is possible it will call sends indiscriminately.</div><div>2. Make sure the send path is thread-safe as the PML is allowed to call the BTL API from multiple threads.</div><div>3. Don&#39;t raise any callbacks to the PML layer while holding a lock on the endpoint, or in fact on any BTL strucutres (the PML can send a message in the callback).</div><div><br></div><div>I am sure the list of &quot;don&#39;t do&quot; is much longer. Feel free to ask if you find anything puzzling.</div><div><br></div><div>Â  George.</div><div><br></div><div><br></div><div><br></div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Sun, Mar 6, 2016 at 3:31 PM, dpchoudh . <span dir="ltr">&lt;<a href="mailto:dpchoudh@gmail.com" target="_blank">dpchoudh@gmail.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr"><div><div><div><div><div><div><div>Hello all<br><br></div>sorry for asking too many 101 questions; hopefully someone won&#39;t mind answering.<br><br></div>It looks like, as of the current release, some BTLs (e.g. openib) are not thread safe, and the code explicitly bails out if it finds that MIT_Init() was called with THREAD_MULTIPLE. Then there are some BTLs, such as TCP, that can handle THREAD_MULTIPLE. Here are the questions:<br><br></div>1. There must be global (shared) variables that the BTL layer is accessing, which is giving rise to the thread safety. Is there a list of such variables, the code path in which they are accessed, and/or any documentation on them (including any past mailing list post)?<br><br></div>2. Browsing through the mailing list (I have been a subscriber to the *user* list for quite a while), it looks like a lot of people have stumbled on to the issue that the openib BTL is not thread safe. Given that, I&#39;d presume, it is the most popular BTL, since infiniband-like fabrics holds a lion&#39;s share of the HPC interconnect market, it must be quite difficult to make it thread safe. Any comments on the level of work it would take to make sure a new BTL would be thread safe? Something along the line of a &#39;do-this&#39; or &#39;don&#39;t-do-that&#39; would be greatly appreciated.<br><br></div>3. It looks like the openib BTL bailing out if called with THREAD_MULTIPLE has been removed in the master branch (at least from a cursory look.) Does that mean that the openib BTL is now thread safe, of is it that the check has simply been moved to another location?<br><br></div>Thanks in advance<br></div>Durga<br><div><div><div><div><div><div><div><div><br clear="all"><div><div>Life is complex. It has real and imaginary parts.</div></div>
</div></div></div></div></div></div></div></div></div>
<br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" rel="noreferrer" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2016/03/18691.php" rel="noreferrer" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/03/18691.php</a><br></blockquote></div><br></div>


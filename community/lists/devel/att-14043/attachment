<div dir="ltr">Joshua,<div><br></div><div>This is for ticket #2928, right?</div><div><br></div><div>-Paul</div></div><div class="gmail_extra"><br><br><div class="gmail_quote">On Fri, Feb 7, 2014 at 2:23 PM, Joshua Ladd <span dir="ltr">&lt;<a href="mailto:joshual@mellanox.com" target="_blank">joshual@mellanox.com</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">





<div lang="EN-US" link="blue" vlink="purple">
<div>
<p class="MsoNormal">What: Add an internal random number generator to OPAL.<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">Why: OMPI uses rand and srand all over the place. Because the middleware is mucking with the RNG&rsquo;s global state, applications that use these library routines will not achieve reproducible results with the same seed.<u></u><u></u></p>

<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">How: I plan to put in an additive lagged Fibonacci generator seeded with a Tausworthe generator that itself is seeded by the user&rsquo;s seed. The short story here is that the ALFG has a toroidal state space, i.e. it can be decomposed into non-overlapping
 cycles with maximal period. It&rsquo;s well understood how to fully enumerate these cycles when, for a length k register composed of m-bit words, we view this as a k X m binary matrix. It was proven by Marsaglia et al. that this matrix has a canonical form that
 is uniquely determined by the values k and l (the two numbers that (almost) completely characterize an ALFG.) So, distinct seeds are guaranteed to map to distinct, non-overlapping, long period streams that have measurably very, very low inter- and intra-stream
 correlations. &nbsp;We used this for large scale Monte Carlo simulations back in my PhD days.
<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">Will define a new type:<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">struct opal_rng_buffer_t {<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">uint32_t&nbsp; buff[127]; /* if people are going to pitch a fit over the size, we can go smaller, down to 7, but, obviously, this affects the quality of the streams */<u></u><u></u></p>
<p class="MsoNormal">int tap1;<u></u><u></u></p>
<p class="MsoNormal">int tap2;<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">};<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">and two functions:<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">/* User is responsible for defining his/her own opal_rng_buffer_t<u></u><u></u></p>
<p class="MsoNormal">&nbsp; * or malloc-ing and managing the resources themselves. &nbsp;&nbsp;<u></u><u></u></p>
<p class="MsoNormal">&nbsp;*/<u></u><u></u></p>
<p class="MsoNormal">int opal_srand(opal_rng_buffer_t *buff, uint32_t seed);<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">/* Returns a 32-bit pseudo random integer */<u></u><u></u></p>
<p class="MsoNormal">uint32_t opal_rand(opal_rng_buffer_t *buff);<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">When: Should be in by the end of February. &nbsp;Code is written, but integration and testing always takes some time.<u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">Joshua S. Ladd, PhD<u></u><u></u></p>
<p class="MsoNormal">HPC Algorithms Engineer<u></u><u></u></p>
<p class="MsoNormal">Mellanox Technologies <u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal">Email: <a href="mailto:joshual@mellanox.com" target="_blank">joshual@mellanox.com</a><u></u><u></u></p>
<p class="MsoNormal">Cell: <a href="tel:%2B1%20%28865%29%20258%20-%208898" value="+18652588898" target="_blank">+1 (865) 258 - 8898</a><u></u><u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
<p class="MsoNormal"><u></u>&nbsp;<u></u></p>
</div>
</div>

<br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br><br clear="all"><div><br></div>-- <br><font face="courier new, monospace"><div>
Paul H. Hargrove &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href="mailto:PHHargrove@lbl.gov" target="_blank">PHHargrove@lbl.gov</a></div><div>Future Technologies Group</div><div>Computer and Data Sciences Department &nbsp; &nbsp; Tel: +1-510-495-2352</div>
<div>Lawrence Berkeley National Laboratory &nbsp; &nbsp; Fax: +1-510-486-6900</div></font>
</div>


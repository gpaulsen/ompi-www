<HTML>
<HEAD>
<TITLE>Re: [OMPI devel] RFC: sm Latency</TITLE>
</HEAD>
<BODY>
<FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'><BR>
<BR>
<BR>
On 1/20/09 2:08 PM, &quot;Eugene Loh&quot; &lt;<a href="Eugene.Loh@sun.com">Eugene.Loh@sun.com</a>&gt; wrote:<BR>
<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>Richard Graham wrote: <BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'> Re: [OMPI devel] RFC: sm Latency First, the performance improvements look really nice.<BR>
A few questions:<BR>
&nbsp;&nbsp;- How much of an abstraction violation does this introduce?<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>Doesn't need to be much of an abstraction violation at all if, by that, we mean teaching the BTL about the match header. &nbsp;Just need to make some choices and I flagged that one for better visibility.<BR>
<BR>
&gt;&gt; I really don&#8217;t see how teaching the btl about matching will help much (it will save a subroutine call). &nbsp;As I understand<BR>
&gt;&gt; the proposal you aim to selectively pull items out of the fifo&#8217;s &#8211; this will break the fifo&#8217;s, as they assume contiguous<BR>
&gt;&gt; entries. &nbsp;Logic to manage holes will need to be added.<BR>
<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>This looks like the btl needs to start &#8220;knowing&#8221; about MPI level semantics.<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>That's one option. &nbsp;There are other options.<BR>
<BR>
&gt;&gt; Such as ?<BR>
<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>Currently, the btl purposefully is ulp agnostic.<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>What's ULP?<BR>
&nbsp;&gt;&gt; &nbsp;Upper Level Protocol<BR>
<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>I ask for 2 reasons<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- you mention having the btl look at the match header (if I understood correctly)<BR>
&nbsp;<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>Right, both to know if there is a match when the user had MPI_ANY_TAG and to extract values to populate the MPI_Status variable. &nbsp;There are other alternatives, like calling back the PML.<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- not clear to me what you mean by returning the header to the list if the irecv does not complete. &nbsp;If it does not complete, why not just pass the header back for further processing, if all this is happening at the pml level ?<BR>
&nbsp;<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>I was trying to read the FIFO to see what's on there. &nbsp;If it's something we can handle, we take it and handle it. &nbsp;If it's too complicated, then we just balk and tell the upper layer that we're declining any possible action. &nbsp;That just seemed to me to be the cleanest approach.<BR>
<BR>
&gt;&gt; see the note above. &nbsp;The fifo logic would have to be changed to manage non-contiguous entries.<BR>
<BR>
Here's an analogy. &nbsp;Let's say you have a house problem. &nbsp;You don't know how bad it is. &nbsp;You think you might have to hire an expensive contractor to do lots of work, but some local handyman thinks he can do it quickly and cheaply. &nbsp;So, you have the handyman look at the job to decide how involved it is. &nbsp;Let's say the handyman discovers that it is, indeed, a big job. &nbsp;How would you like things left at this point? Two options:<BR>
<BR>
*) Handyman says this is a big job. &nbsp;Bring in the expensive contractor and big equipment. &nbsp;I left everything as I found it. &nbsp;Or,<BR>
<BR>
*) Handyman says, &quot;I took apart the this-and-this and I bought a bunch of supplies. &nbsp;I ripped out the south wall. &nbsp;The water to the house is turned off. &nbsp;Etc.&quot; &nbsp;You (and whoever has to come in to actually do the work) would probably prefer that nothing had been started.<BR>
<BR>
I thought it was cleaner to go the &quot;do the whole job or don't do any of it&quot; approach.<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'> &nbsp;- The measurements seem to be very dual process specific. &nbsp;Have you looked at the impact of these changes on other applications at the same process count ? &nbsp;&#8220;Real&#8221; apps would be interesting, but even hpl would be a good start. <BR>
&nbsp;<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>Many measurements are for np=2. &nbsp;There are also np&gt;2 HPCC pingpong results though. &nbsp;(HPCC pingpong measures pingpong between two processes while np-2 process sit in wait loops.) &nbsp;HPCC also measures &quot;ring&quot; results... these are point-to-point with all np processes work.<BR>
<BR>
HPL is pretty insensitive to point-to-point performance. &nbsp;It either shows basically DGEMM performance or something is broken.<BR>
<BR>
I haven't looked at &quot;real&quot; apps.<BR>
<BR>
Let me be blunt about one thing: &nbsp;much of this is motivated by simplistic (HPCC) benchmarks. &nbsp;This is for two reasons:<BR>
<BR>
1) These benchmarks are highly visible.<BR>
2) It's hard to tune real apps when you know the primitives need work.<BR>
<BR>
Looking at real apps is important and I'll try to get to that.<BR>
<BR>
&gt;&gt; don&#8217;t disagree here at all. &nbsp;Just want to make sure that aiming at these important benchmarks does not<BR>
&gt;&gt; harm what is really more important &#8211; the day to day use.<BR>
<BR>
</SPAN></FONT><BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'> &nbsp;The current sm implementation is aimed only at small smp node count, which was really the only relevant type of systems when this code was written 5 years ago. &nbsp;For large core counts there is a rather simple change that could be put in that is simple to implement, and will give you flat scaling for the sort of tests you are running. &nbsp;If you replace the fifo&#8217;s with a single link list per process in shared memory, with senders to this process adding match envelopes atomically, with each process reading its own link list (multiple writers and single reader in non-threaded situation) there will be only one place to poll, regardless of the number of procs involved in the run. &nbsp;One still needs other optimizations to lower the absolute latency &#8211; perhaps what you have suggested. &nbsp;If one really has all N procs trying to write to the same fifo at once, performance will stink because of contention, but most apps don&#8217;t have that behaviour.<BR>
&nbsp;<BR>
</SPAN></FONT></BLOCKQUOTE><FONT FACE="Calibri, Verdana, Helvetica, Arial"><SPAN STYLE='font-size:11pt'>Okay. &nbsp;Yes, I am a fan of that approach. &nbsp;But:<BR>
<BR>
*) Doesn't strike me as a &quot;simple&quot; change.<BR>
<BR>
&gt;&gt; instead of a fifo_write (or what ever is is called), an entry is posted to the &#8220;head&#8221; of a linked list, and the read is<BR>
&gt;&gt; removing an entry from the list. &nbsp;If one cares about memory locality, you need to return things to the appropiate<BR>
&gt;&gt; list, which is implicit in the fifo. &nbsp;More objects need to be allocated in shared memory.<BR>
<BR>
*) Not sure this addresses all-to-all well. &nbsp;E.g., let's say you post a receive for a particular source. &nbsp;Do you then wade through a long FIFO to look for your match?<BR>
<BR>
&gt;&gt; to pull things of the free list, you do need to look through what is on the queue. &nbsp;If it is not the match you are<BR>
&gt;&gt; looking for, just post it the the appropriate local list for later use, just like the matching logic does now. &nbsp;As<BR>
&gt;&gt; I mentioned this am, if you want, you don&#8217;t have to have a single list per destination, you could have several lists, <BR>
&gt;&gt; if you are concerned about too much contention.<BR>
<BR>
What the RFC talks about is not the last SM development we'll ever need. &nbsp;It's only supposed to be one step forward from where we are today. &nbsp;The &quot;single queue per receiver&quot; approach has many advantages, but I think it's a different topic.<BR>
<BR>
&gt;&gt; This is a big enough proposed change, that a call to describe this may be in place. &nbsp;I will state up front I am against<BR>
&gt;&gt; introducing MPI semantics into the btl. &nbsp;Not against having that sort of option in the code base, but do want to<BR>
&gt;&gt; preserve an option like the pml/btl abstraction.<BR>
<BR>
Rich<BR>
<BR>
</SPAN></FONT></BLOCKQUOTE>
</BODY>
</HTML>



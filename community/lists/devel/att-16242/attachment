<div dir="ltr">HI Nathan,<div><br></div><div>How would you get things right with atomics and multirail? </div><div><br></div><div>Getting the memory consistency right would be really difficult.</div><div>You&#39;d have to keep issuing zero length rdma reads and hoping</div><div>that that would have the effect of a pci-e flush in the case of</div><div>multiple updates to a given target addr being in flight.</div><div><br></div><div>Howard</div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">2014-11-06 12:08 GMT-07:00 Nathan Hjelm <span dir="ltr">&lt;<a href="mailto:hjelmn@lanl.gov" target="_blank">hjelmn@lanl.gov</a>&gt;</span>:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">I haven&#39;t look at that yet. Would be great to get the new osc component<br>
working over both btls and mtls. I know portals supports atomics but I<br>
don&#39;t know whether psm does.<br>
<br>
-Nathan<br>
<br>
On Thu, Nov 06, 2014 at 08:45:15PM +0200, Mike Dubman wrote:<br>
&gt;    btw, do you plan to add atomics API to MTL layer as well?<br>
&gt;    On Thu, Nov 6, 2014 at 5:23 PM, Nathan Hjelm &lt;<a href="mailto:hjelmn@lanl.gov">hjelmn@lanl.gov</a>&gt; wrote:<br>
&gt;<br>
&gt;      At the moment I select the lowest latency BTL that can reach all of the<br>
&gt;      ranks in the communicator used to create the window. I can add code to<br>
&gt;      round-robin windows over the available BTLs on multi-rail systems.<br>
&gt;<br>
&gt;      -Nathan<br>
&gt;      On Wed, Nov 05, 2014 at 06:38:25PM -0800, Paul Hargrove wrote:<br>
&gt;      &gt;    All atomics must be done through not just &quot;the same btl&quot; but the<br>
&gt;      same btl<br>
&gt;      &gt;    MODULE,  since atomics from two IB HCAs, for instance, are not<br>
&gt;      necessarily<br>
&gt;      &gt;    coherent. So, how is the &quot;best&quot; one to be selected?<br>
&gt;      &gt;<br>
&gt;      &gt;    -Paul [Sent from my phone]<br>
&gt;      &gt;<br>
&gt;      &gt;    On Nov 5, 2014 7:15 AM, &quot;Nathan Hjelm&quot; &lt;<a href="mailto:hjelmn@lanl.gov">hjelmn@lanl.gov</a>&gt; wrote:<br>
&gt;      &gt;<br>
&gt;      &gt;      In the new osc component I don&#39;t try to handle that case. All<br>
&gt;      atomics<br>
&gt;      &gt;      have to be done through the same btl (including atomics on self).<br>
&gt;      I did<br>
&gt;      &gt;      this because with the default setup of Gemini they can not be<br>
&gt;      mixed. If<br>
&gt;      &gt;      it is possible to mix them with other networks I would be happy<br>
&gt;      to add<br>
&gt;      &gt;      an atomic flag for that.<br>
&gt;      &gt;<br>
&gt;      &gt;      -Nathan<br>
&gt;      &gt;<br>
&gt;      &gt;      On Wed, Nov 05, 2014 at 03:41:58AM -0500, Joshua Ladd wrote:<br>
&gt;      &gt;      &gt;    Quick question. Out of curiosity, how do you handle the<br>
&gt;      (common)<br>
&gt;      &gt;      case of<br>
&gt;      &gt;      &gt;    mixing network atomics with CPU atomics? Say for a single<br>
&gt;      target<br>
&gt;      &gt;      with two<br>
&gt;      &gt;      &gt;    initiators, one initiator is on host with the target, so<br>
&gt;      goes<br>
&gt;      &gt;      through the<br>
&gt;      &gt;      &gt;    SM BTL, and the other initiator is off host, so goes through<br>
&gt;      the<br>
&gt;      &gt;      network<br>
&gt;      &gt;      &gt;    BTL.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;    Josh<br>
&gt;      &gt;      &gt;    On Tue, Nov 4, 2014 at 6:46 PM, Nathan Hjelm<br>
&gt;      &lt;<a href="mailto:hjelmn@lanl.gov">hjelmn@lanl.gov</a>&gt;<br>
&gt;      &gt;      wrote:<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      What: Completely revamp the BTL RDMA interface (btl_put,<br>
&gt;      btl_get)<br>
&gt;      &gt;      to<br>
&gt;      &gt;      &gt;      better match what is needed for MPI one-sided.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      Why: I am preparing to push an enhanced MPI-3 one-sided<br>
&gt;      component<br>
&gt;      &gt;      that<br>
&gt;      &gt;      &gt;      makes use of network rdma and atomic operations to provide<br>
&gt;      a fast<br>
&gt;      &gt;      truely<br>
&gt;      &gt;      &gt;      one-sided implementation. Before I can push this component<br>
&gt;      I want<br>
&gt;      &gt;      to<br>
&gt;      &gt;      &gt;      change the btl interface to:<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;       - Provide access to network atomic operations. I only<br>
&gt;      need add<br>
&gt;      &gt;      and<br>
&gt;      &gt;      &gt;         cswap but the interface can be extended to any number<br>
&gt;      of<br>
&gt;      &gt;      operations.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;         The new interface provides three new functions:<br>
&gt;      btl_atomic_op,<br>
&gt;      &gt;      &gt;         btl_atomic_fop, and btl_atomic_cswap. Additionally<br>
&gt;      there are<br>
&gt;      &gt;      two new<br>
&gt;      &gt;      &gt;         btl_flags to indicate available atomic support:<br>
&gt;      &gt;      &gt;         MCA_BTL_FLAGS_ATOMIC_OPS, and<br>
&gt;      MCA_BTL_FLAGS_ATOMIC_FOPS. The<br>
&gt;      &gt;      &gt;         btl_atomics_flags field has been added to indicate<br>
&gt;      which<br>
&gt;      &gt;      atomic<br>
&gt;      &gt;      &gt;         operations are supported (see<br>
&gt;      mca_btl_base_atomic_op_t). At<br>
&gt;      &gt;      this time<br>
&gt;      &gt;      &gt;         I only added support for 64-bit integer atomics but I<br>
&gt;      am open<br>
&gt;      &gt;      to<br>
&gt;      &gt;      &gt;         adding support for 32-bit as well.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;       - Provide an interface that will allow simultaneous<br>
&gt;      put/get<br>
&gt;      &gt;      operations<br>
&gt;      &gt;      &gt;         without extra calls into the btl. The current interface<br>
&gt;      &gt;      requires the<br>
&gt;      &gt;      &gt;         btl user to call prepare_src/prepare_dst before every<br>
&gt;      rdma<br>
&gt;      &gt;      &gt;         operation. In some cases this is a complete waste<br>
&gt;      (vader, sm<br>
&gt;      &gt;      with<br>
&gt;      &gt;      &gt;         CMA, knem, or xpmem).<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;         I seperated the registration of memory from the segment<br>
&gt;      info.<br>
&gt;      &gt;      More<br>
&gt;      &gt;      &gt;         information is provided below. The new put/get<br>
&gt;      functions have<br>
&gt;      &gt;      the<br>
&gt;      &gt;      &gt;         following signatures:<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      typedef int (*mca_btl_base_module_put_fn_t) (struct<br>
&gt;      &gt;      &gt;      mca_btl_base_module_t *btl,<br>
&gt;      &gt;      &gt;          struct mca_btl_base_endpoint_t *endpoint, void<br>
&gt;      &gt;      *local_address,<br>
&gt;      &gt;      &gt;          uint64_t remote_address, struct<br>
&gt;      &gt;      mca_btl_base_registration_handle_t<br>
&gt;      &gt;      &gt;      *local_handle,<br>
&gt;      &gt;      &gt;          struct mca_btl_base_registration_handle_t<br>
&gt;      *remote_handle,<br>
&gt;      &gt;      size_t<br>
&gt;      &gt;      &gt;      size, int flags,<br>
&gt;      &gt;      &gt;          int order, mca_btl_base_rdma_completion_fn_t cbfunc,<br>
&gt;      void<br>
&gt;      &gt;      &gt;      *cbcontext, void *cbdata);<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      typedef int (*mca_btl_base_module_get_fn_t) (struct<br>
&gt;      &gt;      &gt;      mca_btl_base_module_t *btl,<br>
&gt;      &gt;      &gt;          struct mca_btl_base_endpoint_t *endpoint, void<br>
&gt;      &gt;      *local_address,<br>
&gt;      &gt;      &gt;          uint64_t remote_address, struct<br>
&gt;      &gt;      mca_btl_base_registration_handle_t<br>
&gt;      &gt;      &gt;      *local_handle,<br>
&gt;      &gt;      &gt;          struct mca_btl_base_registration_handle_t<br>
&gt;      *remote_handle,<br>
&gt;      &gt;      size_t<br>
&gt;      &gt;      &gt;      size, int flags,<br>
&gt;      &gt;      &gt;          int order, mca_btl_base_rdma_completion_fn_t cbfunc,<br>
&gt;      void<br>
&gt;      &gt;      &gt;      *cbcontext, void *cbdata);<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      typedef void (*mca_btl_base_rdma_completion_fn_t)(<br>
&gt;      &gt;      &gt;          struct mca_btl_base_module_t* module,<br>
&gt;      &gt;      &gt;          struct mca_btl_base_endpoint_t* endpoint,<br>
&gt;      &gt;      &gt;          void *local_address,<br>
&gt;      &gt;      &gt;          struct mca_btl_base_registration_handle_t<br>
&gt;      *local_handle,<br>
&gt;      &gt;      &gt;          void *context,<br>
&gt;      &gt;      &gt;          void *cbdata,<br>
&gt;      &gt;      &gt;          int status);<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;         I may modify the completion function to provide more<br>
&gt;      &gt;      information on<br>
&gt;      &gt;      &gt;         the completed operation (size).<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;       - Allow the registration of an entire region even if the<br>
&gt;      region<br>
&gt;      &gt;      can not<br>
&gt;      &gt;      &gt;         be modified with a single rdma operation. At this time<br>
&gt;      &gt;      prepare_src<br>
&gt;      &gt;      &gt;         and prepare_dst may modify the size and register a<br>
&gt;      smaller<br>
&gt;      &gt;      &gt;         region. This will not work.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;         This is done in the new interface through the new<br>
&gt;      &gt;      btl_register_mem,<br>
&gt;      &gt;      &gt;         and btl_deregister_mem interfaces. The btl_register_mem<br>
&gt;      &gt;      interface<br>
&gt;      &gt;      &gt;         returns a registration handle of size<br>
&gt;      &gt;      btl_registration_handle_size<br>
&gt;      &gt;      &gt;         that can be used as either the local_handle or<br>
&gt;      remote_handle<br>
&gt;      &gt;      to any<br>
&gt;      &gt;      &gt;         rdma/atomic function. BTLs that do not provide these<br>
&gt;      functions<br>
&gt;      &gt;      do not<br>
&gt;      &gt;      &gt;         require registration for rdma/atomic operations.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      typedef struct mca_btl_base_registration_handle_t<br>
&gt;      &gt;      &gt;      *(*mca_btl_base_module_register_mem_fn_t)(<br>
&gt;      &gt;      &gt;          struct mca_btl_base_module_t* btl, struct<br>
&gt;      &gt;      mca_btl_base_endpoint_t<br>
&gt;      &gt;      &gt;      *endpoint, void *base,<br>
&gt;      &gt;      &gt;          size_t size, uint32_t flags);<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      typedef struct mca_btl_base_registration_handle_t<br>
&gt;      &gt;      &gt;      *(*mca_btl_base_module_register_mem_fn_t)(<br>
&gt;      &gt;      &gt;          struct mca_btl_base_module_t* btl, struct<br>
&gt;      &gt;      mca_btl_base_endpoint_t<br>
&gt;      &gt;      &gt;      *endpoint, void *base,<br>
&gt;      &gt;      &gt;          size_t size, uint32_t flags);<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;       - Expose the limitations of the put and get operations so<br>
&gt;      the<br>
&gt;      &gt;      caller<br>
&gt;      &gt;      &gt;         can make decisions before trying a get or put<br>
&gt;      operation. Two<br>
&gt;      &gt;      &gt;         examples: the Gemini interconnect has an alignment<br>
&gt;      restriction<br>
&gt;      &gt;      on<br>
&gt;      &gt;      &gt;         get, openib devices may have a limit on how large a<br>
&gt;      single<br>
&gt;      &gt;      get/put<br>
&gt;      &gt;      &gt;         operation can be. The current interface sort of gives<br>
&gt;      the put<br>
&gt;      &gt;      limit<br>
&gt;      &gt;      &gt;         but it is tied to the rdma pipeline protocol.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;         This is done in the new interface by providing<br>
&gt;      btl_get_limit,<br>
&gt;      &gt;      &gt;         btl_get_alignment, btl_put_limit, and<br>
&gt;      btl_put_alignment.<br>
&gt;      &gt;      Operations<br>
&gt;      &gt;      &gt;         that violate these restrictions should return<br>
&gt;      &gt;      OPAL_ERR_BAD_PARAM<br>
&gt;      &gt;      &gt;         (operation over limit) or OPAL_ERR_NOT_SUPPORTED<br>
&gt;      (operation<br>
&gt;      &gt;      not<br>
&gt;      &gt;      &gt;         supported due to alignment restructions with either the<br>
&gt;      source<br>
&gt;      &gt;      or<br>
&gt;      &gt;      &gt;         destination buffer).<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      This is a big change and I do not expect everyone to like<br>
&gt;      100% of<br>
&gt;      &gt;      these<br>
&gt;      &gt;      &gt;      changes. I welcome any feedback people have.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      When: Tuesday, Nov 17, 2015. This is during SC so there<br>
&gt;      will be<br>
&gt;      &gt;      time for<br>
&gt;      &gt;      &gt;      face-to-face discussion if anyone has any concerns or<br>
&gt;      would like<br>
&gt;      &gt;      to see<br>
&gt;      &gt;      &gt;      something changed.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      The proposed new btl interface as well as updated versions<br>
&gt;      of:<br>
&gt;      &gt;      pml/ob1,<br>
&gt;      &gt;      &gt;      btl/openib, btl/self, btl/scif, btl/sm, btl/tcp, btl/ugni,<br>
&gt;      and<br>
&gt;      &gt;      btl/vader<br>
&gt;      &gt;      &gt;      can be found in my btlmod branch at:<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      <a href="https://github.com/hjelmn/ompi/tree/btlmod" target="_blank">https://github.com/hjelmn/ompi/tree/btlmod</a><br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      Other btls (smcuda, and usnic) still need to be updated to<br>
&gt;      &gt;      provide the<br>
&gt;      &gt;      &gt;      new interface. Unmodified btl will not build.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      If there are no objections I will push the btl<br>
&gt;      modifications into<br>
&gt;      &gt;      the<br>
&gt;      &gt;      &gt;      master two weeks from today (Nov 17). Please take a look<br>
&gt;      and let<br>
&gt;      &gt;      me know<br>
&gt;      &gt;      &gt;      what you think.<br>
&gt;      &gt;      &gt;<br>
&gt;      &gt;      &gt;      _______________________________________________<br>
&gt;      &gt;      &gt;      devel mailing list<br>
&gt;      &gt;      &gt;      <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;      &gt;      &gt;      Subscription:<br>
&gt;      <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;      &gt;      &gt;      Link to this post:<br>
&gt;      &gt;      &gt;<br>
&gt;      <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16193.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16193.php</a><br>
&gt;      &gt;<br>
&gt;      &gt;      &gt; _______________________________________________<br>
&gt;      &gt;      &gt; devel mailing list<br>
&gt;      &gt;      &gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;      &gt;      &gt; Subscription:<br>
&gt;      <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;      &gt;      &gt; Link to this post:<br>
&gt;      &gt;      <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16195.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16195.php</a><br>
&gt;      &gt;<br>
&gt;      &gt;      _______________________________________________<br>
&gt;      &gt;      devel mailing list<br>
&gt;      &gt;      <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;      &gt;      Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;      &gt;      Link to this post:<br>
&gt;      &gt;      <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16198.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16198.php</a><br>
&gt;<br>
&gt;      &gt; _______________________________________________<br>
&gt;      &gt; devel mailing list<br>
&gt;      &gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;      &gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;      &gt; Link to this post:<br>
&gt;      <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16224.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16224.php</a><br>
&gt;<br>
&gt;      _______________________________________________<br>
&gt;      devel mailing list<br>
&gt;      <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;      Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;      Link to this post:<br>
&gt;      <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16230.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16230.php</a><br>
&gt;<br>
&gt;    --<br>
&gt;    Kind Regards,<br>
&gt;    M.<br>
<br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16240.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16240.php</a><br>
<br>
<br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/11/16241.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/11/16241.php</a><br></blockquote></div><br></div>

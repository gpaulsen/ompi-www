<html><head><meta http-equiv="Content-Type" content="text/html charset=iso-8859-1"></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; ">Yeah, that won't work. The id's cannot be reused, so you'd have to assign a different one in each case.<div><br><div><div>On Dec 20, 2012, at 9:12 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com">victor.kocheganov@itseez.com</a>&gt; wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite">In every 'modex' block I use&nbsp;<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;</span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">coll-&gt;id =&nbsp;</span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">orte_process_info.peer_modex;</span>&nbsp; id and in every 'barrier' block I use&nbsp;<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;coll-&gt;id = orte_process_info.peer_init_</span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">barrier;</span>&nbsp; id.&nbsp;<div>
<br></div><div>P.s. In general (as I wrote in first letter), I use 'modex' term for following code:<br><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp; &nbsp; coll = OBJ_NEW(orte_grpcomm_</span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">collective_t);</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; coll-&gt;id = orte_process_info.peer_modex;</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; if (ORTE_SUCCESS != (ret = orte_grpcomm.modex(coll))) {</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = "orte_grpcomm_modex failed";</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; }</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; /* wait for modex to complete - this may be moved anywhere in mpi_init</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp; * so long as it occurs prior to calling a function that needs</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp; * the modex info!</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp; */</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; while (coll-&gt;active) {</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opal_progress();&nbsp; /* block in progress pending events */</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; }</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; OBJ_RELEASE(coll);</span></div><div><font color="#222222" face="arial, sans-serif"><br></font>and 'barrier' for this:</div>
<div><br></div><div><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp; &nbsp; coll = OBJ_NEW(orte_grpcomm_</span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">collective_t);</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; coll-&gt;id = orte_process_info.peer_init_</span><span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">barrier;</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; if (ORTE_SUCCESS != (ret = orte_grpcomm.barrier(coll))) {</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = "orte_grpcomm_barrier failed";</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; }</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; /* wait for barrier to complete */</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; while (coll-&gt;active) {</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opal_progress();&nbsp; /* block in progress pending events */</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; }</span><br style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">
<span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:13px;background-color:rgb(255,255,255)">&nbsp;&nbsp;&nbsp; OBJ_RELEASE(coll);</span><br><br><div class="gmail_quote">On Thu, Dec 20, 2012 at 8:57 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br>
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div style="word-wrap:break-word"><br><div><div class="im"><div>On Dec 20, 2012, at 8:29 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com" target="_blank">victor.kocheganov@itseez.com</a>&gt; wrote:</div>
<br><blockquote type="cite">Thanks for fast answer, Ralph.<div><br></div><div>In my example I use different collective objects. I mean in every mentioned block I call&nbsp;<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">&nbsp;<i>coll = OBJ_NEW(orte_grpcomm_</i></span><i><span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif">collective_t);</span></i>&nbsp;&nbsp;</div>

<div>and&nbsp;<span style="color:rgb(34,34,34);font-size:13px;font-family:arial,sans-serif"><i>OBJ_RELEASE(coll);</i></span>&nbsp;, so all the grpcomm operations use unique collective object.&nbsp;</div></blockquote><div><br></div></div>
How are the procs getting the collective id for those new calls? They all have to match</div><div><div class="h5"><div><br><blockquote type="cite">
<div><br></div><div><br></div><div><div class="gmail_quote">On Thu, Dec 20, 2012 at 7:48 PM, Ralph Castain <span dir="ltr">&lt;<a href="mailto:rhc@open-mpi.org" target="_blank">rhc@open-mpi.org</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">

<div style="word-wrap:break-word">Absolutely it will hang as the collective object passed into any grpcomm operation (modex or barrier) is only allowed to be used once - any attempt to reuse it will fail.<div><br></div><div>

<br><div><div><div>On Dec 20, 2012, at 6:57 AM, Victor Kocheganov &lt;<a href="mailto:victor.kocheganov@itseez.com" target="_blank">victor.kocheganov@itseez.com</a>&gt; wrote:</div><br></div><blockquote type="cite">

<div>
  

    
  
  <div text="#000000" bgcolor="#FFFFFF">
    <div lang="x-unicode"> Hi.<br>
      <br>
      I have an issue with understanding&nbsp; <i>ompi_mpi_init() </i>logic.
      Could you please tell me if you have any guesses about following
      behavior.<br>
      <br>
      I wonder if I understand ringh, there is a block in <i>ompi_mpi_init()

      </i>function for exchanging procs information between processes
      (denote this block 'modex'):<br>
      <blockquote>&nbsp;&nbsp;&nbsp; coll = OBJ_NEW(orte_grpcomm_collective_t);<br>
        &nbsp;&nbsp;&nbsp; coll-&gt;id = orte_process_info.peer_modex;<br>
        &nbsp;&nbsp;&nbsp; if (ORTE_SUCCESS != (ret = orte_grpcomm.modex(coll))) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = "orte_grpcomm_modex failed";<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; /* wait for modex to complete - this may be moved anywhere
        in mpi_init<br>
        &nbsp;&nbsp;&nbsp;&nbsp; * so long as it occurs prior to calling a function that
        needs<br>
        &nbsp;&nbsp;&nbsp;&nbsp; * the modex info!<br>
        &nbsp;&nbsp;&nbsp;&nbsp; */<br>
        &nbsp;&nbsp;&nbsp; while (coll-&gt;active) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opal_progress();&nbsp; /* block in progress pending events */<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; OBJ_RELEASE(coll);<br>
      </blockquote>
      and several instructions after this there is a block for processes
      synchronization (denote this block 'barrier'):<br>
      <blockquote>&nbsp;&nbsp;&nbsp; coll = OBJ_NEW(orte_grpcomm_collective_t);<br>
        &nbsp;&nbsp;&nbsp; coll-&gt;id = orte_process_info.peer_init_barrier;<br>
        &nbsp;&nbsp;&nbsp; if (ORTE_SUCCESS != (ret = orte_grpcomm.barrier(coll))) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = "orte_grpcomm_barrier failed";<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; /* wait for barrier to complete */<br>
        &nbsp;&nbsp;&nbsp; while (coll-&gt;active) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; opal_progress();&nbsp; /* block in progress pending events */<br>
        &nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp; OBJ_RELEASE(coll);<br>
      </blockquote>
      So,<i> </i>initially<i> </i><i>ompi_mpi_init()</i> has following
      structure:<br>
      <blockquote>...<br>
        'modex' block;<br>
        ...<br>
        'barrier' block;<br>
        ...<br>
      </blockquote>
      I made several experiments with this code and the following one is
      of interest: if I add sequence of two additional blocks, 'barrier'
      and 'modex', right after 'modex' block, then<i> </i><i>ompi_mpi_init()

      </i>hangs in <i>opal_progress()</i> of the last 'modex' block.<br>
      <blockquote>...<br>
        'modex' block;<br>
        'barrier' block;<br>
        'modex' block; &lt;- hangs<br>
        ...<br>
        'barrier' block;<br>
        ...<br>
      </blockquote>
      Thanks,<br>
      Victor Kocheganov.<br>
    </div>
  </div></div>

_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a></blockquote>

</div><br></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org" target="_blank">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a></blockquote>
</div><br></div></div></div><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></blockquote></div><br></div>
_______________________________________________<br>devel mailing list<br><a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>http://www.open-mpi.org/mailman/listinfo.cgi/devel</blockquote></div><br></div></body></html>

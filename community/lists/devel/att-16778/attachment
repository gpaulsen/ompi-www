<div dir="ltr">HI George,<div><br></div><div>Thanks for the feedback.</div><div><br></div><div>This PR was only to address one piece ( a first step) for ways to handle thread based progression</div><div>for RDMA capable nics within OMPI.  It by no means represents a complete solution.  That more complete</div><div>solution was what I understood we were interested in in the long term, the one that would certainly</div><div>need an RFC for, since it could involve things like extending the PML interface, and using</div><div>these extensions in parts of libnbc, etc.  </div><div><br></div><div>I would have liked to use the priority flag except that its use is different from what we would</div><div>want for only generating IRQs for the rendezvous control messages, namely this part:</div><div><br></div><div>







<p class="">/* try to get a small message out on to the wire quickly */</p>
<p class="">static inline int mca_pml_ob1_send_inline (void *buf, size_t count,</p>
<p class="">so this would be doing exactly what we want to avoid, namely generating interrupts for<br>small eager messages, at least for the typical case.</p><p class="">Its somewhat unfortunate the way the PML/BML/BTL is currently designed, that the PML is<br>in charge of how rendezvous messages are transferred for RDMA capable devices.  If<br>the approach were more like that taken in the MPICH nemesis ch3 device,<br>wherein a Nemesis netmod is fully responsible for sending the data using its own algorithms,<br>with the option to leverage the LMT framework Darius Buntinas designed, less &quot;knowledge&quot; of<br>how a given RDMA device works would have to have been incorporated into the PML.<br>With the Nemesis design, I was able to hide a lot about the Cray XE/XC network from<br>Nemesis - including the thread based progression part,  the particulars of memory registration<br>for the Cray network, etc.  With the Nemesis design, there<br>was also no need for the base_descriptor back/forth between a Nemesis netmod<br>and the CH3 device layers that occurs in the PML/BML/BTL design for send/recv<br>style data transfers.</p><p class="">Nathan and I are planning to use the SIGNAL flag, as well as some additional glue,<br>to add an option for thread based progression in the vader BTL,  but other projects<br>have higher priority at the moment.</p><p class="">We can reuse the SIGNAL DES FLAG if we find that extending the PML interface to <br>include something with a signal concept is appropriate.  The one area I know that<br>might benefit from such a concept is in non-blocking collectives.  But it may turn<br>out to be easier just to reuse the libnbc in another coll component which would be<br>aware of particular RDMA networks&#39; capabilities, and avoid having to extend the PML<br>interface with unnecessary methods.   </p><p class="">Hope this helps,</p><p class="">Howard</p><p class=""><br></p></div></div><div class="gmail_extra"><br><div class="gmail_quote">2015-01-09 15:30 GMT-07:00 George Bosilca <span dir="ltr">&lt;<a href="mailto:bosilca@icl.utk.edu" target="_blank">bosilca@icl.utk.edu</a>&gt;</span>:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div dir="ltr">I have some comments about this ticket and the corresponding patch. Honestly, the patch lacks most of the things we have talked about during our last developers meeting. However, my main concern in this particular email is about the SIGNAL flag. <div><br></div><div>1. The fact that currently there is little difference between this flag and PRIORITY is a fact that I would like to hear a justification for. </div><div><br></div><div>2. Moreover, right now SIGNAL is a purely PML decision. Again, we talked about this and decided that the upper layer (this meant whoever is using the PML) was to define this policy. We specifically said that this should not be a PML level decision, because the PML lacks the means to take the right decision about what should be signaled and what not. The current code signals most of the PML control logic, including some of the matching logic (but not all for some obscure reason). Based on my understanding of the code, one didn&#39;t need to pollute the PML code for this, it could have just used the PRIORITY flag instead.<div><br></div><div>Additionally, if my memory is good we decided that this should be thoughtfully evaluated before pushing it into the trunk. And here thoughtfully meant over multiple BTL and so on. Obviously, I missed the email thread about the evaluation of this flag on UGNI. I guess I might not be the only one, so I would really appreciate if someone can repost it again.</div><span class="HOEnZb"><font color="#888888"><div><br></div><div>  George.<br></div><div><br></div></font></span></div></div>
<br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2015/01/16774.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2015/01/16774.php</a><br></blockquote></div><br></div>


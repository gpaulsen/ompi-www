<html><head><style type="text/css"><!-- DIV {margin:0px;} --></style></head><body><div style="font-family:times new roman, new york, times, serif;font-size:10pt">Thanks a lot.. You and&nbsp; Adrian have cleared a lot of my concepts and its time for me to develop a functional framework. I will get back to you guys when I am done with framework..... and having more problems and/or conceptual issues. <br><br>The mca_btl_tcp_addr_t issue was resolved as correctly pointed by you.&nbsp; I didnt go into the detail, but i think I must have had corrupted the code somewhere. The fresh tar, configure and make all install did the trick.<br><div>&nbsp;</div>Best Regards,<br>Muhammad Atif<div style="font-family: times new roman,new york,times,serif; font-size: 10pt;"><br><br><div style="font-family: times new roman,new york,times,serif; font-size: 12pt;">----- Original Message ----<br>From: Jeff Squyres &lt;jsquyres@cisco.com&gt;<br>To: Open MPI Developers
 &lt;devel@open-mpi.org&gt;<br>Sent: Saturday, January 19, 2008 11:54:09 AM<br>Subject: Re: [OMPI devel] btl tcp port to xensocket<br><br>
On Jan 17, 2008, at 7:08 PM, Muhammad Atif wrote:<br><br>&gt; Thanks again. Nope.. at the moment I am doing the lame stuff i.e.&nbsp; <br>&gt; simply changing the tcp code. So I have not created another btl&nbsp; <br>&gt; component. I know its not recommended thing, but I just wanted to&nbsp; <br>&gt; try before committing.<br><br>That makes perfect sense.&nbsp; Ok, so you're not running into a component&nbsp; <br>name collision within the modex; that's good.<br><br>&gt; Apart from xensocket specific stuff, all what I have done inside the
&nbsp; <br>&gt; btl/tcp code is to change the structure<br>&gt;<br>&gt;&nbsp; struct&nbsp; mca_btl_tcp_addr_t {<br>&gt;&nbsp; &nbsp;  struct in_addr addr_inet;&nbsp; &nbsp;  /**&lt; IPv4 address in network byte&nbsp; <br>&gt; order */<br>&gt;&nbsp; &nbsp;  in_port_t&nbsp; &nbsp; &nbsp; addr_port;&nbsp; &nbsp;  /**&lt; listen port */<br>&gt;&nbsp; &nbsp;  unsigned short addr_inuse;&nbsp; &nbsp; /**&lt; local meaning only */<br>&gt;&nbsp; &nbsp;  int&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  xs_domU_ref;&nbsp; &nbsp; &nbsp;  /**&lt;xs: domU memory reference
&nbsp; */<br>&gt; };<br>&gt;<br>&gt; I wanted this structure to be passed on to all peers through&nbsp; <br>&gt; component exchange (modex send/recv).&nbsp; This way I have the normal&nbsp; <br>&gt; socket listen port, its address and xensocket memory reference (its&nbsp; <br>&gt; not complete as it is missing some other info, but lets stick to&nbsp; <br>&gt; basic stuff).<br><br>Sounds reasonable.<br><br>&gt; The second question is regarding btl tcp recv. I have seen a couple&nbsp; <br>&gt; of emails with some explanation specific to that particular user but
&nbsp; <br>&gt; cannot seem to answer this question (ref to previous email).<br><br> &gt; Second question is regarding the receive part of openmpi. In my<br> &gt; understanding, once Recv api is called, the control goes through PML<br> &gt; layer and everything initializes there. However, I am unable to get<br> &gt; a lock at the layer/file/function where the receive socket polling<br> &gt; is done. There are callbacks, but where or how exactly the openMPI<br> &gt; knows that message has in fact arrived. Any pointer will do :)<br><br>All file descriptor process is handled by libevent down in opal.&nbsp;  <br>libevent is a third party library that we imported into Open MPI (and&nbsp; <br>modified a bit) that handles generic fd issues.&nbsp; For example, we&nbsp; <br>register fd's with libevent and tell libevent that we want callbacks&nbsp; <br>when the fd is ready for reading or writing (depending on the context).<br><br>libevent's event loop is invoked
 by opal_progress(), which is called&nbsp; <br>in lots of places.&nbsp; Hence, the tcp btl can be called back whenever&nbsp; <br>opal_progress() is invoked, because opal_progress() will invoke&nbsp; <br>libevent, and if any socket fd's that the tcp btl registered are&nbsp; <br>reading for reading, or if there are pending writes occurred on some&nbsp; <br>socket fd's and those fd's are ready for writing, their callbacks will
&nbsp; <br>be invoked.<br><br>Make sense?<br><br>&gt; PS: I would love if you do some explanation of modex recv as well. ;)<br>&gt; Thanks for all the support you guys are giving.<br><br>I think Adrian was referring to how the modex works.&nbsp; Remember that&nbsp; <br>the modex send is just a local memcpy; all the modex data is them&nbsp; <br>glommed up into a single network send communication later.&nbsp; After&nbsp; <br>that, it gets a big network message with *everyone's* modex data, that
&nbsp; <br>is then split up and categorized by component and sender.&nbsp; The modex&nbsp; <br>receive is then another memcpy.<br><br>So as to why you're still getting sizeof(mca_btl_tcp_addr_t)==8 in the
&nbsp; <br>tcp modex receiver, the only thing I can think of is that you somehow&nbsp; <br>didn't recompile properly.&nbsp; Did you try making clean in the tcp btl&nbsp; <br>dir and then a "make all" to ensure that everything recompiled&nbsp; <br>properly with your modified struct in btl_tcp_addr.h?&nbsp; Normally, the&nbsp; <br>build system should take care of such dependencies, but...<br><br>-- <br>Jeff Squyres<br>Cisco Systems<br><br>_______________________________________________<br>devel mailing list<br><a ymailto="mailto:devel@open-mpi.org" href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br><a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br></div><br></div></div><br>
      <hr size=1>Looking for last minute shopping deals? <a href="http://us.rd.yahoo.com/evt=51734/*http://tools.search.yahoo.com/newsearch/category.php?category=shopping"> 
Find them fast with Yahoo! Search.</a></body></html>

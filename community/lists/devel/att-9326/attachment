<div>
            <div><p style="color:#a0a0a0">On Tuesday, June 7, 2011 at 4:55 PM, Josh Hursey wrote:</p>
                <blockquote type="cite" style="border-left-style:solid;border-width:1px;margin-left:0px;padding-left:10px">
                    <span><div><div>- orte_errmgr.post_startup() start the persistent RML message. There<br>does not seem to be a shutdown version of this (to deregister the RML<br>message at orte_finalize time). Was this intentional, or just missed?<br>

</div></div></span></blockquote><div> I just missed that one. I&#39;ve added that into the code now.</div><blockquote type="cite" style="border-left-style:solid;border-width:1px;margin-left:0px;padding-left:10px"><span><div>

<div>- in the orte_errmgr.set_fault_callback: it would be nice if it<br>returned the previous callback, so you could layer more than one<br>&#39;thing&#39; on top of ORTE and have them chain in a sigaction-like manner.<br>

</div></div></span></blockquote><div> Again, you are correct. Rather than just returning the previous callback (if any) I think it makes more sense to maintain a list of callbacks and have the errmgr call them directly. That way applications/ompi layers don&#39;t have to worry about calling another callback function.</div>

<blockquote type="cite" style="border-left-style:solid;border-width:1px;margin-left:0px;padding-left:10px"><span><div><div>- orte_process_info.max_procs: this seems to be only used in the<br>binomial routed, but I was a bit unclear about its purpose. Can you<br>

describe what it does, and how it is used?<br></div></div></span></blockquote><div>I use this to determine how many processes were in the job before we started having failures. This helps me preserve the structure of the tree as much as possible rather than completely reorganizing the routing layer every time a process fails.</div>

<blockquote type="cite" style="border-left-style:solid;border-width:1px;margin-left:0px;padding-left:10px"><span><div><div>- in orted_comm.c: you process the ORTE_PROCESS_FAILED_NOTIFICATION<br>message here. Why not push all of that logic into the errmgr<br>

components? It is not a big deal, just curious.</div></div></span></blockquote><div>Most of the actual logic that handles the processing of the error messages is pushed into the errmgr component. The code you see in orted_comm.c is almost all parsing and resending the list of dead processes to the appropriate modules. That code will have to be in there no matter what.</div>

<div><br></div><div>I&#39;ve updated the code and checked it into a bitbucket repository which can be found here:</div><div><br></div><div><a href="https://bitbucket.org/wesbland/resilient-orte/" target="_blank">https://bitbucket.org/wesbland/resilient-orte/</a></div>

<div><br></div><div>Please let me know of any more comments,</div><div>Wesley</div>
            </div>
        </div>


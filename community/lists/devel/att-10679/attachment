<html><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><div><div>George,</div><div><br></div><div>I think Yuki's interpretation is correct.</div><div><br></div><blockquote type="cite"><div><blockquote type="cite">The following is one of the suspicious parts.<br></blockquote><blockquote type="cite">(Many similar code in ompi/coll/tuned/*.c)<br></blockquote><blockquote type="cite"><br></blockquote><blockquote type="cite">--- in ompi/coll/tuned/coll_tuned_allgather.c (V1.4.X's trunk)---<br></blockquote><blockquote type="cite">398 &nbsp;&nbsp;&nbsp;tmprecv = (char*) rbuf + rank * rcount * rext;<br></blockquote><blockquote type="cite">-----------------------------------------------------------------<br></blockquote><blockquote type="cite"><br></blockquote><blockquote type="cite">if this condition is met, "rank * rcount" is overflowed.<br></blockquote><blockquote type="cite">So, we fixed it tentatively like following:<br></blockquote><blockquote type="cite">(cast int to size_t)<br></blockquote><blockquote type="cite">--- in ompi/coll/tuned/coll_tuned_allgather.c --------------<br></blockquote><blockquote type="cite">398 &nbsp;&nbsp;&nbsp;tmprecv = (char*) rbuf + (size_t)rank * rcount * rext;<br></blockquote><blockquote type="cite">------------------------------------------------------------<br></blockquote><br>Based on my understanding of the C standard this operation should be done on the most extended type, in this particular case the one of the rext (ptrdiff_t). Thus I would say the displacement should be correctly computed.<font class="Apple-style-span" color="#006312"><br></font></div></blockquote></div><br><div>In my copy of C99, section 6.5 Expressions says " the order of evaluation of subexpressions and the order in which side effects take place are both unspecified. &nbsp;There is a footnote 71 that "specifies the precedence of operators in the evaluation of an expressions, which is the same as the order of the major subclauses of this subclause, highest precedence first." &nbsp;It is the footnote that implies multiplication (6.5.5 Multiplicative operators) has higher precedence than addition (6.5.6 Additive operators) in the expression "(char*) rbuf + rank * rcount * rext". &nbsp;But, the main text states that there is no ordering of the subexpression "rank * rcount * rext". &nbsp;When the compiler chooses to evaluate "rank * rcount" first, the overflow described by Yuki can result. &nbsp;I think you are correct that the subexpression will get promoted to (ptrdiff_t), but that is not quite the same thing.</div><div><br></div><div><div><span class="Apple-style-span" style="border-collapse: separate; color: rgb(0, 0, 0); font-family: 'Helvetica Neue'; font-size: medium; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; "><div style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><div><div><div><div><div><div><div><div><div><div>Larry Baker</div><div>US Geological Survey</div><div>650-329-5608</div><div><a href="mailto:baker@usgs.gov">baker@usgs.gov</a></div></div></div></div></div></div></div></div></div></div></div></span></div><br><div></div></div></body></html>

Ralph,<div><br></div><div>The goal here is to allow vendor to distribute binary orte frameworks</div><div>(on top of binary components they can already distribute) that can be used by a user compiled &quot;stock&quot; openmpi library).</div><div><br></div><div>Did I get it right so far ?</div><div><br></div><div><br></div><div>I gave it some thoughts and found that could be simplified.<br></div><div><br></div><div>My understanding is that such frameworks can only be used by 3rd party component(s) from an existing framework, am I right ?</div><div><br></div><div>In this case, what about creating libopen-rte-ext.so with all the 3rd party frameworks (one library in case two frameworks need each other, and avoid circular dependencies). libopen-rte-ext.so does depend on libopen-rte.so, and 3rd party components depend on both rte libs.</div><div>Build order is important :</div><div>- libopen-rte.so</div><div>- libopen-rte-ext.so</div><div>- components</div><div>But there is no circular build dependencies (e.g. libopen-rte.so does not depend on libopen-rte-ext.so), and there is no need to create an other project.</div><div>The only restriction I can think of is it is impossible that 3rd party frameworks from vendor A and vendor B depend on each other. There could be frameworks from different vendors as long as they use distinct lib names for their extended orte lib.</div><div><br></div><div><br></div><div><div>Any thoughts ?</div><div><br></div><div>Gilles</div><div><br>On Saturday, February 27, 2016, Ralph Castain &lt;<a href="mailto:rhc@open-mpi.org">rhc@open-mpi.org</a>&gt; wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">There was some confusion yesterday at the developer’s meeting over a topic regarding framework dependencies. I apologize - I should have looked over the agenda more closely in advance to ensure I recalled everything. Instead of the topic I had wanted to discuss, we wound up discussing embedding dependency arguments in component definitions.<br>
<br>
What I really wanted to raise was the issue of statically including all base framework definitions in the core library. In other words, if you want to define a new framework for ORTE, you _must_ put the framework header and the base directory in libopen-rte. This makes it impossible for a 3rd party to add an ORTE framework - they have to get the OMPI community to add it upstream first.<br>
<br>
Note that you _can_ add components dynamically - you just can’t add a framework.<br>
<br>
The only solution a 3rd party has today is to create another project layer in the code, and put the framework there. However, this may be somewhat limiting due to circular build dependencies if, for example, an ORTE component needed to reference the new framework, and the new project/framework has an explicit link to libopen-rte.<br>
<br>
Resolving this would require that we dynamically load the frameworks themselves, and not just the components. This point is what led to Jeff’s proposal about dependencies - however, the dependency definitions are not _required_ in order to make this change.<br>
<br>
So the question to the community is: does anyone see an issue with making frameworks into dll’s? Obviously, this approach won’t work for static builds, but that is a separate issue.<br>
<br>
Thanks<br>
Ralph<br>
<br>
_______________________________________________<br>
devel mailing list<br>
<a href="javascript:;" onclick="_e(event, &#39;cvml&#39;, &#39;devel@open-mpi.org&#39;)">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2016/02/18634.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2016/02/18634.php</a></blockquote></div></div>


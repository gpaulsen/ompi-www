<div dir="ltr">Just replied to your other email before seeing this. Take a look at those comments and let me know if that helps differentiate those interfaces.</div><div class="gmail_extra"><br><br><div class="gmail_quote">
On Tue, Feb 18, 2014 at 5:28 AM, Jeff Squyres (jsquyres) <span dir="ltr">&lt;<a href="mailto:jsquyres@cisco.com" target="_blank">jsquyres@cisco.com</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
opal_crs.checkpoint() is not used to restart the process, but it does return in two different cases:<br>
<br>
- in the &quot;continue&quot; case, opal_crs.checkpoint() returns in the original process and keeps executing the same process and then, IIRC, invokes opal_crs.continue().<br>
<br>
- in the &quot;restart&quot; case, opal_crs.checkpoint() returns into a new process and then, IIRC, invokes opal_crs.restart().<br>
<div class="HOEnZb"><div class="h5"><br>
<br>
On Feb 18, 2014, at 5:29 AM, Adrian Reber &lt;<a href="mailto:adrian@lisas.de">adrian@lisas.de</a>&gt; wrote:<br>
<br>
&gt; I should have read this email before answering the other.<br>
&gt;<br>
&gt; So opal_crs.checkpoint() is used to checkpoint the process as well as<br>
&gt; restart the process? I would have expected opal_crs.restart() is used<br>
&gt; for restart. I am confused. Looking at CRS/BLCR checkpoint() seems to<br>
&gt; only checkpoint and restart() seems to only restart. The comment in<br>
&gt; opal/mca/crs/crs.h says the same as you say.<br>
&gt;<br>
&gt;<br>
&gt; On Mon, Feb 17, 2014 at 03:43:08PM -0600, Josh Hursey wrote:<br>
&gt;&gt; These values indicate the current state of the checkpointing lifecycle. In<br>
&gt;&gt; particular CONTINUE/RESTART are set by the checkpointer in the CRS (all<br>
&gt;&gt; others are used by the INC mechanism). In the opal_crs.checkpoint() call<br>
&gt;&gt; the checkpointer will capture the program state and it is possible to<br>
&gt;&gt; emerge from this function in one of two scenarios. Either we are continuing<br>
&gt;&gt; execution in the original process (Continue state), or we are resuming<br>
&gt;&gt; execution from a checkpointed state (Restart state).<br>
&gt;&gt;<br>
&gt;&gt; So if the checkpoint was successful, and you are not restarting the process<br>
&gt;&gt; then you want OPAL_CRS_CONTINUE.<br>
&gt;&gt;<br>
&gt;&gt; If the process is being restarted from a checkpoint file, then we should<br>
&gt;&gt; emerge from this function setting the state to OPAL_CRS_RESTART.<br>
&gt;&gt;<br>
&gt;&gt; The OPAL_CR_CHECKPOINT state is used in the INC mechanism to notify all of<br>
&gt;&gt; the components to prepare for checkpoint (we probably should have called it<br>
&gt;&gt; OPAL_CR_PREPARE_FOR_CKPT). So not really used by the CRS mechanisms at all.<br>
&gt;&gt; You can see it used in the opal_cr_inc_core_prep() function in<br>
&gt;&gt; opal/runtime/opal_cr.c<br>
&gt;&gt;<br>
&gt;&gt; -- Josh<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; On Mon, Feb 17, 2014 at 9:28 AM, Adrian Reber &lt;<a href="mailto:adrian@lisas.de">adrian@lisas.de</a>&gt; wrote:<br>
&gt;&gt;<br>
&gt;&gt;&gt; This is probably for Josh. What is the meaning of the OPAL_CRS_* enums?<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; They are probably used to communicate the state of the CRS modules.<br>
&gt;&gt;&gt; OPAL_CRS_ERROR seems to be used in case an error happened. What is the<br>
&gt;&gt;&gt; CRS module supposed to set this to if the checkpoint was successful.<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt; OPAL_CRS_CONTINUE or OPAL_CRS_CHECKPOINT?<br>
&gt;&gt;&gt;<br>
&gt;&gt;&gt;                Adrian<br>
&gt;&gt;&gt; _______________________________________________<br>
&gt;&gt;&gt; devel mailing list<br>
&gt;&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt;&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt;<br>
&gt;&gt; --<br>
&gt;&gt; Joshua Hursey<br>
&gt;&gt; Assistant Professor of Computer Science<br>
&gt;&gt; University of Wisconsin-La Crosse<br>
&gt;&gt; <a href="http://cs.uwlax.edu/~jjhursey" target="_blank">http://cs.uwlax.edu/~jjhursey</a><br>
&gt;<br>
&gt;&gt; _______________________________________________<br>
&gt;&gt; devel mailing list<br>
&gt;&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt;&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
&gt; _______________________________________________<br>
&gt; devel mailing list<br>
&gt; <a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
&gt; <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
<br>
<br>
</div></div><span class="HOEnZb"><font color="#888888">--<br>
Jeff Squyres<br>
<a href="mailto:jsquyres@cisco.com">jsquyres@cisco.com</a><br>
For corporate legal information go to: <a href="http://www.cisco.com/web/about/doing_business/legal/cri/" target="_blank">http://www.cisco.com/web/about/doing_business/legal/cri/</a><br>
</font></span><div class="HOEnZb"><div class="h5"><br>
_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
<a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
</div></div></blockquote></div><br><br clear="all"><div><br></div>-- <br>Joshua Hursey<br>Assistant Professor of Computer Science<br>University of Wisconsin-La Crosse<br><a href="http://cs.uwlax.edu/~jjhursey" target="_blank">http://cs.uwlax.edu/~jjhursey</a>
</div>


<div dir="ltr">The FIFO implementation doesn&#39;t look right to me. I don&#39;t have time to look at it right now, but just looking at the push it will not correctly succeed if two threads are pushing items in same time.<div><br></div><div>A FIFO is a very sensitive algorithm, and should be treated accordingly. Moreover, there is no immediate need for it, so I suggest you drop it from this RFC.<div><br></div><div>  George.</div><div><br></div></div><div>PS: There are some known FIFO implementations that work correctly, but they all require a CAS2. <a href="http://www.grame.fr/ressources/publications/LockFree.pdf">http://www.grame.fr/ressources/publications/LockFree.pdf</a></div><div><br></div></div><div class="gmail_extra"><br><div class="gmail_quote">On Tue, Dec 2, 2014 at 5:41 PM, Nathan Hjelm <span dir="ltr">&lt;<a href="mailto:hjelmn@lanl.gov" target="_blank">hjelmn@lanl.gov</a>&gt;</span> wrote:<br><blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><br>
What: Update the interface to the atomic lifo to include non-atomic and<br>
opal_using_threads conditioned atomic versions.<br>
<br>
Why: We currently only have one type of lifo in the master branch:<br>
atomic. This has a negative impact on the performance of Open MPI when<br>
not using threads. To fix this issue I want to add two new flavors of<br>
lifo push and pop:<br>
<br>
 - opal_lifo_push_st/opal_lifo_pop_st: explicit single-threaded. These<br>
   versions can be used when it is guaranteed that no other thread will<br>
   touch the fifo.<br>
<br>
 - opal_lifo_push/opal_lifo_pop: use atomics if opal_using_threads is<br>
   set otherwise use the single-threaded versions.<br>
<br>
<br>
The existing functions: opal_atomic_lifo_push and opal_atomic_lifo_pop<br>
will be renamed to opal_lifo_push_atomic and opal_lifo_pop_atomic<br>
respectively. I have made some improvements to the atomic implementation<br>
and included implementations of push/pop that use the 128-bit<br>
compare-and-swap available on most modern x86_64 processors.<br>
<br>
Existing code (ompi_free_list_t) will use the conditioned version. This<br>
will give good out of the box performance with single threaded<br>
benchmarks while still providing support for the MPI_THREAD_MULTIPLE<br>
case.<br>
<br>
As part of this RFC I am pushing a fifo implementation and unit tests<br>
for both the fifo and lifo classes. More info can be found in the commit<br>
message:<br>
<br>
<a href="https://github.com/hjelmn/ompi/commit/b57b4b2df841a2d309b528717b40d9bf23355a82" target="_blank">https://github.com/hjelmn/ompi/commit/b57b4b2df841a2d309b528717b40d9bf23355a82</a><br>
<br>
<br>
When: Tuesday, Dec 9.<br>
<br>
<br>
The pull request can be found @ <a href="https://github.com/open-mpi/ompi/pull/300" target="_blank">https://github.com/open-mpi/ompi/pull/300</a><br>
<span class="HOEnZb"><font color="#888888"><br>
-Nathan<br>
</font></span><br>_______________________________________________<br>
devel mailing list<br>
<a href="mailto:devel@open-mpi.org">devel@open-mpi.org</a><br>
Subscription: <a href="http://www.open-mpi.org/mailman/listinfo.cgi/devel" target="_blank">http://www.open-mpi.org/mailman/listinfo.cgi/devel</a><br>
Link to this post: <a href="http://www.open-mpi.org/community/lists/devel/2014/12/16410.php" target="_blank">http://www.open-mpi.org/community/lists/devel/2014/12/16410.php</a><br></blockquote></div><br></div>

